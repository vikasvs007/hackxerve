import {
  __commonJS
} from "./chunk-DC5AMYBS.js";

// node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js
var require_AgoraRTC_N_production = __commonJS({
  "node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).AgoraRTC = t();
    }(exports, function() {
      "use strict";
      function e(e2, t2) {
        return t2.forEach(function(t3) {
          t3 && "string" != typeof t3 && !Array.isArray(t3) && Object.keys(t3).forEach(function(i2) {
            if ("default" !== i2 && !(i2 in e2)) {
              var n2 = Object.getOwnPropertyDescriptor(t3, i2);
              Object.defineProperty(e2, i2, n2.get ? n2 : { enumerable: true, get: function() {
                return t3[i2];
              } });
            }
          });
        }), Object.freeze(e2);
      }
      var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
      function i(e2) {
        return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
      }
      var n = function(e2) {
        try {
          return !!e2();
        } catch (e3) {
          return true;
        }
      }, r = !n(function() {
        var e2 = (function() {
        }).bind();
        return "function" != typeof e2 || e2.hasOwnProperty("prototype");
      }), o = r, s = Function.prototype, a = s.call, c = o && s.bind.bind(a, a), d = o ? c : function(e2) {
        return function() {
          return a.apply(e2, arguments);
        };
      }, l = d({}.isPrototypeOf), u = function(e2) {
        return e2 && e2.Math === Math && e2;
      }, h = u("object" == typeof globalThis && globalThis) || u("object" == typeof window && window) || u("object" == typeof self && self) || u("object" == typeof t && t) || u("object" == typeof t && t) || /* @__PURE__ */ function() {
        return this;
      }() || Function("return this")(), p = r, _ = Function.prototype, E = _.apply, m = _.call, f = "object" == typeof Reflect && Reflect.apply || (p ? m.bind(E) : function() {
        return m.apply(E, arguments);
      }), T = d, S = T({}.toString), g = T("".slice), R = function(e2) {
        return g(S(e2), 8, -1);
      }, v = R, C = d, I = function(e2) {
        if ("Function" === v(e2)) return C(e2);
      }, y = "object" == typeof document && document.all, A = void 0 === y && void 0 !== y ? function(e2) {
        return "function" == typeof e2 || e2 === y;
      } : function(e2) {
        return "function" == typeof e2;
      }, b = {}, w = !n(function() {
        return 7 !== Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1];
      }), O = r, N = Function.prototype.call, D = O ? N.bind(N) : function() {
        return N.apply(N, arguments);
      }, P = {}, L = {}.propertyIsEnumerable, k = Object.getOwnPropertyDescriptor, M = k && !L.call({ 1: 2 }, 1);
      P.f = M ? function(e2) {
        var t2 = k(this, e2);
        return !!t2 && t2.enumerable;
      } : L;
      var U, x, V = function(e2, t2) {
        return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
      }, F = n, B = R, j = Object, G = d("".split), W = F(function() {
        return !j("z").propertyIsEnumerable(0);
      }) ? function(e2) {
        return "String" === B(e2) ? G(e2, "") : j(e2);
      } : j, H = function(e2) {
        return null == e2;
      }, K = H, Y = TypeError, q = function(e2) {
        if (K(e2)) throw new Y("Can't call method on " + e2);
        return e2;
      }, z = W, J = q, X = function(e2) {
        return z(J(e2));
      }, Q = A, Z = function(e2) {
        return "object" == typeof e2 ? null !== e2 : Q(e2);
      }, $ = {}, ee = $, te = h, ie = A, ne = function(e2) {
        return ie(e2) ? e2 : void 0;
      }, re = function(e2, t2) {
        return arguments.length < 2 ? ne(ee[e2]) || ne(te[e2]) : ee[e2] && ee[e2][t2] || te[e2] && te[e2][t2];
      }, oe = h.navigator, se = oe && oe.userAgent, ae = se ? String(se) : "", ce = h, de = ae, le = ce.process, ue = ce.Deno, he = le && le.versions || ue && ue.version, pe = he && he.v8;
      pe && (x = (U = pe.split("."))[0] > 0 && U[0] < 4 ? 1 : +(U[0] + U[1])), !x && de && (!(U = de.match(/Edge\/(\d+)/)) || U[1] >= 74) && (U = de.match(/Chrome\/(\d+)/)) && (x = +U[1]);
      var _e = x, Ee = _e, me = n, fe = h.String, Te = !!Object.getOwnPropertySymbols && !me(function() {
        var e2 = Symbol("symbol detection");
        return !fe(e2) || !(Object(e2) instanceof Symbol) || !Symbol.sham && Ee && Ee < 41;
      }), Se = Te && !Symbol.sham && "symbol" == typeof Symbol.iterator, ge = re, Re = A, ve = l, Ce = Object, Ie = Se ? function(e2) {
        return "symbol" == typeof e2;
      } : function(e2) {
        var t2 = ge("Symbol");
        return Re(t2) && ve(t2.prototype, Ce(e2));
      }, ye = String, Ae = function(e2) {
        try {
          return ye(e2);
        } catch (e3) {
          return "Object";
        }
      }, be = A, we = Ae, Oe = TypeError, Ne = function(e2) {
        if (be(e2)) return e2;
        throw new Oe(we(e2) + " is not a function");
      }, De = Ne, Pe = H, Le = function(e2, t2) {
        var i2 = e2[t2];
        return Pe(i2) ? void 0 : De(i2);
      }, ke = D, Me = A, Ue = Z, xe = TypeError, Ve = { exports: {} }, Fe = true, Be = h, je = Object.defineProperty, Ge = h, We = function(e2, t2) {
        try {
          je(Be, e2, { value: t2, configurable: true, writable: true });
        } catch (i2) {
          Be[e2] = t2;
        }
        return t2;
      }, He = "__core-js_shared__", Ke = Ve.exports = Ge[He] || We(He, {});
      (Ke.versions || (Ke.versions = [])).push({ version: "3.39.0", mode: "pure", copyright: "Â© 2014-2024 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.39.0/LICENSE", source: "https://github.com/zloirock/core-js" });
      var Ye = Ve.exports, qe = Ye, ze = function(e2, t2) {
        return qe[e2] || (qe[e2] = t2 || {});
      }, Je = q, Xe = Object, Qe = function(e2) {
        return Xe(Je(e2));
      }, Ze = Qe, $e = d({}.hasOwnProperty), et = Object.hasOwn || function(e2, t2) {
        return $e(Ze(e2), t2);
      }, tt = d, it = 0, nt = Math.random(), rt = tt(1 .toString), ot = function(e2) {
        return "Symbol(" + (void 0 === e2 ? "" : e2) + ")_" + rt(++it + nt, 36);
      }, st = ze, at = et, ct = ot, dt = Te, lt = Se, ut = h.Symbol, ht = st("wks"), pt = lt ? ut.for || ut : ut && ut.withoutSetter || ct, _t = function(e2) {
        return at(ht, e2) || (ht[e2] = dt && at(ut, e2) ? ut[e2] : pt("Symbol." + e2)), ht[e2];
      }, Et = D, mt = Z, ft = Ie, Tt = Le, St = function(e2, t2) {
        var i2, n2;
        if ("string" === t2 && Me(i2 = e2.toString) && !Ue(n2 = ke(i2, e2))) return n2;
        if (Me(i2 = e2.valueOf) && !Ue(n2 = ke(i2, e2))) return n2;
        if ("string" !== t2 && Me(i2 = e2.toString) && !Ue(n2 = ke(i2, e2))) return n2;
        throw new xe("Can't convert object to primitive value");
      }, gt = TypeError, Rt = _t("toPrimitive"), vt = function(e2, t2) {
        if (!mt(e2) || ft(e2)) return e2;
        var i2, n2 = Tt(e2, Rt);
        if (n2) {
          if (void 0 === t2 && (t2 = "default"), i2 = Et(n2, e2, t2), !mt(i2) || ft(i2)) return i2;
          throw new gt("Can't convert object to primitive value");
        }
        return void 0 === t2 && (t2 = "number"), St(e2, t2);
      }, Ct = Ie, It = function(e2) {
        var t2 = vt(e2, "string");
        return Ct(t2) ? t2 : t2 + "";
      }, yt = Z, At = h.document, bt = yt(At) && yt(At.createElement), wt = function(e2) {
        return bt ? At.createElement(e2) : {};
      }, Ot = wt, Nt = !w && !n(function() {
        return 7 !== Object.defineProperty(Ot("div"), "a", { get: function() {
          return 7;
        } }).a;
      }), Dt = w, Pt = D, Lt = P, kt = V, Mt = X, Ut = It, xt = et, Vt = Nt, Ft = Object.getOwnPropertyDescriptor;
      b.f = Dt ? Ft : function(e2, t2) {
        if (e2 = Mt(e2), t2 = Ut(t2), Vt) try {
          return Ft(e2, t2);
        } catch (e3) {
        }
        if (xt(e2, t2)) return kt(!Pt(Lt.f, e2, t2), e2[t2]);
      };
      var Bt = n, jt = A, Gt = /#|\.prototype\./, Wt = function(e2, t2) {
        var i2 = Kt[Ht(e2)];
        return i2 === qt || i2 !== Yt && (jt(t2) ? Bt(t2) : !!t2);
      }, Ht = Wt.normalize = function(e2) {
        return String(e2).replace(Gt, ".").toLowerCase();
      }, Kt = Wt.data = {}, Yt = Wt.NATIVE = "N", qt = Wt.POLYFILL = "P", zt = Wt, Jt = Ne, Xt = r, Qt = I(I.bind), Zt = function(e2, t2) {
        return Jt(e2), void 0 === t2 ? e2 : Xt ? Qt(e2, t2) : function() {
          return e2.apply(t2, arguments);
        };
      }, $t = {}, ei = w && n(function() {
        return 42 !== Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype;
      }), ti = Z, ii = String, ni = TypeError, ri = function(e2) {
        if (ti(e2)) return e2;
        throw new ni(ii(e2) + " is not an object");
      }, oi = w, si = Nt, ai = ei, ci = ri, di = It, li = TypeError, ui = Object.defineProperty, hi = Object.getOwnPropertyDescriptor, pi = "enumerable", _i = "configurable", Ei = "writable";
      $t.f = oi ? ai ? function(e2, t2, i2) {
        if (ci(e2), t2 = di(t2), ci(i2), "function" == typeof e2 && "prototype" === t2 && "value" in i2 && Ei in i2 && !i2[Ei]) {
          var n2 = hi(e2, t2);
          n2 && n2[Ei] && (e2[t2] = i2.value, i2 = { configurable: _i in i2 ? i2[_i] : n2[_i], enumerable: pi in i2 ? i2[pi] : n2[pi], writable: false });
        }
        return ui(e2, t2, i2);
      } : ui : function(e2, t2, i2) {
        if (ci(e2), t2 = di(t2), ci(i2), si) try {
          return ui(e2, t2, i2);
        } catch (e3) {
        }
        if ("get" in i2 || "set" in i2) throw new li("Accessors not supported");
        return "value" in i2 && (e2[t2] = i2.value), e2;
      };
      var mi = $t, fi = V, Ti = w ? function(e2, t2, i2) {
        return mi.f(e2, t2, fi(1, i2));
      } : function(e2, t2, i2) {
        return e2[t2] = i2, e2;
      }, Si = h, gi = f, Ri = I, vi = A, Ci = b.f, Ii = zt, yi = $, Ai = Zt, bi = Ti, wi = et, Oi = function(e2) {
        var t2 = function(i2, n2, r2) {
          if (this instanceof t2) {
            switch (arguments.length) {
              case 0:
                return new e2();
              case 1:
                return new e2(i2);
              case 2:
                return new e2(i2, n2);
            }
            return new e2(i2, n2, r2);
          }
          return gi(e2, this, arguments);
        };
        return t2.prototype = e2.prototype, t2;
      }, Ni = function(e2, t2) {
        var i2, n2, r2, o2, s2, a2, c2, d2, l2, u2 = e2.target, h2 = e2.global, p2 = e2.stat, _2 = e2.proto, E2 = h2 ? Si : p2 ? Si[u2] : Si[u2] && Si[u2].prototype, m2 = h2 ? yi : yi[u2] || bi(yi, u2, {})[u2], f2 = m2.prototype;
        for (o2 in t2) n2 = !(i2 = Ii(h2 ? o2 : u2 + (p2 ? "." : "#") + o2, e2.forced)) && E2 && wi(E2, o2), a2 = m2[o2], n2 && (c2 = e2.dontCallGetSet ? (l2 = Ci(E2, o2)) && l2.value : E2[o2]), s2 = n2 && c2 ? c2 : t2[o2], (i2 || _2 || typeof a2 != typeof s2) && (d2 = e2.bind && n2 ? Ai(s2, Si) : e2.wrap && n2 ? Oi(s2) : _2 && vi(s2) ? Ri(s2) : s2, (e2.sham || s2 && s2.sham || a2 && a2.sham) && bi(d2, "sham", true), bi(m2, o2, d2), _2 && (wi(yi, r2 = u2 + "Prototype") || bi(yi, r2, {}), bi(yi[r2], o2, s2), e2.real && f2 && (i2 || !f2[o2]) && bi(f2, o2, s2)));
      }, Di = Math.ceil, Pi = Math.floor, Li = Math.trunc || function(e2) {
        var t2 = +e2;
        return (t2 > 0 ? Pi : Di)(t2);
      }, ki = Li, Mi = function(e2) {
        var t2 = +e2;
        return t2 != t2 || 0 === t2 ? 0 : ki(t2);
      }, Ui = Mi, xi = Math.max, Vi = Math.min, Fi = function(e2, t2) {
        var i2 = Ui(e2);
        return i2 < 0 ? xi(i2 + t2, 0) : Vi(i2, t2);
      }, Bi = Mi, ji = Math.min, Gi = function(e2) {
        var t2 = Bi(e2);
        return t2 > 0 ? ji(t2, 9007199254740991) : 0;
      }, Wi = Gi, Hi = function(e2) {
        return Wi(e2.length);
      }, Ki = X, Yi = Fi, qi = Hi, zi = function(e2) {
        return function(t2, i2, n2) {
          var r2 = Ki(t2), o2 = qi(r2);
          if (0 === o2) return !e2 && -1;
          var s2, a2 = Yi(n2, o2);
          if (e2 && i2 != i2) {
            for (; o2 > a2; ) if ((s2 = r2[a2++]) != s2) return true;
          } else for (; o2 > a2; a2++) if ((e2 || a2 in r2) && r2[a2] === i2) return e2 || a2 || 0;
          return !e2 && -1;
        };
      }, Ji = { includes: zi(true), indexOf: zi(false) }, Xi = Ji.includes;
      Ni({ target: "Array", proto: true, forced: n(function() {
        return !Array(1).includes();
      }) }, { includes: function(e2) {
        return Xi(this, e2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var Qi = h, Zi = $, $i = function(e2, t2) {
        var i2 = Zi[e2 + "Prototype"], n2 = i2 && i2[t2];
        if (n2) return n2;
        var r2 = Qi[e2], o2 = r2 && r2.prototype;
        return o2 && o2[t2];
      }, en = $i("Array", "includes"), tn = Z, nn = R, rn = _t("match"), on = function(e2) {
        var t2;
        return tn(e2) && (void 0 !== (t2 = e2[rn]) ? !!t2 : "RegExp" === nn(e2));
      }, sn = on, an = TypeError, cn = {};
      cn[_t("toStringTag")] = "z";
      var dn = "[object z]" === String(cn), ln = dn, un = A, hn = R, pn = _t("toStringTag"), _n = Object, En = "Arguments" === hn(/* @__PURE__ */ function() {
        return arguments;
      }()), mn = ln ? hn : function(e2) {
        var t2, i2, n2;
        return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (i2 = function(e3, t3) {
          try {
            return e3[t3];
          } catch (e4) {
          }
        }(t2 = _n(e2), pn)) ? i2 : En ? hn(t2) : "Object" === (n2 = hn(t2)) && un(t2.callee) ? "Arguments" : n2;
      }, fn = mn, Tn = String, Sn = function(e2) {
        if ("Symbol" === fn(e2)) throw new TypeError("Cannot convert a Symbol value to a string");
        return Tn(e2);
      }, gn = _t("match"), Rn = Ni, vn = function(e2) {
        if (sn(e2)) throw new an("The method doesn't accept regular expressions");
        return e2;
      }, Cn = q, In = Sn, yn = function(e2) {
        var t2 = /./;
        try {
          "/./"[e2](t2);
        } catch (i2) {
          try {
            return t2[gn] = false, "/./"[e2](t2);
          } catch (e3) {
          }
        }
        return false;
      }, An = d("".indexOf);
      Rn({ target: "String", proto: true, forced: !yn("includes") }, { includes: function(e2) {
        return !!~An(In(Cn(this)), In(vn(e2)), arguments.length > 1 ? arguments[1] : void 0);
      } });
      var bn = $i("String", "includes"), wn = l, On = en, Nn = bn, Dn = Array.prototype, Pn = String.prototype, Ln = function(e2) {
        var t2 = e2.includes;
        return e2 === Dn || wn(Dn, e2) && t2 === Dn.includes ? On : "string" == typeof e2 || e2 === Pn || wn(Pn, e2) && t2 === Pn.includes ? Nn : t2;
      }, kn = i(Ln), Mn = Ne, Un = Qe, xn = W, Vn = Hi, Fn = TypeError, Bn = "Reduce of empty array with no initial value", jn = function(e2) {
        return function(t2, i2, n2, r2) {
          var o2 = Un(t2), s2 = xn(o2), a2 = Vn(o2);
          if (Mn(i2), 0 === a2 && n2 < 2) throw new Fn(Bn);
          var c2 = e2 ? a2 - 1 : 0, d2 = e2 ? -1 : 1;
          if (n2 < 2) for (; ; ) {
            if (c2 in s2) {
              r2 = s2[c2], c2 += d2;
              break;
            }
            if (c2 += d2, e2 ? c2 < 0 : a2 <= c2) throw new Fn(Bn);
          }
          for (; e2 ? c2 >= 0 : a2 > c2; c2 += d2) c2 in s2 && (r2 = i2(r2, s2[c2], c2, o2));
          return r2;
        };
      }, Gn = { left: jn(false), right: jn(true) }, Wn = n, Hn = function(e2, t2) {
        var i2 = [][e2];
        return !!i2 && Wn(function() {
          i2.call(null, t2 || function() {
            return 1;
          }, 1);
        });
      }, Kn = h, Yn = ae, qn = R, zn = function(e2) {
        return Yn.slice(0, e2.length) === e2;
      }, Jn = zn("Bun/") ? "BUN" : zn("Cloudflare-Workers") ? "CLOUDFLARE" : zn("Deno/") ? "DENO" : zn("Node.js/") ? "NODE" : Kn.Bun && "string" == typeof Bun.version ? "BUN" : Kn.Deno && "object" == typeof Deno.version ? "DENO" : "process" === qn(Kn.process) ? "NODE" : Kn.window && Kn.document ? "BROWSER" : "REST", Xn = "NODE" === Jn, Qn = Gn.left;
      Ni({ target: "Array", proto: true, forced: !Xn && _e > 79 && _e < 83 || !Hn("reduce") }, { reduce: function(e2) {
        var t2 = arguments.length;
        return Qn(this, e2, t2, t2 > 1 ? arguments[1] : void 0);
      } });
      var Zn = $i("Array", "reduce"), $n = l, er = Zn, tr = Array.prototype, ir = function(e2) {
        var t2 = e2.reduce;
        return e2 === tr || $n(tr, e2) && t2 === tr.reduce ? er : t2;
      }, nr = ir, rr = i(nr), or = R, sr = Array.isArray || function(e2) {
        return "Array" === or(e2);
      }, ar = Ni, cr = sr, dr = d([].reverse), lr = [1, 2];
      ar({ target: "Array", proto: true, forced: String(lr) === String(lr.reverse()) }, { reverse: function() {
        return cr(this) && (this.length = this.length), dr(this);
      } });
      var ur = $i("Array", "reverse"), hr = l, pr = ur, _r = Array.prototype, Er = function(e2) {
        var t2 = e2.reverse;
        return e2 === _r || hr(_r, e2) && t2 === _r.reverse ? pr : t2;
      }, mr = Er, fr = i(mr), Tr = ot, Sr = ze("keys"), gr = function(e2) {
        return Sr[e2] || (Sr[e2] = Tr(e2));
      }, Rr = !n(function() {
        function e2() {
        }
        return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
      }), vr = et, Cr = A, Ir = Qe, yr = Rr, Ar = gr("IE_PROTO"), br = Object, wr = br.prototype, Or = yr ? br.getPrototypeOf : function(e2) {
        var t2 = Ir(e2);
        if (vr(t2, Ar)) return t2[Ar];
        var i2 = t2.constructor;
        return Cr(i2) && t2 instanceof i2 ? i2.prototype : t2 instanceof br ? wr : null;
      }, Nr = d, Dr = Ne, Pr = Z, Lr = function(e2) {
        return Pr(e2) || null === e2;
      }, kr = String, Mr = TypeError, Ur = function(e2, t2, i2) {
        try {
          return Nr(Dr(Object.getOwnPropertyDescriptor(e2, t2)[i2]));
        } catch (e3) {
        }
      }, xr = Z, Vr = q, Fr = function(e2) {
        if (Lr(e2)) return e2;
        throw new Mr("Can't set " + kr(e2) + " as a prototype");
      }, Br = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var e2, t2 = false, i2 = {};
        try {
          (e2 = Ur(Object.prototype, "__proto__", "set"))(i2, []), t2 = i2 instanceof Array;
        } catch (e3) {
        }
        return function(i3, n2) {
          return Vr(i3), Fr(n2), xr(i3) ? (t2 ? e2(i3, n2) : i3.__proto__ = n2, i3) : i3;
        };
      }() : void 0), jr = {}, Gr = {}, Wr = et, Hr = X, Kr = Ji.indexOf, Yr = Gr, qr = d([].push), zr = function(e2, t2) {
        var i2, n2 = Hr(e2), r2 = 0, o2 = [];
        for (i2 in n2) !Wr(Yr, i2) && Wr(n2, i2) && qr(o2, i2);
        for (; t2.length > r2; ) Wr(n2, i2 = t2[r2++]) && (~Kr(o2, i2) || qr(o2, i2));
        return o2;
      }, Jr = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], Xr = zr, Qr = Jr.concat("length", "prototype");
      jr.f = Object.getOwnPropertyNames || function(e2) {
        return Xr(e2, Qr);
      };
      var Zr = {};
      Zr.f = Object.getOwnPropertySymbols;
      var $r = re, eo = jr, to = Zr, io = ri, no = d([].concat), ro = $r("Reflect", "ownKeys") || function(e2) {
        var t2 = eo.f(io(e2)), i2 = to.f;
        return i2 ? no(t2, i2(e2)) : t2;
      }, oo = et, so = ro, ao = b, co = $t, lo = {}, uo = zr, ho = Jr, po = Object.keys || function(e2) {
        return uo(e2, ho);
      }, _o = w, Eo = ei, mo = $t, fo = ri, To = X, So = po;
      lo.f = _o && !Eo ? Object.defineProperties : function(e2, t2) {
        fo(e2);
        for (var i2, n2 = To(t2), r2 = So(t2), o2 = r2.length, s2 = 0; o2 > s2; ) mo.f(e2, i2 = r2[s2++], n2[i2]);
        return e2;
      };
      var go, Ro = re("document", "documentElement"), vo = ri, Co = lo, Io = Jr, yo = Gr, Ao = Ro, bo = wt, wo = "prototype", Oo = "script", No = gr("IE_PROTO"), Do = function() {
      }, Po = function(e2) {
        return "<" + Oo + ">" + e2 + "</" + Oo + ">";
      }, Lo = function(e2) {
        e2.write(Po("")), e2.close();
        var t2 = e2.parentWindow.Object;
        return e2 = null, t2;
      }, ko = function() {
        try {
          go = new ActiveXObject("htmlfile");
        } catch (e3) {
        }
        var e2, t2, i2;
        ko = "undefined" != typeof document ? document.domain && go ? Lo(go) : (t2 = bo("iframe"), i2 = "java" + Oo + ":", t2.style.display = "none", Ao.appendChild(t2), t2.src = String(i2), (e2 = t2.contentWindow.document).open(), e2.write(Po("document.F=Object")), e2.close(), e2.F) : Lo(go);
        for (var n2 = Io.length; n2--; ) delete ko[wo][Io[n2]];
        return ko();
      };
      yo[No] = true;
      var Mo = Object.create || function(e2, t2) {
        var i2;
        return null !== e2 ? (Do[wo] = vo(e2), i2 = new Do(), Do[wo] = null, i2[No] = e2) : i2 = ko(), void 0 === t2 ? i2 : Co.f(i2, t2);
      }, Uo = Z, xo = Ti, Vo = Error, Fo = d("".replace), Bo = String(new Vo("zxcasd").stack), jo = /\n\s*at [^:]*:[^\n]*/, Go = jo.test(Bo), Wo = V, Ho = !n(function() {
        var e2 = new Error("a");
        return !("stack" in e2) || (Object.defineProperty(e2, "stack", Wo(1, 7)), 7 !== e2.stack);
      }), Ko = Ti, Yo = function(e2, t2) {
        if (Go && "string" == typeof e2 && !Vo.prepareStackTrace) for (; t2--; ) e2 = Fo(e2, jo, "");
        return e2;
      }, qo = Ho, zo = Error.captureStackTrace, Jo = {}, Xo = Jo, Qo = _t("iterator"), Zo = Array.prototype, $o = function(e2) {
        return void 0 !== e2 && (Xo.Array === e2 || Zo[Qo] === e2);
      }, es = mn, ts = Le, is = H, ns = Jo, rs = _t("iterator"), os = function(e2) {
        if (!is(e2)) return ts(e2, rs) || ts(e2, "@@iterator") || ns[es(e2)];
      }, ss = D, as = Ne, cs = ri, ds = Ae, ls = os, us = TypeError, hs = function(e2, t2) {
        var i2 = arguments.length < 2 ? ls(e2) : t2;
        if (as(i2)) return cs(ss(i2, e2));
        throw new us(ds(e2) + " is not iterable");
      }, ps = D, _s = ri, Es = Le, ms = function(e2, t2, i2) {
        var n2, r2;
        _s(e2);
        try {
          if (!(n2 = Es(e2, "return"))) {
            if ("throw" === t2) throw i2;
            return i2;
          }
          n2 = ps(n2, e2);
        } catch (e3) {
          r2 = true, n2 = e3;
        }
        if ("throw" === t2) throw i2;
        if (r2) throw n2;
        return _s(n2), i2;
      }, fs = Zt, Ts = D, Ss = ri, gs = Ae, Rs = $o, vs = Hi, Cs = l, Is = hs, ys = os, As = ms, bs = TypeError, ws = function(e2, t2) {
        this.stopped = e2, this.result = t2;
      }, Os = ws.prototype, Ns = function(e2, t2, i2) {
        var n2, r2, o2, s2, a2, c2, d2, l2 = i2 && i2.that, u2 = !(!i2 || !i2.AS_ENTRIES), h2 = !(!i2 || !i2.IS_RECORD), p2 = !(!i2 || !i2.IS_ITERATOR), _2 = !(!i2 || !i2.INTERRUPTED), E2 = fs(t2, l2), m2 = function(e3) {
          return n2 && As(n2, "normal", e3), new ws(true, e3);
        }, f2 = function(e3) {
          return u2 ? (Ss(e3), _2 ? E2(e3[0], e3[1], m2) : E2(e3[0], e3[1])) : _2 ? E2(e3, m2) : E2(e3);
        };
        if (h2) n2 = e2.iterator;
        else if (p2) n2 = e2;
        else {
          if (!(r2 = ys(e2))) throw new bs(gs(e2) + " is not iterable");
          if (Rs(r2)) {
            for (o2 = 0, s2 = vs(e2); s2 > o2; o2++) if ((a2 = f2(e2[o2])) && Cs(Os, a2)) return a2;
            return new ws(false);
          }
          n2 = Is(e2, r2);
        }
        for (c2 = h2 ? e2.next : n2.next; !(d2 = Ts(c2, n2)).done; ) {
          try {
            a2 = f2(d2.value);
          } catch (e3) {
            As(n2, "throw", e3);
          }
          if ("object" == typeof a2 && a2 && Cs(Os, a2)) return a2;
        }
        return new ws(false);
      }, Ds = Sn, Ps = Ni, Ls = l, ks = Or, Ms = Br, Us = function(e2, t2, i2) {
        for (var n2 = so(t2), r2 = co.f, o2 = ao.f, s2 = 0; s2 < n2.length; s2++) {
          var a2 = n2[s2];
          oo(e2, a2) || i2 && oo(i2, a2) || r2(e2, a2, o2(t2, a2));
        }
      }, xs = Mo, Vs = Ti, Fs = V, Bs = function(e2, t2) {
        Uo(t2) && "cause" in t2 && xo(e2, "cause", t2.cause);
      }, js = function(e2, t2, i2, n2) {
        qo && (zo ? zo(e2, t2) : Ko(e2, "stack", Yo(i2, n2)));
      }, Gs = Ns, Ws = function(e2, t2) {
        return void 0 === e2 ? arguments.length < 2 ? "" : t2 : Ds(e2);
      }, Hs = _t("toStringTag"), Ks = Error, Ys = [].push, qs = function(e2, t2) {
        var i2, n2 = Ls(zs, this);
        Ms ? i2 = Ms(new Ks(), n2 ? ks(this) : zs) : (i2 = n2 ? this : xs(zs), Vs(i2, Hs, "Error")), void 0 !== t2 && Vs(i2, "message", Ws(t2)), js(i2, qs, i2.stack, 1), arguments.length > 2 && Bs(i2, arguments[2]);
        var r2 = [];
        return Gs(e2, Ys, { that: r2 }), Vs(i2, "errors", r2), i2;
      };
      Ms ? Ms(qs, Ks) : Us(qs, Ks, { name: true });
      var zs = qs.prototype = xs(Ks.prototype, { constructor: Fs(1, qs), message: Fs(1, ""), name: Fs(1, "AggregateError") });
      Ps({ global: true, constructor: true, arity: 2 }, { AggregateError: qs });
      var Js, Xs, Qs, Zs = A, $s = h.WeakMap, ea = Zs($s) && /native code/.test(String($s)), ta = h, ia = Z, na = Ti, ra = et, oa = Ye, sa = gr, aa = Gr, ca = "Object already initialized", da = ta.TypeError, la = ta.WeakMap;
      if (ea || oa.state) {
        var ua = oa.state || (oa.state = new la());
        ua.get = ua.get, ua.has = ua.has, ua.set = ua.set, Js = function(e2, t2) {
          if (ua.has(e2)) throw new da(ca);
          return t2.facade = e2, ua.set(e2, t2), t2;
        }, Xs = function(e2) {
          return ua.get(e2) || {};
        }, Qs = function(e2) {
          return ua.has(e2);
        };
      } else {
        var ha = sa("state");
        aa[ha] = true, Js = function(e2, t2) {
          if (ra(e2, ha)) throw new da(ca);
          return t2.facade = e2, na(e2, ha, t2), t2;
        }, Xs = function(e2) {
          return ra(e2, ha) ? e2[ha] : {};
        }, Qs = function(e2) {
          return ra(e2, ha);
        };
      }
      var pa, _a, Ea, ma = { set: Js, get: Xs, has: Qs, enforce: function(e2) {
        return Qs(e2) ? Xs(e2) : Js(e2, {});
      }, getterFor: function(e2) {
        return function(t2) {
          var i2;
          if (!ia(t2) || (i2 = Xs(t2)).type !== e2) throw new da("Incompatible receiver, " + e2 + " required");
          return i2;
        };
      } }, fa = w, Ta = et, Sa = Function.prototype, ga = fa && Object.getOwnPropertyDescriptor, Ra = Ta(Sa, "name"), va = { EXISTS: Ra, PROPER: Ra && "something" === (function() {
      }).name, CONFIGURABLE: Ra && (!fa || fa && ga(Sa, "name").configurable) }, Ca = Ti, Ia = function(e2, t2, i2, n2) {
        return n2 && n2.enumerable ? e2[t2] = i2 : Ca(e2, t2, i2), e2;
      }, ya = n, Aa = A, ba = Z, wa = Mo, Oa = Or, Na = Ia, Da = _t("iterator"), Pa = false;
      [].keys && ("next" in (Ea = [].keys()) ? (_a = Oa(Oa(Ea))) !== Object.prototype && (pa = _a) : Pa = true);
      var La = !ba(pa) || ya(function() {
        var e2 = {};
        return pa[Da].call(e2) !== e2;
      });
      Aa((pa = La ? {} : wa(pa))[Da]) || Na(pa, Da, function() {
        return this;
      });
      var ka = { IteratorPrototype: pa, BUGGY_SAFARI_ITERATORS: Pa }, Ma = mn, Ua = dn ? {}.toString : function() {
        return "[object " + Ma(this) + "]";
      }, xa = dn, Va = $t.f, Fa = Ti, Ba = et, ja = Ua, Ga = _t("toStringTag"), Wa = function(e2, t2, i2, n2) {
        var r2 = i2 ? e2 : e2 && e2.prototype;
        r2 && (Ba(r2, Ga) || Va(r2, Ga, { configurable: true, value: t2 }), n2 && !xa && Fa(r2, "toString", ja));
      }, Ha = ka.IteratorPrototype, Ka = Mo, Ya = V, qa = Wa, za = Jo, Ja = function() {
        return this;
      }, Xa = function(e2, t2, i2, n2) {
        var r2 = t2 + " Iterator";
        return e2.prototype = Ka(Ha, { next: Ya(+!n2, i2) }), qa(e2, r2, false, true), za[r2] = Ja, e2;
      }, Qa = Ni, Za = D, $a = va, ec = Xa, tc = Or, ic = Wa, nc = Ia, rc = Jo, oc = ka, sc = $a.PROPER, ac = oc.BUGGY_SAFARI_ITERATORS, cc = _t("iterator"), dc = "keys", lc = "values", uc = "entries", hc = function() {
        return this;
      }, pc = function(e2, t2, i2, n2, r2, o2, s2) {
        ec(i2, t2, n2);
        var a2, c2, d2, l2 = function(e3) {
          if (e3 === r2 && E2) return E2;
          if (!ac && e3 && e3 in p2) return p2[e3];
          switch (e3) {
            case dc:
            case lc:
            case uc:
              return function() {
                return new i2(this, e3);
              };
          }
          return function() {
            return new i2(this);
          };
        }, u2 = t2 + " Iterator", h2 = false, p2 = e2.prototype, _2 = p2[cc] || p2["@@iterator"] || r2 && p2[r2], E2 = !ac && _2 || l2(r2), m2 = "Array" === t2 && p2.entries || _2;
        if (m2 && (a2 = tc(m2.call(new e2()))) !== Object.prototype && a2.next && (ic(a2, u2, true, true), rc[u2] = hc), sc && r2 === lc && _2 && _2.name !== lc && (h2 = true, E2 = function() {
          return Za(_2, this);
        }), r2) if (c2 = { values: l2(lc), keys: o2 ? E2 : l2(dc), entries: l2(uc) }, s2) for (d2 in c2) (ac || h2 || !(d2 in p2)) && nc(p2, d2, c2[d2]);
        else Qa({ target: t2, proto: true, forced: ac || h2 }, c2);
        return s2 && p2[cc] !== E2 && nc(p2, cc, E2, { name: r2 }), rc[t2] = E2, c2;
      }, _c = function(e2, t2) {
        return { value: e2, done: t2 };
      }, Ec = X, mc = Jo, fc = ma;
      $t.f;
      var Tc = pc, Sc = _c, gc = "Array Iterator", Rc = fc.set, vc = fc.getterFor(gc);
      Tc(Array, "Array", function(e2, t2) {
        Rc(this, { type: gc, target: Ec(e2), index: 0, kind: t2 });
      }, function() {
        var e2 = vc(this), t2 = e2.target, i2 = e2.index++;
        if (!t2 || i2 >= t2.length) return e2.target = null, Sc(void 0, true);
        switch (e2.kind) {
          case "keys":
            return Sc(i2, false);
          case "values":
            return Sc(t2[i2], false);
        }
        return Sc([i2, t2[i2]], false);
      }, "values"), mc.Arguments = mc.Array;
      var Cc = $t, Ic = function(e2, t2, i2) {
        return Cc.f(e2, t2, i2);
      }, yc = re, Ac = Ic, bc = w, wc = _t("species"), Oc = l, Nc = TypeError, Dc = function(e2, t2) {
        if (Oc(t2, e2)) return e2;
        throw new Nc("Incorrect invocation");
      }, Pc = A, Lc = Ye, kc = d(Function.toString);
      Pc(Lc.inspectSource) || (Lc.inspectSource = function(e2) {
        return kc(e2);
      });
      var Mc = Lc.inspectSource, Uc = d, xc = n, Vc = A, Fc = mn, Bc = Mc, jc = function() {
      }, Gc = re("Reflect", "construct"), Wc = /^\s*(?:class|function)\b/, Hc = Uc(Wc.exec), Kc = !Wc.test(jc), Yc = function(e2) {
        if (!Vc(e2)) return false;
        try {
          return Gc(jc, [], e2), true;
        } catch (e3) {
          return false;
        }
      }, qc = function(e2) {
        if (!Vc(e2)) return false;
        switch (Fc(e2)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return Kc || !!Hc(Wc, Bc(e2));
        } catch (e3) {
          return true;
        }
      };
      qc.sham = true;
      var zc, Jc, Xc, Qc, Zc = !Gc || xc(function() {
        var e2;
        return Yc(Yc.call) || !Yc(Object) || !Yc(function() {
          e2 = true;
        }) || e2;
      }) ? qc : Yc, $c = Zc, ed = Ae, td = TypeError, id = ri, nd = function(e2) {
        if ($c(e2)) return e2;
        throw new td(ed(e2) + " is not a constructor");
      }, rd = H, od = _t("species"), sd = function(e2, t2) {
        var i2, n2 = id(e2).constructor;
        return void 0 === n2 || rd(i2 = id(n2)[od]) ? t2 : nd(i2);
      }, ad = d([].slice), cd = TypeError, dd = function(e2, t2) {
        if (e2 < t2) throw new cd("Not enough arguments");
        return e2;
      }, ld = /(?:ipad|iphone|ipod).*applewebkit/i.test(ae), ud = h, hd = f, pd = Zt, _d = A, Ed = et, md = n, fd = Ro, Td = ad, Sd = wt, gd = dd, Rd = ld, vd = Xn, Cd = ud.setImmediate, Id = ud.clearImmediate, yd = ud.process, Ad = ud.Dispatch, bd = ud.Function, wd = ud.MessageChannel, Od = ud.String, Nd = 0, Dd = {}, Pd = "onreadystatechange";
      md(function() {
        zc = ud.location;
      });
      var Ld = function(e2) {
        if (Ed(Dd, e2)) {
          var t2 = Dd[e2];
          delete Dd[e2], t2();
        }
      }, kd = function(e2) {
        return function() {
          Ld(e2);
        };
      }, Md = function(e2) {
        Ld(e2.data);
      }, Ud = function(e2) {
        ud.postMessage(Od(e2), zc.protocol + "//" + zc.host);
      };
      Cd && Id || (Cd = function(e2) {
        gd(arguments.length, 1);
        var t2 = _d(e2) ? e2 : bd(e2), i2 = Td(arguments, 1);
        return Dd[++Nd] = function() {
          hd(t2, void 0, i2);
        }, Jc(Nd), Nd;
      }, Id = function(e2) {
        delete Dd[e2];
      }, vd ? Jc = function(e2) {
        yd.nextTick(kd(e2));
      } : Ad && Ad.now ? Jc = function(e2) {
        Ad.now(kd(e2));
      } : wd && !Rd ? (Qc = (Xc = new wd()).port2, Xc.port1.onmessage = Md, Jc = pd(Qc.postMessage, Qc)) : ud.addEventListener && _d(ud.postMessage) && !ud.importScripts && zc && "file:" !== zc.protocol && !md(Ud) ? (Jc = Ud, ud.addEventListener("message", Md, false)) : Jc = Pd in Sd("script") ? function(e2) {
        fd.appendChild(Sd("script"))[Pd] = function() {
          fd.removeChild(this), Ld(e2);
        };
      } : function(e2) {
        setTimeout(kd(e2), 0);
      });
      var xd = { set: Cd, clear: Id }, Vd = h, Fd = w, Bd = Object.getOwnPropertyDescriptor, jd = function(e2) {
        if (!Fd) return Vd[e2];
        var t2 = Bd(Vd, e2);
        return t2 && t2.value;
      }, Gd = function() {
        this.head = null, this.tail = null;
      };
      Gd.prototype = { add: function(e2) {
        var t2 = { item: e2, next: null }, i2 = this.tail;
        i2 ? i2.next = t2 : this.head = t2, this.tail = t2;
      }, get: function() {
        var e2 = this.head;
        if (e2) return null === (this.head = e2.next) && (this.tail = null), e2.item;
      } };
      var Wd, Hd, Kd, Yd, qd, zd = Gd, Jd = /ipad|iphone|ipod/i.test(ae) && "undefined" != typeof Pebble, Xd = /web0s(?!.*chrome)/i.test(ae), Qd = h, Zd = jd, $d = Zt, el = xd.set, tl = zd, il = ld, nl = Jd, rl = Xd, ol = Xn, sl = Qd.MutationObserver || Qd.WebKitMutationObserver, al = Qd.document, cl = Qd.process, dl = Qd.Promise, ll = Zd("queueMicrotask");
      if (!ll) {
        var ul = new tl(), hl = function() {
          var e2, t2;
          for (ol && (e2 = cl.domain) && e2.exit(); t2 = ul.get(); ) try {
            t2();
          } catch (e3) {
            throw ul.head && Wd(), e3;
          }
          e2 && e2.enter();
        };
        il || ol || rl || !sl || !al ? !nl && dl && dl.resolve ? ((Yd = dl.resolve(void 0)).constructor = dl, qd = $d(Yd.then, Yd), Wd = function() {
          qd(hl);
        }) : ol ? Wd = function() {
          cl.nextTick(hl);
        } : (el = $d(el, Qd), Wd = function() {
          el(hl);
        }) : (Hd = true, Kd = al.createTextNode(""), new sl(hl).observe(Kd, { characterData: true }), Wd = function() {
          Kd.data = Hd = !Hd;
        }), ll = function(e2) {
          ul.head || Wd(), ul.add(e2);
        };
      }
      var pl = ll, _l = function(e2) {
        try {
          return { error: false, value: e2() };
        } catch (e3) {
          return { error: true, value: e3 };
        }
      }, El = h.Promise, ml = h, fl = El, Tl = A, Sl = zt, gl = Mc, Rl = _t, vl = Jn, Cl = _e, Il = fl && fl.prototype, yl = Rl("species"), Al = false, bl = Tl(ml.PromiseRejectionEvent), wl = Sl("Promise", function() {
        var e2 = gl(fl), t2 = e2 !== String(fl);
        if (!t2 && 66 === Cl) return true;
        if (!Il.catch || !Il.finally) return true;
        if (!Cl || Cl < 51 || !/native code/.test(e2)) {
          var i2 = new fl(function(e3) {
            e3(1);
          }), n2 = function(e3) {
            e3(function() {
            }, function() {
            });
          };
          if ((i2.constructor = {})[yl] = n2, !(Al = i2.then(function() {
          }) instanceof n2)) return true;
        }
        return !(t2 || "BROWSER" !== vl && "DENO" !== vl || bl);
      }), Ol = { CONSTRUCTOR: wl, REJECTION_EVENT: bl, SUBCLASSING: Al }, Nl = {}, Dl = Ne, Pl = TypeError, Ll = function(e2) {
        var t2, i2;
        this.promise = new e2(function(e3, n2) {
          if (void 0 !== t2 || void 0 !== i2) throw new Pl("Bad Promise constructor");
          t2 = e3, i2 = n2;
        }), this.resolve = Dl(t2), this.reject = Dl(i2);
      };
      Nl.f = function(e2) {
        return new Ll(e2);
      };
      var kl, Ml, Ul = Ni, xl = Xn, Vl = h, Fl = D, Bl = Ia, jl = Wa, Gl = function(e2) {
        var t2 = yc(e2);
        bc && t2 && !t2[wc] && Ac(t2, wc, { configurable: true, get: function() {
          return this;
        } });
      }, Wl = Ne, Hl = A, Kl = Z, Yl = Dc, ql = sd, zl = xd.set, Jl = pl, Xl = function(e2, t2) {
        try {
          1 === arguments.length ? console.error(e2) : console.error(e2, t2);
        } catch (e3) {
        }
      }, Ql = _l, Zl = zd, $l = ma, eu = El, tu = Ol, iu = Nl, nu = "Promise", ru = tu.CONSTRUCTOR, ou = tu.REJECTION_EVENT, su = $l.getterFor(nu), au = $l.set, cu = eu && eu.prototype, du = eu, lu = cu, uu = Vl.TypeError, hu = Vl.document, pu = Vl.process, _u = iu.f, Eu = _u, mu = !!(hu && hu.createEvent && Vl.dispatchEvent), fu = "unhandledrejection", Tu = function(e2) {
        var t2;
        return !(!Kl(e2) || !Hl(t2 = e2.then)) && t2;
      }, Su = function(e2, t2) {
        var i2, n2, r2, o2 = t2.value, s2 = 1 === t2.state, a2 = s2 ? e2.ok : e2.fail, c2 = e2.resolve, d2 = e2.reject, l2 = e2.domain;
        try {
          a2 ? (s2 || (2 === t2.rejection && Iu(t2), t2.rejection = 1), true === a2 ? i2 = o2 : (l2 && l2.enter(), i2 = a2(o2), l2 && (l2.exit(), r2 = true)), i2 === e2.promise ? d2(new uu("Promise-chain cycle")) : (n2 = Tu(i2)) ? Fl(n2, i2, c2, d2) : c2(i2)) : d2(o2);
        } catch (e3) {
          l2 && !r2 && l2.exit(), d2(e3);
        }
      }, gu = function(e2, t2) {
        e2.notified || (e2.notified = true, Jl(function() {
          for (var i2, n2 = e2.reactions; i2 = n2.get(); ) Su(i2, e2);
          e2.notified = false, t2 && !e2.rejection && vu(e2);
        }));
      }, Ru = function(e2, t2, i2) {
        var n2, r2;
        mu ? ((n2 = hu.createEvent("Event")).promise = t2, n2.reason = i2, n2.initEvent(e2, false, true), Vl.dispatchEvent(n2)) : n2 = { promise: t2, reason: i2 }, !ou && (r2 = Vl["on" + e2]) ? r2(n2) : e2 === fu && Xl("Unhandled promise rejection", i2);
      }, vu = function(e2) {
        Fl(zl, Vl, function() {
          var t2, i2 = e2.facade, n2 = e2.value;
          if (Cu(e2) && (t2 = Ql(function() {
            xl ? pu.emit("unhandledRejection", n2, i2) : Ru(fu, i2, n2);
          }), e2.rejection = xl || Cu(e2) ? 2 : 1, t2.error)) throw t2.value;
        });
      }, Cu = function(e2) {
        return 1 !== e2.rejection && !e2.parent;
      }, Iu = function(e2) {
        Fl(zl, Vl, function() {
          var t2 = e2.facade;
          xl ? pu.emit("rejectionHandled", t2) : Ru("rejectionhandled", t2, e2.value);
        });
      }, yu = function(e2, t2, i2) {
        return function(n2) {
          e2(t2, n2, i2);
        };
      }, Au = function(e2, t2, i2) {
        e2.done || (e2.done = true, i2 && (e2 = i2), e2.value = t2, e2.state = 2, gu(e2, true));
      }, bu = function(e2, t2, i2) {
        if (!e2.done) {
          e2.done = true, i2 && (e2 = i2);
          try {
            if (e2.facade === t2) throw new uu("Promise can't be resolved itself");
            var n2 = Tu(t2);
            n2 ? Jl(function() {
              var i3 = { done: false };
              try {
                Fl(n2, t2, yu(bu, i3, e2), yu(Au, i3, e2));
              } catch (t3) {
                Au(i3, t3, e2);
              }
            }) : (e2.value = t2, e2.state = 1, gu(e2, false));
          } catch (t3) {
            Au({ done: false }, t3, e2);
          }
        }
      };
      ru && (lu = (du = function(e2) {
        Yl(this, lu), Wl(e2), Fl(kl, this);
        var t2 = su(this);
        try {
          e2(yu(bu, t2), yu(Au, t2));
        } catch (e3) {
          Au(t2, e3);
        }
      }).prototype, (kl = function(e2) {
        au(this, { type: nu, done: false, notified: false, parent: false, reactions: new Zl(), rejection: false, state: 0, value: null });
      }).prototype = Bl(lu, "then", function(e2, t2) {
        var i2 = su(this), n2 = _u(ql(this, du));
        return i2.parent = true, n2.ok = !Hl(e2) || e2, n2.fail = Hl(t2) && t2, n2.domain = xl ? pu.domain : void 0, 0 === i2.state ? i2.reactions.add(n2) : Jl(function() {
          Su(n2, i2);
        }), n2.promise;
      }), Ml = function() {
        var e2 = new kl(), t2 = su(e2);
        this.promise = e2, this.resolve = yu(bu, t2), this.reject = yu(Au, t2);
      }, iu.f = _u = function(e2) {
        return e2 === du || void 0 === e2 ? new Ml(e2) : Eu(e2);
      }), Ul({ global: true, constructor: true, wrap: true, forced: ru }, { Promise: du }), jl(du, nu, false, true), Gl(nu);
      var wu = _t("iterator"), Ou = false;
      try {
        var Nu = 0, Du = { next: function() {
          return { done: !!Nu++ };
        }, return: function() {
          Ou = true;
        } };
        Du[wu] = function() {
          return this;
        }, Array.from(Du, function() {
          throw 2;
        });
      } catch (e2) {
      }
      var Pu = El, Lu = function(e2, t2) {
        try {
          if (!t2 && !Ou) return false;
        } catch (e3) {
          return false;
        }
        var i2 = false;
        try {
          var n2 = {};
          n2[wu] = function() {
            return { next: function() {
              return { done: i2 = true };
            } };
          }, e2(n2);
        } catch (e3) {
        }
        return i2;
      }, ku = Ol.CONSTRUCTOR || !Lu(function(e2) {
        Pu.all(e2).then(void 0, function() {
        });
      }), Mu = D, Uu = Ne, xu = Nl, Vu = _l, Fu = Ns;
      Ni({ target: "Promise", stat: true, forced: ku }, { all: function(e2) {
        var t2 = this, i2 = xu.f(t2), n2 = i2.resolve, r2 = i2.reject, o2 = Vu(function() {
          var i3 = Uu(t2.resolve), o3 = [], s2 = 0, a2 = 1;
          Fu(e2, function(e3) {
            var c2 = s2++, d2 = false;
            a2++, Mu(i3, t2, e3).then(function(e4) {
              d2 || (d2 = true, o3[c2] = e4, --a2 || n2(o3));
            }, r2);
          }), --a2 || n2(o3);
        });
        return o2.error && r2(o2.value), i2.promise;
      } });
      var Bu = Ni, ju = Ol.CONSTRUCTOR;
      El && El.prototype, Bu({ target: "Promise", proto: true, forced: ju, real: true }, { catch: function(e2) {
        return this.then(void 0, e2);
      } });
      var Gu = D, Wu = Ne, Hu = Nl, Ku = _l, Yu = Ns;
      Ni({ target: "Promise", stat: true, forced: ku }, { race: function(e2) {
        var t2 = this, i2 = Hu.f(t2), n2 = i2.reject, r2 = Ku(function() {
          var r3 = Wu(t2.resolve);
          Yu(e2, function(e3) {
            Gu(r3, t2, e3).then(i2.resolve, n2);
          });
        });
        return r2.error && n2(r2.value), i2.promise;
      } });
      var qu = Nl;
      Ni({ target: "Promise", stat: true, forced: Ol.CONSTRUCTOR }, { reject: function(e2) {
        var t2 = qu.f(this);
        return (0, t2.reject)(e2), t2.promise;
      } });
      var zu = ri, Ju = Z, Xu = Nl, Qu = function(e2, t2) {
        if (zu(e2), Ju(t2) && t2.constructor === e2) return t2;
        var i2 = Xu.f(e2);
        return (0, i2.resolve)(t2), i2.promise;
      }, Zu = Ni, $u = El, eh = Ol.CONSTRUCTOR, th = Qu, ih = re("Promise"), nh = !eh;
      Zu({ target: "Promise", stat: true, forced: true }, { resolve: function(e2) {
        return th(nh && this === ih ? $u : this, e2);
      } });
      var rh = D, oh = Ne, sh = Nl, ah = _l, ch = Ns;
      Ni({ target: "Promise", stat: true, forced: ku }, { allSettled: function(e2) {
        var t2 = this, i2 = sh.f(t2), n2 = i2.resolve, r2 = i2.reject, o2 = ah(function() {
          var i3 = oh(t2.resolve), r3 = [], o3 = 0, s2 = 1;
          ch(e2, function(e3) {
            var a2 = o3++, c2 = false;
            s2++, rh(i3, t2, e3).then(function(e4) {
              c2 || (c2 = true, r3[a2] = { status: "fulfilled", value: e4 }, --s2 || n2(r3));
            }, function(e4) {
              c2 || (c2 = true, r3[a2] = { status: "rejected", reason: e4 }, --s2 || n2(r3));
            });
          }), --s2 || n2(r3);
        });
        return o2.error && r2(o2.value), i2.promise;
      } });
      var dh = D, lh = Ne, uh = re, hh = Nl, ph = _l, _h = Ns, Eh = "No one promise resolved";
      Ni({ target: "Promise", stat: true, forced: ku }, { any: function(e2) {
        var t2 = this, i2 = uh("AggregateError"), n2 = hh.f(t2), r2 = n2.resolve, o2 = n2.reject, s2 = ph(function() {
          var n3 = lh(t2.resolve), s3 = [], a2 = 0, c2 = 1, d2 = false;
          _h(e2, function(e3) {
            var l2 = a2++, u2 = false;
            c2++, dh(n3, t2, e3).then(function(e4) {
              u2 || d2 || (d2 = true, r2(e4));
            }, function(e4) {
              u2 || d2 || (u2 = true, s3[l2] = e4, --c2 || o2(new i2(s3, Eh)));
            });
          }), --c2 || o2(new i2(s3, Eh));
        });
        return s2.error && o2(s2.value), n2.promise;
      } });
      var mh = Ni, fh = f, Th = ad, Sh = Nl, gh = Ne, Rh = _l, vh = h.Promise, Ch = false;
      mh({ target: "Promise", stat: true, forced: !vh || !vh.try || Rh(function() {
        vh.try(function(e2) {
          Ch = 8 === e2;
        }, 8);
      }).error || !Ch }, { try: function(e2) {
        var t2 = arguments.length > 1 ? Th(arguments, 1) : [], i2 = Sh.f(this), n2 = Rh(function() {
          return fh(gh(e2), void 0, t2);
        });
        return (n2.error ? i2.reject : i2.resolve)(n2.value), i2.promise;
      } });
      var Ih = Nl;
      Ni({ target: "Promise", stat: true }, { withResolvers: function() {
        var e2 = Ih.f(this);
        return { promise: e2.promise, resolve: e2.resolve, reject: e2.reject };
      } });
      var yh = Ni, Ah = El, bh = n, wh = re, Oh = A, Nh = sd, Dh = Qu, Ph = Ah && Ah.prototype;
      yh({ target: "Promise", proto: true, real: true, forced: !!Ah && bh(function() {
        Ph.finally.call({ then: function() {
        } }, function() {
        });
      }) }, { finally: function(e2) {
        var t2 = Nh(this, wh("Promise")), i2 = Oh(e2);
        return this.then(i2 ? function(i3) {
          return Dh(t2, e2()).then(function() {
            return i3;
          });
        } : e2, i2 ? function(i3) {
          return Dh(t2, e2()).then(function() {
            throw i3;
          });
        } : e2);
      } });
      var Lh = d, kh = Mi, Mh = Sn, Uh = q, xh = Lh("".charAt), Vh = Lh("".charCodeAt), Fh = Lh("".slice), Bh = function(e2) {
        return function(t2, i2) {
          var n2, r2, o2 = Mh(Uh(t2)), s2 = kh(i2), a2 = o2.length;
          return s2 < 0 || s2 >= a2 ? e2 ? "" : void 0 : (n2 = Vh(o2, s2)) < 55296 || n2 > 56319 || s2 + 1 === a2 || (r2 = Vh(o2, s2 + 1)) < 56320 || r2 > 57343 ? e2 ? xh(o2, s2) : n2 : e2 ? Fh(o2, s2, s2 + 2) : r2 - 56320 + (n2 - 55296 << 10) + 65536;
        };
      }, jh = { codeAt: Bh(false), charAt: Bh(true) }, Gh = jh.charAt, Wh = Sn, Hh = ma, Kh = pc, Yh = _c, qh = "String Iterator", zh = Hh.set, Jh = Hh.getterFor(qh);
      Kh(String, "String", function(e2) {
        zh(this, { type: qh, string: Wh(e2), index: 0 });
      }, function() {
        var e2, t2 = Jh(this), i2 = t2.string, n2 = t2.index;
        return n2 >= i2.length ? Yh(void 0, true) : (e2 = Gh(i2, n2), t2.index += e2.length, Yh(e2, false));
      });
      var Xh = $.Promise, Qh = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 }, Zh = h, $h = Wa, ep = Jo;
      for (var tp in Qh) $h(Zh[tp], tp), ep[tp] = ep.Array;
      var ip = Xh, np = i(ip), rp = $i("Array", "values"), op = mn, sp = et, ap = l, cp = rp, dp = Array.prototype, lp = { DOMTokenList: true, NodeList: true }, up = function(e2) {
        var t2 = e2.values;
        return e2 === dp || ap(dp, e2) && t2 === dp.values || sp(lp, op(e2)) ? cp : t2;
      }, hp = i(up), pp = Ni, _p = d, Ep = Fi, mp = RangeError, fp = String.fromCharCode, Tp = String.fromCodePoint, Sp = _p([].join);
      pp({ target: "String", stat: true, arity: 1, forced: !!Tp && 1 !== Tp.length }, { fromCodePoint: function(e2) {
        for (var t2, i2 = [], n2 = arguments.length, r2 = 0; n2 > r2; ) {
          if (t2 = +arguments[r2++], Ep(t2, 1114111) !== t2) throw new mp(t2 + " is not a valid code point");
          i2[r2] = t2 < 65536 ? fp(t2) : fp(55296 + ((t2 -= 65536) >> 10), t2 % 1024 + 56320);
        }
        return Sp(i2, "");
      } });
      var gp = n, Rp = Fe, vp = _t("iterator"), Cp = !gp(function() {
        var e2 = new URL("b?a=1&b=2&c=3", "https://a"), t2 = e2.searchParams, i2 = new URLSearchParams("a=1&a=2&b=3"), n2 = "";
        return e2.pathname = "c%20d", t2.forEach(function(e3, i3) {
          t2.delete("b"), n2 += i3 + e3;
        }), i2.delete("a", 2), i2.delete("b", void 0), !e2.toJSON || !i2.has("a", 1) || i2.has("a", 2) || !i2.has("a", void 0) || i2.has("b") || !t2.size && Rp || !t2.sort || "https://a/c%20d?a=1&c=3" !== e2.href || "3" !== t2.get("c") || "a=1" !== String(new URLSearchParams("?a=1")) || !t2[vp] || "a" !== new URL("https://a@b").username || "b" !== new URLSearchParams(new URLSearchParams("a=b")).get("a") || "xn--e1aybc" !== new URL("https://ÑÐµÑÑ").host || "#%D0%B1" !== new URL("https://a#Ð±").hash || "a1c3" !== n2 || "x" !== new URL("https://x", void 0).host;
      }), Ip = Ia, yp = ad, Ap = Math.floor, bp = function(e2, t2) {
        var i2 = e2.length;
        if (i2 < 8) for (var n2, r2, o2 = 1; o2 < i2; ) {
          for (r2 = o2, n2 = e2[o2]; r2 && t2(e2[r2 - 1], n2) > 0; ) e2[r2] = e2[--r2];
          r2 !== o2++ && (e2[r2] = n2);
        }
        else for (var s2 = Ap(i2 / 2), a2 = bp(yp(e2, 0, s2), t2), c2 = bp(yp(e2, s2), t2), d2 = a2.length, l2 = c2.length, u2 = 0, h2 = 0; u2 < d2 || h2 < l2; ) e2[u2 + h2] = u2 < d2 && h2 < l2 ? t2(a2[u2], c2[h2]) <= 0 ? a2[u2++] : c2[h2++] : u2 < d2 ? a2[u2++] : c2[h2++];
        return e2;
      }, wp = bp, Op = Ni, Np = h, Dp = jd, Pp = re, Lp = D, kp = d, Mp = w, Up = Cp, xp = Ia, Vp = Ic, Fp = function(e2, t2, i2) {
        for (var n2 in t2) i2 && i2.unsafe && e2[n2] ? e2[n2] = t2[n2] : Ip(e2, n2, t2[n2], i2);
        return e2;
      }, Bp = Wa, jp = Xa, Gp = ma, Wp = Dc, Hp = A, Kp = et, Yp = Zt, qp = mn, zp = ri, Jp = Z, Xp = Sn, Qp = Mo, Zp = V, $p = hs, e_ = os, t_ = _c, i_ = dd, n_ = wp, r_ = _t("iterator"), o_ = "URLSearchParams", s_ = o_ + "Iterator", a_ = Gp.set, c_ = Gp.getterFor(o_), d_ = Gp.getterFor(s_), l_ = Dp("fetch"), u_ = Dp("Request"), h_ = Dp("Headers"), p_ = u_ && u_.prototype, __ = h_ && h_.prototype, E_ = Np.TypeError, m_ = Np.encodeURIComponent, f_ = String.fromCharCode, T_ = Pp("String", "fromCodePoint"), S_ = parseInt, g_ = kp("".charAt), R_ = kp([].join), v_ = kp([].push), C_ = kp("".replace), I_ = kp([].shift), y_ = kp([].splice), A_ = kp("".split), b_ = kp("".slice), w_ = kp(/./.exec), O_ = /\+/g, N_ = /^[0-9a-f]+$/i, D_ = function(e2, t2) {
        var i2 = b_(e2, t2, t2 + 2);
        return w_(N_, i2) ? S_(i2, 16) : NaN;
      }, P_ = function(e2) {
        for (var t2 = 0, i2 = 128; i2 > 0 && e2 & i2; i2 >>= 1) t2++;
        return t2;
      }, L_ = function(e2) {
        var t2 = null;
        switch (e2.length) {
          case 1:
            t2 = e2[0];
            break;
          case 2:
            t2 = (31 & e2[0]) << 6 | 63 & e2[1];
            break;
          case 3:
            t2 = (15 & e2[0]) << 12 | (63 & e2[1]) << 6 | 63 & e2[2];
            break;
          case 4:
            t2 = (7 & e2[0]) << 18 | (63 & e2[1]) << 12 | (63 & e2[2]) << 6 | 63 & e2[3];
        }
        return t2 > 1114111 ? null : t2;
      }, k_ = function(e2) {
        for (var t2 = (e2 = C_(e2, O_, " ")).length, i2 = "", n2 = 0; n2 < t2; ) {
          var r2 = g_(e2, n2);
          if ("%" === r2) {
            if ("%" === g_(e2, n2 + 1) || n2 + 3 > t2) {
              i2 += "%", n2++;
              continue;
            }
            var o2 = D_(e2, n2 + 1);
            if (o2 != o2) {
              i2 += r2, n2++;
              continue;
            }
            n2 += 2;
            var s2 = P_(o2);
            if (0 === s2) r2 = f_(o2);
            else {
              if (1 === s2 || s2 > 4) {
                i2 += "ï¿½", n2++;
                continue;
              }
              for (var a2 = [o2], c2 = 1; c2 < s2 && !(++n2 + 3 > t2 || "%" !== g_(e2, n2)); ) {
                var d2 = D_(e2, n2 + 1);
                if (d2 != d2) {
                  n2 += 3;
                  break;
                }
                if (d2 > 191 || d2 < 128) break;
                v_(a2, d2), n2 += 2, c2++;
              }
              if (a2.length !== s2) {
                i2 += "ï¿½";
                continue;
              }
              var l2 = L_(a2);
              null === l2 ? i2 += "ï¿½" : r2 = T_(l2);
            }
          }
          i2 += r2, n2++;
        }
        return i2;
      }, M_ = /[!'()~]|%20/g, U_ = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+" }, x_ = function(e2) {
        return U_[e2];
      }, V_ = function(e2) {
        return C_(m_(e2), M_, x_);
      }, F_ = jp(function(e2, t2) {
        a_(this, { type: s_, target: c_(e2).entries, index: 0, kind: t2 });
      }, o_, function() {
        var e2 = d_(this), t2 = e2.target, i2 = e2.index++;
        if (!t2 || i2 >= t2.length) return e2.target = null, t_(void 0, true);
        var n2 = t2[i2];
        switch (e2.kind) {
          case "keys":
            return t_(n2.key, false);
          case "values":
            return t_(n2.value, false);
        }
        return t_([n2.key, n2.value], false);
      }, true), B_ = function(e2) {
        this.entries = [], this.url = null, void 0 !== e2 && (Jp(e2) ? this.parseObject(e2) : this.parseQuery("string" == typeof e2 ? "?" === g_(e2, 0) ? b_(e2, 1) : e2 : Xp(e2)));
      };
      B_.prototype = { type: o_, bindURL: function(e2) {
        this.url = e2, this.update();
      }, parseObject: function(e2) {
        var t2, i2, n2, r2, o2, s2, a2, c2 = this.entries, d2 = e_(e2);
        if (d2) for (i2 = (t2 = $p(e2, d2)).next; !(n2 = Lp(i2, t2)).done; ) {
          if (o2 = (r2 = $p(zp(n2.value))).next, (s2 = Lp(o2, r2)).done || (a2 = Lp(o2, r2)).done || !Lp(o2, r2).done) throw new E_("Expected sequence with length 2");
          v_(c2, { key: Xp(s2.value), value: Xp(a2.value) });
        }
        else for (var l2 in e2) Kp(e2, l2) && v_(c2, { key: l2, value: Xp(e2[l2]) });
      }, parseQuery: function(e2) {
        if (e2) for (var t2, i2, n2 = this.entries, r2 = A_(e2, "&"), o2 = 0; o2 < r2.length; ) (t2 = r2[o2++]).length && (i2 = A_(t2, "="), v_(n2, { key: k_(I_(i2)), value: k_(R_(i2, "=")) }));
      }, serialize: function() {
        for (var e2, t2 = this.entries, i2 = [], n2 = 0; n2 < t2.length; ) e2 = t2[n2++], v_(i2, V_(e2.key) + "=" + V_(e2.value));
        return R_(i2, "&");
      }, update: function() {
        this.entries.length = 0, this.parseQuery(this.url.query);
      }, updateURL: function() {
        this.url && this.url.update();
      } };
      var j_ = function() {
        Wp(this, G_);
        var e2 = a_(this, new B_(arguments.length > 0 ? arguments[0] : void 0));
        Mp || (this.size = e2.entries.length);
      }, G_ = j_.prototype;
      if (Fp(G_, { append: function(e2, t2) {
        var i2 = c_(this);
        i_(arguments.length, 2), v_(i2.entries, { key: Xp(e2), value: Xp(t2) }), Mp || this.length++, i2.updateURL();
      }, delete: function(e2) {
        for (var t2 = c_(this), i2 = i_(arguments.length, 1), n2 = t2.entries, r2 = Xp(e2), o2 = i2 < 2 ? void 0 : arguments[1], s2 = void 0 === o2 ? o2 : Xp(o2), a2 = 0; a2 < n2.length; ) {
          var c2 = n2[a2];
          if (c2.key !== r2 || void 0 !== s2 && c2.value !== s2) a2++;
          else if (y_(n2, a2, 1), void 0 !== s2) break;
        }
        Mp || (this.size = n2.length), t2.updateURL();
      }, get: function(e2) {
        var t2 = c_(this).entries;
        i_(arguments.length, 1);
        for (var i2 = Xp(e2), n2 = 0; n2 < t2.length; n2++) if (t2[n2].key === i2) return t2[n2].value;
        return null;
      }, getAll: function(e2) {
        var t2 = c_(this).entries;
        i_(arguments.length, 1);
        for (var i2 = Xp(e2), n2 = [], r2 = 0; r2 < t2.length; r2++) t2[r2].key === i2 && v_(n2, t2[r2].value);
        return n2;
      }, has: function(e2) {
        for (var t2 = c_(this).entries, i2 = i_(arguments.length, 1), n2 = Xp(e2), r2 = i2 < 2 ? void 0 : arguments[1], o2 = void 0 === r2 ? r2 : Xp(r2), s2 = 0; s2 < t2.length; ) {
          var a2 = t2[s2++];
          if (a2.key === n2 && (void 0 === o2 || a2.value === o2)) return true;
        }
        return false;
      }, set: function(e2, t2) {
        var i2 = c_(this);
        i_(arguments.length, 1);
        for (var n2, r2 = i2.entries, o2 = false, s2 = Xp(e2), a2 = Xp(t2), c2 = 0; c2 < r2.length; c2++) (n2 = r2[c2]).key === s2 && (o2 ? y_(r2, c2--, 1) : (o2 = true, n2.value = a2));
        o2 || v_(r2, { key: s2, value: a2 }), Mp || (this.size = r2.length), i2.updateURL();
      }, sort: function() {
        var e2 = c_(this);
        n_(e2.entries, function(e3, t2) {
          return e3.key > t2.key ? 1 : -1;
        }), e2.updateURL();
      }, forEach: function(e2) {
        for (var t2, i2 = c_(this).entries, n2 = Yp(e2, arguments.length > 1 ? arguments[1] : void 0), r2 = 0; r2 < i2.length; ) n2((t2 = i2[r2++]).value, t2.key, this);
      }, keys: function() {
        return new F_(this, "keys");
      }, values: function() {
        return new F_(this, "values");
      }, entries: function() {
        return new F_(this, "entries");
      } }, { enumerable: true }), xp(G_, r_, G_.entries, { name: "entries" }), xp(G_, "toString", function() {
        return c_(this).serialize();
      }, { enumerable: true }), Mp && Vp(G_, "size", { get: function() {
        return c_(this).entries.length;
      }, configurable: true, enumerable: true }), Bp(j_, o_), Op({ global: true, constructor: true, forced: !Up }, { URLSearchParams: j_ }), !Up && Hp(h_)) {
        var W_ = kp(__.has), H_ = kp(__.set), K_ = function(e2) {
          if (Jp(e2)) {
            var t2, i2 = e2.body;
            if (qp(i2) === o_) return t2 = e2.headers ? new h_(e2.headers) : new h_(), W_(t2, "content-type") || H_(t2, "content-type", "application/x-www-form-urlencoded;charset=UTF-8"), Qp(e2, { body: Zp(0, Xp(i2)), headers: Zp(0, t2) });
          }
          return e2;
        };
        if (Hp(l_) && Op({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, { fetch: function(e2) {
          return l_(e2, arguments.length > 1 ? K_(arguments[1]) : {});
        } }), Hp(u_)) {
          var Y_ = function(e2) {
            return Wp(this, p_), new u_(e2, arguments.length > 1 ? K_(arguments[1]) : {});
          };
          p_.constructor = Y_, Y_.prototype = p_, Op({ global: true, constructor: true, dontCallGetSet: true, forced: true }, { Request: Y_ });
        }
      }
      var q_, z_ = { URLSearchParams: j_, getState: c_ }, J_ = $.URLSearchParams, X_ = w, Q_ = d, Z_ = D, $_ = n, eE = po, tE = Zr, iE = P, nE = Qe, rE = W, oE = Object.assign, sE = Object.defineProperty, aE = Q_([].concat), cE = !oE || $_(function() {
        if (X_ && 1 !== oE({ b: 1 }, oE(sE({}, "a", { enumerable: true, get: function() {
          sE(this, "b", { value: 3, enumerable: false });
        } }), { b: 2 })).b) return true;
        var e2 = {}, t2 = {}, i2 = Symbol("assign detection"), n2 = "abcdefghijklmnopqrst";
        return e2[i2] = 7, n2.split("").forEach(function(e3) {
          t2[e3] = e3;
        }), 7 !== oE({}, e2)[i2] || eE(oE({}, t2)).join("") !== n2;
      }) ? function(e2, t2) {
        for (var i2 = nE(e2), n2 = arguments.length, r2 = 1, o2 = tE.f, s2 = iE.f; n2 > r2; ) for (var a2, c2 = rE(arguments[r2++]), d2 = o2 ? aE(eE(c2), o2(c2)) : eE(c2), l2 = d2.length, u2 = 0; l2 > u2; ) a2 = d2[u2++], X_ && !Z_(s2, c2, a2) || (i2[a2] = c2[a2]);
        return i2;
      } : oE, dE = ri, lE = ms, uE = w, hE = $t, pE = V, _E = function(e2, t2, i2) {
        uE ? hE.f(e2, t2, pE(0, i2)) : e2[t2] = i2;
      }, EE = Zt, mE = D, fE = Qe, TE = function(e2, t2, i2, n2) {
        try {
          return n2 ? t2(dE(i2)[0], i2[1]) : t2(i2);
        } catch (t3) {
          lE(e2, "throw", t3);
        }
      }, SE = $o, gE = Zc, RE = Hi, vE = _E, CE = hs, IE = os, yE = Array, AE = d, bE = 2147483647, wE = /[^\0-\u007E]/, OE = /[.\u3002\uFF0E\uFF61]/g, NE = "Overflow: input needs wider integers to process", DE = RangeError, PE = AE(OE.exec), LE = Math.floor, kE = String.fromCharCode, ME = AE("".charCodeAt), UE = AE([].join), xE = AE([].push), VE = AE("".replace), FE = AE("".split), BE = AE("".toLowerCase), jE = function(e2) {
        return e2 + 22 + 75 * (e2 < 26);
      }, GE = function(e2, t2, i2) {
        var n2 = 0;
        for (e2 = i2 ? LE(e2 / 700) : e2 >> 1, e2 += LE(e2 / t2); e2 > 455; ) e2 = LE(e2 / 35), n2 += 36;
        return LE(n2 + 36 * e2 / (e2 + 38));
      }, WE = function(e2) {
        var t2 = [];
        e2 = function(e3) {
          for (var t3 = [], i3 = 0, n3 = e3.length; i3 < n3; ) {
            var r3 = ME(e3, i3++);
            if (r3 >= 55296 && r3 <= 56319 && i3 < n3) {
              var o3 = ME(e3, i3++);
              56320 == (64512 & o3) ? xE(t3, ((1023 & r3) << 10) + (1023 & o3) + 65536) : (xE(t3, r3), i3--);
            } else xE(t3, r3);
          }
          return t3;
        }(e2);
        var i2, n2, r2 = e2.length, o2 = 128, s2 = 0, a2 = 72;
        for (i2 = 0; i2 < e2.length; i2++) (n2 = e2[i2]) < 128 && xE(t2, kE(n2));
        var c2 = t2.length, d2 = c2;
        for (c2 && xE(t2, "-"); d2 < r2; ) {
          var l2 = bE;
          for (i2 = 0; i2 < e2.length; i2++) (n2 = e2[i2]) >= o2 && n2 < l2 && (l2 = n2);
          var u2 = d2 + 1;
          if (l2 - o2 > LE((bE - s2) / u2)) throw new DE(NE);
          for (s2 += (l2 - o2) * u2, o2 = l2, i2 = 0; i2 < e2.length; i2++) {
            if ((n2 = e2[i2]) < o2 && ++s2 > bE) throw new DE(NE);
            if (n2 === o2) {
              for (var h2 = s2, p2 = 36; ; ) {
                var _2 = p2 <= a2 ? 1 : p2 >= a2 + 26 ? 26 : p2 - a2;
                if (h2 < _2) break;
                var E2 = h2 - _2, m2 = 36 - _2;
                xE(t2, kE(jE(_2 + E2 % m2))), h2 = LE(E2 / m2), p2 += 36;
              }
              xE(t2, kE(jE(h2))), a2 = GE(s2, u2, d2 === c2), s2 = 0, d2++;
            }
          }
          s2++, o2++;
        }
        return UE(t2, "");
      }, HE = Ni, KE = w, YE = Cp, qE = h, zE = Zt, JE = d, XE = Ia, QE = Ic, ZE = Dc, $E = et, em = cE, tm = function(e2) {
        var t2 = fE(e2), i2 = gE(this), n2 = arguments.length, r2 = n2 > 1 ? arguments[1] : void 0, o2 = void 0 !== r2;
        o2 && (r2 = EE(r2, n2 > 2 ? arguments[2] : void 0));
        var s2, a2, c2, d2, l2, u2, h2 = IE(t2), p2 = 0;
        if (!h2 || this === yE && SE(h2)) for (s2 = RE(t2), a2 = i2 ? new this(s2) : yE(s2); s2 > p2; p2++) u2 = o2 ? r2(t2[p2], p2) : t2[p2], vE(a2, p2, u2);
        else for (a2 = i2 ? new this() : [], l2 = (d2 = CE(t2, h2)).next; !(c2 = mE(l2, d2)).done; p2++) u2 = o2 ? TE(d2, r2, [c2.value, p2], true) : c2.value, vE(a2, p2, u2);
        return a2.length = p2, a2;
      }, im = ad, nm = jh.codeAt, rm = function(e2) {
        var t2, i2, n2 = [], r2 = FE(VE(BE(e2), OE, "."), ".");
        for (t2 = 0; t2 < r2.length; t2++) i2 = r2[t2], xE(n2, PE(wE, i2) ? "xn--" + WE(i2) : i2);
        return UE(n2, ".");
      }, om = Sn, sm = Wa, am = dd, cm = z_, dm = ma, lm = dm.set, um = dm.getterFor("URL"), hm = cm.URLSearchParams, pm = cm.getState, _m = qE.URL, Em = qE.TypeError, mm = qE.parseInt, fm = Math.floor, Tm = Math.pow, Sm = JE("".charAt), gm = JE(/./.exec), Rm = JE([].join), vm = JE(1 .toString), Cm = JE([].pop), Im = JE([].push), ym = JE("".replace), Am = JE([].shift), bm = JE("".split), wm = JE("".slice), Om = JE("".toLowerCase), Nm = JE([].unshift), Dm = "Invalid scheme", Pm = "Invalid host", Lm = "Invalid port", km = /[a-z]/i, Mm = /[\d+-.a-z]/i, Um = /\d/, xm = /^0x/i, Vm = /^[0-7]+$/, Fm = /^\d+$/, Bm = /^[\da-f]+$/i, jm = /[\0\t\n\r #%/:<>?@[\\\]^|]/, Gm = /[\0\t\n\r #/:<>?@[\\\]^|]/, Wm = /^[\u0000-\u0020]+/, Hm = /(^|[^\u0000-\u0020])[\u0000-\u0020]+$/, Km = /[\t\n\r]/g, Ym = function(e2) {
        var t2, i2, n2, r2;
        if ("number" == typeof e2) {
          for (t2 = [], i2 = 0; i2 < 4; i2++) Nm(t2, e2 % 256), e2 = fm(e2 / 256);
          return Rm(t2, ".");
        }
        if ("object" == typeof e2) {
          for (t2 = "", n2 = function(e3) {
            for (var t3 = null, i3 = 1, n3 = null, r3 = 0, o2 = 0; o2 < 8; o2++) 0 !== e3[o2] ? (r3 > i3 && (t3 = n3, i3 = r3), n3 = null, r3 = 0) : (null === n3 && (n3 = o2), ++r3);
            return r3 > i3 ? n3 : t3;
          }(e2), i2 = 0; i2 < 8; i2++) r2 && 0 === e2[i2] || (r2 && (r2 = false), n2 === i2 ? (t2 += i2 ? ":" : "::", r2 = true) : (t2 += vm(e2[i2], 16), i2 < 7 && (t2 += ":")));
          return "[" + t2 + "]";
        }
        return e2;
      }, qm = {}, zm = em({}, qm, { " ": 1, '"': 1, "<": 1, ">": 1, "`": 1 }), Jm = em({}, zm, { "#": 1, "?": 1, "{": 1, "}": 1 }), Xm = em({}, Jm, { "/": 1, ":": 1, ";": 1, "=": 1, "@": 1, "[": 1, "\\": 1, "]": 1, "^": 1, "|": 1 }), Qm = function(e2, t2) {
        var i2 = nm(e2, 0);
        return i2 > 32 && i2 < 127 && !$E(t2, e2) ? e2 : encodeURIComponent(e2);
      }, Zm = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, $m = function(e2, t2) {
        var i2;
        return 2 === e2.length && gm(km, Sm(e2, 0)) && (":" === (i2 = Sm(e2, 1)) || !t2 && "|" === i2);
      }, ef = function(e2) {
        var t2;
        return e2.length > 1 && $m(wm(e2, 0, 2)) && (2 === e2.length || "/" === (t2 = Sm(e2, 2)) || "\\" === t2 || "?" === t2 || "#" === t2);
      }, tf = function(e2) {
        return "." === e2 || "%2e" === Om(e2);
      }, nf = {}, rf = {}, of = {}, sf = {}, af = {}, cf = {}, df = {}, lf = {}, uf = {}, hf = {}, pf = {}, _f = {}, Ef = {}, mf = {}, ff = {}, Tf = {}, Sf = {}, gf = {}, Rf = {}, vf = {}, Cf = {}, If = function(e2, t2, i2) {
        var n2, r2, o2, s2 = om(e2);
        if (t2) {
          if (r2 = this.parse(s2)) throw new Em(r2);
          this.searchParams = null;
        } else {
          if (void 0 !== i2 && (n2 = new If(i2, true)), r2 = this.parse(s2, null, n2)) throw new Em(r2);
          (o2 = pm(new hm())).bindURL(this), this.searchParams = o2;
        }
      };
      If.prototype = { type: "URL", parse: function(e2, t2, i2) {
        var n2, r2, o2, s2, a2, c2 = this, d2 = t2 || nf, l2 = 0, u2 = "", h2 = false, p2 = false, _2 = false;
        for (e2 = om(e2), t2 || (c2.scheme = "", c2.username = "", c2.password = "", c2.host = null, c2.port = null, c2.path = [], c2.query = null, c2.fragment = null, c2.cannotBeABaseURL = false, e2 = ym(e2, Wm, ""), e2 = ym(e2, Hm, "$1")), e2 = ym(e2, Km, ""), n2 = tm(e2); l2 <= n2.length; ) {
          switch (r2 = n2[l2], d2) {
            case nf:
              if (!r2 || !gm(km, r2)) {
                if (t2) return Dm;
                d2 = of;
                continue;
              }
              u2 += Om(r2), d2 = rf;
              break;
            case rf:
              if (r2 && (gm(Mm, r2) || "+" === r2 || "-" === r2 || "." === r2)) u2 += Om(r2);
              else {
                if (":" !== r2) {
                  if (t2) return Dm;
                  u2 = "", d2 = of, l2 = 0;
                  continue;
                }
                if (t2 && (c2.isSpecial() !== $E(Zm, u2) || "file" === u2 && (c2.includesCredentials() || null !== c2.port) || "file" === c2.scheme && !c2.host)) return;
                if (c2.scheme = u2, t2) return void (c2.isSpecial() && Zm[c2.scheme] === c2.port && (c2.port = null));
                u2 = "", "file" === c2.scheme ? d2 = mf : c2.isSpecial() && i2 && i2.scheme === c2.scheme ? d2 = sf : c2.isSpecial() ? d2 = lf : "/" === n2[l2 + 1] ? (d2 = af, l2++) : (c2.cannotBeABaseURL = true, Im(c2.path, ""), d2 = Rf);
              }
              break;
            case of:
              if (!i2 || i2.cannotBeABaseURL && "#" !== r2) return Dm;
              if (i2.cannotBeABaseURL && "#" === r2) {
                c2.scheme = i2.scheme, c2.path = im(i2.path), c2.query = i2.query, c2.fragment = "", c2.cannotBeABaseURL = true, d2 = Cf;
                break;
              }
              d2 = "file" === i2.scheme ? mf : cf;
              continue;
            case sf:
              if ("/" !== r2 || "/" !== n2[l2 + 1]) {
                d2 = cf;
                continue;
              }
              d2 = uf, l2++;
              break;
            case af:
              if ("/" === r2) {
                d2 = hf;
                break;
              }
              d2 = gf;
              continue;
            case cf:
              if (c2.scheme = i2.scheme, r2 === q_) c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = im(i2.path), c2.query = i2.query;
              else if ("/" === r2 || "\\" === r2 && c2.isSpecial()) d2 = df;
              else if ("?" === r2) c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = im(i2.path), c2.query = "", d2 = vf;
              else {
                if ("#" !== r2) {
                  c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = im(i2.path), c2.path.length--, d2 = gf;
                  continue;
                }
                c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, c2.path = im(i2.path), c2.query = i2.query, c2.fragment = "", d2 = Cf;
              }
              break;
            case df:
              if (!c2.isSpecial() || "/" !== r2 && "\\" !== r2) {
                if ("/" !== r2) {
                  c2.username = i2.username, c2.password = i2.password, c2.host = i2.host, c2.port = i2.port, d2 = gf;
                  continue;
                }
                d2 = hf;
              } else d2 = uf;
              break;
            case lf:
              if (d2 = uf, "/" !== r2 || "/" !== Sm(u2, l2 + 1)) continue;
              l2++;
              break;
            case uf:
              if ("/" !== r2 && "\\" !== r2) {
                d2 = hf;
                continue;
              }
              break;
            case hf:
              if ("@" === r2) {
                h2 && (u2 = "%40" + u2), h2 = true, o2 = tm(u2);
                for (var E2 = 0; E2 < o2.length; E2++) {
                  var m2 = o2[E2];
                  if (":" !== m2 || _2) {
                    var f2 = Qm(m2, Xm);
                    _2 ? c2.password += f2 : c2.username += f2;
                  } else _2 = true;
                }
                u2 = "";
              } else if (r2 === q_ || "/" === r2 || "?" === r2 || "#" === r2 || "\\" === r2 && c2.isSpecial()) {
                if (h2 && "" === u2) return "Invalid authority";
                l2 -= tm(u2).length + 1, u2 = "", d2 = pf;
              } else u2 += r2;
              break;
            case pf:
            case _f:
              if (t2 && "file" === c2.scheme) {
                d2 = Tf;
                continue;
              }
              if (":" !== r2 || p2) {
                if (r2 === q_ || "/" === r2 || "?" === r2 || "#" === r2 || "\\" === r2 && c2.isSpecial()) {
                  if (c2.isSpecial() && "" === u2) return Pm;
                  if (t2 && "" === u2 && (c2.includesCredentials() || null !== c2.port)) return;
                  if (s2 = c2.parseHost(u2)) return s2;
                  if (u2 = "", d2 = Sf, t2) return;
                  continue;
                }
                "[" === r2 ? p2 = true : "]" === r2 && (p2 = false), u2 += r2;
              } else {
                if ("" === u2) return Pm;
                if (s2 = c2.parseHost(u2)) return s2;
                if (u2 = "", d2 = Ef, t2 === _f) return;
              }
              break;
            case Ef:
              if (!gm(Um, r2)) {
                if (r2 === q_ || "/" === r2 || "?" === r2 || "#" === r2 || "\\" === r2 && c2.isSpecial() || t2) {
                  if ("" !== u2) {
                    var T2 = mm(u2, 10);
                    if (T2 > 65535) return Lm;
                    c2.port = c2.isSpecial() && T2 === Zm[c2.scheme] ? null : T2, u2 = "";
                  }
                  if (t2) return;
                  d2 = Sf;
                  continue;
                }
                return Lm;
              }
              u2 += r2;
              break;
            case mf:
              if (c2.scheme = "file", "/" === r2 || "\\" === r2) d2 = ff;
              else {
                if (!i2 || "file" !== i2.scheme) {
                  d2 = gf;
                  continue;
                }
                switch (r2) {
                  case q_:
                    c2.host = i2.host, c2.path = im(i2.path), c2.query = i2.query;
                    break;
                  case "?":
                    c2.host = i2.host, c2.path = im(i2.path), c2.query = "", d2 = vf;
                    break;
                  case "#":
                    c2.host = i2.host, c2.path = im(i2.path), c2.query = i2.query, c2.fragment = "", d2 = Cf;
                    break;
                  default:
                    ef(Rm(im(n2, l2), "")) || (c2.host = i2.host, c2.path = im(i2.path), c2.shortenPath()), d2 = gf;
                    continue;
                }
              }
              break;
            case ff:
              if ("/" === r2 || "\\" === r2) {
                d2 = Tf;
                break;
              }
              i2 && "file" === i2.scheme && !ef(Rm(im(n2, l2), "")) && ($m(i2.path[0], true) ? Im(c2.path, i2.path[0]) : c2.host = i2.host), d2 = gf;
              continue;
            case Tf:
              if (r2 === q_ || "/" === r2 || "\\" === r2 || "?" === r2 || "#" === r2) {
                if (!t2 && $m(u2)) d2 = gf;
                else if ("" === u2) {
                  if (c2.host = "", t2) return;
                  d2 = Sf;
                } else {
                  if (s2 = c2.parseHost(u2)) return s2;
                  if ("localhost" === c2.host && (c2.host = ""), t2) return;
                  u2 = "", d2 = Sf;
                }
                continue;
              }
              u2 += r2;
              break;
            case Sf:
              if (c2.isSpecial()) {
                if (d2 = gf, "/" !== r2 && "\\" !== r2) continue;
              } else if (t2 || "?" !== r2) if (t2 || "#" !== r2) {
                if (r2 !== q_ && (d2 = gf, "/" !== r2)) continue;
              } else c2.fragment = "", d2 = Cf;
              else c2.query = "", d2 = vf;
              break;
            case gf:
              if (r2 === q_ || "/" === r2 || "\\" === r2 && c2.isSpecial() || !t2 && ("?" === r2 || "#" === r2)) {
                if (".." === (a2 = Om(a2 = u2)) || "%2e." === a2 || ".%2e" === a2 || "%2e%2e" === a2 ? (c2.shortenPath(), "/" === r2 || "\\" === r2 && c2.isSpecial() || Im(c2.path, "")) : tf(u2) ? "/" === r2 || "\\" === r2 && c2.isSpecial() || Im(c2.path, "") : ("file" === c2.scheme && !c2.path.length && $m(u2) && (c2.host && (c2.host = ""), u2 = Sm(u2, 0) + ":"), Im(c2.path, u2)), u2 = "", "file" === c2.scheme && (r2 === q_ || "?" === r2 || "#" === r2)) for (; c2.path.length > 1 && "" === c2.path[0]; ) Am(c2.path);
                "?" === r2 ? (c2.query = "", d2 = vf) : "#" === r2 && (c2.fragment = "", d2 = Cf);
              } else u2 += Qm(r2, Jm);
              break;
            case Rf:
              "?" === r2 ? (c2.query = "", d2 = vf) : "#" === r2 ? (c2.fragment = "", d2 = Cf) : r2 !== q_ && (c2.path[0] += Qm(r2, qm));
              break;
            case vf:
              t2 || "#" !== r2 ? r2 !== q_ && ("'" === r2 && c2.isSpecial() ? c2.query += "%27" : c2.query += "#" === r2 ? "%23" : Qm(r2, qm)) : (c2.fragment = "", d2 = Cf);
              break;
            case Cf:
              r2 !== q_ && (c2.fragment += Qm(r2, zm));
          }
          l2++;
        }
      }, parseHost: function(e2) {
        var t2, i2, n2;
        if ("[" === Sm(e2, 0)) {
          if ("]" !== Sm(e2, e2.length - 1)) return Pm;
          if (t2 = function(e3) {
            var t3, i3, n3, r2, o2, s2, a2, c2 = [0, 0, 0, 0, 0, 0, 0, 0], d2 = 0, l2 = null, u2 = 0, h2 = function() {
              return Sm(e3, u2);
            };
            if (":" === h2()) {
              if (":" !== Sm(e3, 1)) return;
              u2 += 2, l2 = ++d2;
            }
            for (; h2(); ) {
              if (8 === d2) return;
              if (":" !== h2()) {
                for (t3 = i3 = 0; i3 < 4 && gm(Bm, h2()); ) t3 = 16 * t3 + mm(h2(), 16), u2++, i3++;
                if ("." === h2()) {
                  if (0 === i3) return;
                  if (u2 -= i3, d2 > 6) return;
                  for (n3 = 0; h2(); ) {
                    if (r2 = null, n3 > 0) {
                      if (!("." === h2() && n3 < 4)) return;
                      u2++;
                    }
                    if (!gm(Um, h2())) return;
                    for (; gm(Um, h2()); ) {
                      if (o2 = mm(h2(), 10), null === r2) r2 = o2;
                      else {
                        if (0 === r2) return;
                        r2 = 10 * r2 + o2;
                      }
                      if (r2 > 255) return;
                      u2++;
                    }
                    c2[d2] = 256 * c2[d2] + r2, 2 != ++n3 && 4 !== n3 || d2++;
                  }
                  if (4 !== n3) return;
                  break;
                }
                if (":" === h2()) {
                  if (u2++, !h2()) return;
                } else if (h2()) return;
                c2[d2++] = t3;
              } else {
                if (null !== l2) return;
                u2++, l2 = ++d2;
              }
            }
            if (null !== l2) for (s2 = d2 - l2, d2 = 7; 0 !== d2 && s2 > 0; ) a2 = c2[d2], c2[d2--] = c2[l2 + s2 - 1], c2[l2 + --s2] = a2;
            else if (8 !== d2) return;
            return c2;
          }(wm(e2, 1, -1)), !t2) return Pm;
          this.host = t2;
        } else if (this.isSpecial()) {
          if (e2 = rm(e2), gm(jm, e2)) return Pm;
          if (t2 = function(e3) {
            var t3, i3, n3, r2, o2, s2, a2, c2 = bm(e3, ".");
            if (c2.length && "" === c2[c2.length - 1] && c2.length--, (t3 = c2.length) > 4) return e3;
            for (i3 = [], n3 = 0; n3 < t3; n3++) {
              if ("" === (r2 = c2[n3])) return e3;
              if (o2 = 10, r2.length > 1 && "0" === Sm(r2, 0) && (o2 = gm(xm, r2) ? 16 : 8, r2 = wm(r2, 8 === o2 ? 1 : 2)), "" === r2) s2 = 0;
              else {
                if (!gm(10 === o2 ? Fm : 8 === o2 ? Vm : Bm, r2)) return e3;
                s2 = mm(r2, o2);
              }
              Im(i3, s2);
            }
            for (n3 = 0; n3 < t3; n3++) if (s2 = i3[n3], n3 === t3 - 1) {
              if (s2 >= Tm(256, 5 - t3)) return null;
            } else if (s2 > 255) return null;
            for (a2 = Cm(i3), n3 = 0; n3 < i3.length; n3++) a2 += i3[n3] * Tm(256, 3 - n3);
            return a2;
          }(e2), null === t2) return Pm;
          this.host = t2;
        } else {
          if (gm(Gm, e2)) return Pm;
          for (t2 = "", i2 = tm(e2), n2 = 0; n2 < i2.length; n2++) t2 += Qm(i2[n2], qm);
          this.host = t2;
        }
      }, cannotHaveUsernamePasswordPort: function() {
        return !this.host || this.cannotBeABaseURL || "file" === this.scheme;
      }, includesCredentials: function() {
        return "" !== this.username || "" !== this.password;
      }, isSpecial: function() {
        return $E(Zm, this.scheme);
      }, shortenPath: function() {
        var e2 = this.path, t2 = e2.length;
        !t2 || "file" === this.scheme && 1 === t2 && $m(e2[0], true) || e2.length--;
      }, serialize: function() {
        var e2 = this, t2 = e2.scheme, i2 = e2.username, n2 = e2.password, r2 = e2.host, o2 = e2.port, s2 = e2.path, a2 = e2.query, c2 = e2.fragment, d2 = t2 + ":";
        return null !== r2 ? (d2 += "//", e2.includesCredentials() && (d2 += i2 + (n2 ? ":" + n2 : "") + "@"), d2 += Ym(r2), null !== o2 && (d2 += ":" + o2)) : "file" === t2 && (d2 += "//"), d2 += e2.cannotBeABaseURL ? s2[0] : s2.length ? "/" + Rm(s2, "/") : "", null !== a2 && (d2 += "?" + a2), null !== c2 && (d2 += "#" + c2), d2;
      }, setHref: function(e2) {
        var t2 = this.parse(e2);
        if (t2) throw new Em(t2);
        this.searchParams.update();
      }, getOrigin: function() {
        var e2 = this.scheme, t2 = this.port;
        if ("blob" === e2) try {
          return new yf(e2.path[0]).origin;
        } catch (e3) {
          return "null";
        }
        return "file" !== e2 && this.isSpecial() ? e2 + "://" + Ym(this.host) + (null !== t2 ? ":" + t2 : "") : "null";
      }, getProtocol: function() {
        return this.scheme + ":";
      }, setProtocol: function(e2) {
        this.parse(om(e2) + ":", nf);
      }, getUsername: function() {
        return this.username;
      }, setUsername: function(e2) {
        var t2 = tm(om(e2));
        if (!this.cannotHaveUsernamePasswordPort()) {
          this.username = "";
          for (var i2 = 0; i2 < t2.length; i2++) this.username += Qm(t2[i2], Xm);
        }
      }, getPassword: function() {
        return this.password;
      }, setPassword: function(e2) {
        var t2 = tm(om(e2));
        if (!this.cannotHaveUsernamePasswordPort()) {
          this.password = "";
          for (var i2 = 0; i2 < t2.length; i2++) this.password += Qm(t2[i2], Xm);
        }
      }, getHost: function() {
        var e2 = this.host, t2 = this.port;
        return null === e2 ? "" : null === t2 ? Ym(e2) : Ym(e2) + ":" + t2;
      }, setHost: function(e2) {
        this.cannotBeABaseURL || this.parse(e2, pf);
      }, getHostname: function() {
        var e2 = this.host;
        return null === e2 ? "" : Ym(e2);
      }, setHostname: function(e2) {
        this.cannotBeABaseURL || this.parse(e2, _f);
      }, getPort: function() {
        var e2 = this.port;
        return null === e2 ? "" : om(e2);
      }, setPort: function(e2) {
        this.cannotHaveUsernamePasswordPort() || ("" === (e2 = om(e2)) ? this.port = null : this.parse(e2, Ef));
      }, getPathname: function() {
        var e2 = this.path;
        return this.cannotBeABaseURL ? e2[0] : e2.length ? "/" + Rm(e2, "/") : "";
      }, setPathname: function(e2) {
        this.cannotBeABaseURL || (this.path = [], this.parse(e2, Sf));
      }, getSearch: function() {
        var e2 = this.query;
        return e2 ? "?" + e2 : "";
      }, setSearch: function(e2) {
        "" === (e2 = om(e2)) ? this.query = null : ("?" === Sm(e2, 0) && (e2 = wm(e2, 1)), this.query = "", this.parse(e2, vf)), this.searchParams.update();
      }, getSearchParams: function() {
        return this.searchParams.facade;
      }, getHash: function() {
        var e2 = this.fragment;
        return e2 ? "#" + e2 : "";
      }, setHash: function(e2) {
        "" !== (e2 = om(e2)) ? ("#" === Sm(e2, 0) && (e2 = wm(e2, 1)), this.fragment = "", this.parse(e2, Cf)) : this.fragment = null;
      }, update: function() {
        this.query = this.searchParams.serialize() || null;
      } };
      var yf = function(e2) {
        var t2 = ZE(this, Af), i2 = am(arguments.length, 1) > 1 ? arguments[1] : void 0, n2 = lm(t2, new If(e2, false, i2));
        KE || (t2.href = n2.serialize(), t2.origin = n2.getOrigin(), t2.protocol = n2.getProtocol(), t2.username = n2.getUsername(), t2.password = n2.getPassword(), t2.host = n2.getHost(), t2.hostname = n2.getHostname(), t2.port = n2.getPort(), t2.pathname = n2.getPathname(), t2.search = n2.getSearch(), t2.searchParams = n2.getSearchParams(), t2.hash = n2.getHash());
      }, Af = yf.prototype, bf = function(e2, t2) {
        return { get: function() {
          return um(this)[e2]();
        }, set: t2 && function(e3) {
          return um(this)[t2](e3);
        }, configurable: true, enumerable: true };
      };
      if (KE && (QE(Af, "href", bf("serialize", "setHref")), QE(Af, "origin", bf("getOrigin")), QE(Af, "protocol", bf("getProtocol", "setProtocol")), QE(Af, "username", bf("getUsername", "setUsername")), QE(Af, "password", bf("getPassword", "setPassword")), QE(Af, "host", bf("getHost", "setHost")), QE(Af, "hostname", bf("getHostname", "setHostname")), QE(Af, "port", bf("getPort", "setPort")), QE(Af, "pathname", bf("getPathname", "setPathname")), QE(Af, "search", bf("getSearch", "setSearch")), QE(Af, "searchParams", bf("getSearchParams")), QE(Af, "hash", bf("getHash", "setHash"))), XE(Af, "toJSON", function() {
        return um(this).serialize();
      }, { enumerable: true }), XE(Af, "toString", function() {
        return um(this).serialize();
      }, { enumerable: true }), _m) {
        var wf = _m.createObjectURL, Of = _m.revokeObjectURL;
        wf && XE(yf, "createObjectURL", zE(wf, _m)), Of && XE(yf, "revokeObjectURL", zE(Of, _m));
      }
      sm(yf, "URL"), HE({ global: true, constructor: true, forced: !YE, sham: !KE }, { URL: yf });
      var Nf = Ni, Df = n, Pf = dd, Lf = Sn, kf = Cp, Mf = re("URL"), Uf = kf && Df(function() {
        Mf.canParse();
      }), xf = Df(function() {
        return 1 !== Mf.canParse.length;
      });
      Nf({ target: "URL", stat: true, forced: !Uf || xf }, { canParse: function(e2) {
        var t2 = Pf(arguments.length, 1), i2 = Lf(e2), n2 = t2 < 2 || void 0 === arguments[1] ? void 0 : Lf(arguments[1]);
        try {
          return !!new Mf(i2, n2);
        } catch (e3) {
          return false;
        }
      } });
      var Vf = Ni, Ff = dd, Bf = Sn, jf = Cp, Gf = re("URL");
      Vf({ target: "URL", stat: true, forced: !jf }, { parse: function(e2) {
        var t2 = Ff(arguments.length, 1), i2 = Bf(e2), n2 = t2 < 2 || void 0 === arguments[1] ? void 0 : Bf(arguments[1]);
        try {
          return new Gf(i2, n2);
        } catch (e3) {
          return null;
        }
      } });
      var Wf = i($.URL);
      let Hf = true, Kf = true;
      function Yf(e2, t2, i2) {
        const n2 = e2.match(t2);
        return n2 && n2.length >= i2 && parseInt(n2[i2], 10);
      }
      function qf(e2, t2, i2) {
        if (!e2.RTCPeerConnection) return;
        const n2 = e2.RTCPeerConnection.prototype, r2 = n2.addEventListener;
        n2.addEventListener = function(e3, n3) {
          if (e3 !== t2) return r2.apply(this, arguments);
          const o3 = (e4) => {
            const t3 = i2(e4);
            t3 && (n3.handleEvent ? n3.handleEvent(t3) : n3(t3));
          };
          return this._eventMap = this._eventMap || {}, this._eventMap[t2] || (this._eventMap[t2] = /* @__PURE__ */ new Map()), this._eventMap[t2].set(n3, o3), r2.apply(this, [e3, o3]);
        };
        const o2 = n2.removeEventListener;
        n2.removeEventListener = function(e3, i3) {
          if (e3 !== t2 || !this._eventMap || !this._eventMap[t2]) return o2.apply(this, arguments);
          if (!this._eventMap[t2].has(i3)) return o2.apply(this, arguments);
          const n3 = this._eventMap[t2].get(i3);
          return this._eventMap[t2].delete(i3), 0 === this._eventMap[t2].size && delete this._eventMap[t2], 0 === Object.keys(this._eventMap).length && delete this._eventMap, o2.apply(this, [e3, n3]);
        }, Object.defineProperty(n2, "on" + t2, { get() {
          return this["_on" + t2];
        }, set(e3) {
          this["_on" + t2] && (this.removeEventListener(t2, this["_on" + t2]), delete this["_on" + t2]), e3 && this.addEventListener(t2, this["_on" + t2] = e3);
        }, enumerable: true, configurable: true });
      }
      function zf(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (Hf = e2, e2 ? "adapter.js logging disabled" : "adapter.js logging enabled");
      }
      function Jf(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (Kf = !e2, "adapter.js deprecation warnings " + (e2 ? "disabled" : "enabled"));
      }
      function Xf() {
        if ("object" == typeof window) {
          if (Hf) return;
          "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
        }
      }
      function Qf(e2, t2) {
        Kf && console.warn(e2 + " is deprecated, please use " + t2 + " instead.");
      }
      function Zf(e2) {
        return "[object Object]" === Object.prototype.toString.call(e2);
      }
      function $f(e2) {
        var t2;
        return Zf(e2) ? rr(t2 = Object.keys(e2)).call(t2, function(t3, i2) {
          const n2 = Zf(e2[i2]), r2 = n2 ? $f(e2[i2]) : e2[i2], o2 = n2 && !Object.keys(r2).length;
          return void 0 === r2 || o2 ? t3 : Object.assign(t3, { [i2]: r2 });
        }, {}) : e2;
      }
      function eT(e2, t2, i2) {
        t2 && !i2.has(t2.id) && (i2.set(t2.id, t2), Object.keys(t2).forEach((n2) => {
          n2.endsWith("Id") ? eT(e2, e2.get(t2[n2]), i2) : n2.endsWith("Ids") && t2[n2].forEach((t3) => {
            eT(e2, e2.get(t3), i2);
          });
        }));
      }
      function tT(e2, t2, i2) {
        const n2 = i2 ? "outbound-rtp" : "inbound-rtp", r2 = /* @__PURE__ */ new Map();
        if (null === t2) return r2;
        const o2 = [];
        return e2.forEach((e3) => {
          "track" === e3.type && e3.trackIdentifier === t2.id && o2.push(e3);
        }), o2.forEach((t3) => {
          e2.forEach((i3) => {
            i3.type === n2 && i3.trackId === t3.id && eT(e2, i3, r2);
          });
        }), r2;
      }
      const iT = Xf;
      function nT(e2, t2) {
        const i2 = e2 && e2.navigator;
        if (!i2.mediaDevices) return;
        const n2 = function(e3) {
          if ("object" != typeof e3 || e3.mandatory || e3.optional) return e3;
          const t3 = {};
          return Object.keys(e3).forEach((i3) => {
            if ("require" === i3 || "advanced" === i3 || "mediaSource" === i3) return;
            const n3 = "object" == typeof e3[i3] ? e3[i3] : { ideal: e3[i3] };
            void 0 !== n3.exact && "number" == typeof n3.exact && (n3.min = n3.max = n3.exact);
            const r3 = function(e4, t4) {
              return e4 ? e4 + t4.charAt(0).toUpperCase() + t4.slice(1) : "deviceId" === t4 ? "sourceId" : t4;
            };
            if (void 0 !== n3.ideal) {
              t3.optional = t3.optional || [];
              let e4 = {};
              "number" == typeof n3.ideal ? (e4[r3("min", i3)] = n3.ideal, t3.optional.push(e4), e4 = {}, e4[r3("max", i3)] = n3.ideal, t3.optional.push(e4)) : (e4[r3("", i3)] = n3.ideal, t3.optional.push(e4));
            }
            void 0 !== n3.exact && "number" != typeof n3.exact ? (t3.mandatory = t3.mandatory || {}, t3.mandatory[r3("", i3)] = n3.exact) : ["min", "max"].forEach((e4) => {
              void 0 !== n3[e4] && (t3.mandatory = t3.mandatory || {}, t3.mandatory[r3(e4, i3)] = n3[e4]);
            });
          }), e3.advanced && (t3.optional = (t3.optional || []).concat(e3.advanced)), t3;
        }, r2 = function(e3, r3) {
          if (t2.version >= 61) return r3(e3);
          if ((e3 = JSON.parse(JSON.stringify(e3))) && "object" == typeof e3.audio) {
            const t3 = function(e4, t4, i3) {
              t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
            };
            t3((e3 = JSON.parse(JSON.stringify(e3))).audio, "autoGainControl", "googAutoGainControl"), t3(e3.audio, "noiseSuppression", "googNoiseSuppression"), e3.audio = n2(e3.audio);
          }
          if (e3 && "object" == typeof e3.video) {
            let o3 = e3.video.facingMode;
            o3 = o3 && ("object" == typeof o3 ? o3 : { ideal: o3 });
            const s2 = t2.version < 66;
            if (o3 && ("user" === o3.exact || "environment" === o3.exact || "user" === o3.ideal || "environment" === o3.ideal) && (!i2.mediaDevices.getSupportedConstraints || !i2.mediaDevices.getSupportedConstraints().facingMode || s2)) {
              let t3;
              if (delete e3.video.facingMode, "environment" === o3.exact || "environment" === o3.ideal ? t3 = ["back", "rear"] : "user" !== o3.exact && "user" !== o3.ideal || (t3 = ["front"]), t3) return i2.mediaDevices.enumerateDevices().then((i3) => {
                let s3 = (i3 = i3.filter((e4) => "videoinput" === e4.kind)).find((e4) => t3.some((t4) => {
                  var i4;
                  return kn(i4 = e4.label.toLowerCase()).call(i4, t4);
                }));
                return !s3 && i3.length && kn(t3).call(t3, "back") && (s3 = i3[i3.length - 1]), s3 && (e3.video.deviceId = o3.exact ? { exact: s3.deviceId } : { ideal: s3.deviceId }), e3.video = n2(e3.video), iT("chrome: " + JSON.stringify(e3)), r3(e3);
              });
            }
            e3.video = n2(e3.video);
          }
          return iT("chrome: " + JSON.stringify(e3)), r3(e3);
        }, o2 = function(e3) {
          return t2.version >= 64 ? e3 : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e3.name] || e3.name, message: e3.message, constraint: e3.constraint || e3.constraintName, toString() {
            return this.name + (this.message && ": ") + this.message;
          } };
        };
        if (i2.getUserMedia = (function(e3, t3, n3) {
          r2(e3, (e4) => {
            i2.webkitGetUserMedia(e4, t3, (e5) => {
              n3 && n3(o2(e5));
            });
          });
        }).bind(i2), i2.mediaDevices.getUserMedia) {
          const e3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          i2.mediaDevices.getUserMedia = function(t3) {
            return r2(t3, (t4) => e3(t4).then((e4) => {
              if (t4.audio && !e4.getAudioTracks().length || t4.video && !e4.getVideoTracks().length) throw e4.getTracks().forEach((e5) => {
                e5.stop();
              }), new DOMException("", "NotFoundError");
              return e4;
            }, (e4) => np.reject(o2(e4))));
          };
        }
      }
      function rT(e2) {
        e2.MediaStream = e2.MediaStream || e2.webkitMediaStream;
      }
      function oT(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("ontrack" in e2.RTCPeerConnection.prototype)) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "ontrack", { get() {
            return this._ontrack;
          }, set(e3) {
            this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e3);
          }, enumerable: true, configurable: true });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            return this._ontrackpoly || (this._ontrackpoly = (t3) => {
              t3.stream.addEventListener("addtrack", (i2) => {
                let n2;
                n2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.track.id) : { track: i2.track };
                const r2 = new Event("track");
                r2.track = i2.track, r2.receiver = n2, r2.transceiver = { receiver: n2 }, r2.streams = [t3.stream], this.dispatchEvent(r2);
              }), t3.stream.getTracks().forEach((i2) => {
                let n2;
                n2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.id) : { track: i2 };
                const r2 = new Event("track");
                r2.track = i2, r2.receiver = n2, r2.transceiver = { receiver: n2 }, r2.streams = [t3.stream], this.dispatchEvent(r2);
              });
            }, this.addEventListener("addstream", this._ontrackpoly)), t2.apply(this, arguments);
          };
        } else qf(e2, "track", (e3) => (e3.transceiver || Object.defineProperty(e3, "transceiver", { value: { receiver: e3.receiver } }), e3));
      }
      function sT(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("getSenders" in e2.RTCPeerConnection.prototype) && "createDTMFSender" in e2.RTCPeerConnection.prototype) {
          const t2 = function(e3, t3) {
            return { track: t3, get dtmf() {
              return void 0 === this._dtmf && ("audio" === t3.kind ? this._dtmf = e3.createDTMFSender(t3) : this._dtmf = null), this._dtmf;
            }, _pc: e3 };
          };
          if (!e2.RTCPeerConnection.prototype.getSenders) {
            e2.RTCPeerConnection.prototype.getSenders = function() {
              return this._senders = this._senders || [], this._senders.slice();
            };
            const i3 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addTrack = function(e3, n4) {
              let r2 = i3.apply(this, arguments);
              return r2 || (r2 = t2(this, e3), this._senders.push(r2)), r2;
            };
            const n3 = e2.RTCPeerConnection.prototype.removeTrack;
            e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
              n3.apply(this, arguments);
              const t3 = this._senders.indexOf(e3);
              -1 !== t3 && this._senders.splice(t3, 1);
            };
          }
          const i2 = e2.RTCPeerConnection.prototype.addStream;
          e2.RTCPeerConnection.prototype.addStream = function(e3) {
            this._senders = this._senders || [], i2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              this._senders.push(t2(this, e4));
            });
          };
          const n2 = e2.RTCPeerConnection.prototype.removeStream;
          e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._senders = this._senders || [], n2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              const t3 = this._senders.find((t4) => t4.track === e4);
              t3 && this._senders.splice(this._senders.indexOf(t3), 1);
            });
          };
        } else if ("object" == typeof e2 && e2.RTCPeerConnection && "getSenders" in e2.RTCPeerConnection.prototype && "createDTMFSender" in e2.RTCPeerConnection.prototype && e2.RTCRtpSender && !("dtmf" in e2.RTCRtpSender.prototype)) {
          const t2 = e2.RTCPeerConnection.prototype.getSenders;
          e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t2.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }, Object.defineProperty(e2.RTCRtpSender.prototype, "dtmf", { get() {
            return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
          } });
        }
      }
      function aT(e2) {
        if (!e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, i2, n2] = arguments;
          if (arguments.length > 0 && "function" == typeof e3) return t2.apply(this, arguments);
          if (0 === t2.length && (0 === arguments.length || "function" != typeof e3)) return t2.apply(this, []);
          const r2 = function(e4) {
            const t3 = {};
            return e4.result().forEach((e5) => {
              const i3 = { id: e5.id, timestamp: e5.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[e5.type] || e5.type };
              e5.names().forEach((t4) => {
                i3[t4] = e5.stat(t4);
              }), t3[i3.id] = i3;
            }), t3;
          }, o2 = function(e4) {
            return new Map(Object.keys(e4).map((t3) => [t3, e4[t3]]));
          };
          if (arguments.length >= 2) {
            const n3 = function(e4) {
              i2(o2(r2(e4)));
            };
            return t2.apply(this, [n3, e3]);
          }
          return new np((e4, i3) => {
            t2.apply(this, [function(t3) {
              e4(o2(r2(t3)));
            }, i3]);
          }).then(i2, n2);
        };
      }
      function cT(e2) {
        if (!("object" == typeof e2 && e2.RTCPeerConnection && e2.RTCRtpSender && e2.RTCRtpReceiver)) return;
        if (!("getStats" in e2.RTCRtpSender.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getSenders;
          t3 && (e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          });
          const i2 = e2.RTCPeerConnection.prototype.addTrack;
          i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
            const e3 = i2.apply(this, arguments);
            return e3._pc = this, e3;
          }), e2.RTCRtpSender.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => tT(t4, e3.track, true));
          };
        }
        if (!("getStats" in e2.RTCRtpReceiver.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getReceivers;
          t3 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }), qf(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => tT(t4, e3.track, false));
          };
        }
        if (!("getStats" in e2.RTCRtpSender.prototype) || !("getStats" in e2.RTCRtpReceiver.prototype)) return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          if (arguments.length > 0 && arguments[0] instanceof e2.MediaStreamTrack) {
            const e3 = arguments[0];
            let t3, i2, n2;
            return this.getSenders().forEach((i3) => {
              i3.track === e3 && (t3 ? n2 = true : t3 = i3);
            }), this.getReceivers().forEach((t4) => (t4.track === e3 && (i2 ? n2 = true : i2 = t4), t4.track === e3)), n2 || t3 && i2 ? np.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t3 ? t3.getStats() : i2 ? i2.getStats() : np.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
          }
          return t2.apply(this, arguments);
        };
      }
      function dT(e2) {
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map((e3) => this._shimmedLocalStreams[e3][0]);
        };
        const t2 = e2.RTCPeerConnection.prototype.addTrack;
        e2.RTCPeerConnection.prototype.addTrack = function(e3, i3) {
          if (!i3) return t2.apply(this, arguments);
          this._shimmedLocalStreams = this._shimmedLocalStreams || {};
          const n3 = t2.apply(this, arguments);
          return this._shimmedLocalStreams[i3.id] ? -1 === this._shimmedLocalStreams[i3.id].indexOf(n3) && this._shimmedLocalStreams[i3.id].push(n3) : this._shimmedLocalStreams[i3.id] = [i3, n3], n3;
        };
        const i2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(e3) {
          this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3.getTracks().forEach((e4) => {
            const t4 = this.getSenders().find((t5) => t5.track === e4);
            if (t4) throw new DOMException("Track already exists.", "InvalidAccessError");
          });
          const t3 = this.getSenders();
          i2.apply(this, arguments);
          const n3 = this.getSenders().filter((e4) => -1 === t3.indexOf(e4));
          this._shimmedLocalStreams[e3.id] = [e3].concat(n3);
        };
        const n2 = e2.RTCPeerConnection.prototype.removeStream;
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e3.id], n2.apply(this, arguments);
        };
        const r2 = e2.RTCPeerConnection.prototype.removeTrack;
        e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3 && Object.keys(this._shimmedLocalStreams).forEach((t3) => {
            const i3 = this._shimmedLocalStreams[t3].indexOf(e3);
            -1 !== i3 && this._shimmedLocalStreams[t3].splice(i3, 1), 1 === this._shimmedLocalStreams[t3].length && delete this._shimmedLocalStreams[t3];
          }), r2.apply(this, arguments);
        };
      }
      function lT(e2, t2) {
        if (!e2.RTCPeerConnection) return;
        if (e2.RTCPeerConnection.prototype.addTrack && t2.version >= 65) return dT(e2);
        const i2 = e2.RTCPeerConnection.prototype.getLocalStreams;
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          const e3 = i2.apply(this);
          return this._reverseStreams = this._reverseStreams || {}, e3.map((e4) => this._reverseStreams[e4.id]);
        };
        const n2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(t3) {
          if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t3.getTracks().forEach((e3) => {
            const t4 = this.getSenders().find((t5) => t5.track === e3);
            if (t4) throw new DOMException("Track already exists.", "InvalidAccessError");
          }), !this._reverseStreams[t3.id]) {
            const i3 = new e2.MediaStream(t3.getTracks());
            this._streams[t3.id] = i3, this._reverseStreams[i3.id] = t3, t3 = i3;
          }
          n2.apply(this, [t3]);
        };
        const r2 = e2.RTCPeerConnection.prototype.removeStream;
        function o2(e3, t3) {
          let i3 = t3.sdp;
          return Object.keys(e3._reverseStreams || []).forEach((t4) => {
            const n3 = e3._reverseStreams[t4], r3 = e3._streams[n3.id];
            i3 = i3.replace(new RegExp(r3.id, "g"), n3.id);
          }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
        }
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, r2.apply(this, [this._streams[e3.id] || e3]), delete this._reverseStreams[this._streams[e3.id] ? this._streams[e3.id].id : e3.id], delete this._streams[e3.id];
        }, e2.RTCPeerConnection.prototype.addTrack = function(t3, i3) {
          if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          const n3 = [].slice.call(arguments, 1);
          if (1 !== n3.length || !n3[0].getTracks().find((e3) => e3 === t3)) throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
          const r3 = this.getSenders().find((e3) => e3.track === t3);
          if (r3) throw new DOMException("Track already exists.", "InvalidAccessError");
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
          const o3 = this._streams[i3.id];
          if (o3) o3.addTrack(t3), np.resolve().then(() => {
            this.dispatchEvent(new Event("negotiationneeded"));
          });
          else {
            const n4 = new e2.MediaStream([t3]);
            this._streams[i3.id] = n4, this._reverseStreams[n4.id] = i3, this.addStream(n4);
          }
          return this.getSenders().find((e3) => e3.track === t3);
        }, ["createOffer", "createAnswer"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], n3 = { [t3]() {
            const e3 = arguments;
            return arguments.length && "function" == typeof arguments[0] ? i3.apply(this, [(t4) => {
              const i4 = o2(this, t4);
              e3[0].apply(null, [i4]);
            }, (t4) => {
              e3[1] && e3[1].apply(null, t4);
            }, arguments[2]]) : i3.apply(this, arguments).then((e4) => o2(this, e4));
          } };
          e2.RTCPeerConnection.prototype[t3] = n3[t3];
        });
        const s2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          return arguments.length && arguments[0].type ? (arguments[0] = function(e3, t3) {
            let i3 = t3.sdp;
            return Object.keys(e3._reverseStreams || []).forEach((t4) => {
              const n3 = e3._reverseStreams[t4], r3 = e3._streams[n3.id];
              i3 = i3.replace(new RegExp(n3.id, "g"), r3.id);
            }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
          }(this, arguments[0]), s2.apply(this, arguments)) : s2.apply(this, arguments);
        };
        const a2 = Object.getOwnPropertyDescriptor(e2.RTCPeerConnection.prototype, "localDescription");
        Object.defineProperty(e2.RTCPeerConnection.prototype, "localDescription", { get() {
          const e3 = a2.get.apply(this);
          return "" === e3.type ? e3 : o2(this, e3);
        } }), e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          if (!e3._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
          if (!(e3._pc === this)) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
          let t3;
          this._streams = this._streams || {}, Object.keys(this._streams).forEach((i3) => {
            this._streams[i3].getTracks().find((t4) => e3.track === t4) && (t3 = this._streams[i3]);
          }), t3 && (1 === t3.getTracks().length ? this.removeStream(this._reverseStreams[t3.id]) : t3.removeTrack(e3.track), this.dispatchEvent(new Event("negotiationneeded")));
        };
      }
      function uT(e2, t2) {
        !e2.RTCPeerConnection && e2.webkitRTCPeerConnection && (e2.RTCPeerConnection = e2.webkitRTCPeerConnection), e2.RTCPeerConnection && t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i2 = e2.RTCPeerConnection.prototype[t3], n2 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i2.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = n2[t3];
        });
      }
      function hT(e2, t2) {
        qf(e2, "negotiationneeded", (e3) => {
          const i2 = e3.target;
          if (!(t2.version < 72 || i2.getConfiguration && "plan-b" === i2.getConfiguration().sdpSemantics) || "stable" === i2.signalingState) return e3;
        });
      }
      var pT = Object.freeze({ __proto__: null, fixNegotiationNeeded: hT, shimAddTrackRemoveTrack: lT, shimAddTrackRemoveTrackWithNative: dT, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && ("function" == typeof t2 ? e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          return t2(i2).then((t3) => {
            const n2 = i2.video && i2.video.width, r2 = i2.video && i2.video.height, o2 = i2.video && i2.video.frameRate;
            return i2.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: t3, maxFrameRate: o2 || 3 } }, n2 && (i2.video.mandatory.maxWidth = n2), r2 && (i2.video.mandatory.maxHeight = r2), e2.navigator.mediaDevices.getUserMedia(i2);
          });
        } : console.error("shimGetDisplayMedia: getSourceId argument is not a function"));
      }, shimGetSendersWithDtmf: sT, shimGetStats: aT, shimGetUserMedia: nT, shimMediaStream: rT, shimOnTrack: oT, shimPeerConnection: uT, shimSenderReceiverGetStats: cT });
      function _T(e2, t2) {
        const i2 = e2 && e2.navigator, n2 = e2 && e2.MediaStreamTrack;
        if (i2.getUserMedia = function(e3, t3, n3) {
          Qf("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), i2.mediaDevices.getUserMedia(e3).then(t3, n3);
        }, !(t2.version > 55 && "autoGainControl" in i2.mediaDevices.getSupportedConstraints())) {
          const e3 = function(e4, t4, i3) {
            t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
          }, t3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          if (i2.mediaDevices.getUserMedia = function(i3) {
            return "object" == typeof i3 && "object" == typeof i3.audio && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3.audio, "autoGainControl", "mozAutoGainControl"), e3(i3.audio, "noiseSuppression", "mozNoiseSuppression")), t3(i3);
          }, n2 && n2.prototype.getSettings) {
            const t4 = n2.prototype.getSettings;
            n2.prototype.getSettings = function() {
              const i3 = t4.apply(this, arguments);
              return e3(i3, "mozAutoGainControl", "autoGainControl"), e3(i3, "mozNoiseSuppression", "noiseSuppression"), i3;
            };
          }
          if (n2 && n2.prototype.applyConstraints) {
            const t4 = n2.prototype.applyConstraints;
            n2.prototype.applyConstraints = function(i3) {
              return "audio" === this.kind && "object" == typeof i3 && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3, "autoGainControl", "mozAutoGainControl"), e3(i3, "noiseSuppression", "mozNoiseSuppression")), t4.apply(this, [i3]);
            };
          }
        }
      }
      function ET(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function mT(e2, t2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection && !e2.mozRTCPeerConnection) return;
        !e2.RTCPeerConnection && e2.mozRTCPeerConnection && (e2.RTCPeerConnection = e2.mozRTCPeerConnection), t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], n3 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i3.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = n3[t3];
        });
        const i2 = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, n2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, r2, o2] = arguments;
          return n2.apply(this, [e3 || null]).then((e4) => {
            if (t2.version < 53 && !r2) try {
              e4.forEach((e5) => {
                e5.type = i2[e5.type] || e5.type;
              });
            } catch (t3) {
              if ("TypeError" !== t3.name) throw t3;
              e4.forEach((t4, n3) => {
                e4.set(n3, Object.assign({}, t4, { type: i2[t4.type] || t4.type }));
              });
            }
            return e4;
          }).then(r2, o2);
        };
      }
      function fT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender) return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpSender.prototype) return;
        const t2 = e2.RTCPeerConnection.prototype.getSenders;
        t2 && (e2.RTCPeerConnection.prototype.getSenders = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        });
        const i2 = e2.RTCPeerConnection.prototype.addTrack;
        i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
          const e3 = i2.apply(this, arguments);
          return e3._pc = this, e3;
        }), e2.RTCRtpSender.prototype.getStats = function() {
          return this.track ? this._pc.getStats(this.track) : np.resolve(/* @__PURE__ */ new Map());
        };
      }
      function TT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender) return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpReceiver.prototype) return;
        const t2 = e2.RTCPeerConnection.prototype.getReceivers;
        t2 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        }), qf(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
          return this._pc.getStats(this.track);
        };
      }
      function ST(e2) {
        e2.RTCPeerConnection && !("removeStream" in e2.RTCPeerConnection.prototype) && (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          Qf("removeStream", "removeTrack"), this.getSenders().forEach((t2) => {
            var i2;
            t2.track && kn(i2 = e3.getTracks()).call(i2, t2.track) && this.removeTrack(t2);
          });
        });
      }
      function gT(e2) {
        e2.DataChannel && !e2.RTCDataChannel && (e2.RTCDataChannel = e2.DataChannel);
      }
      function RT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection.prototype.addTransceiver;
        t2 && (e2.RTCPeerConnection.prototype.addTransceiver = function() {
          this.setParametersPromises = [];
          let e3 = arguments[1] && arguments[1].sendEncodings;
          void 0 === e3 && (e3 = []), e3 = [...e3];
          const i2 = e3.length > 0;
          i2 && e3.forEach((e4) => {
            if ("rid" in e4) {
              if (!/^[a-z0-9]{0,16}$/i.test(e4.rid)) throw new TypeError("Invalid RID value provided.");
            }
            if ("scaleResolutionDownBy" in e4 && !(parseFloat(e4.scaleResolutionDownBy) >= 1)) throw new RangeError("scale_resolution_down_by must be >= 1.0");
            if ("maxFramerate" in e4 && !(parseFloat(e4.maxFramerate) >= 0)) throw new RangeError("max_framerate must be >= 0.0");
          });
          const n2 = t2.apply(this, arguments);
          if (i2) {
            const { sender: t3 } = n2, i3 = t3.getParameters();
            (!("encodings" in i3) || 1 === i3.encodings.length && 0 === Object.keys(i3.encodings[0]).length) && (i3.encodings = e3, t3.sendEncodings = e3, this.setParametersPromises.push(t3.setParameters(i3).then(() => {
              delete t3.sendEncodings;
            }).catch(() => {
              delete t3.sendEncodings;
            })));
          }
          return n2;
        });
      }
      function vT(e2) {
        if ("object" != typeof e2 || !e2.RTCRtpSender) return;
        const t2 = e2.RTCRtpSender.prototype.getParameters;
        t2 && (e2.RTCRtpSender.prototype.getParameters = function() {
          const e3 = t2.apply(this, arguments);
          return "encodings" in e3 || (e3.encodings = [].concat(this.sendEncodings || [{}])), e3;
        });
      }
      function CT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? np.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      function IT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection.prototype.createAnswer;
        e2.RTCPeerConnection.prototype.createAnswer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? np.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      var yT = Object.freeze({ __proto__: null, shimAddTransceiver: RT, shimCreateAnswer: IT, shimCreateOffer: CT, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && (e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          if (!i2 || !i2.video) {
            const e3 = new DOMException("getDisplayMedia without video constraints is undefined");
            return e3.name = "NotFoundError", e3.code = 8, np.reject(e3);
          }
          return true === i2.video ? i2.video = { mediaSource: t2 } : i2.video.mediaSource = t2, e2.navigator.mediaDevices.getUserMedia(i2);
        });
      }, shimGetParameters: vT, shimGetUserMedia: _T, shimOnTrack: ET, shimPeerConnection: mT, shimRTCDataChannel: gT, shimReceiverGetStats: TT, shimRemoveStream: ST, shimSenderGetStats: fT });
      function AT(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection) {
          if ("getLocalStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getLocalStreams = function() {
            return this._localStreams || (this._localStreams = []), this._localStreams;
          }), !("addStream" in e2.RTCPeerConnection.prototype)) {
            const t2 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addStream = function(e3) {
              var i2;
              this._localStreams || (this._localStreams = []), kn(i2 = this._localStreams).call(i2, e3) || this._localStreams.push(e3), e3.getAudioTracks().forEach((i3) => t2.call(this, i3, e3)), e3.getVideoTracks().forEach((i3) => t2.call(this, i3, e3));
            }, e2.RTCPeerConnection.prototype.addTrack = function(e3) {
              for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), r2 = 1; r2 < i2; r2++) n2[r2 - 1] = arguments[r2];
              return n2 && n2.forEach((e4) => {
                var t3;
                this._localStreams ? kn(t3 = this._localStreams).call(t3, e4) || this._localStreams.push(e4) : this._localStreams = [e4];
              }), t2.apply(this, arguments);
            };
          }
          "removeStream" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._localStreams || (this._localStreams = []);
            const t2 = this._localStreams.indexOf(e3);
            if (-1 === t2) return;
            this._localStreams.splice(t2, 1);
            const i2 = e3.getTracks();
            this.getSenders().forEach((e4) => {
              kn(i2).call(i2, e4.track) && this.removeTrack(e4);
            });
          });
        }
      }
      function bT(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && ("getRemoteStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getRemoteStreams = function() {
          return this._remoteStreams ? this._remoteStreams : [];
        }), !("onaddstream" in e2.RTCPeerConnection.prototype))) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "onaddstream", { get() {
            return this._onaddstream;
          }, set(e3) {
            this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e3), this.addEventListener("track", this._onaddstreampoly = (e4) => {
              e4.streams.forEach((e5) => {
                var t3;
                if (this._remoteStreams || (this._remoteStreams = []), kn(t3 = this._remoteStreams).call(t3, e5)) return;
                this._remoteStreams.push(e5);
                const i2 = new Event("addstream");
                i2.stream = e5, this.dispatchEvent(i2);
              });
            });
          } });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            const e3 = this;
            return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(t3) {
              t3.streams.forEach((t4) => {
                if (e3._remoteStreams || (e3._remoteStreams = []), e3._remoteStreams.indexOf(t4) >= 0) return;
                e3._remoteStreams.push(t4);
                const i2 = new Event("addstream");
                i2.stream = t4, e3.dispatchEvent(i2);
              });
            }), t2.apply(e3, arguments);
          };
        }
      }
      function wT(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection.prototype, i2 = t2.createOffer, n2 = t2.createAnswer, r2 = t2.setLocalDescription, o2 = t2.setRemoteDescription, s2 = t2.addIceCandidate;
        t2.createOffer = function(e3, t3) {
          const n3 = arguments.length >= 2 ? arguments[2] : arguments[0], r3 = i2.apply(this, [n3]);
          return t3 ? (r3.then(e3, t3), np.resolve()) : r3;
        }, t2.createAnswer = function(e3, t3) {
          const i3 = arguments.length >= 2 ? arguments[2] : arguments[0], r3 = n2.apply(this, [i3]);
          return t3 ? (r3.then(e3, t3), np.resolve()) : r3;
        };
        let a2 = function(e3, t3, i3) {
          const n3 = r2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), np.resolve()) : n3;
        };
        t2.setLocalDescription = a2, a2 = function(e3, t3, i3) {
          const n3 = o2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), np.resolve()) : n3;
        }, t2.setRemoteDescription = a2, a2 = function(e3, t3, i3) {
          const n3 = s2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), np.resolve()) : n3;
        }, t2.addIceCandidate = a2;
      }
      function OT(e2) {
        const t2 = e2 && e2.navigator;
        if (t2.mediaDevices && t2.mediaDevices.getUserMedia) {
          const e3 = t2.mediaDevices, i2 = e3.getUserMedia.bind(e3);
          t2.mediaDevices.getUserMedia = (e4) => i2(NT(e4));
        }
        !t2.getUserMedia && t2.mediaDevices && t2.mediaDevices.getUserMedia && (t2.getUserMedia = (function(e3, i2, n2) {
          t2.mediaDevices.getUserMedia(e3).then(i2, n2);
        }).bind(t2));
      }
      function NT(e2) {
        return e2 && void 0 !== e2.video ? Object.assign({}, e2, { video: $f(e2.video) }) : e2;
      }
      function DT(e2) {
        if (!e2.RTCPeerConnection) return;
        const t2 = e2.RTCPeerConnection;
        e2.RTCPeerConnection = function(e3, i2) {
          if (e3 && e3.iceServers) {
            const t3 = [];
            for (let i3 = 0; i3 < e3.iceServers.length; i3++) {
              let n2 = e3.iceServers[i3];
              !n2.hasOwnProperty("urls") && n2.hasOwnProperty("url") ? (Qf("RTCIceServer.url", "RTCIceServer.urls"), n2 = JSON.parse(JSON.stringify(n2)), n2.urls = n2.url, delete n2.url, t3.push(n2)) : t3.push(e3.iceServers[i3]);
            }
            e3.iceServers = t3;
          }
          return new t2(e3, i2);
        }, e2.RTCPeerConnection.prototype = t2.prototype, "generateCertificate" in t2 && Object.defineProperty(e2.RTCPeerConnection, "generateCertificate", { get: () => t2.generateCertificate });
      }
      function PT(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function LT(e2) {
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function(e3) {
          if (e3) {
            void 0 !== e3.offerToReceiveAudio && (e3.offerToReceiveAudio = !!e3.offerToReceiveAudio);
            const t3 = this.getTransceivers().find((e4) => "audio" === e4.receiver.track.kind);
            false === e3.offerToReceiveAudio && t3 ? "sendrecv" === t3.direction ? t3.setDirection ? t3.setDirection("sendonly") : t3.direction = "sendonly" : "recvonly" === t3.direction && (t3.setDirection ? t3.setDirection("inactive") : t3.direction = "inactive") : true !== e3.offerToReceiveAudio || t3 || this.addTransceiver("audio", { direction: "recvonly" }), void 0 !== e3.offerToReceiveVideo && (e3.offerToReceiveVideo = !!e3.offerToReceiveVideo);
            const i2 = this.getTransceivers().find((e4) => "video" === e4.receiver.track.kind);
            false === e3.offerToReceiveVideo && i2 ? "sendrecv" === i2.direction ? i2.setDirection ? i2.setDirection("sendonly") : i2.direction = "sendonly" : "recvonly" === i2.direction && (i2.setDirection ? i2.setDirection("inactive") : i2.direction = "inactive") : true !== e3.offerToReceiveVideo || i2 || this.addTransceiver("video", { direction: "recvonly" });
          }
          return t2.apply(this, arguments);
        };
      }
      function kT(e2) {
        "object" != typeof e2 || e2.AudioContext || (e2.AudioContext = e2.webkitAudioContext);
      }
      var MT = Object.freeze({ __proto__: null, shimAudioContext: kT, shimCallbacksAPI: wT, shimConstraints: NT, shimCreateOfferLegacy: LT, shimGetUserMedia: OT, shimLocalStreamsAPI: AT, shimRTCIceServerUrls: DT, shimRemoteStreamsAPI: bT, shimTrackEventTransceiver: PT }), UT = "	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF", xT = q, VT = Sn, FT = UT, BT = d("".replace), jT = RegExp("^[" + FT + "]+"), GT = RegExp("(^|[^" + FT + "])[" + FT + "]+$"), WT = function(e2) {
        return function(t2) {
          var i2 = VT(xT(t2));
          return 1 & e2 && (i2 = BT(i2, jT, "")), 2 & e2 && (i2 = BT(i2, GT, "$1")), i2;
        };
      }, HT = { start: WT(1), end: WT(2), trim: WT(3) }, KT = va.PROPER, YT = n, qT = UT, zT = HT.trim;
      Ni({ target: "String", proto: true, forced: function(e2) {
        return YT(function() {
          return !!qT[e2]() || "âÂá " !== "âÂá "[e2]() || KT && qT[e2].name !== e2;
        });
      }("trim") }, { trim: function() {
        return zT(this);
      } });
      var JT = $i("String", "trim"), XT = l, QT = JT, ZT = String.prototype, $T = function(e2) {
        var t2 = e2.trim;
        return "string" == typeof e2 || e2 === ZT || XT(ZT, e2) && t2 === ZT.trim ? QT : t2;
      }, eS = i($T), tS = { exports: {} };
      !function(e2) {
        const t2 = { generateIdentifier: function() {
          return Math.random().toString(36).substring(2, 12);
        } };
        t2.localCName = t2.generateIdentifier(), t2.splitLines = function(e3) {
          return e3.trim().split("\n").map((e4) => e4.trim());
        }, t2.splitSections = function(e3) {
          return e3.split("\nm=").map((e4, t3) => (t3 > 0 ? "m=" + e4 : e4).trim() + "\r\n");
        }, t2.getDescription = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2 && i2[0];
        }, t2.getMediaSections = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2.shift(), i2;
        }, t2.matchPrefix = function(e3, i2) {
          return t2.splitLines(e3).filter((e4) => 0 === e4.indexOf(i2));
        }, t2.parseCandidate = function(e3) {
          let t3;
          t3 = 0 === e3.indexOf("a=candidate:") ? e3.substring(12).split(" ") : e3.substring(10).split(" ");
          const i2 = { foundation: t3[0], component: { 1: "rtp", 2: "rtcp" }[t3[1]] || t3[1], protocol: t3[2].toLowerCase(), priority: parseInt(t3[3], 10), ip: t3[4], address: t3[4], port: parseInt(t3[5], 10), type: t3[7] };
          for (let e4 = 8; e4 < t3.length; e4 += 2) switch (t3[e4]) {
            case "raddr":
              i2.relatedAddress = t3[e4 + 1];
              break;
            case "rport":
              i2.relatedPort = parseInt(t3[e4 + 1], 10);
              break;
            case "tcptype":
              i2.tcpType = t3[e4 + 1];
              break;
            case "ufrag":
              i2.ufrag = t3[e4 + 1], i2.usernameFragment = t3[e4 + 1];
              break;
            default:
              void 0 === i2[t3[e4]] && (i2[t3[e4]] = t3[e4 + 1]);
          }
          return i2;
        }, t2.writeCandidate = function(e3) {
          const t3 = [];
          t3.push(e3.foundation);
          const i2 = e3.component;
          "rtp" === i2 ? t3.push(1) : "rtcp" === i2 ? t3.push(2) : t3.push(i2), t3.push(e3.protocol.toUpperCase()), t3.push(e3.priority), t3.push(e3.address || e3.ip), t3.push(e3.port);
          const n2 = e3.type;
          return t3.push("typ"), t3.push(n2), "host" !== n2 && e3.relatedAddress && e3.relatedPort && (t3.push("raddr"), t3.push(e3.relatedAddress), t3.push("rport"), t3.push(e3.relatedPort)), e3.tcpType && "tcp" === e3.protocol.toLowerCase() && (t3.push("tcptype"), t3.push(e3.tcpType)), (e3.usernameFragment || e3.ufrag) && (t3.push("ufrag"), t3.push(e3.usernameFragment || e3.ufrag)), "candidate:" + t3.join(" ");
        }, t2.parseIceOptions = function(e3) {
          return e3.substring(14).split(" ");
        }, t2.parseRtpMap = function(e3) {
          let t3 = e3.substring(9).split(" ");
          const i2 = { payloadType: parseInt(t3.shift(), 10) };
          return t3 = t3[0].split("/"), i2.name = t3[0], i2.clockRate = parseInt(t3[1], 10), i2.channels = 3 === t3.length ? parseInt(t3[2], 10) : 1, i2.numChannels = i2.channels, i2;
        }, t2.writeRtpMap = function(e3) {
          let t3 = e3.payloadType;
          void 0 !== e3.preferredPayloadType && (t3 = e3.preferredPayloadType);
          const i2 = e3.channels || e3.numChannels || 1;
          return "a=rtpmap:" + t3 + " " + e3.name + "/" + e3.clockRate + (1 !== i2 ? "/" + i2 : "") + "\r\n";
        }, t2.parseExtmap = function(e3) {
          const t3 = e3.substring(9).split(" ");
          return { id: parseInt(t3[0], 10), direction: t3[0].indexOf("/") > 0 ? t3[0].split("/")[1] : "sendrecv", uri: t3[1], attributes: t3.slice(2).join(" ") };
        }, t2.writeExtmap = function(e3) {
          return "a=extmap:" + (e3.id || e3.preferredId) + (e3.direction && "sendrecv" !== e3.direction ? "/" + e3.direction : "") + " " + e3.uri + (e3.attributes ? " " + e3.attributes : "") + "\r\n";
        }, t2.parseFmtp = function(e3) {
          const t3 = {};
          let i2;
          const n2 = e3.substring(e3.indexOf(" ") + 1).split(";");
          for (let e4 = 0; e4 < n2.length; e4++) i2 = n2[e4].trim().split("="), t3[i2[0].trim()] = i2[1];
          return t3;
        }, t2.writeFmtp = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          if (void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.parameters && Object.keys(e3.parameters).length) {
            const n2 = [];
            Object.keys(e3.parameters).forEach((t4) => {
              void 0 !== e3.parameters[t4] ? n2.push(t4 + "=" + e3.parameters[t4]) : n2.push(t4);
            }), t3 += "a=fmtp:" + i2 + " " + n2.join(";") + "\r\n";
          }
          return t3;
        }, t2.parseRtcpFb = function(e3) {
          const t3 = e3.substring(e3.indexOf(" ") + 1).split(" ");
          return { type: t3.shift(), parameter: t3.join(" ") };
        }, t2.writeRtcpFb = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          return void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.rtcpFeedback && e3.rtcpFeedback.length && e3.rtcpFeedback.forEach((e4) => {
            t3 += "a=rtcp-fb:" + i2 + " " + e4.type + (e4.parameter && e4.parameter.length ? " " + e4.parameter : "") + "\r\n";
          }), t3;
        }, t2.parseSsrcMedia = function(e3) {
          const t3 = e3.indexOf(" "), i2 = { ssrc: parseInt(e3.substring(7, t3), 10) }, n2 = e3.indexOf(":", t3);
          return n2 > -1 ? (i2.attribute = e3.substring(t3 + 1, n2), i2.value = e3.substring(n2 + 1)) : i2.attribute = e3.substring(t3 + 1), i2;
        }, t2.parseSsrcGroup = function(e3) {
          const t3 = e3.substring(13).split(" ");
          return { semantics: t3.shift(), ssrcs: t3.map((e4) => parseInt(e4, 10)) };
        }, t2.getMid = function(e3) {
          const i2 = t2.matchPrefix(e3, "a=mid:")[0];
          if (i2) return i2.substring(6);
        }, t2.parseFingerprint = function(e3) {
          const t3 = e3.substring(14).split(" ");
          return { algorithm: t3[0].toLowerCase(), value: t3[1].toUpperCase() };
        }, t2.getDtlsParameters = function(e3, i2) {
          return { role: "auto", fingerprints: t2.matchPrefix(e3 + i2, "a=fingerprint:").map(t2.parseFingerprint) };
        }, t2.writeDtlsParameters = function(e3, t3) {
          let i2 = "a=setup:" + t3 + "\r\n";
          return e3.fingerprints.forEach((e4) => {
            i2 += "a=fingerprint:" + e4.algorithm + " " + e4.value + "\r\n";
          }), i2;
        }, t2.parseCryptoLine = function(e3) {
          const t3 = e3.substring(9).split(" ");
          return { tag: parseInt(t3[0], 10), cryptoSuite: t3[1], keyParams: t3[2], sessionParams: t3.slice(3) };
        }, t2.writeCryptoLine = function(e3) {
          return "a=crypto:" + e3.tag + " " + e3.cryptoSuite + " " + ("object" == typeof e3.keyParams ? t2.writeCryptoKeyParams(e3.keyParams) : e3.keyParams) + (e3.sessionParams ? " " + e3.sessionParams.join(" ") : "") + "\r\n";
        }, t2.parseCryptoKeyParams = function(e3) {
          if (0 !== e3.indexOf("inline:")) return null;
          const t3 = e3.substring(7).split("|");
          return { keyMethod: "inline", keySalt: t3[0], lifeTime: t3[1], mkiValue: t3[2] ? t3[2].split(":")[0] : void 0, mkiLength: t3[2] ? t3[2].split(":")[1] : void 0 };
        }, t2.writeCryptoKeyParams = function(e3) {
          return e3.keyMethod + ":" + e3.keySalt + (e3.lifeTime ? "|" + e3.lifeTime : "") + (e3.mkiValue && e3.mkiLength ? "|" + e3.mkiValue + ":" + e3.mkiLength : "");
        }, t2.getCryptoParameters = function(e3, i2) {
          return t2.matchPrefix(e3 + i2, "a=crypto:").map(t2.parseCryptoLine);
        }, t2.getIceParameters = function(e3, i2) {
          const n2 = t2.matchPrefix(e3 + i2, "a=ice-ufrag:")[0], r2 = t2.matchPrefix(e3 + i2, "a=ice-pwd:")[0];
          return n2 && r2 ? { usernameFragment: n2.substring(12), password: r2.substring(10) } : null;
        }, t2.writeIceParameters = function(e3) {
          let t3 = "a=ice-ufrag:" + e3.usernameFragment + "\r\na=ice-pwd:" + e3.password + "\r\n";
          return e3.iceLite && (t3 += "a=ice-lite\r\n"), t3;
        }, t2.parseRtpParameters = function(e3) {
          const i2 = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, n2 = t2.splitLines(e3)[0].split(" ");
          i2.profile = n2[2];
          for (let r3 = 3; r3 < n2.length; r3++) {
            const o2 = n2[r3], s2 = t2.matchPrefix(e3, "a=rtpmap:" + o2 + " ")[0];
            if (s2) {
              const n3 = t2.parseRtpMap(s2), r4 = t2.matchPrefix(e3, "a=fmtp:" + o2 + " ");
              switch (n3.parameters = r4.length ? t2.parseFmtp(r4[0]) : {}, n3.rtcpFeedback = t2.matchPrefix(e3, "a=rtcp-fb:" + o2 + " ").map(t2.parseRtcpFb), i2.codecs.push(n3), n3.name.toUpperCase()) {
                case "RED":
                case "ULPFEC":
                  i2.fecMechanisms.push(n3.name.toUpperCase());
              }
            }
          }
          t2.matchPrefix(e3, "a=extmap:").forEach((e4) => {
            i2.headerExtensions.push(t2.parseExtmap(e4));
          });
          const r2 = t2.matchPrefix(e3, "a=rtcp-fb:* ").map(t2.parseRtcpFb);
          return i2.codecs.forEach((e4) => {
            r2.forEach((t3) => {
              e4.rtcpFeedback.find((e5) => e5.type === t3.type && e5.parameter === t3.parameter) || e4.rtcpFeedback.push(t3);
            });
          }), i2;
        }, t2.writeRtpDescription = function(e3, i2) {
          let n2 = "";
          n2 += "m=" + e3 + " ", n2 += i2.codecs.length > 0 ? "9" : "0", n2 += " " + (i2.profile || "UDP/TLS/RTP/SAVPF") + " ", n2 += i2.codecs.map((e4) => void 0 !== e4.preferredPayloadType ? e4.preferredPayloadType : e4.payloadType).join(" ") + "\r\n", n2 += "c=IN IP4 0.0.0.0\r\n", n2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n", i2.codecs.forEach((e4) => {
            n2 += t2.writeRtpMap(e4), n2 += t2.writeFmtp(e4), n2 += t2.writeRtcpFb(e4);
          });
          let r2 = 0;
          return i2.codecs.forEach((e4) => {
            e4.maxptime > r2 && (r2 = e4.maxptime);
          }), r2 > 0 && (n2 += "a=maxptime:" + r2 + "\r\n"), i2.headerExtensions && i2.headerExtensions.forEach((e4) => {
            n2 += t2.writeExtmap(e4);
          }), n2;
        }, t2.parseRtpEncodingParameters = function(e3) {
          const i2 = [], n2 = t2.parseRtpParameters(e3), r2 = -1 !== n2.fecMechanisms.indexOf("RED"), o2 = -1 !== n2.fecMechanisms.indexOf("ULPFEC"), s2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute), a2 = s2.length > 0 && s2[0].ssrc;
          let c2;
          const d2 = t2.matchPrefix(e3, "a=ssrc-group:FID").map((e4) => e4.substring(17).split(" ").map((e5) => parseInt(e5, 10)));
          d2.length > 0 && d2[0].length > 1 && d2[0][0] === a2 && (c2 = d2[0][1]), n2.codecs.forEach((e4) => {
            if ("RTX" === e4.name.toUpperCase() && e4.parameters.apt) {
              let t3 = { ssrc: a2, codecPayloadType: parseInt(e4.parameters.apt, 10) };
              a2 && c2 && (t3.rtx = { ssrc: c2 }), i2.push(t3), r2 && (t3 = JSON.parse(JSON.stringify(t3)), t3.fec = { ssrc: a2, mechanism: o2 ? "red+ulpfec" : "red" }, i2.push(t3));
            }
          }), 0 === i2.length && a2 && i2.push({ ssrc: a2 });
          let l2 = t2.matchPrefix(e3, "b=");
          return l2.length && (l2 = 0 === l2[0].indexOf("b=TIAS:") ? parseInt(l2[0].substring(7), 10) : 0 === l2[0].indexOf("b=AS:") ? 1e3 * parseInt(l2[0].substring(5), 10) * 0.95 - 16e3 : void 0, i2.forEach((e4) => {
            e4.maxBitrate = l2;
          })), i2;
        }, t2.parseRtcpParameters = function(e3) {
          const i2 = {}, n2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute)[0];
          n2 && (i2.cname = n2.value, i2.ssrc = n2.ssrc);
          const r2 = t2.matchPrefix(e3, "a=rtcp-rsize");
          i2.reducedSize = r2.length > 0, i2.compound = 0 === r2.length;
          const o2 = t2.matchPrefix(e3, "a=rtcp-mux");
          return i2.mux = o2.length > 0, i2;
        }, t2.writeRtcpParameters = function(e3) {
          let t3 = "";
          return e3.reducedSize && (t3 += "a=rtcp-rsize\r\n"), e3.mux && (t3 += "a=rtcp-mux\r\n"), void 0 !== e3.ssrc && e3.cname && (t3 += "a=ssrc:" + e3.ssrc + " cname:" + e3.cname + "\r\n"), t3;
        }, t2.parseMsid = function(e3) {
          let i2;
          const n2 = t2.matchPrefix(e3, "a=msid:");
          if (1 === n2.length) return i2 = n2[0].substring(7).split(" "), { stream: i2[0], track: i2[1] };
          const r2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "msid" === e4.attribute);
          return r2.length > 0 ? (i2 = r2[0].value.split(" "), { stream: i2[0], track: i2[1] }) : void 0;
        }, t2.parseSctpDescription = function(e3) {
          const i2 = t2.parseMLine(e3), n2 = t2.matchPrefix(e3, "a=max-message-size:");
          let r2;
          n2.length > 0 && (r2 = parseInt(n2[0].substring(19), 10)), isNaN(r2) && (r2 = 65536);
          const o2 = t2.matchPrefix(e3, "a=sctp-port:");
          if (o2.length > 0) return { port: parseInt(o2[0].substring(12), 10), protocol: i2.fmt, maxMessageSize: r2 };
          const s2 = t2.matchPrefix(e3, "a=sctpmap:");
          if (s2.length > 0) {
            const e4 = s2[0].substring(10).split(" ");
            return { port: parseInt(e4[0], 10), protocol: e4[1], maxMessageSize: r2 };
          }
        }, t2.writeSctpDescription = function(e3, t3) {
          let i2 = [];
          return i2 = "DTLS/SCTP" !== e3.protocol ? ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t3.port + "\r\n"] : ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t3.port + " " + t3.protocol + " 65535\r\n"], void 0 !== t3.maxMessageSize && i2.push("a=max-message-size:" + t3.maxMessageSize + "\r\n"), i2.join("");
        }, t2.generateSessionId = function() {
          return Math.random().toString().substr(2, 22);
        }, t2.writeSessionBoilerplate = function(e3, i2, n2) {
          let r2;
          const o2 = void 0 !== i2 ? i2 : 2;
          r2 = e3 || t2.generateSessionId();
          return "v=0\r\no=" + (n2 || "thisisadapterortc") + " " + r2 + " " + o2 + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
        }, t2.getDirection = function(e3, i2) {
          const n2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < n2.length; e4++) switch (n2[e4]) {
            case "a=sendrecv":
            case "a=sendonly":
            case "a=recvonly":
            case "a=inactive":
              return n2[e4].substring(2);
          }
          return i2 ? t2.getDirection(i2) : "sendrecv";
        }, t2.getKind = function(e3) {
          return t2.splitLines(e3)[0].split(" ")[0].substring(2);
        }, t2.isRejected = function(e3) {
          return "0" === e3.split(" ", 2)[1];
        }, t2.parseMLine = function(e3) {
          const i2 = t2.splitLines(e3)[0].substring(2).split(" ");
          return { kind: i2[0], port: parseInt(i2[1], 10), protocol: i2[2], fmt: i2.slice(3).join(" ") };
        }, t2.parseOLine = function(e3) {
          const i2 = t2.matchPrefix(e3, "o=")[0].substring(2).split(" ");
          return { username: i2[0], sessionId: i2[1], sessionVersion: parseInt(i2[2], 10), netType: i2[3], addressType: i2[4], address: i2[5] };
        }, t2.isValidSDP = function(e3) {
          if ("string" != typeof e3 || 0 === e3.length) return false;
          const i2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < i2.length; e4++) if (i2[e4].length < 2 || "=" !== i2[e4].charAt(1)) return false;
          return true;
        }, e2.exports = t2;
      }(tS);
      var iS = tS.exports, nS = i(iS), rS = e({ __proto__: null, default: nS }, [iS]);
      function oS(e2) {
        if (!e2.RTCIceCandidate || e2.RTCIceCandidate && "foundation" in e2.RTCIceCandidate.prototype) return;
        const t2 = e2.RTCIceCandidate;
        e2.RTCIceCandidate = function(e3) {
          if ("object" == typeof e3 && e3.candidate && 0 === e3.candidate.indexOf("a=") && ((e3 = JSON.parse(JSON.stringify(e3))).candidate = e3.candidate.substr(2)), e3.candidate && e3.candidate.length) {
            const i2 = new t2(e3), n2 = nS.parseCandidate(e3.candidate), r2 = Object.assign(i2, n2);
            return r2.toJSON = function() {
              return { candidate: r2.candidate, sdpMid: r2.sdpMid, sdpMLineIndex: r2.sdpMLineIndex, usernameFragment: r2.usernameFragment };
            }, r2;
          }
          return new t2(e3);
        }, e2.RTCIceCandidate.prototype = t2.prototype, qf(e2, "icecandidate", (t3) => (t3.candidate && Object.defineProperty(t3, "candidate", { value: new e2.RTCIceCandidate(t3.candidate), writable: "false" }), t3));
      }
      function sS(e2) {
        !e2.RTCIceCandidate || e2.RTCIceCandidate && "relayProtocol" in e2.RTCIceCandidate.prototype || qf(e2, "icecandidate", (e3) => {
          if (e3.candidate) {
            const t2 = nS.parseCandidate(e3.candidate.candidate);
            "relay" === t2.type && (e3.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[t2.priority >> 24]);
          }
          return e3;
        });
      }
      function aS(e2, t2) {
        if (!e2.RTCPeerConnection) return;
        "sctp" in e2.RTCPeerConnection.prototype || Object.defineProperty(e2.RTCPeerConnection.prototype, "sctp", { get() {
          return void 0 === this._sctp ? null : this._sctp;
        } });
        const i2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
          if (this._sctp = null, "chrome" === t2.browser && t2.version >= 76) {
            const { sdpSemantics: e3 } = this.getConfiguration();
            "plan-b" === e3 && Object.defineProperty(this, "sctp", { get() {
              return void 0 === this._sctp ? null : this._sctp;
            }, enumerable: true, configurable: true });
          }
          if (function(e3) {
            if (!e3 || !e3.sdp) return false;
            const t3 = nS.splitSections(e3.sdp);
            return t3.shift(), t3.some((e4) => {
              const t4 = nS.parseMLine(e4);
              return t4 && "application" === t4.kind && -1 !== t4.protocol.indexOf("SCTP");
            });
          }(arguments[0])) {
            const e3 = function(e4) {
              const t3 = e4.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
              if (null === t3 || t3.length < 2) return -1;
              const i4 = parseInt(t3[1], 10);
              return i4 != i4 ? -1 : i4;
            }(arguments[0]), i3 = function(e4) {
              let i4 = 65536;
              return "firefox" === t2.browser && (i4 = t2.version < 57 ? -1 === e4 ? 16384 : 2147483637 : t2.version < 60 ? 57 === t2.version ? 65535 : 65536 : 2147483637), i4;
            }(e3), n2 = function(e4, i4) {
              let n3 = 65536;
              "firefox" === t2.browser && 57 === t2.version && (n3 = 65535);
              const r3 = nS.matchPrefix(e4.sdp, "a=max-message-size:");
              return r3.length > 0 ? n3 = parseInt(r3[0].substr(19), 10) : "firefox" === t2.browser && -1 !== i4 && (n3 = 2147483637), n3;
            }(arguments[0], e3);
            let r2;
            r2 = 0 === i3 && 0 === n2 ? Number.POSITIVE_INFINITY : 0 === i3 || 0 === n2 ? Math.max(i3, n2) : Math.min(i3, n2);
            const o2 = {};
            Object.defineProperty(o2, "maxMessageSize", { get: () => r2 }), this._sctp = o2;
          }
          return i2.apply(this, arguments);
        };
      }
      function cS(e2) {
        if (!e2.RTCPeerConnection || !("createDataChannel" in e2.RTCPeerConnection.prototype)) return;
        function t2(e3, t3) {
          const i3 = e3.send;
          e3.send = function() {
            const n2 = arguments[0], r2 = n2.length || n2.size || n2.byteLength;
            if ("open" === e3.readyState && t3.sctp && r2 > t3.sctp.maxMessageSize) throw new TypeError("Message too large (can send a maximum of " + t3.sctp.maxMessageSize + " bytes)");
            return i3.apply(e3, arguments);
          };
        }
        const i2 = e2.RTCPeerConnection.prototype.createDataChannel;
        e2.RTCPeerConnection.prototype.createDataChannel = function() {
          const e3 = i2.apply(this, arguments);
          return t2(e3, this), e3;
        }, qf(e2, "datachannel", (e3) => (t2(e3.channel, e3.target), e3));
      }
      function dS(e2) {
        if (!e2.RTCPeerConnection || "connectionState" in e2.RTCPeerConnection.prototype) return;
        const t2 = e2.RTCPeerConnection.prototype;
        Object.defineProperty(t2, "connectionState", { get() {
          return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
        }, enumerable: true, configurable: true }), Object.defineProperty(t2, "onconnectionstatechange", { get() {
          return this._onconnectionstatechange || null;
        }, set(e3) {
          this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e3 && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e3);
        }, enumerable: true, configurable: true }), ["setLocalDescription", "setRemoteDescription"].forEach((e3) => {
          const i2 = t2[e3];
          t2[e3] = function() {
            return this._connectionstatechangepoly || (this._connectionstatechangepoly = (e4) => {
              const t3 = e4.target;
              if (t3._lastConnectionState !== t3.connectionState) {
                t3._lastConnectionState = t3.connectionState;
                const i3 = new Event("connectionstatechange", e4);
                t3.dispatchEvent(i3);
              }
              return e4;
            }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), i2.apply(this, arguments);
          };
        });
      }
      function lS(e2, t2) {
        if (!e2.RTCPeerConnection) return;
        if ("chrome" === t2.browser && t2.version >= 71) return;
        if ("safari" === t2.browser && t2.version >= 605) return;
        const i2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function(t3) {
          if (t3 && t3.sdp && -1 !== t3.sdp.indexOf("\na=extmap-allow-mixed")) {
            const i3 = t3.sdp.split("\n").filter((e3) => "a=extmap-allow-mixed" !== eS(e3).call(e3)).join("\n");
            e2.RTCSessionDescription && t3 instanceof e2.RTCSessionDescription ? arguments[0] = new e2.RTCSessionDescription({ type: t3.type, sdp: i3 }) : t3.sdp = i3;
          }
          return i2.apply(this, arguments);
        };
      }
      function uS(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype) return;
        const i2 = e2.RTCPeerConnection.prototype.addIceCandidate;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.addIceCandidate = function() {
          return arguments[0] ? ("chrome" === t2.browser && t2.version < 78 || "firefox" === t2.browser && t2.version < 68 || "safari" === t2.browser) && arguments[0] && "" === arguments[0].candidate ? np.resolve() : i2.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), np.resolve());
        });
      }
      function hS(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype) return;
        const i2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          let e3 = arguments[0] || {};
          if ("object" != typeof e3 || e3.type && e3.sdp) return i2.apply(this, arguments);
          if (e3 = { type: e3.type, sdp: e3.sdp }, !e3.type) switch (this.signalingState) {
            case "stable":
            case "have-local-offer":
            case "have-remote-pranswer":
              e3.type = "offer";
              break;
            default:
              e3.type = "answer";
          }
          if (e3.sdp || "offer" !== e3.type && "answer" !== e3.type) return i2.apply(this, [e3]);
          return ("offer" === e3.type ? this.createOffer : this.createAnswer).apply(this).then((e4) => i2.apply(this, [e4]));
        });
      }
      var pS = Object.freeze({ __proto__: null, removeExtmapAllowMixed: lS, shimAddIceCandidateNullOrEmpty: uS, shimConnectionState: dS, shimMaxMessageSize: aS, shimParameterlessSetLocalDescription: hS, shimRTCIceCandidate: oS, shimRTCIceCandidateRelayProtocol: sS, shimSendThrowTypeError: cS });
      !function() {
        let { window: e2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { shimChrome: true, shimFirefox: true, shimSafari: true };
        const i2 = Xf, n2 = function(e3) {
          const t3 = { browser: null, version: null };
          if (void 0 === e3 || !e3.navigator) return t3.browser = "Not a browser.", t3;
          const { navigator: i3 } = e3;
          if (i3.mozGetUserMedia) t3.browser = "firefox", t3.version = Yf(i3.userAgent, /Firefox\/(\d+)\./, 1);
          else if (i3.webkitGetUserMedia || false === e3.isSecureContext && e3.webkitRTCPeerConnection) t3.browser = "chrome", t3.version = Yf(i3.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
          else {
            if (!e3.RTCPeerConnection || !i3.userAgent.match(/AppleWebKit\/(\d+)\./)) return t3.browser = "Not a supported browser.", t3;
            t3.browser = "safari", t3.version = Yf(i3.userAgent, /AppleWebKit\/(\d+)\./, 1), t3.supportsUnifiedPlan = e3.RTCRtpTransceiver && "currentDirection" in e3.RTCRtpTransceiver.prototype;
          }
          return t3;
        }(e2), r2 = { browserDetails: n2, commonShim: pS, extractVersion: Yf, disableLog: zf, disableWarnings: Jf, sdp: rS };
        switch (n2.browser) {
          case "chrome":
            if (!pT || !uT || !t2.shimChrome) return i2("Chrome shim is not included in this adapter release."), r2;
            if (null === n2.version) return i2("Chrome shim can not determine version, not shimming."), r2;
            i2("adapter.js shimming chrome."), r2.browserShim = pT, uS(e2, n2), hS(e2), nT(e2, n2), rT(e2), uT(e2, n2), oT(e2), lT(e2, n2), sT(e2), aT(e2), cT(e2), hT(e2, n2), oS(e2), sS(e2), dS(e2), aS(e2, n2), cS(e2), lS(e2, n2);
            break;
          case "firefox":
            if (!yT || !mT || !t2.shimFirefox) return i2("Firefox shim is not included in this adapter release."), r2;
            i2("adapter.js shimming firefox."), r2.browserShim = yT, uS(e2, n2), hS(e2), _T(e2, n2), mT(e2, n2), ET(e2), ST(e2), fT(e2), TT(e2), gT(e2), RT(e2), vT(e2), CT(e2), IT(e2), oS(e2), dS(e2), aS(e2, n2), cS(e2);
            break;
          case "safari":
            if (!MT || !t2.shimSafari) return i2("Safari shim is not included in this adapter release."), r2;
            i2("adapter.js shimming safari."), r2.browserShim = MT, uS(e2, n2), hS(e2), DT(e2), LT(e2), wT(e2), AT(e2), bT(e2), PT(e2), OT(e2), kT(e2), oS(e2), sS(e2), aS(e2, n2), cS(e2), lS(e2, n2);
            break;
          default:
            i2("Unsupported browser!");
        }
      }({ window: "undefined" == typeof window ? void 0 : window });
      var _S = Ae, ES = TypeError, mS = ae.match(/firefox\/(\d+)/i), fS = !!mS && +mS[1], TS = /MSIE|Trident/.test(ae), SS = ae.match(/AppleWebKit\/(\d+)\./), gS = !!SS && +SS[1], RS = Ni, vS = d, CS = Ne, IS = Qe, yS = Hi, AS = function(e2, t2) {
        if (!delete e2[t2]) throw new ES("Cannot delete property " + _S(t2) + " of " + _S(e2));
      }, bS = Sn, wS = n, OS = wp, NS = Hn, DS = fS, PS = TS, LS = _e, kS = gS, MS = [], US = vS(MS.sort), xS = vS(MS.push), VS = wS(function() {
        MS.sort(void 0);
      }), FS = wS(function() {
        MS.sort(null);
      }), BS = NS("sort"), jS = !wS(function() {
        if (LS) return LS < 70;
        if (!(DS && DS > 3)) {
          if (PS) return true;
          if (kS) return kS < 603;
          var e2, t2, i2, n2, r2 = "";
          for (e2 = 65; e2 < 76; e2++) {
            switch (t2 = String.fromCharCode(e2), e2) {
              case 66:
              case 69:
              case 70:
              case 72:
                i2 = 3;
                break;
              case 68:
              case 71:
                i2 = 4;
                break;
              default:
                i2 = 2;
            }
            for (n2 = 0; n2 < 47; n2++) MS.push({ k: t2 + n2, v: i2 });
          }
          for (MS.sort(function(e3, t3) {
            return t3.v - e3.v;
          }), n2 = 0; n2 < MS.length; n2++) t2 = MS[n2].k.charAt(0), r2.charAt(r2.length - 1) !== t2 && (r2 += t2);
          return "DGBEFHACIJK" !== r2;
        }
      });
      RS({ target: "Array", proto: true, forced: VS || !FS || !BS || !jS }, { sort: function(e2) {
        void 0 !== e2 && CS(e2);
        var t2 = IS(this);
        if (jS) return void 0 === e2 ? US(t2) : US(t2, e2);
        var i2, n2, r2 = [], o2 = yS(t2);
        for (n2 = 0; n2 < o2; n2++) n2 in t2 && xS(r2, t2[n2]);
        for (OS(r2, /* @__PURE__ */ function(e3) {
          return function(t3, i3) {
            return void 0 === i3 ? -1 : void 0 === t3 ? 1 : void 0 !== e3 ? +e3(t3, i3) || 0 : bS(t3) > bS(i3) ? 1 : -1;
          };
        }(e2)), i2 = yS(r2), n2 = 0; n2 < i2; ) t2[n2] = r2[n2++];
        for (; n2 < o2; ) AS(t2, n2++);
        return t2;
      } });
      var GS = $i("Array", "sort"), WS = l, HS = GS, KS = Array.prototype, YS = function(e2) {
        var t2 = e2.sort;
        return e2 === KS || WS(KS, e2) && t2 === KS.sort ? HS : t2;
      }, qS = i(YS), zS = h;
      Ni({ global: true, forced: zS.globalThis !== zS }, { globalThis: zS });
      var JS = i(h), XS = { exports: {} };
      !function(e2, i2) {
        !function(t2, n2) {
          var r2 = "function", o2 = "undefined", s2 = "object", a2 = "string", c2 = "major", d2 = "model", l2 = "name", u2 = "type", h2 = "vendor", p2 = "version", _2 = "architecture", E2 = "console", m2 = "mobile", f2 = "tablet", T2 = "smarttv", S2 = "wearable", g2 = "embedded", R2 = "Amazon", v2 = "Apple", C2 = "ASUS", I2 = "BlackBerry", y2 = "Browser", A2 = "Chrome", b2 = "Firefox", w2 = "Google", O2 = "Huawei", N2 = "LG", D2 = "Microsoft", P2 = "Motorola", L2 = "Opera", k2 = "Samsung", M2 = "Sharp", U2 = "Sony", x2 = "Xiaomi", V2 = "Zebra", F2 = "Facebook", B2 = "Chromium OS", j2 = "Mac OS", G2 = function(e3) {
            for (var t3 = {}, i3 = 0; i3 < e3.length; i3++) t3[e3[i3].toUpperCase()] = e3[i3];
            return t3;
          }, W2 = function(e3, t3) {
            return typeof e3 === a2 && -1 !== H2(t3).indexOf(H2(e3));
          }, H2 = function(e3) {
            return e3.toLowerCase();
          }, K2 = function(e3, t3) {
            if (typeof e3 === a2) return e3 = e3.replace(/^\s\s*/, ""), typeof t3 === o2 ? e3 : e3.substring(0, 350);
          }, Y2 = function(e3, t3) {
            for (var i3, o3, a3, c3, d3, l3, u3 = 0; u3 < t3.length && !d3; ) {
              var h3 = t3[u3], p3 = t3[u3 + 1];
              for (i3 = o3 = 0; i3 < h3.length && !d3 && h3[i3]; ) if (d3 = h3[i3++].exec(e3)) for (a3 = 0; a3 < p3.length; a3++) l3 = d3[++o3], typeof (c3 = p3[a3]) === s2 && c3.length > 0 ? 2 === c3.length ? typeof c3[1] == r2 ? this[c3[0]] = c3[1].call(this, l3) : this[c3[0]] = c3[1] : 3 === c3.length ? typeof c3[1] !== r2 || c3[1].exec && c3[1].test ? this[c3[0]] = l3 ? l3.replace(c3[1], c3[2]) : n2 : this[c3[0]] = l3 ? c3[1].call(this, l3, c3[2]) : n2 : 4 === c3.length && (this[c3[0]] = l3 ? c3[3].call(this, l3.replace(c3[1], c3[2])) : n2) : this[c3] = l3 || n2;
              u3 += 2;
            }
          }, q2 = function(e3, t3) {
            for (var i3 in t3) if (typeof t3[i3] === s2 && t3[i3].length > 0) {
              for (var r3 = 0; r3 < t3[i3].length; r3++) if (W2(t3[i3][r3], e3)) return "?" === i3 ? n2 : i3;
            } else if (W2(t3[i3], e3)) return "?" === i3 ? n2 : i3;
            return e3;
          }, z2 = { ME: "4.90", "NT 3.11": "NT3.51", "NT 4.0": "NT4.0", 2e3: "NT 5.0", XP: ["NT 5.1", "NT 5.2"], Vista: "NT 6.0", 7: "NT 6.1", 8: "NT 6.2", 8.1: "NT 6.3", 10: ["NT 6.4", "NT 10.0"], RT: "ARM" }, J2 = { browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i], [p2, [l2, "Chrome"]], [/edg(?:e|ios|a)?\/([\w\.]+)/i], [p2, [l2, "Edge"]], [/(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i], [l2, p2], [/opios[\/ ]+([\w\.]+)/i], [p2, [l2, L2 + " Mini"]], [/\bopr\/([\w\.]+)/i], [p2, [l2, L2]], [/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, /(ba?idubrowser)[\/ ]?([\w\.]+)/i, /(?:ms|\()(ie) ([\w\.]+)/i, /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i, /(weibo)__([\d\.]+)/i], [l2, p2], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i], [p2, [l2, "UC" + y2]], [/microm.+\bqbcore\/([\w\.]+)/i, /\bqbcore\/([\w\.]+).+microm/i], [p2, [l2, "WeChat(Win) Desktop"]], [/micromessenger\/([\w\.]+)/i], [p2, [l2, "WeChat"]], [/konqueror\/([\w\.]+)/i], [p2, [l2, "Konqueror"]], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i], [p2, [l2, "IE"]], [/yabrowser\/([\w\.]+)/i], [p2, [l2, "Yandex"]], [/(avast|avg)\/([\w\.]+)/i], [[l2, /(.+)/, "$1 Secure " + y2], p2], [/\bfocus\/([\w\.]+)/i], [p2, [l2, b2 + " Focus"]], [/\bopt\/([\w\.]+)/i], [p2, [l2, L2 + " Touch"]], [/coc_coc\w+\/([\w\.]+)/i], [p2, [l2, "Coc Coc"]], [/dolfin\/([\w\.]+)/i], [p2, [l2, "Dolphin"]], [/coast\/([\w\.]+)/i], [p2, [l2, L2 + " Coast"]], [/miuibrowser\/([\w\.]+)/i], [p2, [l2, "MIUI " + y2]], [/fxios\/([-\w\.]+)/i], [p2, [l2, b2]], [/\bqihu|(qi?ho?o?|360)browser/i], [[l2, "360 " + y2]], [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i], [[l2, /(.+)/, "$1 " + y2], p2], [/(comodo_dragon)\/([\w\.]+)/i], [[l2, /_/g, " "], p2], [/(electron)\/([\w\.]+) safari/i, /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i], [l2, p2], [/(metasr)[\/ ]?([\w\.]+)/i, /(lbbrowser)/i, /\[(linkedin)app\]/i], [l2], [/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i], [[l2, F2], p2], [/(kakao(?:talk|story))[\/ ]([\w\.]+)/i, /(naver)\(.*?(\d+\.[\w\.]+).*\)/i, /safari (line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/ ]([-\w\.]+)/i], [l2, p2], [/\bgsa\/([\w\.]+) .*safari\//i], [p2, [l2, "GSA"]], [/headlesschrome(?:\/([\w\.]+)| )/i], [p2, [l2, A2 + " Headless"]], [/ wv\).+(chrome)\/([\w\.]+)/i], [[l2, A2 + " WebView"], p2], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i], [p2, [l2, "Android " + y2]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i], [l2, p2], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i], [p2, [l2, "Mobile Safari"]], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i], [p2, l2], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i], [l2, [p2, q2, { "1.0": "/8", 1.2: "/1", 1.3: "/3", "2.0": "/412", "2.0.2": "/416", "2.0.3": "/417", "2.0.4": "/419", "?": "/" }]], [/(webkit|khtml)\/([\w\.]+)/i], [l2, p2], [/(navigator|netscape\d?)\/([-\w\.]+)/i], [[l2, "Netscape"], p2], [/mobile vr; rv:([\w\.]+)\).+firefox/i], [p2, [l2, b2 + " Reality"]], [/ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i, /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i, /(firefox)\/([\w\.]+)/i, /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i, /(links) \(([\w\.]+)/i, /panasonic;(viera)/i], [l2, p2], [/(cobalt)\/([\w\.]+)/i], [l2, [p2, /master.|lts./, ""]]], cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i], [[_2, "amd64"]], [/(ia32(?=;))/i], [[_2, H2]], [/((?:i[346]|x)86)[;\)]/i], [[_2, "ia32"]], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i], [[_2, "arm64"]], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i], [[_2, "armhf"]], [/windows (ce|mobile); ppc;/i], [[_2, "arm"]], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i], [[_2, /ower/, "", H2]], [/(sun4\w)[;\)]/i], [[_2, "sparc"]], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i], [[_2, H2]]], device: [[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [d2, [h2, k2], [u2, f2]], [/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [d2, [h2, k2], [u2, m2]], [/\((ip(?:hone|od)[\w ]*);/i], [d2, [h2, v2], [u2, m2]], [/\((ipad);[-\w\),; ]+apple/i, /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [d2, [h2, v2], [u2, f2]], [/(macintosh);/i], [d2, [h2, v2]], [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [d2, [h2, M2], [u2, m2]], [/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [d2, [h2, O2], [u2, f2]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [d2, [h2, O2], [u2, m2]], [/\b(poco[\w ]+)(?: bui|\))/i, /\b; (\w+) build\/hm\1/i, /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i], [[d2, /_/g, " "], [h2, x2], [u2, m2]], [/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i], [[d2, /_/g, " "], [h2, x2], [u2, f2]], [/; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [d2, [h2, "OPPO"], [u2, m2]], [/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [d2, [h2, "Vivo"], [u2, m2]], [/\b(rmx[12]\d{3})(?: bui|;|\))/i], [d2, [h2, "Realme"], [u2, m2]], [/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [d2, [h2, P2], [u2, m2]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [d2, [h2, P2], [u2, f2]], [/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [d2, [h2, N2], [u2, f2]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [d2, [h2, N2], [u2, m2]], [/(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [d2, [h2, "Lenovo"], [u2, f2]], [/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[d2, /_/g, " "], [h2, "Nokia"], [u2, m2]], [/(pixel c)\b/i], [d2, [h2, w2], [u2, f2]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i], [d2, [h2, w2], [u2, m2]], [/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [d2, [h2, U2], [u2, m2]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[d2, "Xperia Tablet"], [h2, U2], [u2, f2]], [/ (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [d2, [h2, "OnePlus"], [u2, m2]], [/(alexa)webm/i, /(kf[a-z]{2}wi)( bui|\))/i, /(kf[a-z]+)( bui|\)).+silk\//i], [d2, [h2, R2], [u2, f2]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i], [[d2, /(.+)/g, "Fire Phone $1"], [h2, R2], [u2, m2]], [/(playbook);[-\w\),; ]+(rim)/i], [d2, h2, [u2, f2]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i], [d2, [h2, I2], [u2, m2]], [/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [d2, [h2, C2], [u2, f2]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [d2, [h2, C2], [u2, m2]], [/(nexus 9)/i], [d2, [h2, "HTC"], [u2, f2]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i], [h2, [d2, /_/g, " "], [u2, m2]], [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [d2, [h2, "Acer"], [u2, f2]], [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [d2, [h2, "Meizu"], [u2, m2]], [/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i, /(hp) ([\w ]+\w)/i, /(asus)-?(\w+)/i, /(microsoft); (lumia[\w ]+)/i, /(lenovo)[-_ ]?([-\w]+)/i, /(jolla)/i, /(oppo) ?([\w ]+) bui/i], [h2, d2, [u2, m2]], [/(kobo)\s(ereader|touch)/i, /(archos) (gamepad2?)/i, /(hp).+(touchpad(?!.+tablet)|tablet)/i, /(kindle)\/([\w\.]+)/i, /(nook)[\w ]+build\/(\w+)/i, /(dell) (strea[kpr\d ]*[\dko])/i, /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, /(trinity)[- ]*(t\d{3}) bui/i, /(gigaset)[- ]+(q\w{1,9}) bui/i, /(vodafone) ([\w ]+)(?:\)| bui)/i], [h2, d2, [u2, f2]], [/(surface duo)/i], [d2, [h2, D2], [u2, f2]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i], [d2, [h2, "Fairphone"], [u2, m2]], [/(u304aa)/i], [d2, [h2, "AT&T"], [u2, m2]], [/\bsie-(\w*)/i], [d2, [h2, "Siemens"], [u2, m2]], [/\b(rct\w+) b/i], [d2, [h2, "RCA"], [u2, f2]], [/\b(venue[\d ]{2,7}) b/i], [d2, [h2, "Dell"], [u2, f2]], [/\b(q(?:mv|ta)\w+) b/i], [d2, [h2, "Verizon"], [u2, f2]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i], [d2, [h2, "Barnes & Noble"], [u2, f2]], [/\b(tm\d{3}\w+) b/i], [d2, [h2, "NuVision"], [u2, f2]], [/\b(k88) b/i], [d2, [h2, "ZTE"], [u2, f2]], [/\b(nx\d{3}j) b/i], [d2, [h2, "ZTE"], [u2, m2]], [/\b(gen\d{3}) b.+49h/i], [d2, [h2, "Swiss"], [u2, m2]], [/\b(zur\d{3}) b/i], [d2, [h2, "Swiss"], [u2, f2]], [/\b((zeki)?tb.*\b) b/i], [d2, [h2, "Zeki"], [u2, f2]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i], [[h2, "Dragon Touch"], d2, [u2, f2]], [/\b(ns-?\w{0,9}) b/i], [d2, [h2, "Insignia"], [u2, f2]], [/\b((nxa|next)-?\w{0,9}) b/i], [d2, [h2, "NextBook"], [u2, f2]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i], [[h2, "Voice"], d2, [u2, m2]], [/\b(lvtel\-)?(v1[12]) b/i], [[h2, "LvTel"], d2, [u2, m2]], [/\b(ph-1) /i], [d2, [h2, "Essential"], [u2, m2]], [/\b(v(100md|700na|7011|917g).*\b) b/i], [d2, [h2, "Envizen"], [u2, f2]], [/\b(trio[-\w\. ]+) b/i], [d2, [h2, "MachSpeed"], [u2, f2]], [/\btu_(1491) b/i], [d2, [h2, "Rotor"], [u2, f2]], [/(shield[\w ]+) b/i], [d2, [h2, "Nvidia"], [u2, f2]], [/(sprint) (\w+)/i], [h2, d2, [u2, m2]], [/(kin\.[onetw]{3})/i], [[d2, /\./g, " "], [h2, D2], [u2, m2]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i], [d2, [h2, V2], [u2, f2]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [d2, [h2, V2], [u2, m2]], [/smart-tv.+(samsung)/i], [h2, [u2, T2]], [/hbbtv.+maple;(\d+)/i], [[d2, /^/, "SmartTV"], [h2, k2], [u2, T2]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i], [[h2, N2], [u2, T2]], [/(apple) ?tv/i], [h2, [d2, v2 + " TV"], [u2, T2]], [/crkey/i], [[d2, A2 + "cast"], [h2, w2], [u2, T2]], [/droid.+aft(\w)( bui|\))/i], [d2, [h2, R2], [u2, T2]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i], [d2, [h2, M2], [u2, T2]], [/(bravia[\w ]+)( bui|\))/i], [d2, [h2, U2], [u2, T2]], [/(mitv-\w{5}) bui/i], [d2, [h2, x2], [u2, T2]], [/Hbbtv.*(technisat) (.*);/i], [h2, d2, [u2, T2]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i], [[h2, K2], [d2, K2], [u2, T2]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i], [[u2, T2]], [/(ouya)/i, /(nintendo) ([wids3utch]+)/i], [h2, d2, [u2, E2]], [/droid.+; (shield) bui/i], [d2, [h2, "Nvidia"], [u2, E2]], [/(playstation [345portablevi]+)/i], [d2, [h2, U2], [u2, E2]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i], [d2, [h2, D2], [u2, E2]], [/((pebble))app/i], [h2, d2, [u2, S2]], [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i], [d2, [h2, v2], [u2, S2]], [/droid.+; (glass) \d/i], [d2, [h2, w2], [u2, S2]], [/droid.+; (wt63?0{2,3})\)/i], [d2, [h2, V2], [u2, S2]], [/(quest( 2| pro)?)/i], [d2, [h2, F2], [u2, S2]], [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i], [h2, [u2, g2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i], [d2, [u2, m2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i], [d2, [u2, f2]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i], [[u2, f2]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i], [[u2, m2]], [/(android[-\w\. ]{0,9});.+buil/i], [d2, [h2, "Generic"]]], engine: [[/windows.+ edge\/([\w\.]+)/i], [p2, [l2, "EdgeHTML"]], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i], [p2, [l2, "Blink"]], [/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /ekioh(flow)\/([\w\.]+)/i, /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, /(icab)[\/ ]([23]\.[\d\.]+)/i], [l2, p2], [/rv\:([\w\.]{1,9})\b.+(gecko)/i], [p2, l2]], os: [[/microsoft (windows) (vista|xp)/i], [l2, p2], [/(windows) nt 6\.2; (arm)/i, /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i], [l2, [p2, q2, z2]], [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[l2, "Windows"], [p2, q2, z2]], [/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, /cfnetwork\/.+darwin/i], [[p2, /_/g, "."], [l2, "iOS"]], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i], [[l2, j2], [p2, /_/g, "."]], [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i], [p2, l2], [/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i, /(tizen|kaios)[\/ ]([\w\.]+)/i, /\((series40);/i], [l2, p2], [/\(bb(10);/i], [p2, [l2, I2]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i], [p2, [l2, "Symbian"]], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i], [p2, [l2, b2 + " OS"]], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i], [p2, [l2, "webOS"]], [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i], [p2, [l2, "watchOS"]], [/crkey\/([\d\.]+)/i], [p2, [l2, A2 + "cast"]], [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i], [[l2, B2], p2], [/panasonic;(viera)/i, /(netrange)mmh/i, /(nettv)\/(\d+\.[\w\.]+)/i, /(nintendo|playstation) ([wids345portablevuch]+)/i, /(xbox); +xbox ([^\);]+)/i, /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, /(mint)[\/\(\) ]?(\w*)/i, /(mageia|vectorlinux)[; ]/i, /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i, /(hurd|linux) ?([\w\.]*)/i, /(gnu) ?([\w\.]*)/i, /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku) (\w+)/i], [l2, p2], [/(sunos) ?([\w\.\d]*)/i], [[l2, "Solaris"], p2], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i, /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i, /(unix) ?([\w\.]*)/i], [l2, p2]] }, X2 = function(e3, i3) {
            if (typeof e3 === s2 && (i3 = e3, e3 = n2), !(this instanceof X2)) return new X2(e3, i3).getResult();
            var E3 = typeof t2 !== o2 && t2.navigator ? t2.navigator : n2, T3 = e3 || (E3 && E3.userAgent ? E3.userAgent : ""), S3 = E3 && E3.userAgentData ? E3.userAgentData : n2, g3 = i3 ? function(e4, t3) {
              var i4 = {};
              for (var n3 in e4) t3[n3] && t3[n3].length % 2 == 0 ? i4[n3] = t3[n3].concat(e4[n3]) : i4[n3] = e4[n3];
              return i4;
            }(J2, i3) : J2;
            return this.getBrowser = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, g3.browser), e4[c2] = function(e5) {
                return typeof e5 === a2 ? e5.replace(/[^\d\.]/g, "").split(".")[0] : n2;
              }(e4[p2]), E3 && E3.brave && typeof E3.brave.isBrave == r2 && (e4[l2] = "Brave"), e4;
            }, this.getCPU = function() {
              var e4 = {};
              return e4[_2] = n2, Y2.call(e4, T3, g3.cpu), e4;
            }, this.getDevice = function() {
              var e4 = {};
              return e4[h2] = n2, e4[d2] = n2, e4[u2] = n2, Y2.call(e4, T3, g3.device), !e4[u2] && S3 && S3.mobile && (e4[u2] = m2), "Macintosh" == e4[d2] && E3 && typeof E3.standalone !== o2 && E3.maxTouchPoints && E3.maxTouchPoints > 2 && (e4[d2] = "iPad", e4[u2] = f2), e4;
            }, this.getEngine = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, g3.engine), e4;
            }, this.getOS = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, g3.os), !e4[l2] && S3 && "Unknown" != S3.platform && (e4[l2] = S3.platform.replace(/chrome os/i, B2).replace(/macos/i, j2)), e4;
            }, this.getResult = function() {
              return { ua: this.getUA(), browser: this.getBrowser(), engine: this.getEngine(), os: this.getOS(), device: this.getDevice(), cpu: this.getCPU() };
            }, this.getUA = function() {
              return T3;
            }, this.setUA = function(e4) {
              return T3 = typeof e4 === a2 && e4.length > 350 ? K2(e4, 350) : e4, this;
            }, this.setUA(T3), this;
          };
          X2.VERSION = "0.7.34", X2.BROWSER = G2([l2, p2, c2]), X2.CPU = G2([_2]), X2.DEVICE = G2([d2, h2, u2, E2, m2, T2, f2, S2, g2]), X2.ENGINE = X2.OS = G2([l2, p2]), e2.exports && (i2 = e2.exports = X2), i2.UAParser = X2;
          var Q2 = typeof t2 !== o2 && (t2.jQuery || t2.Zepto);
          if (Q2 && !Q2.ua) {
            var Z2 = new X2();
            Q2.ua = Z2.getResult(), Q2.ua.get = function() {
              return Z2.getUA();
            }, Q2.ua.set = function(e3) {
              Z2.setUA(e3);
              var t3 = Z2.getResult();
              for (var i3 in t3) Q2.ua[i3] = t3[i3];
            };
          }
        }("object" == typeof window ? window : t);
      }(XS, XS.exports);
      var QS = i(XS.exports), ZS = mn, $S = et, eg = H, tg = Jo, ig = _t("iterator"), ng = Object, rg = function(e2) {
        if (eg(e2)) return false;
        var t2 = ng(e2);
        return void 0 !== t2[ig] || "@@iterator" in t2 || $S(tg, ZS(t2));
      }, og = i(rg), sg = xd.clear;
      Ni({ global: true, bind: true, enumerable: true, forced: h.clearImmediate !== sg }, { clearImmediate: sg });
      var ag = h, cg = f, dg = A, lg = Jn, ug = ae, hg = ad, pg = dd, _g = ag.Function, Eg = /MSIE .\./.test(ug) || "BUN" === lg && function() {
        var e2 = ag.Bun.version.split(".");
        return e2.length < 3 || "0" === e2[0] && (e2[1] < 3 || "3" === e2[1] && "0" === e2[2]);
      }(), mg = Ni, fg = h, Tg = xd.set, Sg = function(e2, t2) {
        var i2 = t2 ? 2 : 1;
        return Eg ? function(n2, r2) {
          var o2 = pg(arguments.length, 1) > i2, s2 = dg(n2) ? n2 : _g(n2), a2 = o2 ? hg(arguments, i2) : [], c2 = o2 ? function() {
            cg(s2, this, a2);
          } : s2;
          return t2 ? e2(c2, r2) : e2(c2);
        } : e2;
      }, gg = fg.setImmediate ? Sg(Tg, false) : Tg;
      mg({ global: true, bind: true, enumerable: true, forced: fg.setImmediate !== gg }, { setImmediate: gg });
      var Rg = i($.setImmediate), vg = h, Cg = pl, Ig = Ne, yg = dd, Ag = w;
      Ni({ global: true, enumerable: true, dontCallGetSet: true, forced: n(function() {
        return Ag && 1 !== Object.getOwnPropertyDescriptor(vg, "queueMicrotask").value.length;
      }) }, { queueMicrotask: function(e2) {
        yg(arguments.length, 1), Cg(Ig(e2));
      } });
      var bg = i($.queueMicrotask);
      function wg(e2, t2) {
        return function() {
          return e2.apply(t2, arguments);
        };
      }
      const { toString: Og } = Object.prototype, { getPrototypeOf: Ng } = Object, Dg = (Pg = /* @__PURE__ */ Object.create(null), (e2) => {
        const t2 = Og.call(e2);
        return Pg[t2] || (Pg[t2] = t2.slice(8, -1).toLowerCase());
      });
      var Pg;
      const Lg = (e2) => (e2 = e2.toLowerCase(), (t2) => Dg(t2) === e2), kg = (e2) => (t2) => typeof t2 === e2, { isArray: Mg } = Array, Ug = kg("undefined");
      const xg = Lg("ArrayBuffer");
      const Vg = kg("string"), Fg = kg("function"), Bg = kg("number"), jg = (e2) => null !== e2 && "object" == typeof e2, Gg = (e2) => {
        if ("object" !== Dg(e2)) return false;
        const t2 = Ng(e2);
        return !(null !== t2 && t2 !== Object.prototype && null !== Object.getPrototypeOf(t2) || Symbol.toStringTag in e2 || og(e2));
      }, Wg = Lg("Date"), Hg = Lg("File"), Kg = Lg("Blob"), Yg = Lg("FileList"), qg = Lg("URLSearchParams"), [zg, Jg, Xg, Qg] = ["ReadableStream", "Request", "Response", "Headers"].map(Lg);
      function Zg(e2, t2) {
        let i2, n2, { allOwnKeys: r2 = false } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        if (null != e2) if ("object" != typeof e2 && (e2 = [e2]), Mg(e2)) for (i2 = 0, n2 = e2.length; i2 < n2; i2++) t2.call(null, e2[i2], i2, e2);
        else {
          const n3 = r2 ? Object.getOwnPropertyNames(e2) : Object.keys(e2), o2 = n3.length;
          let s2;
          for (i2 = 0; i2 < o2; i2++) s2 = n3[i2], t2.call(null, e2[s2], s2, e2);
        }
      }
      function $g(e2, t2) {
        t2 = t2.toLowerCase();
        const i2 = Object.keys(e2);
        let n2, r2 = i2.length;
        for (; r2-- > 0; ) if (n2 = i2[r2], t2 === n2.toLowerCase()) return n2;
        return null;
      }
      const eR = void 0 !== JS ? JS : "undefined" != typeof self ? self : "undefined" != typeof window ? window : global, tR = (e2) => !Ug(e2) && e2 !== eR;
      const iR = (nR = "undefined" != typeof Uint8Array && Ng(Uint8Array), (e2) => nR && e2 instanceof nR);
      var nR;
      const rR = Lg("HTMLFormElement"), oR = ((e2) => {
        let { hasOwnProperty: t2 } = e2;
        return (e3, i2) => t2.call(e3, i2);
      })(Object.prototype), sR = Lg("RegExp"), aR = (e2, t2) => {
        const i2 = Object.getOwnPropertyDescriptors(e2), n2 = {};
        Zg(i2, (i3, r2) => {
          let o2;
          false !== (o2 = t2(i3, r2, e2)) && (n2[r2] = o2 || i3);
        }), Object.defineProperties(e2, n2);
      }, cR = "abcdefghijklmnopqrstuvwxyz", dR = "0123456789", lR = { DIGIT: dR, ALPHA: cR, ALPHA_DIGIT: cR + cR.toUpperCase() + dR };
      const uR = Lg("AsyncFunction"), hR = (pR = "function" == typeof Rg, _R = Fg(eR.postMessage), pR ? Rg : _R ? (ER = "axios@".concat(Math.random()), mR = [], eR.addEventListener("message", (e2) => {
        let { source: t2, data: i2 } = e2;
        t2 === eR && i2 === ER && mR.length && mR.shift()();
      }, false), (e2) => {
        mR.push(e2), eR.postMessage(ER, "*");
      }) : (e2) => setTimeout(e2));
      var pR, _R, ER, mR;
      const fR = void 0 !== bg ? bg.bind(eR) : "undefined" != typeof process && process.nextTick || hR;
      var TR = { isArray: Mg, isArrayBuffer: xg, isBuffer: function(e2) {
        return null !== e2 && !Ug(e2) && null !== e2.constructor && !Ug(e2.constructor) && Fg(e2.constructor.isBuffer) && e2.constructor.isBuffer(e2);
      }, isFormData: (e2) => {
        let t2;
        return e2 && ("function" == typeof FormData && e2 instanceof FormData || Fg(e2.append) && ("formdata" === (t2 = Dg(e2)) || "object" === t2 && Fg(e2.toString) && "[object FormData]" === e2.toString()));
      }, isArrayBufferView: function(e2) {
        let t2;
        return t2 = "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e2) : e2 && e2.buffer && xg(e2.buffer), t2;
      }, isString: Vg, isNumber: Bg, isBoolean: (e2) => true === e2 || false === e2, isObject: jg, isPlainObject: Gg, isReadableStream: zg, isRequest: Jg, isResponse: Xg, isHeaders: Qg, isUndefined: Ug, isDate: Wg, isFile: Hg, isBlob: Kg, isRegExp: sR, isFunction: Fg, isStream: (e2) => jg(e2) && Fg(e2.pipe), isURLSearchParams: qg, isTypedArray: iR, isFileList: Yg, forEach: Zg, merge: function e2() {
        const { caseless: t2 } = tR(this) && this || {}, i2 = {}, n2 = (n3, r2) => {
          const o2 = t2 && $g(i2, r2) || r2;
          Gg(i2[o2]) && Gg(n3) ? i2[o2] = e2(i2[o2], n3) : Gg(n3) ? i2[o2] = e2({}, n3) : Mg(n3) ? i2[o2] = n3.slice() : i2[o2] = n3;
        };
        for (let e3 = 0, t3 = arguments.length; e3 < t3; e3++) arguments[e3] && Zg(arguments[e3], n2);
        return i2;
      }, extend: function(e2, t2, i2) {
        let { allOwnKeys: n2 } = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
        return Zg(t2, (t3, n3) => {
          i2 && Fg(t3) ? e2[n3] = wg(t3, i2) : e2[n3] = t3;
        }, { allOwnKeys: n2 }), e2;
      }, trim: (e2) => eS(e2) ? eS(e2).call(e2) : e2.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, ""), stripBOM: (e2) => (65279 === e2.charCodeAt(0) && (e2 = e2.slice(1)), e2), inherits: (e2, t2, i2, n2) => {
        e2.prototype = Object.create(t2.prototype, n2), e2.prototype.constructor = e2, Object.defineProperty(e2, "super", { value: t2.prototype }), i2 && Object.assign(e2.prototype, i2);
      }, toFlatObject: (e2, t2, i2, n2) => {
        let r2, o2, s2;
        const a2 = {};
        if (t2 = t2 || {}, null == e2) return t2;
        do {
          for (r2 = Object.getOwnPropertyNames(e2), o2 = r2.length; o2-- > 0; ) s2 = r2[o2], n2 && !n2(s2, e2, t2) || a2[s2] || (t2[s2] = e2[s2], a2[s2] = true);
          e2 = false !== i2 && Ng(e2);
        } while (e2 && (!i2 || i2(e2, t2)) && e2 !== Object.prototype);
        return t2;
      }, kindOf: Dg, kindOfTest: Lg, endsWith: (e2, t2, i2) => {
        e2 = String(e2), (void 0 === i2 || i2 > e2.length) && (i2 = e2.length), i2 -= t2.length;
        const n2 = e2.indexOf(t2, i2);
        return -1 !== n2 && n2 === i2;
      }, toArray: (e2) => {
        if (!e2) return null;
        if (Mg(e2)) return e2;
        let t2 = e2.length;
        if (!Bg(t2)) return null;
        const i2 = new Array(t2);
        for (; t2-- > 0; ) i2[t2] = e2[t2];
        return i2;
      }, forEachEntry: (e2, t2) => {
        const i2 = (e2 && e2[Symbol.iterator]).call(e2);
        let n2;
        for (; (n2 = i2.next()) && !n2.done; ) {
          const i3 = n2.value;
          t2.call(e2, i3[0], i3[1]);
        }
      }, matchAll: (e2, t2) => {
        let i2;
        const n2 = [];
        for (; null !== (i2 = e2.exec(t2)); ) n2.push(i2);
        return n2;
      }, isHTMLForm: rR, hasOwnProperty: oR, hasOwnProp: oR, reduceDescriptors: aR, freezeMethods: (e2) => {
        aR(e2, (t2, i2) => {
          if (Fg(e2) && -1 !== ["arguments", "caller", "callee"].indexOf(i2)) return false;
          const n2 = e2[i2];
          Fg(n2) && (t2.enumerable = false, "writable" in t2 ? t2.writable = false : t2.set || (t2.set = () => {
            throw Error("Can not rewrite read-only method '" + i2 + "'");
          }));
        });
      }, toObjectSet: (e2, t2) => {
        const i2 = {}, n2 = (e3) => {
          e3.forEach((e4) => {
            i2[e4] = true;
          });
        };
        return Mg(e2) ? n2(e2) : n2(String(e2).split(t2)), i2;
      }, toCamelCase: (e2) => e2.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function(e3, t2, i2) {
        return t2.toUpperCase() + i2;
      }), noop: () => {
      }, toFiniteNumber: (e2, t2) => null != e2 && Number.isFinite(e2 = +e2) ? e2 : t2, findKey: $g, global: eR, isContextDefined: tR, ALPHABET: lR, generateString: function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 16, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : lR.ALPHA_DIGIT, i2 = "";
        const { length: n2 } = t2;
        for (; e2--; ) i2 += t2[Math.random() * n2 | 0];
        return i2;
      }, isSpecCompliantForm: function(e2) {
        return !!(e2 && Fg(e2.append) && "FormData" === e2[Symbol.toStringTag] && e2[Symbol.iterator]);
      }, toJSONObject: (e2) => {
        const t2 = new Array(10), i2 = (e3, n2) => {
          if (jg(e3)) {
            if (t2.indexOf(e3) >= 0) return;
            if (!("toJSON" in e3)) {
              t2[n2] = e3;
              const r2 = Mg(e3) ? [] : {};
              return Zg(e3, (e4, t3) => {
                const o2 = i2(e4, n2 + 1);
                !Ug(o2) && (r2[t3] = o2);
              }), t2[n2] = void 0, r2;
            }
          }
          return e3;
        };
        return i2(e2, 0);
      }, isAsyncFn: uR, isThenable: (e2) => e2 && (jg(e2) || Fg(e2)) && Fg(e2.then) && Fg(e2.catch), setImmediate: hR, asap: fR };
      function SR(e2, t2, i2, n2, r2) {
        Error.call(this), Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = new Error().stack, this.message = e2, this.name = "AxiosError", t2 && (this.code = t2), i2 && (this.config = i2), n2 && (this.request = n2), r2 && (this.response = r2, this.status = r2.status ? r2.status : null);
      }
      TR.inherits(SR, Error, { toJSON: function() {
        return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: TR.toJSONObject(this.config), code: this.code, status: this.status };
      } });
      const gR = SR.prototype, RR = {};
      ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED", "ERR_NOT_SUPPORT", "ERR_INVALID_URL"].forEach((e2) => {
        RR[e2] = { value: e2 };
      }), Object.defineProperties(SR, RR), Object.defineProperty(gR, "isAxiosError", { value: true }), SR.from = (e2, t2, i2, n2, r2, o2) => {
        const s2 = Object.create(gR);
        return TR.toFlatObject(e2, s2, function(e3) {
          return e3 !== Error.prototype;
        }, (e3) => "isAxiosError" !== e3), SR.call(s2, e2.message, t2, i2, n2, r2), s2.cause = e2, s2.name = e2.name, o2 && Object.assign(s2, o2), s2;
      };
      function vR(e2) {
        return TR.isPlainObject(e2) || TR.isArray(e2);
      }
      function CR(e2) {
        return TR.endsWith(e2, "[]") ? e2.slice(0, -2) : e2;
      }
      function IR(e2, t2, i2) {
        return e2 ? e2.concat(t2).map(function(e3, t3) {
          return e3 = CR(e3), !i2 && t3 ? "[" + e3 + "]" : e3;
        }).join(i2 ? "." : "") : t2;
      }
      const yR = TR.toFlatObject(TR, {}, null, function(e2) {
        return /^is[A-Z]/.test(e2);
      });
      function AR(e2, t2, i2) {
        if (!TR.isObject(e2)) throw new TypeError("target must be an object");
        t2 = t2 || new FormData();
        const n2 = (i2 = TR.toFlatObject(i2, { metaTokens: true, dots: false, indexes: false }, false, function(e3, t3) {
          return !TR.isUndefined(t3[e3]);
        })).metaTokens, r2 = i2.visitor || d2, o2 = i2.dots, s2 = i2.indexes, a2 = (i2.Blob || "undefined" != typeof Blob && Blob) && TR.isSpecCompliantForm(t2);
        if (!TR.isFunction(r2)) throw new TypeError("visitor must be a function");
        function c2(e3) {
          if (null === e3) return "";
          if (TR.isDate(e3)) return e3.toISOString();
          if (!a2 && TR.isBlob(e3)) throw new SR("Blob is not supported. Use a Buffer instead.");
          return TR.isArrayBuffer(e3) || TR.isTypedArray(e3) ? a2 && "function" == typeof Blob ? new Blob([e3]) : Buffer.from(e3) : e3;
        }
        function d2(e3, i3, r3) {
          let a3 = e3;
          if (e3 && !r3 && "object" == typeof e3) {
            if (TR.endsWith(i3, "{}")) i3 = n2 ? i3 : i3.slice(0, -2), e3 = JSON.stringify(e3);
            else if (TR.isArray(e3) && function(e4) {
              return TR.isArray(e4) && !e4.some(vR);
            }(e3) || (TR.isFileList(e3) || TR.endsWith(i3, "[]")) && (a3 = TR.toArray(e3))) return i3 = CR(i3), a3.forEach(function(e4, n3) {
              !TR.isUndefined(e4) && null !== e4 && t2.append(true === s2 ? IR([i3], n3, o2) : null === s2 ? i3 : i3 + "[]", c2(e4));
            }), false;
          }
          return !!vR(e3) || (t2.append(IR(r3, i3, o2), c2(e3)), false);
        }
        const l2 = [], u2 = Object.assign(yR, { defaultVisitor: d2, convertValue: c2, isVisitable: vR });
        if (!TR.isObject(e2)) throw new TypeError("data must be an object");
        return function e3(i3, n3) {
          if (!TR.isUndefined(i3)) {
            if (-1 !== l2.indexOf(i3)) throw Error("Circular reference detected in " + n3.join("."));
            l2.push(i3), TR.forEach(i3, function(i4, o3) {
              true === (!(TR.isUndefined(i4) || null === i4) && r2.call(t2, i4, TR.isString(o3) ? eS(o3).call(o3) : o3, n3, u2)) && e3(i4, n3 ? n3.concat(o3) : [o3]);
            }), l2.pop();
          }
        }(e2), t2;
      }
      function bR(e2) {
        const t2 = { "!": "%21", "'": "%27", "(": "%28", ")": "%29", "~": "%7E", "%20": "+", "%00": "\0" };
        return encodeURIComponent(e2).replace(/[!'()~]|%20|%00/g, function(e3) {
          return t2[e3];
        });
      }
      function wR(e2, t2) {
        this._pairs = [], e2 && AR(e2, this, t2);
      }
      const OR = wR.prototype;
      function NR(e2) {
        return encodeURIComponent(e2).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      function DR(e2, t2, i2) {
        if (!t2) return e2;
        const n2 = i2 && i2.encode || NR;
        TR.isFunction(i2) && (i2 = { serialize: i2 });
        const r2 = i2 && i2.serialize;
        let o2;
        if (o2 = r2 ? r2(t2, i2) : TR.isURLSearchParams(t2) ? t2.toString() : new wR(t2, i2).toString(n2), o2) {
          const t3 = e2.indexOf("#");
          -1 !== t3 && (e2 = e2.slice(0, t3)), e2 += (-1 === e2.indexOf("?") ? "?" : "&") + o2;
        }
        return e2;
      }
      OR.append = function(e2, t2) {
        this._pairs.push([e2, t2]);
      }, OR.toString = function(e2) {
        const t2 = e2 ? function(t3) {
          return e2.call(this, t3, bR);
        } : bR;
        return this._pairs.map(function(e3) {
          return t2(e3[0]) + "=" + t2(e3[1]);
        }, "").join("&");
      };
      var PR = class {
        constructor() {
          this.handlers = [];
        }
        use(e2, t2, i2) {
          return this.handlers.push({ fulfilled: e2, rejected: t2, synchronous: !!i2 && i2.synchronous, runWhen: i2 ? i2.runWhen : null }), this.handlers.length - 1;
        }
        eject(e2) {
          this.handlers[e2] && (this.handlers[e2] = null);
        }
        clear() {
          this.handlers && (this.handlers = []);
        }
        forEach(e2) {
          TR.forEach(this.handlers, function(t2) {
            null !== t2 && e2(t2);
          });
        }
      }, LR = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false }, kR = { exports: {} }, MR = Ni, UR = w, xR = $t.f;
      MR({ target: "Object", stat: true, forced: Object.defineProperty !== xR, sham: !UR }, { defineProperty: xR });
      var VR = $.Object, FR = kR.exports = function(e2, t2, i2) {
        return VR.defineProperty(e2, t2, i2);
      };
      VR.defineProperty.sham && (FR.sham = true);
      var BR = i(kR.exports), jR = TypeError, GR = sr, WR = Zc, HR = Z, KR = _t("species"), YR = Array, qR = function(e2) {
        var t2;
        return GR(e2) && (t2 = e2.constructor, (WR(t2) && (t2 === YR || GR(t2.prototype)) || HR(t2) && null === (t2 = t2[KR])) && (t2 = void 0)), void 0 === t2 ? YR : t2;
      }, zR = function(e2, t2) {
        return new (qR(e2))(0 === t2 ? 0 : t2);
      }, JR = n, XR = _e, QR = _t("species"), ZR = function(e2) {
        return XR >= 51 || !JR(function() {
          var t2 = [];
          return (t2.constructor = {})[QR] = function() {
            return { foo: 1 };
          }, 1 !== t2[e2](Boolean).foo;
        });
      }, $R = Ni, ev = n, tv = sr, iv = Z, nv = Qe, rv = Hi, ov = function(e2) {
        if (e2 > 9007199254740991) throw jR("Maximum allowed index exceeded");
        return e2;
      }, sv = _E, av = zR, cv = ZR, dv = _e, lv = _t("isConcatSpreadable"), uv = dv >= 51 || !ev(function() {
        var e2 = [];
        return e2[lv] = false, e2.concat()[0] !== e2;
      }), hv = function(e2) {
        if (!iv(e2)) return false;
        var t2 = e2[lv];
        return void 0 !== t2 ? !!t2 : tv(e2);
      };
      $R({ target: "Array", proto: true, arity: 1, forced: !uv || !cv("concat") }, { concat: function(e2) {
        var t2, i2, n2, r2, o2, s2 = nv(this), a2 = av(s2, 0), c2 = 0;
        for (t2 = -1, n2 = arguments.length; t2 < n2; t2++) if (hv(o2 = -1 === t2 ? s2 : arguments[t2])) for (r2 = rv(o2), ov(c2 + r2), i2 = 0; i2 < r2; i2++, c2++) i2 in o2 && sv(a2, c2, o2[i2]);
        else ov(c2 + 1), sv(a2, c2++, o2);
        return a2.length = c2, a2;
      } });
      var pv = {}, _v = R, Ev = X, mv = jr.f, fv = ad, Tv = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      pv.f = function(e2) {
        return Tv && "Window" === _v(e2) ? function(e3) {
          try {
            return mv(e3);
          } catch (e4) {
            return fv(Tv);
          }
        }(e2) : mv(Ev(e2));
      };
      var Sv = {}, gv = _t;
      Sv.f = gv;
      var Rv = $, vv = et, Cv = Sv, Iv = $t.f, yv = function(e2) {
        var t2 = Rv.Symbol || (Rv.Symbol = {});
        vv(t2, e2) || Iv(t2, e2, { value: Cv.f(e2) });
      }, Av = D, bv = re, wv = _t, Ov = Ia, Nv = function() {
        var e2 = bv("Symbol"), t2 = e2 && e2.prototype, i2 = t2 && t2.valueOf, n2 = wv("toPrimitive");
        t2 && !t2[n2] && Ov(t2, n2, function(e3) {
          return Av(i2, this);
        }, { arity: 1 });
      }, Dv = Zt, Pv = W, Lv = Qe, kv = Hi, Mv = zR, Uv = d([].push), xv = function(e2) {
        var t2 = 1 === e2, i2 = 2 === e2, n2 = 3 === e2, r2 = 4 === e2, o2 = 6 === e2, s2 = 7 === e2, a2 = 5 === e2 || o2;
        return function(c2, d2, l2, u2) {
          for (var h2, p2, _2 = Lv(c2), E2 = Pv(_2), m2 = kv(E2), f2 = Dv(d2, l2), T2 = 0, S2 = u2 || Mv, g2 = t2 ? S2(c2, m2) : i2 || s2 ? S2(c2, 0) : void 0; m2 > T2; T2++) if ((a2 || T2 in E2) && (p2 = f2(h2 = E2[T2], T2, _2), e2)) if (t2) g2[T2] = p2;
          else if (p2) switch (e2) {
            case 3:
              return true;
            case 5:
              return h2;
            case 6:
              return T2;
            case 2:
              Uv(g2, h2);
          }
          else switch (e2) {
            case 4:
              return false;
            case 7:
              Uv(g2, h2);
          }
          return o2 ? -1 : n2 || r2 ? r2 : g2;
        };
      }, Vv = { forEach: xv(0), map: xv(1), filter: xv(2), some: xv(3), every: xv(4), find: xv(5), findIndex: xv(6), filterReject: xv(7) }, Fv = Ni, Bv = h, jv = D, Gv = d, Wv = w, Hv = Te, Kv = n, Yv = et, qv = l, zv = ri, Jv = X, Xv = It, Qv = Sn, Zv = V, $v = Mo, eC = po, tC = jr, iC = pv, nC = Zr, rC = b, oC = $t, sC = lo, aC = P, cC = Ia, dC = Ic, lC = ze, uC = Gr, hC = ot, pC = _t, _C = Sv, EC = yv, mC = Nv, fC = Wa, TC = ma, SC = Vv.forEach, gC = gr("hidden"), RC = "Symbol", vC = "prototype", CC = TC.set, IC = TC.getterFor(RC), yC = Object[vC], AC = Bv.Symbol, bC = AC && AC[vC], wC = Bv.RangeError, OC = Bv.TypeError, NC = Bv.QObject, DC = rC.f, PC = oC.f, LC = iC.f, kC = aC.f, MC = Gv([].push), UC = lC("symbols"), xC = lC("op-symbols"), VC = lC("wks"), FC = !NC || !NC[vC] || !NC[vC].findChild, BC = function(e2, t2, i2) {
        var n2 = DC(yC, t2);
        n2 && delete yC[t2], PC(e2, t2, i2), n2 && e2 !== yC && PC(yC, t2, n2);
      }, jC = Wv && Kv(function() {
        return 7 !== $v(PC({}, "a", { get: function() {
          return PC(this, "a", { value: 7 }).a;
        } })).a;
      }) ? BC : PC, GC = function(e2, t2) {
        var i2 = UC[e2] = $v(bC);
        return CC(i2, { type: RC, tag: e2, description: t2 }), Wv || (i2.description = t2), i2;
      }, WC = function(e2, t2, i2) {
        e2 === yC && WC(xC, t2, i2), zv(e2);
        var n2 = Xv(t2);
        return zv(i2), Yv(UC, n2) ? (i2.enumerable ? (Yv(e2, gC) && e2[gC][n2] && (e2[gC][n2] = false), i2 = $v(i2, { enumerable: Zv(0, false) })) : (Yv(e2, gC) || PC(e2, gC, Zv(1, $v(null))), e2[gC][n2] = true), jC(e2, n2, i2)) : PC(e2, n2, i2);
      }, HC = function(e2, t2) {
        zv(e2);
        var i2 = Jv(t2), n2 = eC(i2).concat(zC(i2));
        return SC(n2, function(t3) {
          Wv && !jv(KC, i2, t3) || WC(e2, t3, i2[t3]);
        }), e2;
      }, KC = function(e2) {
        var t2 = Xv(e2), i2 = jv(kC, this, t2);
        return !(this === yC && Yv(UC, t2) && !Yv(xC, t2)) && (!(i2 || !Yv(this, t2) || !Yv(UC, t2) || Yv(this, gC) && this[gC][t2]) || i2);
      }, YC = function(e2, t2) {
        var i2 = Jv(e2), n2 = Xv(t2);
        if (i2 !== yC || !Yv(UC, n2) || Yv(xC, n2)) {
          var r2 = DC(i2, n2);
          return !r2 || !Yv(UC, n2) || Yv(i2, gC) && i2[gC][n2] || (r2.enumerable = true), r2;
        }
      }, qC = function(e2) {
        var t2 = LC(Jv(e2)), i2 = [];
        return SC(t2, function(e3) {
          Yv(UC, e3) || Yv(uC, e3) || MC(i2, e3);
        }), i2;
      }, zC = function(e2) {
        var t2 = e2 === yC, i2 = LC(t2 ? xC : Jv(e2)), n2 = [];
        return SC(i2, function(e3) {
          !Yv(UC, e3) || t2 && !Yv(yC, e3) || MC(n2, UC[e3]);
        }), n2;
      };
      Hv || (AC = function() {
        if (qv(bC, this)) throw new OC("Symbol is not a constructor");
        var e2 = arguments.length && void 0 !== arguments[0] ? Qv(arguments[0]) : void 0, t2 = hC(e2), i2 = function(e3) {
          var n2 = void 0 === this ? Bv : this;
          n2 === yC && jv(i2, xC, e3), Yv(n2, gC) && Yv(n2[gC], t2) && (n2[gC][t2] = false);
          var r2 = Zv(1, e3);
          try {
            jC(n2, t2, r2);
          } catch (e4) {
            if (!(e4 instanceof wC)) throw e4;
            BC(n2, t2, r2);
          }
        };
        return Wv && FC && jC(yC, t2, { configurable: true, set: i2 }), GC(t2, e2);
      }, cC(bC = AC[vC], "toString", function() {
        return IC(this).tag;
      }), cC(AC, "withoutSetter", function(e2) {
        return GC(hC(e2), e2);
      }), aC.f = KC, oC.f = WC, sC.f = HC, rC.f = YC, tC.f = iC.f = qC, nC.f = zC, _C.f = function(e2) {
        return GC(pC(e2), e2);
      }, Wv && dC(bC, "description", { configurable: true, get: function() {
        return IC(this).description;
      } })), Fv({ global: true, constructor: true, wrap: true, forced: !Hv, sham: !Hv }, { Symbol: AC }), SC(eC(VC), function(e2) {
        EC(e2);
      }), Fv({ target: RC, stat: true, forced: !Hv }, { useSetter: function() {
        FC = true;
      }, useSimple: function() {
        FC = false;
      } }), Fv({ target: "Object", stat: true, forced: !Hv, sham: !Wv }, { create: function(e2, t2) {
        return void 0 === t2 ? $v(e2) : HC($v(e2), t2);
      }, defineProperty: WC, defineProperties: HC, getOwnPropertyDescriptor: YC }), Fv({ target: "Object", stat: true, forced: !Hv }, { getOwnPropertyNames: qC }), mC(), fC(AC, RC), uC[gC] = true;
      var JC = Te && !!Symbol.for && !!Symbol.keyFor, XC = Ni, QC = re, ZC = et, $C = Sn, eI = ze, tI = JC, iI = eI("string-to-symbol-registry"), nI = eI("symbol-to-string-registry");
      XC({ target: "Symbol", stat: true, forced: !tI }, { for: function(e2) {
        var t2 = $C(e2);
        if (ZC(iI, t2)) return iI[t2];
        var i2 = QC("Symbol")(t2);
        return iI[t2] = i2, nI[i2] = t2, i2;
      } });
      var rI = Ni, oI = et, sI = Ie, aI = Ae, cI = JC, dI = ze("symbol-to-string-registry");
      rI({ target: "Symbol", stat: true, forced: !cI }, { keyFor: function(e2) {
        if (!sI(e2)) throw new TypeError(aI(e2) + " is not a symbol");
        if (oI(dI, e2)) return dI[e2];
      } });
      var lI = sr, uI = A, hI = R, pI = Sn, _I = d([].push), EI = Ni, mI = re, fI = f, TI = D, SI = d, gI = n, RI = A, vI = Ie, CI = ad, II = function(e2) {
        if (uI(e2)) return e2;
        if (lI(e2)) {
          for (var t2 = e2.length, i2 = [], n2 = 0; n2 < t2; n2++) {
            var r2 = e2[n2];
            "string" == typeof r2 ? _I(i2, r2) : "number" != typeof r2 && "Number" !== hI(r2) && "String" !== hI(r2) || _I(i2, pI(r2));
          }
          var o2 = i2.length, s2 = true;
          return function(e3, t3) {
            if (s2) return s2 = false, t3;
            if (lI(this)) return t3;
            for (var n3 = 0; n3 < o2; n3++) if (i2[n3] === e3) return t3;
          };
        }
      }, yI = Te, AI = String, bI = mI("JSON", "stringify"), wI = SI(/./.exec), OI = SI("".charAt), NI = SI("".charCodeAt), DI = SI("".replace), PI = SI(1 .toString), LI = /[\uD800-\uDFFF]/g, kI = /^[\uD800-\uDBFF]$/, MI = /^[\uDC00-\uDFFF]$/, UI = !yI || gI(function() {
        var e2 = mI("Symbol")("stringify detection");
        return "[null]" !== bI([e2]) || "{}" !== bI({ a: e2 }) || "{}" !== bI(Object(e2));
      }), xI = gI(function() {
        return '"\\udf06\\ud834"' !== bI("\uDF06\uD834") || '"\\udead"' !== bI("\uDEAD");
      }), VI = function(e2, t2) {
        var i2 = CI(arguments), n2 = II(t2);
        if (RI(n2) || void 0 !== e2 && !vI(e2)) return i2[1] = function(e3, t3) {
          if (RI(n2) && (t3 = TI(n2, this, AI(e3), t3)), !vI(t3)) return t3;
        }, fI(bI, null, i2);
      }, FI = function(e2, t2, i2) {
        var n2 = OI(i2, t2 - 1), r2 = OI(i2, t2 + 1);
        return wI(kI, e2) && !wI(MI, r2) || wI(MI, e2) && !wI(kI, n2) ? "\\u" + PI(NI(e2, 0), 16) : e2;
      };
      bI && EI({ target: "JSON", stat: true, arity: 3, forced: UI || xI }, { stringify: function(e2, t2, i2) {
        var n2 = CI(arguments), r2 = fI(UI ? VI : bI, null, n2);
        return xI && "string" == typeof r2 ? DI(r2, LI, FI) : r2;
      } });
      var BI = Zr, jI = Qe;
      Ni({ target: "Object", stat: true, forced: !Te || n(function() {
        BI.f(1);
      }) }, { getOwnPropertySymbols: function(e2) {
        var t2 = BI.f;
        return t2 ? t2(jI(e2)) : [];
      } }), yv("asyncIterator"), yv("hasInstance"), yv("isConcatSpreadable"), yv("iterator"), yv("match"), yv("matchAll"), yv("replace"), yv("search"), yv("species"), yv("split");
      var GI = Nv;
      yv("toPrimitive"), GI();
      var WI = re, HI = Wa;
      yv("toStringTag"), HI(WI("Symbol"), "Symbol"), yv("unscopables"), Wa(h.JSON, "JSON", true);
      var KI = $.Symbol, YI = _t, qI = $t.f, zI = YI("metadata"), JI = Function.prototype;
      void 0 === JI[zI] && qI(JI, zI, { value: null }), yv("asyncDispose"), yv("dispose"), yv("metadata");
      var XI = KI, QI = d, ZI = re("Symbol"), $I = ZI.keyFor, ey = QI(ZI.prototype.valueOf), ty = ZI.isRegisteredSymbol || function(e2) {
        try {
          return void 0 !== $I(ey(e2));
        } catch (e3) {
          return false;
        }
      };
      Ni({ target: "Symbol", stat: true }, { isRegisteredSymbol: ty });
      for (var iy = ze, ny = re, ry = d, oy = Ie, sy = _t, ay = ny("Symbol"), cy = ay.isWellKnownSymbol, dy = ny("Object", "getOwnPropertyNames"), ly = ry(ay.prototype.valueOf), uy = iy("wks"), hy = 0, py = dy(ay), _y = py.length; hy < _y; hy++) try {
        var Ey = py[hy];
        oy(ay[Ey]) && sy(Ey);
      } catch (e2) {
      }
      var my = function(e2) {
        if (cy && cy(e2)) return true;
        try {
          for (var t2 = ly(e2), i2 = 0, n2 = dy(uy), r2 = n2.length; i2 < r2; i2++) if (uy[n2[i2]] == t2) return true;
        } catch (e3) {
        }
        return false;
      };
      Ni({ target: "Symbol", stat: true, forced: true }, { isWellKnownSymbol: my }), yv("customMatcher"), yv("observable"), Ni({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, { isRegistered: ty }), Ni({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, { isWellKnown: my }), yv("matcher"), yv("metadataKey"), yv("patternMatch"), yv("replaceAll");
      var fy = i(XI), Ty = i(Sv.f("iterator"));
      function Sy(e2) {
        return Sy = "function" == typeof fy && "symbol" == typeof Ty ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof fy && e3.constructor === fy && e3 !== fy.prototype ? "symbol" : typeof e3;
        }, Sy(e2);
      }
      var gy = i(Sv.f("toPrimitive"));
      function Ry(e2) {
        var t2 = function(e3, t3) {
          if ("object" !== Sy(e3) || null === e3) return e3;
          var i2 = e3[gy];
          if (void 0 !== i2) {
            var n2 = i2.call(e3, t3 || "default");
            if ("object" !== Sy(n2)) return n2;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === t3 ? String : Number)(e3);
        }(e2, "string");
        return "symbol" === Sy(t2) ? t2 : String(t2);
      }
      function vy(e2, t2, i2) {
        return (t2 = Ry(t2)) in e2 ? BR(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      var Cy = i(J_), Iy = { isBrowser: true, classes: { URLSearchParams: void 0 !== Cy ? Cy : wR, FormData: "undefined" != typeof FormData ? FormData : null, Blob: "undefined" != typeof Blob ? Blob : null }, protocols: ["http", "https", "file", "blob", "url", "data"] };
      const yy = "undefined" != typeof window && "undefined" != typeof document, Ay = "object" == typeof navigator && navigator || void 0, by = yy && (!Ay || ["ReactNative", "NativeScript", "NS"].indexOf(Ay.product) < 0), wy = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope && "function" == typeof self.importScripts, Oy = yy && window.location.href || "http://localhost";
      function Ny(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Dy(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Ny(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Ny(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      var Py = Dy(Dy({}, Object.freeze({ __proto__: null, hasBrowserEnv: yy, hasStandardBrowserEnv: by, hasStandardBrowserWebWorkerEnv: wy, navigator: Ay, origin: Oy })), Iy);
      var Ly = ri, ky = D, My = et, Uy = l, xy = function() {
        var e2 = Ly(this), t2 = "";
        return e2.hasIndices && (t2 += "d"), e2.global && (t2 += "g"), e2.ignoreCase && (t2 += "i"), e2.multiline && (t2 += "m"), e2.dotAll && (t2 += "s"), e2.unicode && (t2 += "u"), e2.unicodeSets && (t2 += "v"), e2.sticky && (t2 += "y"), t2;
      }, Vy = RegExp.prototype, Fy = function(e2) {
        var t2 = e2.flags;
        return void 0 !== t2 || "flags" in Vy || My(e2, "flags") || !Uy(Vy, e2) ? t2 : ky(xy, e2);
      }, By = jh.charAt, jy = D, Gy = ri, Wy = A, Hy = R, Ky = /./.exec, Yy = TypeError, qy = Ni, zy = D, Jy = I, Xy = Xa, Qy = _c, Zy = q, $y = Gi, eA = Sn, tA = ri, iA = H, nA = R, rA = on, oA = Fy, sA = Le, aA = n, cA = sd, dA = function(e2, t2, i2) {
        return t2 + (i2 ? By(e2, t2).length : 1);
      }, lA = function(e2, t2) {
        var i2 = e2.exec;
        if (Wy(i2)) {
          var n2 = jy(i2, e2, t2);
          return null !== n2 && Gy(n2), n2;
        }
        if ("RegExp" === Hy(e2)) return jy(Ky, e2, t2);
        throw new Yy("RegExp#exec called on incompatible receiver");
      }, uA = ma, hA = _t("matchAll"), pA = "RegExp String", _A = pA + " Iterator", EA = uA.set, mA = uA.getterFor(_A), fA = TypeError, TA = Jy("".indexOf), SA = Jy("".matchAll), gA = !!SA && !aA(function() {
        SA("a", /./);
      }), RA = Xy(function(e2, t2, i2, n2) {
        EA(this, { type: _A, regexp: e2, string: t2, global: i2, unicode: n2, done: false });
      }, pA, function() {
        var e2 = mA(this);
        if (e2.done) return Qy(void 0, true);
        var t2 = e2.regexp, i2 = e2.string, n2 = lA(t2, i2);
        return null === n2 ? (e2.done = true, Qy(void 0, true)) : e2.global ? ("" === eA(n2[0]) && (t2.lastIndex = dA(i2, $y(t2.lastIndex), e2.unicode)), Qy(n2, false)) : (e2.done = true, Qy(n2, false));
      }), vA = function(e2) {
        var t2, i2, n2, r2 = tA(this), o2 = eA(e2), s2 = cA(r2, RegExp), a2 = eA(oA(r2));
        return t2 = new s2(s2 === RegExp ? r2.source : r2, a2), i2 = !!~TA(a2, "g"), n2 = !!~TA(a2, "u"), t2.lastIndex = $y(r2.lastIndex), new RA(t2, o2, i2, n2);
      };
      qy({ target: "String", proto: true, forced: gA }, { matchAll: function(e2) {
        var t2, i2, n2, r2, o2 = Zy(this);
        if (iA(e2)) {
          if (gA) return SA(o2, e2);
        } else {
          if (rA(e2) && (t2 = eA(Zy(oA(e2))), !~TA(t2, "g"))) throw new fA("`.matchAll` does not allow non-global regexes");
          if (gA) return SA(o2, e2);
          if (void 0 === (n2 = sA(e2, hA)) && "RegExp" === nA(e2) && (n2 = vA), n2) return zy(n2, e2, o2);
        }
        return i2 = eA(o2), r2 = new RegExp(e2, "g"), zy(vA, r2, i2);
      } });
      var CA = $i("String", "matchAll"), IA = l, yA = CA, AA = String.prototype, bA = function(e2) {
        var t2 = e2.matchAll;
        return "string" == typeof e2 || e2 === AA || IA(AA, e2) && t2 === AA.matchAll ? yA : t2;
      }, wA = i(bA);
      function OA(e2) {
        function t2(e3, i2, n2, r2) {
          let o2 = e3[r2++];
          if ("__proto__" === o2) return true;
          const s2 = Number.isFinite(+o2), a2 = r2 >= e3.length;
          if (o2 = !o2 && TR.isArray(n2) ? n2.length : o2, a2) return TR.hasOwnProp(n2, o2) ? n2[o2] = [n2[o2], i2] : n2[o2] = i2, !s2;
          n2[o2] && TR.isObject(n2[o2]) || (n2[o2] = []);
          return t2(e3, i2, n2[o2], r2) && TR.isArray(n2[o2]) && (n2[o2] = function(e4) {
            const t3 = {}, i3 = Object.keys(e4);
            let n3;
            const r3 = i3.length;
            let o3;
            for (n3 = 0; n3 < r3; n3++) o3 = i3[n3], t3[o3] = e4[o3];
            return t3;
          }(n2[o2])), !s2;
        }
        if (TR.isFormData(e2) && TR.isFunction(e2.entries)) {
          const i2 = {};
          return TR.forEachEntry(e2, (e3, n2) => {
            t2(function(e4) {
              return wA(TR).call(TR, /\w+|\[(\w*)]/g, e4).map((e5) => "[]" === e5[0] ? "" : e5[1] || e5[0]);
            }(e3), n2, i2, 0);
          }), i2;
        }
        return null;
      }
      const NA = { transitional: LR, adapter: ["xhr", "http", "fetch"], transformRequest: [function(e2, t2) {
        const i2 = t2.getContentType() || "", n2 = i2.indexOf("application/json") > -1, r2 = TR.isObject(e2);
        r2 && TR.isHTMLForm(e2) && (e2 = new FormData(e2));
        if (TR.isFormData(e2)) return n2 ? JSON.stringify(OA(e2)) : e2;
        if (TR.isArrayBuffer(e2) || TR.isBuffer(e2) || TR.isStream(e2) || TR.isFile(e2) || TR.isBlob(e2) || TR.isReadableStream(e2)) return e2;
        if (TR.isArrayBufferView(e2)) return e2.buffer;
        if (TR.isURLSearchParams(e2)) return t2.setContentType("application/x-www-form-urlencoded;charset=utf-8", false), e2.toString();
        let o2;
        if (r2) {
          if (i2.indexOf("application/x-www-form-urlencoded") > -1) return function(e3, t3) {
            return AR(e3, new Py.classes.URLSearchParams(), Object.assign({ visitor: function(e4, t4, i3, n3) {
              return Py.isNode && TR.isBuffer(e4) ? (this.append(t4, e4.toString("base64")), false) : n3.defaultVisitor.apply(this, arguments);
            } }, t3));
          }(e2, this.formSerializer).toString();
          if ((o2 = TR.isFileList(e2)) || i2.indexOf("multipart/form-data") > -1) {
            const t3 = this.env && this.env.FormData;
            return AR(o2 ? { "files[]": e2 } : e2, t3 && new t3(), this.formSerializer);
          }
        }
        return r2 || n2 ? (t2.setContentType("application/json", false), function(e3, t3, i3) {
          if (TR.isString(e3)) try {
            return (t3 || JSON.parse)(e3), eS(TR).call(TR, e3);
          } catch (e4) {
            if ("SyntaxError" !== e4.name) throw e4;
          }
          return (i3 || JSON.stringify)(e3);
        }(e2)) : e2;
      }], transformResponse: [function(e2) {
        const t2 = this.transitional || NA.transitional, i2 = t2 && t2.forcedJSONParsing, n2 = "json" === this.responseType;
        if (TR.isResponse(e2) || TR.isReadableStream(e2)) return e2;
        if (e2 && TR.isString(e2) && (i2 && !this.responseType || n2)) {
          const i3 = !(t2 && t2.silentJSONParsing) && n2;
          try {
            return JSON.parse(e2);
          } catch (e3) {
            if (i3) {
              if ("SyntaxError" === e3.name) throw SR.from(e3, SR.ERR_BAD_RESPONSE, this, null, this.response);
              throw e3;
            }
          }
        }
        return e2;
      }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: Py.classes.FormData, Blob: Py.classes.Blob }, validateStatus: function(e2) {
        return e2 >= 200 && e2 < 300;
      }, headers: { common: { Accept: "application/json, text/plain, */*", "Content-Type": void 0 } } };
      TR.forEach(["delete", "get", "head", "post", "put", "patch"], (e2) => {
        NA.headers[e2] = {};
      });
      var DA = NA;
      const PA = TR.toObjectSet(["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"]);
      const LA = Symbol("internals");
      function kA(e2) {
        var t2;
        return e2 && eS(t2 = String(e2)).call(t2).toLowerCase();
      }
      function MA(e2) {
        return false === e2 || null == e2 ? e2 : TR.isArray(e2) ? e2.map(MA) : String(e2);
      }
      function UA(e2, t2, i2, n2, r2) {
        return TR.isFunction(n2) ? n2.call(this, t2, i2) : (r2 && (t2 = i2), TR.isString(t2) ? TR.isString(n2) ? -1 !== t2.indexOf(n2) : TR.isRegExp(n2) ? n2.test(t2) : void 0 : void 0);
      }
      class xA {
        constructor(e2) {
          e2 && this.set(e2);
        }
        set(e2, t2, i2) {
          const n2 = this;
          function r2(e3, t3, i3) {
            const r3 = kA(t3);
            if (!r3) throw new Error("header name must be a non-empty string");
            const o3 = TR.findKey(n2, r3);
            (!o3 || void 0 === n2[o3] || true === i3 || void 0 === i3 && false !== n2[o3]) && (n2[o3 || t3] = MA(e3));
          }
          const o2 = (e3, t3) => TR.forEach(e3, (e4, i3) => r2(e4, i3, t3));
          if (TR.isPlainObject(e2) || e2 instanceof this.constructor) o2(e2, t2);
          else if (TR.isString(e2) && (e2 = eS(e2).call(e2)) && !/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(eS(s2 = e2).call(s2))) o2(((e3) => {
            const t3 = {};
            let i3, n3, r3;
            return e3 && e3.split("\n").forEach(function(e4) {
              var o3, s3;
              r3 = e4.indexOf(":"), i3 = eS(o3 = e4.substring(0, r3)).call(o3).toLowerCase(), n3 = eS(s3 = e4.substring(r3 + 1)).call(s3), !i3 || t3[i3] && PA[i3] || ("set-cookie" === i3 ? t3[i3] ? t3[i3].push(n3) : t3[i3] = [n3] : t3[i3] = t3[i3] ? t3[i3] + ", " + n3 : n3);
            }), t3;
          })(e2), t2);
          else if (TR.isHeaders(e2)) for (const [t3, n3] of e2.entries()) r2(n3, t3, i2);
          else null != e2 && r2(t2, e2, i2);
          var s2;
          return this;
        }
        get(e2, t2) {
          if (e2 = kA(e2)) {
            const i2 = TR.findKey(this, e2);
            if (i2) {
              const e3 = this[i2];
              if (!t2) return e3;
              if (true === t2) return function(e4) {
                const t3 = /* @__PURE__ */ Object.create(null), i3 = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
                let n2;
                for (; n2 = i3.exec(e4); ) t3[n2[1]] = n2[2];
                return t3;
              }(e3);
              if (TR.isFunction(t2)) return t2.call(this, e3, i2);
              if (TR.isRegExp(t2)) return t2.exec(e3);
              throw new TypeError("parser must be boolean|regexp|function");
            }
          }
        }
        has(e2, t2) {
          if (e2 = kA(e2)) {
            const i2 = TR.findKey(this, e2);
            return !(!i2 || void 0 === this[i2] || t2 && !UA(0, this[i2], i2, t2));
          }
          return false;
        }
        delete(e2, t2) {
          const i2 = this;
          let n2 = false;
          function r2(e3) {
            if (e3 = kA(e3)) {
              const r3 = TR.findKey(i2, e3);
              !r3 || t2 && !UA(0, i2[r3], r3, t2) || (delete i2[r3], n2 = true);
            }
          }
          return TR.isArray(e2) ? e2.forEach(r2) : r2(e2), n2;
        }
        clear(e2) {
          const t2 = Object.keys(this);
          let i2 = t2.length, n2 = false;
          for (; i2--; ) {
            const r2 = t2[i2];
            e2 && !UA(0, this[r2], r2, e2, true) || (delete this[r2], n2 = true);
          }
          return n2;
        }
        normalize(e2) {
          const t2 = this, i2 = {};
          return TR.forEach(this, (n2, r2) => {
            var o2;
            const s2 = TR.findKey(i2, r2);
            if (s2) return t2[s2] = MA(n2), void delete t2[r2];
            const a2 = e2 ? function(e3) {
              return eS(e3).call(e3).toLowerCase().replace(/([a-z\d])(\w*)/g, (e4, t3, i3) => t3.toUpperCase() + i3);
            }(r2) : eS(o2 = String(r2)).call(o2);
            a2 !== r2 && delete t2[r2], t2[a2] = MA(n2), i2[a2] = true;
          }), this;
        }
        concat() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          return this.constructor.concat(this, ...t2);
        }
        toJSON(e2) {
          const t2 = /* @__PURE__ */ Object.create(null);
          return TR.forEach(this, (i2, n2) => {
            null != i2 && false !== i2 && (t2[n2] = e2 && TR.isArray(i2) ? i2.join(", ") : i2);
          }), t2;
        }
        [Symbol.iterator]() {
          return Object.entries(this.toJSON())[Symbol.iterator]();
        }
        toString() {
          return Object.entries(this.toJSON()).map((e2) => {
            let [t2, i2] = e2;
            return t2 + ": " + i2;
          }).join("\n");
        }
        get [Symbol.toStringTag]() {
          return "AxiosHeaders";
        }
        static from(e2) {
          return e2 instanceof this ? e2 : new this(e2);
        }
        static concat(e2) {
          const t2 = new this(e2);
          for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), r2 = 1; r2 < i2; r2++) n2[r2 - 1] = arguments[r2];
          return n2.forEach((e3) => t2.set(e3)), t2;
        }
        static accessor(e2) {
          const t2 = (this[LA] = this[LA] = { accessors: {} }).accessors, i2 = this.prototype;
          function n2(e3) {
            const n3 = kA(e3);
            t2[n3] || (!function(e4, t3) {
              const i3 = TR.toCamelCase(" " + t3);
              ["get", "set", "has"].forEach((n4) => {
                Object.defineProperty(e4, n4 + i3, { value: function(e5, i4, r2) {
                  return this[n4].call(this, t3, e5, i4, r2);
                }, configurable: true });
              });
            }(i2, e3), t2[n3] = true);
          }
          return TR.isArray(e2) ? e2.forEach(n2) : n2(e2), this;
        }
      }
      xA.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]), TR.reduceDescriptors(xA.prototype, (e2, t2) => {
        let { value: i2 } = e2, n2 = t2[0].toUpperCase() + t2.slice(1);
        return { get: () => i2, set(e3) {
          this[n2] = e3;
        } };
      }), TR.freezeMethods(xA);
      var VA = xA;
      function FA(e2, t2) {
        const i2 = this || DA, n2 = t2 || i2, r2 = VA.from(n2.headers);
        let o2 = n2.data;
        return TR.forEach(e2, function(e3) {
          o2 = e3.call(i2, o2, r2.normalize(), t2 ? t2.status : void 0);
        }), r2.normalize(), o2;
      }
      function BA(e2) {
        return !(!e2 || !e2.__CANCEL__);
      }
      function jA(e2, t2, i2) {
        SR.call(this, null == e2 ? "canceled" : e2, SR.ERR_CANCELED, t2, i2), this.name = "CanceledError";
      }
      function GA(e2, t2, i2) {
        const n2 = i2.config.validateStatus;
        i2.status && n2 && !n2(i2.status) ? t2(new SR("Request failed with status code " + i2.status, [SR.ERR_BAD_REQUEST, SR.ERR_BAD_RESPONSE][Math.floor(i2.status / 100) - 4], i2.config, i2.request, i2)) : e2(i2);
      }
      TR.inherits(jA, SR, { __CANCEL__: true });
      const WA = function(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3, n2 = 0;
        const r2 = function(e3, t3) {
          e3 = e3 || 10;
          const i3 = new Array(e3), n3 = new Array(e3);
          let r3, o2 = 0, s2 = 0;
          return t3 = void 0 !== t3 ? t3 : 1e3, function(a2) {
            const c2 = Date.now(), d2 = n3[s2];
            r3 || (r3 = c2), i3[o2] = a2, n3[o2] = c2;
            let l2 = s2, u2 = 0;
            for (; l2 !== o2; ) u2 += i3[l2++], l2 %= e3;
            if (o2 = (o2 + 1) % e3, o2 === s2 && (s2 = (s2 + 1) % e3), c2 - r3 < t3) return;
            const h2 = d2 && c2 - d2;
            return h2 ? Math.round(1e3 * u2 / h2) : void 0;
          };
        }(50, 250);
        return function(e3, t3) {
          let i3, n3, r3 = 0, o2 = 1e3 / t3;
          const s2 = function(t4) {
            let o3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Date.now();
            r3 = o3, i3 = null, n3 && (clearTimeout(n3), n3 = null), e3.apply(null, t4);
          };
          return [function() {
            const e4 = Date.now(), t4 = e4 - r3;
            for (var a2 = arguments.length, c2 = new Array(a2), d2 = 0; d2 < a2; d2++) c2[d2] = arguments[d2];
            t4 >= o2 ? s2(c2, e4) : (i3 = c2, n3 || (n3 = setTimeout(() => {
              n3 = null, s2(i3);
            }, o2 - t4)));
          }, () => i3 && s2(i3)];
        }((i3) => {
          const o2 = i3.loaded, s2 = i3.lengthComputable ? i3.total : void 0, a2 = o2 - n2, c2 = r2(a2);
          n2 = o2;
          e2({ loaded: o2, total: s2, progress: s2 ? o2 / s2 : void 0, bytes: a2, rate: c2 || void 0, estimated: c2 && s2 && o2 <= s2 ? (s2 - o2) / c2 : void 0, event: i3, lengthComputable: null != s2, [t2 ? "download" : "upload"]: true });
        }, i2);
      }, HA = (e2, t2) => {
        const i2 = null != e2;
        return [(n2) => t2[0]({ lengthComputable: i2, total: e2, loaded: n2 }), t2[1]];
      }, KA = (e2) => function() {
        for (var t2 = arguments.length, i2 = new Array(t2), n2 = 0; n2 < t2; n2++) i2[n2] = arguments[n2];
        return TR.asap(() => e2(...i2));
      };
      var YA = Py.hasStandardBrowserEnv ? /* @__PURE__ */ ((e2, t2) => (i2) => (i2 = new Wf(i2, Py.origin), e2.protocol === i2.protocol && e2.host === i2.host && (t2 || e2.port === i2.port)))(new Wf(Py.origin), Py.navigator && /(msie|trident)/i.test(Py.navigator.userAgent)) : () => true, qA = Py.hasStandardBrowserEnv ? { write(e2, t2, i2, n2, r2, o2) {
        const s2 = [e2 + "=" + encodeURIComponent(t2)];
        TR.isNumber(i2) && s2.push("expires=" + new Date(i2).toGMTString()), TR.isString(n2) && s2.push("path=" + n2), TR.isString(r2) && s2.push("domain=" + r2), true === o2 && s2.push("secure"), document.cookie = s2.join("; ");
      }, read(e2) {
        const t2 = document.cookie.match(new RegExp("(^|;\\s*)(" + e2 + ")=([^;]*)"));
        return t2 ? decodeURIComponent(t2[3]) : null;
      }, remove(e2) {
        this.write(e2, "", Date.now() - 864e5);
      } } : { write() {
      }, read: () => null, remove() {
      } };
      function zA(e2, t2) {
        return e2 && !function(e3) {
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e3);
        }(t2) ? function(e3, t3) {
          return t3 ? e3.replace(/\/?\/$/, "") + "/" + t3.replace(/^\/+/, "") : e3;
        }(e2, t2) : t2;
      }
      function JA(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      const XA = (e2) => e2 instanceof VA ? function(e3) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? JA(Object(i2), true).forEach(function(t3) {
            vy(e3, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i2)) : JA(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e3;
      }({}, e2) : e2;
      function QA(e2, t2) {
        t2 = t2 || {};
        const i2 = {};
        function n2(e3, t3, i3, n3) {
          return TR.isPlainObject(e3) && TR.isPlainObject(t3) ? TR.merge.call({ caseless: n3 }, e3, t3) : TR.isPlainObject(t3) ? TR.merge({}, t3) : TR.isArray(t3) ? t3.slice() : t3;
        }
        function r2(e3, t3, i3, r3) {
          return TR.isUndefined(t3) ? TR.isUndefined(e3) ? void 0 : n2(void 0, e3, 0, r3) : n2(e3, t3, 0, r3);
        }
        function o2(e3, t3) {
          if (!TR.isUndefined(t3)) return n2(void 0, t3);
        }
        function s2(e3, t3) {
          return TR.isUndefined(t3) ? TR.isUndefined(e3) ? void 0 : n2(void 0, e3) : n2(void 0, t3);
        }
        function a2(i3, r3, o3) {
          return o3 in t2 ? n2(i3, r3) : o3 in e2 ? n2(void 0, i3) : void 0;
        }
        const c2 = { url: o2, method: o2, data: o2, baseURL: s2, transformRequest: s2, transformResponse: s2, paramsSerializer: s2, timeout: s2, timeoutMessage: s2, withCredentials: s2, withXSRFToken: s2, adapter: s2, responseType: s2, xsrfCookieName: s2, xsrfHeaderName: s2, onUploadProgress: s2, onDownloadProgress: s2, decompress: s2, maxContentLength: s2, maxBodyLength: s2, beforeRedirect: s2, transport: s2, httpAgent: s2, httpsAgent: s2, cancelToken: s2, socketPath: s2, responseEncoding: s2, validateStatus: a2, headers: (e3, t3, i3) => r2(XA(e3), XA(t3), 0, true) };
        return TR.forEach(Object.keys(Object.assign({}, e2, t2)), function(n3) {
          const o3 = c2[n3] || r2, s3 = o3(e2[n3], t2[n3], n3);
          TR.isUndefined(s3) && o3 !== a2 || (i2[n3] = s3);
        }), i2;
      }
      var ZA = (e2) => {
        const t2 = QA({}, e2);
        let i2, { data: n2, withXSRFToken: r2, xsrfHeaderName: o2, xsrfCookieName: s2, headers: a2, auth: c2 } = t2;
        if (t2.headers = a2 = VA.from(a2), t2.url = DR(zA(t2.baseURL, t2.url), e2.params, e2.paramsSerializer), c2 && a2.set("Authorization", "Basic " + btoa((c2.username || "") + ":" + (c2.password ? unescape(encodeURIComponent(c2.password)) : ""))), TR.isFormData(n2)) {
          if (Py.hasStandardBrowserEnv || Py.hasStandardBrowserWebWorkerEnv) a2.setContentType(void 0);
          else if (false !== (i2 = a2.getContentType())) {
            const [e3, ...t3] = i2 ? i2.split(";").map((e4) => eS(e4).call(e4)).filter(Boolean) : [];
            a2.setContentType([e3 || "multipart/form-data", ...t3].join("; "));
          }
        }
        if (Py.hasStandardBrowserEnv && (r2 && TR.isFunction(r2) && (r2 = r2(t2)), r2 || false !== r2 && YA(t2.url))) {
          const e3 = o2 && s2 && qA.read(s2);
          e3 && a2.set(o2, e3);
        }
        return t2;
      };
      var $A = "undefined" != typeof XMLHttpRequest && function(e2) {
        return new np(function(t2, i2) {
          const n2 = ZA(e2);
          let r2 = n2.data;
          const o2 = VA.from(n2.headers).normalize();
          let s2, a2, c2, d2, l2, { responseType: u2, onUploadProgress: h2, onDownloadProgress: p2 } = n2;
          function _2() {
            d2 && d2(), l2 && l2(), n2.cancelToken && n2.cancelToken.unsubscribe(s2), n2.signal && n2.signal.removeEventListener("abort", s2);
          }
          let E2 = new XMLHttpRequest();
          function m2() {
            if (!E2) return;
            const n3 = VA.from("getAllResponseHeaders" in E2 && E2.getAllResponseHeaders());
            GA(function(e3) {
              t2(e3), _2();
            }, function(e3) {
              i2(e3), _2();
            }, { data: u2 && "text" !== u2 && "json" !== u2 ? E2.response : E2.responseText, status: E2.status, statusText: E2.statusText, headers: n3, config: e2, request: E2 }), E2 = null;
          }
          E2.open(n2.method.toUpperCase(), n2.url, true), E2.timeout = n2.timeout, "onloadend" in E2 ? E2.onloadend = m2 : E2.onreadystatechange = function() {
            E2 && 4 === E2.readyState && (0 !== E2.status || E2.responseURL && 0 === E2.responseURL.indexOf("file:")) && setTimeout(m2);
          }, E2.onabort = function() {
            E2 && (i2(new SR("Request aborted", SR.ECONNABORTED, e2, E2)), E2 = null);
          }, E2.onerror = function() {
            i2(new SR("Network Error", SR.ERR_NETWORK, e2, E2)), E2 = null;
          }, E2.ontimeout = function() {
            let t3 = n2.timeout ? "timeout of " + n2.timeout + "ms exceeded" : "timeout exceeded";
            const r3 = n2.transitional || LR;
            n2.timeoutErrorMessage && (t3 = n2.timeoutErrorMessage), i2(new SR(t3, r3.clarifyTimeoutError ? SR.ETIMEDOUT : SR.ECONNABORTED, e2, E2)), E2 = null;
          }, void 0 === r2 && o2.setContentType(null), "setRequestHeader" in E2 && TR.forEach(o2.toJSON(), function(e3, t3) {
            E2.setRequestHeader(t3, e3);
          }), TR.isUndefined(n2.withCredentials) || (E2.withCredentials = !!n2.withCredentials), u2 && "json" !== u2 && (E2.responseType = n2.responseType), p2 && ([c2, l2] = WA(p2, true), E2.addEventListener("progress", c2)), h2 && E2.upload && ([a2, d2] = WA(h2), E2.upload.addEventListener("progress", a2), E2.upload.addEventListener("loadend", d2)), (n2.cancelToken || n2.signal) && (s2 = (t3) => {
            E2 && (i2(!t3 || t3.type ? new jA(null, e2, E2) : t3), E2.abort(), E2 = null);
          }, n2.cancelToken && n2.cancelToken.subscribe(s2), n2.signal && (n2.signal.aborted ? s2() : n2.signal.addEventListener("abort", s2)));
          const f2 = function(e3) {
            const t3 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e3);
            return t3 && t3[1] || "";
          }(n2.url);
          f2 && -1 === Py.protocols.indexOf(f2) ? i2(new SR("Unsupported protocol " + f2 + ":", SR.ERR_BAD_REQUEST, e2)) : E2.send(r2 || null);
        });
      };
      var eb = (e2, t2) => {
        const { length: i2 } = e2 = e2 ? e2.filter(Boolean) : [];
        if (t2 || i2) {
          let i3, n2 = new AbortController();
          const r2 = function(e3) {
            if (!i3) {
              i3 = true, s2();
              const t3 = e3 instanceof Error ? e3 : this.reason;
              n2.abort(t3 instanceof SR ? t3 : new jA(t3 instanceof Error ? t3.message : t3));
            }
          };
          let o2 = t2 && setTimeout(() => {
            o2 = null, r2(new SR("timeout ".concat(t2, " of ms exceeded"), SR.ETIMEDOUT));
          }, t2);
          const s2 = () => {
            e2 && (o2 && clearTimeout(o2), o2 = null, e2.forEach((e3) => {
              e3.unsubscribe ? e3.unsubscribe(r2) : e3.removeEventListener("abort", r2);
            }), e2 = null);
          };
          e2.forEach((e3) => e3.addEventListener("abort", r2));
          const { signal: a2 } = n2;
          return a2.unsubscribe = () => TR.asap(s2), a2;
        }
      }, tb = i(ip), ib = Sv.f("asyncIterator"), nb = i(ib);
      function rb(e2, t2) {
        this.v = e2, this.k = t2;
      }
      function ob(e2) {
        var t2, i2;
        function n2(t3, i3) {
          try {
            var o2 = e2[t3](i3), s2 = o2.value, a2 = s2 instanceof rb;
            tb.resolve(a2 ? s2.v : s2).then(function(i4) {
              if (a2) {
                var c2 = "return" === t3 ? "return" : "next";
                if (!s2.k || i4.done) return n2(c2, i4);
                i4 = e2[c2](i4).value;
              }
              r2(o2.done ? "return" : "normal", i4);
            }, function(e3) {
              n2("throw", e3);
            });
          } catch (e3) {
            r2("throw", e3);
          }
        }
        function r2(e3, r3) {
          switch (e3) {
            case "return":
              t2.resolve({ value: r3, done: true });
              break;
            case "throw":
              t2.reject(r3);
              break;
            default:
              t2.resolve({ value: r3, done: false });
          }
          (t2 = t2.next) ? n2(t2.key, t2.arg) : i2 = null;
        }
        this._invoke = function(e3, r3) {
          return new tb(function(o2, s2) {
            var a2 = { key: e3, arg: r3, resolve: o2, reject: s2, next: null };
            i2 ? i2 = i2.next = a2 : (t2 = i2 = a2, n2(e3, r3));
          });
        }, "function" != typeof e2.return && (this.return = void 0);
      }
      function sb(e2) {
        return function() {
          return new ob(e2.apply(this, arguments));
        };
      }
      function ab(e2) {
        return new rb(e2, 0);
      }
      function cb(e2) {
        var t2 = {}, i2 = false;
        function n2(t3, n3) {
          return i2 = true, { done: false, value: new rb(n3 = new tb(function(i3) {
            i3(e2[t3](n3));
          }), 1) };
        }
        return t2[void 0 !== fy && Ty || "@@iterator"] = function() {
          return this;
        }, t2.next = function(e3) {
          return i2 ? (i2 = false, e3) : n2("next", e3);
        }, "function" == typeof e2.throw && (t2.throw = function(e3) {
          if (i2) throw i2 = false, e3;
          return n2("throw", e3);
        }), "function" == typeof e2.return && (t2.return = function(e3) {
          return i2 ? (i2 = false, e3) : n2("return", e3);
        }), t2;
      }
      ob.prototype["function" == typeof fy && nb || "@@asyncIterator"] = function() {
        return this;
      }, ob.prototype.next = function(e2) {
        return this._invoke("next", e2);
      }, ob.prototype.throw = function(e2) {
        return this._invoke("throw", e2);
      }, ob.prototype.return = function(e2) {
        return this._invoke("return", e2);
      };
      var db = i(ib);
      function lb(e2) {
        var t2, i2, n2, r2 = 2;
        for ("undefined" != typeof Symbol && (i2 = db, n2 = Symbol.iterator); r2--; ) {
          if (i2 && null != (t2 = e2[i2])) return t2.call(e2);
          if (n2 && null != (t2 = e2[n2])) return new ub(t2.call(e2));
          i2 = "@@asyncIterator", n2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function ub(e2) {
        function t2(e3) {
          if (Object(e3) !== e3) return np.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return np.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return ub = function(e3) {
          this.s = e3, this.n = e3.next;
        }, ub.prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? np.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? np.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new ub(e2);
      }
      const hb = function* (e2, t2) {
        let i2 = e2.byteLength;
        if (!t2 || i2 < t2) return void (yield e2);
        let n2, r2 = 0;
        for (; r2 < i2; ) n2 = r2 + t2, yield e2.slice(r2, n2), r2 = n2;
      }, pb = function() {
        var e2 = sb(function* (e3, t2) {
          var i2, n2 = false, r2 = false;
          try {
            for (var o2, s2 = lb(_b(e3)); n2 = !(o2 = yield ab(s2.next())).done; n2 = false) {
              const e4 = o2.value;
              yield* cb(lb(hb(e4, t2)));
            }
          } catch (e4) {
            r2 = true, i2 = e4;
          } finally {
            try {
              n2 && null != s2.return && (yield ab(s2.return()));
            } finally {
              if (r2) throw i2;
            }
          }
        });
        return function(t2, i2) {
          return e2.apply(this, arguments);
        };
      }(), _b = function() {
        var e2 = sb(function* (e3) {
          if (e3[db]) return void (yield* cb(lb(e3)));
          const t2 = e3.getReader();
          try {
            for (; ; ) {
              const { done: e4, value: i2 } = yield ab(t2.read());
              if (e4) break;
              yield i2;
            }
          } finally {
            yield ab(t2.cancel());
          }
        });
        return function(t2) {
          return e2.apply(this, arguments);
        };
      }(), Eb = (e2, t2, i2, n2) => {
        const r2 = pb(e2, t2);
        let o2, s2 = 0, a2 = (e3) => {
          o2 || (o2 = true, n2 && n2(e3));
        };
        return new ReadableStream({ async pull(e3) {
          try {
            const { done: t3, value: n3 } = await r2.next();
            if (t3) return a2(), void e3.close();
            let o3 = n3.byteLength;
            if (i2) {
              let e4 = s2 += o3;
              i2(e4);
            }
            e3.enqueue(new Uint8Array(n3));
          } catch (e4) {
            throw a2(e4), e4;
          }
        }, cancel: (e3) => (a2(e3), r2.return()) }, { highWaterMark: 2 });
      };
      function mb(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function fb(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? mb(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : mb(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const Tb = "function" == typeof fetch && "function" == typeof Request && "function" == typeof Response, Sb = Tb && "function" == typeof ReadableStream, gb = Tb && ("function" == typeof TextEncoder ? (Rb = new TextEncoder(), (e2) => Rb.encode(e2)) : async (e2) => new Uint8Array(await new Response(e2).arrayBuffer()));
      var Rb;
      const vb = function(e2) {
        try {
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++) i2[n2 - 1] = arguments[n2];
          return !!e2(...i2);
        } catch (e3) {
          return false;
        }
      }, Cb = Sb && vb(() => {
        let e2 = false;
        const t2 = new Request(Py.origin, { body: new ReadableStream(), method: "POST", get duplex() {
          return e2 = true, "half";
        } }).headers.has("Content-Type");
        return e2 && !t2;
      }), Ib = Sb && vb(() => TR.isReadableStream(new Response("").body)), yb = { stream: Ib && ((e2) => e2.body) };
      var Ab;
      Tb && (Ab = new Response(), ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((e2) => {
        !yb[e2] && (yb[e2] = TR.isFunction(Ab[e2]) ? (t2) => t2[e2]() : (t2, i2) => {
          throw new SR("Response type '".concat(e2, "' is not supported"), SR.ERR_NOT_SUPPORT, i2);
        });
      }));
      const bb = async (e2, t2) => {
        const i2 = TR.toFiniteNumber(e2.getContentLength());
        return null == i2 ? (async (e3) => {
          if (null == e3) return 0;
          if (TR.isBlob(e3)) return e3.size;
          if (TR.isSpecCompliantForm(e3)) {
            const t3 = new Request(Py.origin, { method: "POST", body: e3 });
            return (await t3.arrayBuffer()).byteLength;
          }
          return TR.isArrayBufferView(e3) || TR.isArrayBuffer(e3) ? e3.byteLength : (TR.isURLSearchParams(e3) && (e3 += ""), TR.isString(e3) ? (await gb(e3)).byteLength : void 0);
        })(t2) : i2;
      };
      var wb = Tb && (async (e2) => {
        let { url: t2, method: i2, data: n2, signal: r2, cancelToken: o2, timeout: s2, onDownloadProgress: a2, onUploadProgress: c2, responseType: d2, headers: l2, withCredentials: u2 = "same-origin", fetchOptions: h2 } = ZA(e2);
        d2 = d2 ? (d2 + "").toLowerCase() : "text";
        let p2, _2 = eb([r2, o2 && o2.toAbortSignal()], s2);
        const E2 = _2 && _2.unsubscribe && (() => {
          _2.unsubscribe();
        });
        let m2;
        try {
          if (c2 && Cb && "get" !== i2 && "head" !== i2 && 0 !== (m2 = await bb(l2, n2))) {
            let e3, i3 = new Request(t2, { method: "POST", body: n2, duplex: "half" });
            if (TR.isFormData(n2) && (e3 = i3.headers.get("content-type")) && l2.setContentType(e3), i3.body) {
              const [e4, t3] = HA(m2, WA(KA(c2)));
              n2 = Eb(i3.body, 65536, e4, t3);
            }
          }
          TR.isString(u2) || (u2 = u2 ? "include" : "omit");
          const r3 = "credentials" in Request.prototype;
          p2 = new Request(t2, fb(fb({}, h2), {}, { signal: _2, method: i2.toUpperCase(), headers: l2.normalize().toJSON(), body: n2, duplex: "half", credentials: r3 ? u2 : void 0 }));
          let o3 = await fetch(p2);
          const s3 = Ib && ("stream" === d2 || "response" === d2);
          if (Ib && (a2 || s3 && E2)) {
            const e3 = {};
            ["status", "statusText", "headers"].forEach((t4) => {
              e3[t4] = o3[t4];
            });
            const t3 = TR.toFiniteNumber(o3.headers.get("content-length")), [i3, n3] = a2 && HA(t3, WA(KA(a2), true)) || [];
            o3 = new Response(Eb(o3.body, 65536, i3, () => {
              n3 && n3(), E2 && E2();
            }), e3);
          }
          d2 = d2 || "text";
          let f2 = await yb[TR.findKey(yb, d2) || "text"](o3, e2);
          return !s3 && E2 && E2(), await new np((t3, i3) => {
            GA(t3, i3, { data: f2, headers: VA.from(o3.headers), status: o3.status, statusText: o3.statusText, config: e2, request: p2 });
          });
        } catch (t3) {
          if (E2 && E2(), t3 && "TypeError" === t3.name && /fetch/i.test(t3.message)) throw Object.assign(new SR("Network Error", SR.ERR_NETWORK, e2, p2), { cause: t3.cause || t3 });
          throw SR.from(t3, t3 && t3.code, e2, p2);
        }
      });
      const Ob = { http: null, xhr: $A, fetch: wb };
      TR.forEach(Ob, (e2, t2) => {
        if (e2) {
          try {
            Object.defineProperty(e2, "name", { value: t2 });
          } catch (e3) {
          }
          Object.defineProperty(e2, "adapterName", { value: t2 });
        }
      });
      const Nb = (e2) => "- ".concat(e2), Db = (e2) => TR.isFunction(e2) || null === e2 || false === e2;
      var Pb = (e2) => {
        e2 = TR.isArray(e2) ? e2 : [e2];
        const { length: t2 } = e2;
        let i2, n2;
        const r2 = {};
        for (let o2 = 0; o2 < t2; o2++) {
          let t3;
          if (i2 = e2[o2], n2 = i2, !Db(i2) && (n2 = Ob[(t3 = String(i2)).toLowerCase()], void 0 === n2)) throw new SR("Unknown adapter '".concat(t3, "'"));
          if (n2) break;
          r2[t3 || "#" + o2] = n2;
        }
        if (!n2) {
          const e3 = Object.entries(r2).map((e4) => {
            let [t3, i3] = e4;
            return "adapter ".concat(t3, " ") + (false === i3 ? "is not supported by the environment" : "is not available in the build");
          });
          throw new SR("There is no suitable adapter to dispatch the request " + (t2 ? e3.length > 1 ? "since :\n" + e3.map(Nb).join("\n") : " " + Nb(e3[0]) : "as no adapter specified"), "ERR_NOT_SUPPORT");
        }
        return n2;
      };
      function Lb(e2) {
        if (e2.cancelToken && e2.cancelToken.throwIfRequested(), e2.signal && e2.signal.aborted) throw new jA(null, e2);
      }
      function kb(e2) {
        Lb(e2), e2.headers = VA.from(e2.headers), e2.data = FA.call(e2, e2.transformRequest), -1 !== ["post", "put", "patch"].indexOf(e2.method) && e2.headers.setContentType("application/x-www-form-urlencoded", false);
        return Pb(e2.adapter || DA.adapter)(e2).then(function(t2) {
          return Lb(e2), t2.data = FA.call(e2, e2.transformResponse, t2), t2.headers = VA.from(t2.headers), t2;
        }, function(t2) {
          return BA(t2) || (Lb(e2), t2 && t2.response && (t2.response.data = FA.call(e2, e2.transformResponse, t2.response), t2.response.headers = VA.from(t2.response.headers))), np.reject(t2);
        });
      }
      const Mb = "1.7.9", Ub = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach((e2, t2) => {
        Ub[e2] = function(i2) {
          return typeof i2 === e2 || "a" + (t2 < 1 ? "n " : " ") + e2;
        };
      });
      const xb = {};
      Ub.transitional = function(e2, t2, i2) {
        function n2(e3, t3) {
          return "[Axios v1.7.9] Transitional option '" + e3 + "'" + t3 + (i2 ? ". " + i2 : "");
        }
        return (i3, r2, o2) => {
          if (false === e2) throw new SR(n2(r2, " has been removed" + (t2 ? " in " + t2 : "")), SR.ERR_DEPRECATED);
          return t2 && !xb[r2] && (xb[r2] = true, console.warn(n2(r2, " has been deprecated since v" + t2 + " and will be removed in the near future"))), !e2 || e2(i3, r2, o2);
        };
      }, Ub.spelling = function(e2) {
        return (t2, i2) => (console.warn("".concat(i2, " is likely a misspelling of ").concat(e2)), true);
      };
      var Vb = { assertOptions: function(e2, t2, i2) {
        if ("object" != typeof e2) throw new SR("options must be an object", SR.ERR_BAD_OPTION_VALUE);
        const n2 = Object.keys(e2);
        let r2 = n2.length;
        for (; r2-- > 0; ) {
          const o2 = n2[r2], s2 = t2[o2];
          if (s2) {
            const t3 = e2[o2], i3 = void 0 === t3 || s2(t3, o2, e2);
            if (true !== i3) throw new SR("option " + o2 + " must be " + i3, SR.ERR_BAD_OPTION_VALUE);
          } else if (true !== i2) throw new SR("Unknown option " + o2, SR.ERR_BAD_OPTION);
        }
      }, validators: Ub };
      const Fb = Vb.validators;
      let Bb = class {
        constructor(e2) {
          this.defaults = e2, this.interceptors = { request: new PR(), response: new PR() };
        }
        async request(e2, t2) {
          try {
            return await this._request(e2, t2);
          } catch (e3) {
            if (e3 instanceof Error) {
              let t3 = {};
              Error.captureStackTrace ? Error.captureStackTrace(t3) : t3 = new Error();
              const i2 = t3.stack ? t3.stack.replace(/^.+\n/, "") : "";
              try {
                e3.stack ? i2 && !String(e3.stack).endsWith(i2.replace(/^.+\n.+\n/, "")) && (e3.stack += "\n" + i2) : e3.stack = i2;
              } catch (e4) {
              }
            }
            throw e3;
          }
        }
        _request(e2, t2) {
          "string" == typeof e2 ? (t2 = t2 || {}).url = e2 : t2 = e2 || {}, t2 = QA(this.defaults, t2);
          const { transitional: i2, paramsSerializer: n2, headers: r2 } = t2;
          void 0 !== i2 && Vb.assertOptions(i2, { silentJSONParsing: Fb.transitional(Fb.boolean), forcedJSONParsing: Fb.transitional(Fb.boolean), clarifyTimeoutError: Fb.transitional(Fb.boolean) }, false), null != n2 && (TR.isFunction(n2) ? t2.paramsSerializer = { serialize: n2 } : Vb.assertOptions(n2, { encode: Fb.function, serialize: Fb.function }, true)), Vb.assertOptions(t2, { baseUrl: Fb.spelling("baseURL"), withXsrfToken: Fb.spelling("withXSRFToken") }, true), t2.method = (t2.method || this.defaults.method || "get").toLowerCase();
          let o2 = r2 && TR.merge(r2.common, r2[t2.method]);
          r2 && TR.forEach(["delete", "get", "head", "post", "put", "patch", "common"], (e3) => {
            delete r2[e3];
          }), t2.headers = VA.concat(o2, r2);
          const s2 = [];
          let a2 = true;
          this.interceptors.request.forEach(function(e3) {
            "function" == typeof e3.runWhen && false === e3.runWhen(t2) || (a2 = a2 && e3.synchronous, s2.unshift(e3.fulfilled, e3.rejected));
          });
          const c2 = [];
          let d2;
          this.interceptors.response.forEach(function(e3) {
            c2.push(e3.fulfilled, e3.rejected);
          });
          let l2, u2 = 0;
          if (!a2) {
            const e3 = [kb.bind(this), void 0];
            for (e3.unshift.apply(e3, s2), e3.push.apply(e3, c2), l2 = e3.length, d2 = np.resolve(t2); u2 < l2; ) d2 = d2.then(e3[u2++], e3[u2++]);
            return d2;
          }
          l2 = s2.length;
          let h2 = t2;
          for (u2 = 0; u2 < l2; ) {
            const e3 = s2[u2++], t3 = s2[u2++];
            try {
              h2 = e3(h2);
            } catch (e4) {
              t3.call(this, e4);
              break;
            }
          }
          try {
            d2 = kb.call(this, h2);
          } catch (e3) {
            return np.reject(e3);
          }
          for (u2 = 0, l2 = c2.length; u2 < l2; ) d2 = d2.then(c2[u2++], c2[u2++]);
          return d2;
        }
        getUri(e2) {
          return DR(zA((e2 = QA(this.defaults, e2)).baseURL, e2.url), e2.params, e2.paramsSerializer);
        }
      };
      TR.forEach(["delete", "get", "head", "options"], function(e2) {
        Bb.prototype[e2] = function(t2, i2) {
          return this.request(QA(i2 || {}, { method: e2, url: t2, data: (i2 || {}).data }));
        };
      }), TR.forEach(["post", "put", "patch"], function(e2) {
        function t2(t3) {
          return function(i2, n2, r2) {
            return this.request(QA(r2 || {}, { method: e2, headers: t3 ? { "Content-Type": "multipart/form-data" } : {}, url: i2, data: n2 }));
          };
        }
        Bb.prototype[e2] = t2(), Bb.prototype[e2 + "Form"] = t2(true);
      });
      var jb = Bb;
      class Gb {
        constructor(e2) {
          if ("function" != typeof e2) throw new TypeError("executor must be a function.");
          let t2;
          this.promise = new np(function(e3) {
            t2 = e3;
          });
          const i2 = this;
          this.promise.then((e3) => {
            if (!i2._listeners) return;
            let t3 = i2._listeners.length;
            for (; t3-- > 0; ) i2._listeners[t3](e3);
            i2._listeners = null;
          }), this.promise.then = (e3) => {
            let t3;
            const n2 = new np((e4) => {
              i2.subscribe(e4), t3 = e4;
            }).then(e3);
            return n2.cancel = function() {
              i2.unsubscribe(t3);
            }, n2;
          }, e2(function(e3, n2, r2) {
            i2.reason || (i2.reason = new jA(e3, n2, r2), t2(i2.reason));
          });
        }
        throwIfRequested() {
          if (this.reason) throw this.reason;
        }
        subscribe(e2) {
          this.reason ? e2(this.reason) : this._listeners ? this._listeners.push(e2) : this._listeners = [e2];
        }
        unsubscribe(e2) {
          if (!this._listeners) return;
          const t2 = this._listeners.indexOf(e2);
          -1 !== t2 && this._listeners.splice(t2, 1);
        }
        toAbortSignal() {
          const e2 = new AbortController(), t2 = (t3) => {
            e2.abort(t3);
          };
          return this.subscribe(t2), e2.signal.unsubscribe = () => this.unsubscribe(t2), e2.signal;
        }
        static source() {
          let e2;
          const t2 = new Gb(function(t3) {
            e2 = t3;
          });
          return { token: t2, cancel: e2 };
        }
      }
      var Wb = Gb;
      const Hb = { Continue: 100, SwitchingProtocols: 101, Processing: 102, EarlyHints: 103, Ok: 200, Created: 201, Accepted: 202, NonAuthoritativeInformation: 203, NoContent: 204, ResetContent: 205, PartialContent: 206, MultiStatus: 207, AlreadyReported: 208, ImUsed: 226, MultipleChoices: 300, MovedPermanently: 301, Found: 302, SeeOther: 303, NotModified: 304, UseProxy: 305, Unused: 306, TemporaryRedirect: 307, PermanentRedirect: 308, BadRequest: 400, Unauthorized: 401, PaymentRequired: 402, Forbidden: 403, NotFound: 404, MethodNotAllowed: 405, NotAcceptable: 406, ProxyAuthenticationRequired: 407, RequestTimeout: 408, Conflict: 409, Gone: 410, LengthRequired: 411, PreconditionFailed: 412, PayloadTooLarge: 413, UriTooLong: 414, UnsupportedMediaType: 415, RangeNotSatisfiable: 416, ExpectationFailed: 417, ImATeapot: 418, MisdirectedRequest: 421, UnprocessableEntity: 422, Locked: 423, FailedDependency: 424, TooEarly: 425, UpgradeRequired: 426, PreconditionRequired: 428, TooManyRequests: 429, RequestHeaderFieldsTooLarge: 431, UnavailableForLegalReasons: 451, InternalServerError: 500, NotImplemented: 501, BadGateway: 502, ServiceUnavailable: 503, GatewayTimeout: 504, HttpVersionNotSupported: 505, VariantAlsoNegotiates: 506, InsufficientStorage: 507, LoopDetected: 508, NotExtended: 510, NetworkAuthenticationRequired: 511 };
      Object.entries(Hb).forEach((e2) => {
        let [t2, i2] = e2;
        Hb[i2] = t2;
      });
      var Kb = Hb;
      const Yb = function e2(t2) {
        const i2 = new jb(t2), n2 = wg(jb.prototype.request, i2);
        return TR.extend(n2, jb.prototype, i2, { allOwnKeys: true }), TR.extend(n2, i2, null, { allOwnKeys: true }), n2.create = function(i3) {
          return e2(QA(t2, i3));
        }, n2;
      }(DA);
      Yb.Axios = jb, Yb.CanceledError = jA, Yb.CancelToken = Wb, Yb.isCancel = BA, Yb.VERSION = Mb, Yb.toFormData = AR, Yb.AxiosError = SR, Yb.Cancel = Yb.CanceledError, Yb.all = function(e2) {
        return np.all(e2);
      }, Yb.spread = function(e2) {
        return function(t2) {
          return e2.apply(null, t2);
        };
      }, Yb.isAxiosError = function(e2) {
        return TR.isObject(e2) && true === e2.isAxiosError;
      }, Yb.mergeConfig = QA, Yb.AxiosHeaders = VA, Yb.formToJSON = (e2) => OA(TR.isHTMLForm(e2) ? new FormData(e2) : e2), Yb.getAdapter = Pb, Yb.HttpStatusCode = Kb, Yb.default = Yb;
      var qb = Yb;
      const zb = () => {
      };
      function Jb() {
        const e2 = { promise: void 0, isResolved: false, isRejected: false, isFinished: false, resolve: void 0, reject: void 0, cancel: zb };
        return e2.promise = new np((t2, i2) => {
          e2.resolve = (i3) => {
            e2.isFinished || (e2.isResolved = true, e2.isFinished = true, t2(i3), e2.value = i3);
          }, e2.reject = (t3) => {
            e2.isFinished || (e2.isRejected = true, e2.isFinished = true, i2(t3));
          };
        }), e2;
      }
      const Xb = /* @__PURE__ */ new Map(), Qb = /* @__PURE__ */ new Map(), Zb = /* @__PURE__ */ new Map();
      let $b = function(e2) {
        return e2.WIN_10 = "Windows 10", e2.WIN_81 = "Windows 8.1", e2.WIN_8 = "Windows 8", e2.WIN_7 = "Windows 7", e2.WIN_VISTA = "Windows Vista", e2.WIN_SERVER_2003 = "Windows Server 2003", e2.WIN_XP = "Windows XP", e2.WIN_2000 = "Windows 2000", e2.ANDROID = "Android", e2.HARMONY_OS = "HarmonyOS", e2.OPEN_BSD = "Open BSD", e2.SUN_OS = "Sun OS", e2.LINUX = "Linux", e2.IOS = "iOS", e2.MAC_OS = "Mac OS", e2.CHROMIUM_OS = "Chromium OS", e2.QNX = "QNX", e2.UNIX = "UNIX", e2.BEOS = "BeOS", e2.OS_2 = "OS/2", e2.SEARCH_BOT = "Search Bot", e2;
      }({}), ew = function(e2) {
        return e2.CHROME = "Chrome", e2.SAFARI = "Safari", e2.EDGE = "Edge", e2.FIREFOX = "Firefox", e2.OPERA = "OPR", e2.QQ = "QQBrowser", e2.WECHAT = "MicroMessenger", e2;
      }({});
      const tw = new QS();
      let iw = tw.getResult(), nw = null;
      function rw(e2) {
        if (!nw) {
          e2 && tw.setUA(e2), iw = tw.getResult();
          const t2 = function(e3) {
            if ("Blink" === e3.engine.name && "WeChat" !== e3.browser.name) return ew.CHROME;
            switch (e3.browser.name) {
              case "Chrome Headless":
              case "Chrome":
              case "Chromium":
                return ew.CHROME;
              case "Safari":
              case "Mobile Safari":
                return ew.SAFARI;
              case "Edge":
                return ew.EDGE;
              case "Firefox":
                return ew.FIREFOX;
              case "QQ":
              case "QQBrowser":
                return ew.QQ;
              case "Opera":
                return ew.OPERA;
              case "WeChat":
                return ew.WECHAT;
              default:
                return e3.browser.name || "";
            }
          }(iw), i2 = ow(iw), n2 = function(e3) {
            return "Windows" === e3.os.name ? e3.os.version ? e3.os.name + " " + e3.os.version : e3.os.name : e3.os.name || "";
          }(iw), r2 = iw.os.version, o2 = ow(iw, false), s2 = iw.device.type;
          if (!(t2 && i2 && n2 && r2)) return { name: t2, version: i2, os: n2, osVersion: r2, browserVersion: o2, deviceType: s2 };
          nw = { name: t2, version: i2, os: n2, osVersion: r2, browserVersion: o2, deviceType: s2 };
        }
        return nw;
      }
      function ow(e2) {
        let t2, i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
        return t2 = "Blink" === e2.engine.name ? e2.engine.version || "" : e2.browser.version || "", i2 ? t2.split(".")[0] : t2;
      }
      function sw() {
        return rw().os;
      }
      function aw() {
        const e2 = rw();
        return "".concat(e2.os, " ").concat(e2.osVersion);
      }
      function cw() {
        const e2 = rw();
        return !!("WebKit" === iw.engine.name && e2.os === $b.MAC_OS && navigator.maxTouchPoints && navigator.maxTouchPoints > 0 && e2.name !== ew.SAFARI || pw() && e2.name !== ew.SAFARI);
      }
      function dw() {
        return rw().name === ew.CHROME;
      }
      function lw() {
        return rw().name === ew.SAFARI;
      }
      function uw() {
        return rw().name === ew.EDGE;
      }
      function hw() {
        return rw().name === ew.FIREFOX;
      }
      function pw() {
        return rw().os === $b.IOS;
      }
      function _w(e2) {
        const t2 = rw();
        return !(t2.name !== ew.CHROME || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function Ew(e2) {
        const t2 = rw();
        return !(t2.name !== ew.CHROME || !t2.osVersion) && Number(t2.version) < e2;
      }
      function mw(e2, t2, i2) {
        const n2 = rw();
        return !(n2.name !== e2 || !n2.osVersion) && (i2 ? Number(n2.version) >= t2 && Number(n2.version) <= i2 : Number(n2.version) === t2);
      }
      function fw(e2) {
        const t2 = rw();
        return !(t2.name !== ew.EDGE || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function Tw(e2) {
        const t2 = rw();
        return !(t2.name !== ew.SAFARI || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function Sw(e2, t2, i2) {
        const n2 = rw();
        if (n2.os !== $b.IOS || !n2.osVersion) return false;
        const r2 = n2.osVersion.split(".");
        return i2 ? t2 && Number(r2[0]) === e2 && Number(r2[1]) < t2 || Number(r2[0]) < e2 : t2 ? Number(r2[0]) === e2 && Number(r2[1]) <= t2 || Number(r2[0]) < e2 : Number(r2[0]) <= e2;
      }
      function gw(e2, t2, i2) {
        const n2 = rw();
        if (n2.name !== ew.SAFARI || !n2.osVersion || !n2.browserVersion) return false;
        const r2 = n2.browserVersion.split(".");
        return i2 ? t2 && Number(r2[0]) === e2 && Number(r2[1]) < t2 || Number(r2[0]) < e2 : t2 ? Number(r2[0]) === e2 && Number(r2[1]) <= t2 || Number(r2[0]) < e2 : Number(r2[0]) <= e2;
      }
      function Rw(e2) {
        const t2 = rw();
        return !(t2.name !== ew.OPERA || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function vw() {
        const e2 = rw();
        if (e2.os !== $b.IOS || !e2.osVersion) return false;
        const t2 = e2.osVersion.split(".");
        return Number(t2[0]) < 14 || 14 === Number(t2[0]) && Number(t2[1]) <= 6;
      }
      function Cw() {
        const e2 = rw();
        if (e2.os !== $b.IOS || !e2.osVersion) return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]);
      }
      function Iw() {
        const e2 = rw();
        if (e2.os !== $b.IOS || !e2.osVersion) return false;
        const t2 = e2.osVersion.split(".");
        return 16 === Number(t2[0]);
      }
      function yw() {
        const e2 = rw();
        if (e2.os !== $b.IOS || !e2.osVersion) return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]) && Number(t2[1]) >= 1;
      }
      function Aw() {
        return lw() && navigator.maxTouchPoints > 0;
      }
      function bw() {
        return rw().name === ew.WECHAT;
      }
      function ww() {
        return window.navigator.appVersion && null !== window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./) && window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)[1] <= 35;
      }
      function Ow() {
        const e2 = sw();
        return function() {
          const { deviceType: e3 } = rw();
          return "mobile" === e3 || "tablet" === e3;
        }() || e2 === $b.ANDROID || e2 === $b.IOS || e2 === $b.HARMONY_OS;
      }
      function Nw() {
        const e2 = rw();
        return e2.name !== ew.EDGE && e2.name !== ew.SAFARI && !!navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]./i);
      }
      function Dw() {
        return sw() === $b.ANDROID;
      }
      function Pw() {
        const e2 = rw();
        return Dw() && (e2.name === ew.CHROME || e2.name === ew.WECHAT || /chrome|chromium/i.test(navigator.userAgent));
      }
      function Lw(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4) {
            if ("object" != typeof e4 || !e4) return e4;
            var t4 = e4[Symbol.toPrimitive];
            if (void 0 !== t4) {
              var i3 = t4.call(e4, "string");
              if ("object" != typeof i3) return i3;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : t3 + "";
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      function kw(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Mw(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? kw(Object(i2), true).forEach(function(t3) {
            Lw(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : kw(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let Uw = function(e2) {
        return e2.UNEXPECTED_ERROR = "UNEXPECTED_ERROR", e2.UNEXPECTED_RESPONSE = "UNEXPECTED_RESPONSE", e2.TIMEOUT = "TIMEOUT", e2.INVALID_PARAMS = "INVALID_PARAMS", e2.NOT_READABLE = "NOT_READABLE", e2.NOT_SUPPORTED = "NOT_SUPPORTED", e2.INVALID_OPERATION = "INVALID_OPERATION", e2.OPERATION_ABORTED = "OPERATION_ABORTED", e2.WEB_SECURITY_RESTRICT = "WEB_SECURITY_RESTRICT", e2.EXCHANGE_SDP_FAILED = "EXCHANGE_SDP_FAILED", e2.ADD_CANDIDATE_FAILED = "ADD_CANDIDATE_FAILED", e2.DATACHANNEL_FAILED = "DATACHANNEL_FAILED", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.NETWORK_TIMEOUT = "NETWORK_TIMEOUT", e2.NETWORK_RESPONSE_ERROR = "NETWORK_RESPONSE_ERROR", e2.API_INVOKE_TIMEOUT = "API_INVOKE_TIMEOUT", e2.ENUMERATE_DEVICES_FAILED = "ENUMERATE_DEVICES_FAILED", e2.DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND", e2.ELECTRON_IS_NULL = "ELECTRON_IS_NULL", e2.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR = "ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR", e2.CHROME_PLUGIN_NO_RESPONSE = "CHROME_PLUGIN_NO_RESPONSE", e2.CHROME_PLUGIN_NOT_INSTALL = "CHROME_PLUGIN_NOT_INSTALL", e2.MEDIA_OPTION_INVALID = "MEDIA_OPTION_INVALID", e2.PERMISSION_DENIED = "PERMISSION_DENIED", e2.CONSTRAINT_NOT_SATISFIED = "CONSTRAINT_NOT_SATISFIED", e2.TRACK_IS_DISABLED = "TRACK_IS_DISABLED", e2.GET_VIDEO_ELEMENT_VISIBLE_ERROR = "GET_VIDEO_ELEMENT_VISIBLE_ERROR", e2.SHARE_AUDIO_NOT_ALLOWED = "SHARE_AUDIO_NOT_ALLOWED", e2.LOW_STREAM_ENCODING_ERROR = "LOW_STREAM_ENCODING_ERROR", e2.SET_ENCODING_PARAMETER_ERROR = "SET_ENCODING_PARAMETER_ERROR", e2.TRACK_STATE_UNREACHABLE = "TRACK_STATE_UNREACHABLE", e2.INVALID_UINT_UID_FROM_STRING_UID = "INVALID_UINT_UID_FROM_STRING_UID", e2.CAN_NOT_GET_PROXY_SERVER = "CAN_NOT_GET_PROXY_SERVER", e2.CAN_NOT_GET_GATEWAY_SERVER = "CAN_NOT_GET_GATEWAY_SERVER", e2.VOID_GATEWAY_ADDRESS = "VOID_GATEWAY_ADDRESS", e2.UID_CONFLICT = "UID_CONFLICT", e2.MULTI_UNILBS_RESPONSE_ERROR = "MULTI_UNILBS_RESPONSE_ERROR", e2.UPDATE_TICKET_FAILED = "UPDATE_TICKET_FAILED", e2.TOKEN_EXPIRE = "TOKEN_EXPIRE", e2.INVALID_LOCAL_TRACK = "INVALID_LOCAL_TRACK", e2.INVALID_TRACK = "INVALID_TRACK", e2.SENDER_NOT_FOUND = "SENDER_NOT_FOUND", e2.CREATE_OFFER_FAILED = "CREATE_OFFER_FAILED", e2.SET_ANSWER_FAILED = "SET_ANSWER_FAILED", e2.ICE_FAILED = "ICE_FAILED", e2.PC_CLOSED = "PC_CLOSED", e2.SENDER_REPLACE_FAILED = "SENDER_REPLACE_FAILED", e2.GET_LOCAL_CAPABILITIES_FAILED = "GET_LOCAL_CAPABILITIES_FAILED", e2.GET_LOCAL_CONNECTION_PARAMS_FAILED = "GET_LOCAL_CONNECTION_PARAMS_FAILED", e2.SUBSCRIBE_FAILED = "SUBSCRIBE_FAILED", e2.UNSUBSCRIBE_FAILED = "UNSUBSCRIBE_FAILED", e2.GATEWAY_P2P_LOST = "GATEWAY_P2P_LOST", e2.NO_ICE_CANDIDATE = "NO_ICE_CANDIDATE", e2.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS = "CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS", e2.EXIST_DISABLED_VIDEO_TRACK = "EXIST_DISABLED_VIDEO_TRACK", e2.INVALID_REMOTE_USER = "INVALID_REMOTE_USER", e2.REMOTE_USER_IS_NOT_PUBLISHED = "REMOTE_USER_IS_NOT_PUBLISHED", e2.CUSTOM_REPORT_SEND_FAILED = "CUSTOM_REPORT_SEND_FAILED", e2.CUSTOM_REPORT_FREQUENCY_TOO_HIGH = "CUSTOM_REPORT_FREQUENCY_TOO_HIGH", e2.FETCH_AUDIO_FILE_FAILED = "FETCH_AUDIO_FILE_FAILED", e2.READ_LOCAL_AUDIO_FILE_ERROR = "READ_LOCAL_AUDIO_FILE_ERROR", e2.DECODE_AUDIO_FILE_FAILED = "DECODE_AUDIO_FILE_FAILED", e2.WS_ABORT = "WS_ABORT", e2.WS_DISCONNECT = "WS_DISCONNECT", e2.WS_ERR = "WS_ERR", e2.EXTERNAL_SIGNAL_ABORT = "EXTERNAL_SIGNAL_ABORT", e2.LIVE_STREAMING_TASK_CONFLICT = "LIVE_STREAMING_TASK_CONFLICT", e2.LIVE_STREAMING_INVALID_ARGUMENT = "LIVE_STREAMING_INVALID_ARGUMENT", e2.LIVE_STREAMING_INTERNAL_SERVER_ERROR = "LIVE_STREAMING_INTERNAL_SERVER_ERROR", e2.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED = "LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED", e2.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED = "LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED", e2.LIVE_STREAMING_CDN_ERROR = "LIVE_STREAMING_CDN_ERROR", e2.LIVE_STREAMING_INVALID_RAW_STREAM = "LIVE_STREAMING_INVALID_RAW_STREAM", e2.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT = "LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT", e2.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE = "LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE", e2.LIVE_STREAMING_WARN_FREQUENT_REQUEST = "LIVE_STREAMING_WARN_FREQUENT_REQUEST", e2.WEBGL_INTERNAL_ERROR = "WEBGL_INTERNAL_ERROR", e2.BEAUTY_PROCESSOR_INTERNAL_ERROR = "BEAUTY_PROCESSOR_INTERNAL_ERROR", e2.CROSS_CHANNEL_WAIT_STATUS_ERROR = "CROSS_CHANNEL_WAIT_STATUS_ERROR", e2.CROSS_CHANNEL_FAILED_JOIN_SRC = "CROSS_CHANNEL_FAILED_JOIN_SEC", e2.CROSS_CHANNEL_FAILED_JOIN_DEST = "CROSS_CHANNEL_FAILED_JOIN_DEST", e2.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST = "CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST", e2.CROSS_CHANNEL_SERVER_ERROR_RESPONSE = "CROSS_CHANNEL_SERVER_ERROR_RESPONSE", e2.METADATA_OUT_OF_RANGE = "METADATA_OUT_OF_RANGE", e2.LOCAL_AEC_ERROR = "LOCAL_AEC_ERROR", e2.INVALID_PLUGIN = "INVALID_PLUGIN", e2.DISCONNECT_P2P = "DISCONNECT_P2P", e2.CONVERTING_IMAGEDATA_TO_BLOB_FAILED = "CONVERTING_IMAGEDATA_TO_BLOB_FAILED", e2.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED = "CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED", e2.INIT_DATACHANNEL_TIMEOUT = "INIT_DATACHANNEL_TIMEOUT", e2.CREATE_DATACHANNEL_ERROR = "CREATE_DATACHANNEL_ERROR", e2.DATACHANNEL_CONNECTION_TIMEOUT = "DATACHANNEL_CONNECTION_TIMEOUT", e2.PROHIBITED_OPERATION = "PROHIBITED_OPERATION", e2.IMAGE_MODERATION_UPLOAD_FAILED = "IMAGE_MODERATION_UPLOAD_FAILED", e2.P2P_MESSAGE_FAILED = "P2P_MESSAGE_FAILED", e2;
      }({});
      class xw extends Error {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i2 = arguments.length > 2 ? arguments[2] : void 0;
          super(t2), Lw(this, "code", void 0), Lw(this, "message", void 0), Lw(this, "data", void 0), Lw(this, "name", "AgoraRTCException"), this.code = e2, this.message = "AgoraRTCError ".concat(this.code, ": ").concat(t2), this.data = i2;
        }
        toString() {
          return this.data ? "".concat(this.message, "\ndata: ").concat(JSON.stringify(this.data)) : this.message;
        }
        print() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "error", t2 = arguments.length > 1 ? arguments[1] : void 0;
          return "error" === e2 && (t2 || console).error(this.toString()), "warning" === e2 && (t2 || console).warn(this.toString()), this;
        }
        throw(e2) {
          throw this.print("error", e2), this;
        }
      }
      function Vw(e2, t2) {
        if ("boolean" != typeof e2) throw new xw(Uw.INVALID_PARAMS, "Invalid ".concat(t2, ": The value is of the boolean type."));
      }
      function Fw(e2, t2, i2) {
        if (!kn(i2).call(i2, e2)) throw new xw(Uw.INVALID_PARAMS, "".concat(t2, " can only be set as ").concat(JSON.stringify(i2)));
      }
      function Bw(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1e4;
        if (e2 < i2 || e2 > n2 || (!(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]) && !function(e3) {
          return "number" == typeof e3 && e3 % 1 == 0;
        }(e2)) throw new xw(Uw.INVALID_PARAMS, "invalid ".concat(t2, ": the value range is [").concat(i2, ", ").concat(n2, "]. integer only"));
      }
      function jw(e2, t2) {
        if ("number" != typeof e2) {
          if (!(e2.min || e2.max || e2.ideal || e2.exact)) throw new xw(Uw.INVALID_PARAMS, "".concat(t2, " is not a valid ConstrainLong"));
          void 0 !== e2.min && Bw(e2.min, "".concat(t2, ".min"), 0, 1 / 0), void 0 !== e2.max && Bw(e2.max, "".concat(t2, ".max"), 1, 1 / 0), void 0 !== e2.exact && Bw(e2.exact, "".concat(t2, ".exact"), 1, 1 / 0), void 0 !== e2.ideal && Bw(e2.ideal, "".concat(t2, ".ideal"), 1, 1 / 0);
        } else Bw(e2, t2, 1, 1 / 0);
      }
      function Gw(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 255, r2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        if (null == e2) throw new xw(Uw.INVALID_PARAMS, "".concat(t2 || "param", " cannot be empty"));
        if (!Kw(e2, i2, n2, r2)) throw new xw(Uw.INVALID_PARAMS, "Invalid ".concat(t2 || "string param", ": Length of the string: [").concat(i2, ",").concat(n2, "].").concat(r2 ? " ASCII characters only." : ""));
      }
      function Ww(e2, t2) {
        if (!Array.isArray(e2)) throw new xw(Uw.INVALID_PARAMS, "".concat(t2, " should be an array"));
      }
      function Hw(e2) {
        return null == e2;
      }
      function Kw(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 255, n2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        return "string" == typeof e2 && e2.length <= i2 && e2.length >= t2 && (!n2 || function(e3) {
          if ("string" != typeof e3) return false;
          for (let t3 = 0; t3 < e3.length; t3 += 1) {
            const i3 = e3.charCodeAt(t3);
            if (i3 < 0 || i3 > 255) return false;
          }
          return true;
        }(e2));
      }
      var Yw = function(e2) {
        return e2.COVERED = "COVERED", e2.POSITION = "POSITION", e2.SIZE = "SIZE", e2.STYLE = "STYLE", e2;
      }(Yw || {}), qw = function(e2) {
        return e2.UNMOUNTED = "UNMOUNTED", e2.INVALID_HTML_ELEMENT = "INVALID_HTML_ELEMENT", e2;
      }(qw || {});
      const zw = new class {
        constructor() {
          Lw(this, "_clientSize", null), Lw(this, "getClientWidth", () => document.documentElement ? document.documentElement.clientWidth : document.body.clientWidth), Lw(this, "getClientHeight", () => document.documentElement ? document.documentElement.clientHeight : document.body.clientHeight), Lw(this, "getStyle", (e2) => window.getComputedStyle(e2, null)), Lw(this, "checkCssVisibleProperty", (e2) => {
            var t2;
            let i2 = true;
            const n2 = this.getStyle(e2), { display: r2, visibility: o2, opacity: s2, filter: a2 } = n2;
            return ("none" === r2 || kn(t2 = ["hidden", "collapse"]).call(t2, o2) || Number(s2) < 0.1) && (i2 = false), !!i2 && (a2 && a2.split(" ").filter((e3) => {
              var t3;
              const i3 = e3.split("(")[0];
              return kn(t3 = ["brightness", "blur", "opacity"]).call(t3, i3);
            }).map((e3) => {
              const [t3, i3] = e3.split(/\(|\)/);
              return [t3, Number(i3.match(/^[0-9\.]+/))];
            }).forEach((e3) => {
              const [t3, n3] = e3;
              switch (t3) {
                case "brightness":
                  (n3 < 0.1 || n3 > 3) && (i2 = false);
                  break;
                case "blur":
                  n3 > 3 && (i2 = false);
                  break;
                case "opacity":
                  n3 < 0.1 && (i2 = false);
              }
            }), i2);
          }), Lw(this, "checkPropertyUpToAllParentNodes", (e2, t2) => {
            let i2 = true, n2 = true;
            const r2 = (e3) => t2(e3);
            let o2 = e2;
            for (; o2 && n2; ) r2(o2) || (i2 = false, n2 = false), o2 = o2.parentElement, o2 || (n2 = false);
            return i2;
          }), Lw(this, "checkActualCssVisibleIncludeInherit", (e2) => this.checkPropertyUpToAllParentNodes(e2, this.checkCssVisibleProperty)), Lw(this, "getSizeAboutClient", (e2) => {
            const { width: t2, height: i2, left: n2, right: r2, top: o2, bottom: s2 } = e2.getBoundingClientRect(), a2 = this.getClientWidth(), c2 = this.getClientHeight();
            return { width: t2, height: i2, left: n2, right: r2, top: o2, bottom: s2, clientWidth: a2, clientHeight: c2, clientMin: Math.min(a2, c2) };
          }), Lw(this, "checkActualSize", () => {
            const { width: e2, height: t2, clientMin: i2 } = this._clientSize;
            return this.checkSizeIsVisible(e2, t2, i2);
          }), Lw(this, "elementFromPoint", (e2, t2) => document.elementFromPoint ? document.elementFromPoint(e2, t2) : null), Lw(this, "checkCoverForAPoint", (e2, t2, i2) => {
            const n2 = this.elementFromPoint(e2, t2);
            return null !== n2 && n2 !== i2;
          }), Lw(this, "getPointPositionList", () => {
            const { width: e2, height: t2, left: i2, top: n2 } = this._clientSize, r2 = e2 / 6, o2 = t2 / 6, s2 = [], a2 = 10 ** 6;
            for (let e3 = 0; e3 < 5; e3++) for (let t3 = 0; t3 < 5; t3++) {
              const c2 = (i2 * a2 + (0 === e3 ? 0.1 : 4 === e3 ? (r2 * e3 * a2 - 1e5) / a2 : r2 * e3) * a2) / a2, d2 = (n2 * a2 + (0 === t3 ? 0.1 : 4 === t3 ? (o2 * t3 * a2 - 1e5) / a2 : o2 * t3) * a2) / a2;
              s2.push({ x: c2, y: d2 });
            }
            return [...s2];
          }), Lw(this, "checkElementCover", (e2) => this.getPointPositionList().map((t2) => this.checkCoverForAPoint(t2.x, t2.y, e2)).filter((e3) => !!e3).length > 6), Lw(this, "checkSizeIsVisible", (e2, t2, i2) => (e2 > 50 || i2 / e2 <= 10) && (t2 > 50 || i2 / t2 <= 10)), Lw(this, "checkSizeOfPartInClient", () => {
            const { left: e2, right: t2, top: i2, bottom: n2, clientHeight: r2, clientWidth: o2, clientMin: s2 } = this._clientSize;
            let a2, c2, d2, l2;
            if (e2 < 0) a2 = 0;
            else {
              if (!(e2 < o2)) return false;
              a2 = e2;
            }
            if (t2 < 0) return false;
            if (c2 = t2 < o2 ? t2 : o2, i2 < 0) d2 = 0;
            else {
              if (!(i2 < r2)) return false;
              d2 = i2;
            }
            if (n2 < 0) return false;
            l2 = n2 < r2 ? n2 : r2;
            const u2 = c2 - a2, h2 = l2 - d2;
            return this.checkSizeIsVisible(u2, h2, s2);
          }), Lw(this, "returnHiddenResult", (e2) => (this._clientSize = null, { visible: false, reason: e2 })), Lw(this, "checkOneElementVisible", (e2) => {
            if (e2 instanceof HTMLElement) {
              if (this.checkElementIsMountedOnDom(e2)) {
                if (this.checkActualCssVisibleIncludeInherit(e2)) {
                  if (this._clientSize = this.getSizeAboutClient(e2), this.checkElementCover(e2)) return this.returnHiddenResult(Yw.COVERED);
                  {
                    const e3 = this.checkActualSize(), t2 = this.checkSizeOfPartInClient();
                    return e3 && !t2 ? this.returnHiddenResult(Yw.POSITION) : e3 ? (this._clientSize = null, { visible: true }) : this.returnHiddenResult(Yw.SIZE);
                  }
                }
                return this.returnHiddenResult(Yw.STYLE);
              }
              return this.returnHiddenResult(qw.UNMOUNTED);
            }
            return this.returnHiddenResult(qw.INVALID_HTML_ELEMENT);
          }), Lw(this, "checkElementIsMountedOnDom", (e2) => this.checkPropertyUpToAllParentNodes(e2, (e3) => "HTML" !== e3.nodeName.toUpperCase() ? null !== e3.parentElement : !!document.documentElement));
        }
      }();
      function Jw(e2) {
        return new TextEncoder().encode(e2);
      }
      const Xw = function(e2, t2) {
        const i2 = new Uint8Array(e2.byteLength + t2.byteLength);
        return i2.set(new Uint8Array(e2), 0), i2.set(new Uint8Array(t2), e2.byteLength), i2;
      };
      const Qw = async (e2) => function(e3, t2) {
        let i2 = "";
        return new Uint8Array(e3).forEach((e4) => {
          i2 += e4.toString(t2).padStart(2, "0");
        }), i2;
      }(await crypto.subtle.digest("SHA-256", Jw(e2)), 16);
      let Zw = class {
        constructor() {
          Lw(this, "_events", {}), Lw(this, "addListener", this.on);
        }
        getListeners(e2) {
          return this._events[e2] ? this._events[e2].map((e3) => e3.listener) : [];
        }
        on(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: false });
        }
        once(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: true });
        }
        off(e2, t2) {
          if (!this._events[e2]) return;
          const i2 = this._events[e2], n2 = this._indexOfListener(i2, t2);
          -1 !== n2 && i2.splice(n2, 1), 0 === this._events[e2].length && delete this._events[e2];
        }
        removeAllListeners(e2) {
          e2 ? delete this._events[e2] : this._events = {};
        }
        emit(e2) {
          this._events[e2] || (this._events[e2] = []);
          const t2 = this._events[e2].map((e3) => e3);
          for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), r2 = 1; r2 < i2; r2++) n2[r2 - 1] = arguments[r2];
          for (let i3 = 0; i3 < t2.length; i3 += 1) {
            const r3 = t2[i3];
            r3.once && this.off(e2, r3.listener), r3.listener.apply(this, n2 || []);
          }
        }
        safeEmit(e2) {
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++) i2[n2 - 1] = arguments[n2];
          [...this._events[e2] || []].forEach((t3) => {
            t3.once && this.off(e2, t3.listener);
            try {
              t3.listener.apply(this, i2);
            } catch (t4) {
              console.error("safeEmit event:".concat(e2, " error ").concat(null == t4 ? void 0 : t4.toString()));
            }
          });
        }
        _indexOfListener(e2, t2) {
          let i2 = e2.length;
          for (; i2--; ) if (e2[i2].listener === t2) return i2;
          return -1;
        }
      };
      let $w = null;
      function eO() {
        if ($w) return $w;
        if (window.electron) return $w = window.electron;
        if (!window.require) return null;
        try {
          return $w = window.require("electron"), $w;
        } catch (e2) {
          return null;
        }
      }
      let tO = function(e2) {
        return e2.CREATE_CLIENT = "createClient", e2.CHECK_SYSTEM_REQUIREMENTS = "checkSystemRequirements", e2.SET_AREA = "setArea", e2.PRELOAD = "PRELOAD", e2.CHECK_VIDEO_TRACK_IS_ACTIVE = "checkVideoTrackIsActive", e2.CHECK_AUDIO_TRACK_IS_ACTIVE = "checkAudioTrackIsActive", e2.CREATE_MIC_AUDIO_TRACK = "createMicrophoneAudioTrack", e2.CREATE_CUSTOM_AUDIO_TRACK = "createCustomAudioTrack", e2.CREATE_BUFFER_AUDIO_TRACK = "createBufferSourceAudioTrack", e2.CREATE_CAM_VIDEO_TRACK = "createCameraVideoTrack", e2.CREATE_CUSTOM_VIDEO_TRACK = "createCustomVideoTrack", e2.CREATE_MIC_AND_CAM_TRACKS = "createMicrophoneAndCameraTracks", e2.CREATE_SCREEN_VIDEO_TRACK = "createScreenVideoTrack", e2.SET_ENCRYPTION_CONFIG = "Client.setEncryptionConfig", e2.START_PROXY_SERVER = "Client.startProxyServer", e2.STOP_PROXY_SERVER = "Client.stopProxyServer", e2.SET_PROXY_SERVER = "Client.setProxyServer", e2.SET_TURN_SERVER = "Client.setTurnServer", e2.SET_CLIENT_ROLE = "Client.setClientRole", e2.SET_LOW_STREAM_PARAMETER = "Client.setLowStreamParameter", e2.ENABLE_DUAL_STREAM = "Client.enableDualStream", e2.DISABLE_DUAL_STREAM = "Client.disableDualStream", e2.JOIN = "Client.join", e2.LEAVE = "Client.leave", e2.PUBLISH = "Client.publish", e2.UNPUBLISH = "Client.unpublish", e2.SUBSCRIBE = "Client.subscribe", e2.MASS_SUBSCRIBE = "Client.massSubscribe", e2.MASS_UNSUBSCRIBE = "Client.massUnsubscribe", e2.UNSUBSCRIBE = "Client.unsubscribe", e2.RENEW_TOKEN = "Client.renewToken", e2.SET_REMOTE_VIDEO_STREAM_TYPE = "Client.setRemoteVideoStreamType", e2.SET_STREAM_FALLBACK_OPTION = "Client.setStreamFallbackOption", e2.ENABLE_AUDIO_VOLUME_INDICATOR = "Client.enableAudioVolumeIndicator", e2.SEND_CUSTOM_REPORT_MESSAGE = "Client.sendCustomReportMessage", e2.INSPECT_VIDEO_CONTENT = "Client.inspectVideoContent", e2.STOP_INSPECT_VIDEO_CONTENT = "Client.stopInspectVideoContent", e2.JOIN_FALLBACK_TO_PROXY = "Client._joinFallbackToProxy", e2.ON_LIVE_STREAM_WARNING = "Client.onLiveStreamWarning", e2.ON_LIVE_STREAM_ERROR = "Client.onLiveStreamingError", e2.START_LIVE_STREAMING = "Client.startLiveStreaming", e2.SET_LIVE_TRANSCODING = "Client.setLiveTranscoding", e2.STOP_LIVE_STREAMING = "Client.stopLiveStreaming", e2.START_CHANNEL_MEDIA_RELAY = "Client.startChannelMediaRelay", e2.UPDATE_CHANNEL_MEDIA_RELAY = "Client.updateChannelMediaRelay", e2.STOP_CHANNEL_MEDIA_RELAY = "Client.stopChannelMediaRelay", e2.REQUEST_CONFIG_DISTRIBUTE = "_config-distribute-request", e2.SET_CONFIG_DISTRIBUTE = "_configDistribute", e2.LOCAL_TRACK_SET_MUTED = "LocalTrack.setMute", e2.LOCAL_AUDIO_TRACK_PLAY = "LocalAudioTrack.play", e2.LOCAL_AUDIO_TRACK_PLAY_IN_ELEMENT = "LocalAudioTrack.playInElement", e2.LOCAL_AUDIO_TRACK_STOP = "LocalAudioTrack.stop", e2.LOCAL_AUDIO_TRACK_SET_VOLUME = "LocalAudioTrack.setVolume", e2.MIC_AUDIO_TRACK_SET_DEVICE = "MicrophoneAudioTrack.setDevice", e2.BUFFER_AUDIO_TRACK_START = "BufferSourceAudioTrack.startProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_STOP = "BufferSourceAudioTrack.stopProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_PAUSE = "BufferSourceAudioTrack.pauseProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_RESUME = "BufferSourceAudioTrack.resumeProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_SEEK = "BufferSourceAudioTrack.seekAudioBuffer", e2.LOCAL_VIDEO_TRACK_PLAY = "LocalVideoTrack.play", e2.LOCAL_VIDEO_TRACK_STOP = "LocalVideoTrack.stop", e2.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE = "LocalVideoTrack.getVideoElementVisibleStatus", e2.LOCAL_VIDEO_TRACK_BEAUTY = "LocalVideoTrack.setBeautyEffect", e2.LOCAL_VIDEO_SEND_SEI_DATA = "LocalVideoTrack.sendSeiData", e2.CAM_VIDEO_TRACK_SET_DEVICE = "CameraVideoTrack.setDevice", e2.CAM_VIDEO_TRACK_SET_ENCODER_CONFIG = "CameraVideoTrack.setEncoderConfiguration", e2.REMOTE_VIDEO_TRACK_PLAY = "RemoteVideoTrack.play", e2.REMOTE_VIDEO_TRACK_STOP = "RemoteVideoTrack.stop", e2.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE = "RemoteVideoTrack.getVideoElementVisibleStatus", e2.REMOTE_AUDIO_TRACK_PLAY = "RemoteAudioTrack.play", e2.REMOTE_AUDIO_TRACK_STOP = "RemoteAudioTrack.stop", e2.REMOTE_AUDIO_SET_VOLUME = "RemoteAudioTrack.setVolume", e2.REMOTE_AUDIO_SET_OUTPUT_DEVICE = "RemoteAudioTrack.setOutputDevice", e2.GET_MEDIA_STREAM_TRACK = "Track.getMediaStreamTrack", e2.STREAM_TYPE_CHANGE = "streamTypeChange", e2.CONNECTION_STATE_CHANGE = "connectionStateChange", e2.LOAD_CONFIG_FROM_LOCALSTORAGE = "loadConfigFromLocalStorage", e2.IMAGE_MODERATION_UPLOAD = "imageModerationUpload", e2.REPUB_AFTER_PC_CONNECTED = "repubAfterPCConnected", e2;
      }({}), iO = function(e2) {
        return e2.TRACER = "tracer", e2;
      }({});
      function nO(e2) {
        return Bw(e2.timeout, "config.timeout", 0, 1e5), Bw(e2.timeoutFactor, "config.timeoutFactor", 0, 100, false), Bw(e2.maxRetryCount, "config.maxRetryConfig", 0, 1 / 0), Bw(e2.maxRetryTimeout, "config.maxRetryTimeout", 0, 1 / 0), true;
      }
      let rO = function(e2) {
        return e2[e2.AUDIENCE_LEVEL_LOW_LATENCY = 1] = "AUDIENCE_LEVEL_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_ULTRA_LOW_LATENCY = 2] = "AUDIENCE_LEVEL_ULTRA_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_SYNC_LATENCY = 3] = "AUDIENCE_LEVEL_SYNC_LATENCY", e2;
      }({}), oO = function(e2) {
        return e2.LEAVE = "LEAVE", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.UID_BANNED = "UID_BANNED", e2.FALLBACK = "FALLBACK", e2.IP_BANNED = "IP_BANNED", e2.CHANNEL_BANNED = "CHANNEL_BANNED", e2.LICENSE_MISSING = "LICENSE_MISSING", e2.LICENSE_EXPIRED = "LICENSE_EXPIRED", e2.LICENSE_MINUTES_EXCEEDED = "LICENSE_MINUTES_EXCEEDED", e2.LICENSE_PERIOD_INVALID = "LICENSE_PERIOD_INVALID", e2.LICENSE_MULTIPLE_SDK_SERVICE = "LICENSE_MULTIPLE_SDK_SERVICE", e2.LICENSE_ILLEGAL = "LICENSE_ILLEGAL", e2.TOKEN_EXPIRE = "TOKEN_EXPIRE", e2;
      }({});
      function sO(e2) {
        if (!Array.isArray(e2) || e2.length < 1) return false;
        try {
          e2.forEach((e3) => {
            if (!e3.urls) throw Error();
          });
        } catch (e3) {
          return false;
        }
        return true;
      }
      function aO(e2) {
        return Gw(e2.turnServerURL, "turnServerURL"), Gw(e2.username, "username"), Gw(e2.password, "password"), e2.udpport && Bw(e2.udpport, "udpport", 1, 99999, true), e2.forceturn && Vw(e2.forceturn, "forceturn"), e2.security && Vw(e2.security, "security"), e2.tcpport && Bw(e2.tcpport, "tcpport", 1, 99999, true), true;
      }
      function cO(e2) {
        return void 0 !== e2.level && Fw(e2.level, "level", [1, 2, 3]), void 0 !== e2.delay && Bw(e2.delay, "delay", 0, 3e3, true), true;
      }
      let dO = function(e2) {
        return e2.PEERCONNECTION_STATE_CHANGE = "peerconnection-state-change", e2.AUDIO_METADATA = "audio-metadata", e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.MEDIA_RECONNECT_START = "media-reconnect-start", e2.MEDIA_RECONNECT_END = "media-reconnect-end", e2.IS_USING_CLOUD_PROXY = "is-using-cloud-proxy", e2.USER_JOINED = "user-joined", e2.USER_LEAVED = "user-left", e2.USER_PUBLISHED = "user-published", e2.USER_UNPUBLISHED = "user-unpublished", e2.USER_INFO_UPDATED = "user-info-updated", e2.CLIENT_BANNED = "client-banned", e2.CHANNEL_MEDIA_RELAY_STATE = "channel-media-relay-state", e2.CHANNEL_MEDIA_RELAY_EVENT = "channel-media-relay-event", e2.VOLUME_INDICATOR = "volume-indicator", e2.CRYPT_ERROR = "crypt-error", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "token-privilege-will-expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "token-privilege-did-expire", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGED = "stream-type-changed", e2.STREAM_FALLBACK = "stream-fallback", e2.RECEIVE_METADATA = "receive-metadata", e2.STREAM_MESSAGE = "stream-message", e2.LIVE_STREAMING_ERROR = "live-streaming-error", e2.LIVE_STREAMING_WARNING = "live-streaming-warning", e2.EXCEPTION = "exception", e2.ERROR = "error", e2.P2P_LOST = "p2p_lost", e2.JOIN_FALLBACK_TO_PROXY = "join-fallback-to-proxy", e2.CHANNEL_FALLBACK_TO_WEBSOCKET = "channel-fallback-to-websocket", e2.MEDIA_CONNECTION_TYPE_CHANGE = "media-connection-type-change", e2.PUBLISHED_USER_LIST = "published-user-list", e2.CONTENT_INSPECT_CONNECTION_STATE_CHANGE = "content-inspect-connection-state-change", e2.CONTENT_INSPECT_ERROR = "content-inspect-error", e2.CONTENT_INSPECT_RESULT = "content-inspect-result", e2.IMAGE_MODERATION_CONNECTION_STATE_CHANGE = "image-moderation-connection-state-change", e2;
      }({}), lO = function(e2) {
        return e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.MULTI_IP = "MULTI_IP", e2.TIMEOUT = "TIMEOUT", e2.OFFLINE = "OFFLINE", e2.LEAVE = "LEAVE", e2.P2P_FAILED = "P2P_FAILED", e2.FALLBACK = "FALLBACK", e2.REGIONAL_DISTRIBUTION = "REGIONAL_DISTRIBUTION", e2;
      }({}), uO = function(e2) {
        return e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE", e2;
      }({}), hO = function(e2) {
        return e2.NETWORK_STATE_CHANGE = "NETWORK_STATE_CHANGE", e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE", e2;
      }({});
      function pO(e2, t2) {
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), r2 = 2; r2 < i2; r2++) n2[r2 - 2] = arguments[r2];
        return 0 === e2.getListeners(t2).length ? np.reject(new xw(Uw.UNEXPECTED_ERROR, "can not emit promise")) : new np((i3, r3) => {
          e2.emit(t2, ...n2, i3, r3);
        });
      }
      function _O(e2, t2) {
        if (0 === e2.getListeners(t2).length) return np.resolve();
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), r2 = 2; r2 < i2; r2++) n2[r2 - 2] = arguments[r2];
        return pO(e2, t2, ...n2);
      }
      function EO(e2, t2) {
        if (0 === e2.getListeners(t2).length) return null;
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), r2 = 2; r2 < i2; r2++) n2[r2 - 2] = arguments[r2];
        return mO(e2, t2, ...n2);
      }
      function mO(e2, t2) {
        let i2 = null, n2 = null;
        for (var r2 = arguments.length, o2 = new Array(r2 > 2 ? r2 - 2 : 0), s2 = 2; s2 < r2; s2++) o2[s2 - 2] = arguments[s2];
        if (e2.emit(t2, ...o2, (e3) => {
          i2 = e3;
        }, (e3) => {
          n2 = e3;
        }), null !== n2) throw n2;
        if (null === i2) throw new xw(Uw.UNEXPECTED_ERROR, "handler is not sync");
        return i2;
      }
      const fO = new class extends Zw {
        set networkState(e2) {
          this.emit(hO.NETWORK_STATE_CHANGE, e2, this._networkState), e2 === uO.ONLINE ? this.emit(hO.ONLINE) : e2 === uO.OFFLINE && (this.onlineWaiter = new np((e3) => {
            this.once(hO.ONLINE, () => {
              this.onlineWaiter = void 0, e3(uO.ONLINE);
            });
          }), this.emit(hO.OFFLINE)), this._networkState = e2;
        }
        get networkState() {
          return this._networkState;
        }
        get isOnline() {
          return this._networkState === uO.ONLINE;
        }
        constructor() {
          super(), Lw(this, "_moduleName", "network-indicator"), Lw(this, "_networkState", uO.ONLINE), Lw(this, "onlineWaiter", void 0), window.addEventListener("online", () => {
            this.networkState = uO.ONLINE;
          }), window.addEventListener("offline", () => {
            this.networkState = uO.OFFLINE;
          });
        }
      }();
      function TO(e2, t2) {
        const i2 = e2.indexOf(t2);
        -1 !== i2 && e2.splice(i2, 1);
      }
      function SO(e2) {
        const t2 = [];
        return e2.forEach((e3) => {
          -1 === t2.indexOf(e3) && t2.push(e3);
        }), t2;
      }
      function gO(e2) {
        void 0 !== np ? np.resolve().then(e2) : setTimeout(e2, 0);
      }
      function RO(e2) {
        return JSON.parse(JSON.stringify(e2));
      }
      function vO(e2) {
        try {
          return RO(e2);
        } catch (t2) {
          return e2;
        }
      }
      const CO = {};
      function IO(e2, t2) {
        CO[t2] || (CO[t2] = true, e2());
      }
      function yO(e2) {
        const t2 = window.atob(e2), i2 = new Uint8Array(new ArrayBuffer(t2.length));
        for (let e3 = 0; e3 < t2.length; e3 += 1) i2[e3] = t2.charCodeAt(e3);
        return i2;
      }
      function AO(e2) {
        let t2 = "";
        for (let i2 = 0; i2 < e2.length; i2 += 1) t2 += String.fromCharCode(e2[i2]);
        return window.btoa(t2);
      }
      function bO(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 16, i2 = new TextEncoder().encode(e2);
        if (i2.length > t2) i2 = i2.slice(0, t2);
        else if (i2.length < t2) {
          const e3 = new Uint8Array(t2);
          e3.set(i2), i2 = e3;
        }
        return i2;
      }
      function wO() {
        for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
        const n2 = rr(t2).call(t2, (e3, t3) => e3 + t3.length, 0), r2 = new Uint8Array(new ArrayBuffer(n2));
        let o2 = 0;
        return t2.forEach((e3) => {
          r2.set(e3, o2), o2 += e3.length;
        }), r2;
      }
      function OO(e2) {
        return window.TextEncoder ? new TextEncoder().encode(e2).length : e2.length;
      }
      function NO(e2) {
        let t2 = 0;
        return (/DingTalk/i.test(navigator.userAgent) || /AliApp/i.test(navigator.userAgent)) && e2.realFormData && (e2 = e2.realFormData), e2.forEach((e3) => {
          t2 += "string" == typeof e3 ? OO(e3) : e3.size;
        }), t2 + 138;
      }
      function DO(e2) {
        const t2 = new xw(Uw.TIMEOUT, "timeout");
        return new np((i2, n2) => {
          window.setTimeout(() => n2(t2), e2);
        });
      }
      function PO(e2) {
        return new np((t2) => {
          window.setTimeout(t2, e2);
        });
      }
      function LO() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 7, t2 = arguments.length > 1 ? arguments[1] : void 0;
        const i2 = Math.random().toString(16).substr(2, e2).toLowerCase();
        return i2.length === e2 ? "".concat(t2).concat(i2) : "".concat(t2).concat(i2) + LO(e2 - i2.length, "");
      }
      function kO() {
        return LO(32, "").toUpperCase();
      }
      const MO = () => {
      }, UO = new class {
        constructor() {
          Lw(this, "fnMap", /* @__PURE__ */ new Map());
        }
        throttleByKey(e2, t2, i2, n2) {
          for (var r2 = arguments.length, o2 = new Array(r2 > 4 ? r2 - 4 : 0), s2 = 4; s2 < r2; s2++) o2[s2 - 4] = arguments[s2];
          if (this.fnMap.has(t2)) {
            const r3 = this.fnMap.get(t2);
            if (r3.threshold !== i2) {
              r3.fn(...r3.args), clearTimeout(r3.timer);
              const s3 = window.setTimeout(() => {
                const e3 = this.fnMap.get(t2);
                e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
              }, i2);
              this.fnMap.set(t2, { fn: e2, threshold: i2, timer: s3, args: o2, skipFn: n2 });
            } else r3.skipFn && r3.skipFn(...r3.args), this.fnMap.set(t2, Mw(Mw({}, r3), {}, { fn: e2, args: o2, skipFn: n2 }));
          } else {
            const r3 = window.setTimeout(() => {
              const e3 = this.fnMap.get(t2);
              e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
            }, i2);
            this.fnMap.set(t2, { fn: e2, threshold: i2, timer: r3, args: o2, skipFn: n2 });
          }
        }
      }(), xO = UO.throttleByKey.bind(UO);
      function VO(e2) {
        return "object" == typeof e2 && null !== e2 && !(e2 instanceof RegExp);
      }
      function FO(e2, t2) {
        if (!VO(e2) || !VO(t2)) return t2;
        if (Array.isArray(e2) && !Array.isArray(t2) || !Array.isArray(e2) && Array.isArray(t2)) return t2;
        if (Array.isArray(t2) && Array.isArray(e2)) {
          const i2 = [...e2];
          for (let n2 = 0; n2 < t2.length; n2++) i2[n2] = FO(e2[n2], t2[n2]);
          return i2;
        }
        {
          const i2 = Mw({}, e2);
          for (const n2 in t2) Object.prototype.hasOwnProperty.call(t2, n2) && (Object.prototype.hasOwnProperty.call(e2, n2) ? i2[n2] = FO(e2[n2], t2[n2]) : i2[n2] = t2[n2]);
          return i2;
        }
      }
      function BO(e2, t2) {
        let i2 = [0];
        if (t2 && (i2 = new Array(t2).fill(0)), 0 === e2) return i2;
        let n2 = 0;
        for (; e2 > 0 && (i2[n2] = 255 & e2, e2 >>= 8, n2++, !t2 || n2 !== t2); ) ;
        return i2;
      }
      function jO(e2) {
        return "number" == typeof e2 ? e2 : e2.exact || e2.ideal || e2.max || e2.min || 0;
      }
      function GO(e2) {
        const t2 = "0123456789abcdef";
        function i2(e3) {
          let i3, n3 = "";
          for (i3 = 0; i3 <= 3; i3++) n3 += t2.charAt(e3 >> 8 * i3 + 4 & 15) + t2.charAt(e3 >> 8 * i3 & 15);
          return n3;
        }
        function n2(e3, t3) {
          const i3 = (65535 & e3) + (65535 & t3);
          return (e3 >> 16) + (t3 >> 16) + (i3 >> 16) << 16 | 65535 & i3;
        }
        function r2(e3, t3, i3, r3, o3, s3) {
          return n2(function(e4, t4) {
            return e4 << t4 | e4 >>> 32 - t4;
          }(n2(n2(t3, e3), n2(r3, s3)), o3), i3);
        }
        function o2(e3, t3, i3, n3, o3, s3, a3) {
          return r2(t3 & i3 | ~t3 & n3, e3, t3, o3, s3, a3);
        }
        function s2(e3, t3, i3, n3, o3, s3, a3) {
          return r2(t3 & n3 | i3 & ~n3, e3, t3, o3, s3, a3);
        }
        function a2(e3, t3, i3, n3, o3, s3, a3) {
          return r2(t3 ^ i3 ^ n3, e3, t3, o3, s3, a3);
        }
        function c2(e3, t3, i3, n3, o3, s3, a3) {
          return r2(i3 ^ (t3 | ~n3), e3, t3, o3, s3, a3);
        }
        const d2 = function(e3) {
          let t3;
          const i3 = 1 + (e3.length + 8 >> 6), n3 = new Array(16 * i3);
          for (t3 = 0; t3 < 16 * i3; t3++) n3[t3] = 0;
          for (t3 = 0; t3 < e3.length; t3++) n3[t3 >> 2] |= e3.charCodeAt(t3) << t3 % 4 * 8;
          return n3[t3 >> 2] |= 128 << t3 % 4 * 8, n3[16 * i3 - 2] = 8 * e3.length, n3;
        }(e2);
        let l2, u2, h2, p2, _2, E2 = 1732584193, m2 = -271733879, f2 = -1732584194, T2 = 271733878;
        for (l2 = 0; l2 < d2.length; l2 += 16) u2 = E2, h2 = m2, p2 = f2, _2 = T2, E2 = o2(E2, m2, f2, T2, d2[l2 + 0], 7, -680876936), T2 = o2(T2, E2, m2, f2, d2[l2 + 1], 12, -389564586), f2 = o2(f2, T2, E2, m2, d2[l2 + 2], 17, 606105819), m2 = o2(m2, f2, T2, E2, d2[l2 + 3], 22, -1044525330), E2 = o2(E2, m2, f2, T2, d2[l2 + 4], 7, -176418897), T2 = o2(T2, E2, m2, f2, d2[l2 + 5], 12, 1200080426), f2 = o2(f2, T2, E2, m2, d2[l2 + 6], 17, -1473231341), m2 = o2(m2, f2, T2, E2, d2[l2 + 7], 22, -45705983), E2 = o2(E2, m2, f2, T2, d2[l2 + 8], 7, 1770035416), T2 = o2(T2, E2, m2, f2, d2[l2 + 9], 12, -1958414417), f2 = o2(f2, T2, E2, m2, d2[l2 + 10], 17, -42063), m2 = o2(m2, f2, T2, E2, d2[l2 + 11], 22, -1990404162), E2 = o2(E2, m2, f2, T2, d2[l2 + 12], 7, 1804603682), T2 = o2(T2, E2, m2, f2, d2[l2 + 13], 12, -40341101), f2 = o2(f2, T2, E2, m2, d2[l2 + 14], 17, -1502002290), m2 = o2(m2, f2, T2, E2, d2[l2 + 15], 22, 1236535329), E2 = s2(E2, m2, f2, T2, d2[l2 + 1], 5, -165796510), T2 = s2(T2, E2, m2, f2, d2[l2 + 6], 9, -1069501632), f2 = s2(f2, T2, E2, m2, d2[l2 + 11], 14, 643717713), m2 = s2(m2, f2, T2, E2, d2[l2 + 0], 20, -373897302), E2 = s2(E2, m2, f2, T2, d2[l2 + 5], 5, -701558691), T2 = s2(T2, E2, m2, f2, d2[l2 + 10], 9, 38016083), f2 = s2(f2, T2, E2, m2, d2[l2 + 15], 14, -660478335), m2 = s2(m2, f2, T2, E2, d2[l2 + 4], 20, -405537848), E2 = s2(E2, m2, f2, T2, d2[l2 + 9], 5, 568446438), T2 = s2(T2, E2, m2, f2, d2[l2 + 14], 9, -1019803690), f2 = s2(f2, T2, E2, m2, d2[l2 + 3], 14, -187363961), m2 = s2(m2, f2, T2, E2, d2[l2 + 8], 20, 1163531501), E2 = s2(E2, m2, f2, T2, d2[l2 + 13], 5, -1444681467), T2 = s2(T2, E2, m2, f2, d2[l2 + 2], 9, -51403784), f2 = s2(f2, T2, E2, m2, d2[l2 + 7], 14, 1735328473), m2 = s2(m2, f2, T2, E2, d2[l2 + 12], 20, -1926607734), E2 = a2(E2, m2, f2, T2, d2[l2 + 5], 4, -378558), T2 = a2(T2, E2, m2, f2, d2[l2 + 8], 11, -2022574463), f2 = a2(f2, T2, E2, m2, d2[l2 + 11], 16, 1839030562), m2 = a2(m2, f2, T2, E2, d2[l2 + 14], 23, -35309556), E2 = a2(E2, m2, f2, T2, d2[l2 + 1], 4, -1530992060), T2 = a2(T2, E2, m2, f2, d2[l2 + 4], 11, 1272893353), f2 = a2(f2, T2, E2, m2, d2[l2 + 7], 16, -155497632), m2 = a2(m2, f2, T2, E2, d2[l2 + 10], 23, -1094730640), E2 = a2(E2, m2, f2, T2, d2[l2 + 13], 4, 681279174), T2 = a2(T2, E2, m2, f2, d2[l2 + 0], 11, -358537222), f2 = a2(f2, T2, E2, m2, d2[l2 + 3], 16, -722521979), m2 = a2(m2, f2, T2, E2, d2[l2 + 6], 23, 76029189), E2 = a2(E2, m2, f2, T2, d2[l2 + 9], 4, -640364487), T2 = a2(T2, E2, m2, f2, d2[l2 + 12], 11, -421815835), f2 = a2(f2, T2, E2, m2, d2[l2 + 15], 16, 530742520), m2 = a2(m2, f2, T2, E2, d2[l2 + 2], 23, -995338651), E2 = c2(E2, m2, f2, T2, d2[l2 + 0], 6, -198630844), T2 = c2(T2, E2, m2, f2, d2[l2 + 7], 10, 1126891415), f2 = c2(f2, T2, E2, m2, d2[l2 + 14], 15, -1416354905), m2 = c2(m2, f2, T2, E2, d2[l2 + 5], 21, -57434055), E2 = c2(E2, m2, f2, T2, d2[l2 + 12], 6, 1700485571), T2 = c2(T2, E2, m2, f2, d2[l2 + 3], 10, -1894986606), f2 = c2(f2, T2, E2, m2, d2[l2 + 10], 15, -1051523), m2 = c2(m2, f2, T2, E2, d2[l2 + 1], 21, -2054922799), E2 = c2(E2, m2, f2, T2, d2[l2 + 8], 6, 1873313359), T2 = c2(T2, E2, m2, f2, d2[l2 + 15], 10, -30611744), f2 = c2(f2, T2, E2, m2, d2[l2 + 6], 15, -1560198380), m2 = c2(m2, f2, T2, E2, d2[l2 + 13], 21, 1309151649), E2 = c2(E2, m2, f2, T2, d2[l2 + 4], 6, -145523070), T2 = c2(T2, E2, m2, f2, d2[l2 + 11], 10, -1120210379), f2 = c2(f2, T2, E2, m2, d2[l2 + 2], 15, 718787259), m2 = c2(m2, f2, T2, E2, d2[l2 + 9], 21, -343485551), E2 = n2(E2, u2), m2 = n2(m2, h2), f2 = n2(f2, p2), T2 = n2(T2, _2);
        return i2(E2) + i2(m2) + i2(f2) + i2(T2);
      }
      let WO = 1, HO = console, KO = class {
        static setLogger(e2) {
          HO = e2;
        }
        constructor(e2, t2) {
          Lw(this, "id", void 0), Lw(this, "lockingPromise", np.resolve()), Lw(this, "locks", 0), Lw(this, "name", ""), Lw(this, "lockId", void 0), this.lockId = WO++, e2 && (this.name = e2), t2 && (this.id = t2), this.logger("created");
        }
        logger(e2, t2) {
          const i2 = (this.id ? "[".concat(this.id, "]") : "") + "[lock-".concat(this.name, "-").concat(this.lockId, "]"), n2 = "created" === e2 ? "is ".concat(e2, ".") : "is ".concat(e2, ", current queue ").concat(this.locks, ". ").concat(null != t2 ? t2 : "");
          HO.debug("".concat(i2, " ").concat(n2));
        }
        setId(e2) {
          this.id = e2;
        }
        get isLocked() {
          return this.locks > 0;
        }
        lock(e2) {
          let t2;
          this.locks += 1, this.logger("locked", e2);
          const i2 = new np((i3) => {
            t2 = () => {
              this.locks -= 1, this.logger("unlocked", e2), i3();
            };
          }), n2 = this.lockingPromise.then(() => t2);
          return this.lockingPromise = this.lockingPromise.then(() => i2), n2;
        }
      };
      function YO(e2, t2) {
        return function(i2, n2, r2) {
          const o2 = r2.value;
          if ("function" != typeof o2) throw new Error("Cannot use mutex on object property.");
          return r2.value = async function() {
            const i3 = this[t2];
            if (!i3) throw new Error("mutex property key ".concat(t2, " doesn't exist on ").concat(e2));
            const r3 = await i3.lock("From ".concat(e2, ".").concat(n2));
            try {
              for (var s2 = arguments.length, a2 = new Array(s2), c2 = 0; c2 < s2; c2++) a2[c2] = arguments[c2];
              return await o2.apply(this, a2);
            } finally {
              r3();
            }
          }, r2;
        };
      }
      const qO = { timeout: 500, timeoutFactor: 1.5, maxRetryCount: 1 / 0, maxRetryTimeout: 1e4 };
      function zO(e2, t2) {
        const i2 = Math.floor(t2.timeout * Math.pow(t2.timeoutFactor, e2));
        return Math.min(t2.maxRetryTimeout, i2);
      }
      function JO(e2, t2, i2, n2) {
        const r2 = Object.assign({}, qO, n2);
        let o2 = r2.timeout;
        const s2 = async () => {
          await function(e3) {
            return new np((t3) => {
              window.setTimeout(t3, e3);
            });
          }(o2), o2 *= r2.timeoutFactor, o2 = Math.min(r2.maxRetryTimeout, o2);
        };
        let a2 = false;
        const c2 = new np(async (n3, o3) => {
          t2 = t2 || (() => false), i2 = i2 || (() => true);
          for (let c3 = 0; c3 < r2.maxRetryCount; c3 += 1) {
            if (a2) return o3(new xw(Uw.OPERATION_ABORTED));
            try {
              const i3 = await e2();
              if (!t2(i3, c3)) return n3(i3);
              if (c3 + 1 === r2.maxRetryCount) return n3(i3);
              await s2();
            } catch (e3) {
              if (!i2(e3, c3)) return o3(e3);
              if (c3 + 1 === r2.maxRetryCount) return o3(e3);
              await s2();
            }
          }
        });
        return c2.cancel = () => a2 = true, c2;
      }
      let XO, QO = class {
        constructor(e2) {
          Lw(this, "input", []), Lw(this, "size", void 0), this.size = e2;
        }
        add(e2) {
          this.input.push(e2), this.input.length > this.size && this.input.splice(0, 1);
        }
        mean() {
          var e2;
          return 0 === this.input.length ? 0 : rr(e2 = this.input).call(e2, (e3, t2) => e3 + t2) / this.input.length;
        }
      }, ZO = 0, $O = 0;
      function eN(e2, t2, i2, n2) {
        return new np((r2, o2) => {
          t2.responseType = t2.responseType || "json", t2.data && !i2 ? (t2.data = JSON.stringify(t2.data), ZO += OO(t2.data)) : i2 && (t2.data.size ? ZO += t2.data.size : t2.data instanceof FormData ? ZO += NO(t2.data) : ZO += OO(JSON.stringify(t2.data))), t2.headers = t2.headers || {}, t2.headers["Content-Type"] = t2.headers["Content-Type"] || "application/json", t2.method = "POST", t2.url = e2, qb.request(t2).then((e3) => {
            "string" == typeof e3.data ? $O += OO(e3.data) : e3.data instanceof ArrayBuffer || e3.data instanceof Uint8Array ? $O += e3.data.byteLength : $O += OO(JSON.stringify(e3.data)), n2 && r2({ data: e3.data, headers: e3.headers }), r2(e3.data);
          }).catch((e3) => {
            qb.isCancel(e3) ? o2(new xw(Uw.OPERATION_ABORTED, "cancel token canceled")) : "ECONNABORTED" === e3.code ? o2(new xw(Uw.NETWORK_TIMEOUT, e3.message)) : e3.response ? o2(new xw(Uw.NETWORK_RESPONSE_ERROR, e3.response.status)) : o2(new xw(Uw.NETWORK_ERROR, e3.message));
          });
        });
      }
      async function tN(e2, t2) {
        const i2 = new Blob([t2.data], { type: "buffer" });
        return await eN(e2, Mw(Mw({}, t2), {}, { data: i2, headers: { "Content-Type": "application/octet-stream" } }), true);
      }
      const iN = () => void 0 !== window.isSecureContext;
      function nN(e2) {
        if (Array.isArray(e2)) return e2.map((e3) => e3);
        if (!rN(e2)) return e2;
        const t2 = {};
        for (const i2 in e2) {
          const n2 = e2[i2];
          rN(n2) || Array.isArray(n2) ? t2[i2] = nN(n2) : t2[i2] = n2;
        }
        return t2;
      }
      function rN(e2) {
        return !("object" != typeof e2 || Array.isArray(e2) || !e2);
      }
      let oN = class {
        constructor(e2) {
          Lw(this, "input", []), Lw(this, "size", void 0), this.size = e2;
        }
        add(e2) {
          this.input.push(e2), this.input.length > this.size && this.input.splice(0, 1);
        }
        diffMean() {
          return 0 === this.input.length ? 0 : (this.input[this.input.length - 1] - this.input[0]) / this.input.length;
        }
      };
      const sN = { address: "unknown", candidateType: "unknown", id: "unknown", port: 0, priority: 0, protocol: "unknown", type: "unknown" }, aN = { timestamp: 0, bitrate: { actualEncoded: 0, transmit: 0 }, sendPacketLossRate: 0, recvPacketLossRate: 0, videoRecv: [], videoSend: [], audioRecv: [], audioSend: [], selectedCandidatePair: { id: "unknown", localCandidate: sN, remoteCandidate: sN }, updateInterval: 0 }, cN = { firsCount: 0, nacksCount: 0, plisCount: 0, framesDecodeCount: 0, framesDecodeInterval: 0, framesDecodeFreezeTime: 0, decodeFrameRate: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packets: 0, ssrc: 0, qpSumPerFrame: 0, framesDroppedCount: 0, outputFrameRate: 0, packetsDiscarded: 0, framesAssembledFromMultiplePackets: 0, totalProcessingDelay: 0, avgDecodeMs: 0, avgFramesAssembledFromMultiplePacketsMs: 0, avgProcessingDelayMs: 0, avgInterFrameDelayMs: 0, totalAssemblyTime: 0 }, dN = { firsCount: 0, nacksCount: 0, plisCount: 0, frameCount: 0, bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0, jitterMs: 0, qpSumPerFrame: 0 }, lN = { bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0, jitterMs: 0 }, uN = { jitterBufferMs: 0, jitterMs: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packetsDiscarded: 0, packets: 0, ssrc: 0, receivedFrames: 0, droppedFrames: 0, concealedSamples: 0 };
      let hN = class {
        constructor(e2, t2) {
          Lw(this, "onFirstVideoReceived", void 0), Lw(this, "onFirstVideoDecoded", void 0), Lw(this, "onFirstAudioReceived", void 0), Lw(this, "onFirstVideoDecodedTimeout", void 0), Lw(this, "onFirstAudioDecoded", void 0), Lw(this, "onSelectedLocalCandidateChanged", void 0), Lw(this, "onSelectedRemoteCandidateChanged", void 0), Lw(this, "videoIsReady", false), Lw(this, "videoIsReady2", {}), Lw(this, "pc", void 0), Lw(this, "options", void 0), Lw(this, "intervalTimer", void 0), Lw(this, "stats", nN(aN)), Lw(this, "isFirstVideoReceived", {}), Lw(this, "isFirstVideoDecoded", {}), Lw(this, "isFirstAudioReceived", {}), Lw(this, "isFirstAudioDecoded", {}), Lw(this, "isFirstVideoDecodedTimeout", {}), Lw(this, "lossRateWindowStats", []), this.pc = e2, this.options = t2, this.intervalTimer = window.setInterval(async () => {
            this.updateStats();
          }, this.options.updateInterval);
        }
        getStats() {
          return this.stats;
        }
        getSelectedCandidatePair() {
          return new np((e2) => {
            e2({ local: Mw({}, sN), remote: Mw({}, sN) });
          });
        }
        setVideoIsReady(e2) {
          this.videoIsReady = e2;
        }
        setVideoIsReady2(e2, t2) {
          this.videoIsReady2[e2] = t2;
        }
        getVideoIsReady(e2) {
          return this.videoIsReady2[e2] || false;
        }
        setIsFirstAudioDecoded(e2) {
        }
        destroy() {
          window.clearInterval(this.intervalTimer), this.pc = void 0;
        }
        calcLossRate(e2) {
          this.lossRateWindowStats.push(e2), this.lossRateWindowStats.length > this.options.lossRateInterval && this.lossRateWindowStats.splice(0, 1);
          const t2 = this.lossRateWindowStats.length, i2 = ["videoSend", "audioSend", "videoRecv", "audioRecv"];
          let n2 = 0, r2 = 0, o2 = 0, s2 = 0;
          for (const a2 of i2) e2[a2].forEach((e3, i3) => {
            if (!this.lossRateWindowStats[t2 - 1][a2][i3] || !this.lossRateWindowStats[0][a2][i3]) return;
            const c2 = this.lossRateWindowStats[t2 - 1][a2][i3].packets - this.lossRateWindowStats[0][a2][i3].packets, d2 = this.lossRateWindowStats[t2 - 1][a2][i3].packetsLost - this.lossRateWindowStats[0][a2][i3].packetsLost;
            "videoSend" === a2 || "audioSend" === a2 ? (n2 += c2, o2 += d2) : (r2 += c2, s2 += d2), Number.isNaN(c2) || Number.isNaN(c2) ? e3.packetLostRate = 0 : e3.packetLostRate = c2 <= 0 || d2 <= 0 ? 0 : d2 / (c2 + d2);
          });
          e2.sendPacketLossRate = n2 <= 0 || o2 <= 0 ? 0 : o2 / (n2 + o2), e2.recvPacketLossRate = r2 <= 0 || s2 <= 0 ? 0 : s2 / (r2 + s2);
        }
      }, pN = class extends hN {
        constructor() {
          super(...arguments), Lw(this, "_stats", aN), Lw(this, "lastDecodeVideoReceiverStats", /* @__PURE__ */ new Map());
        }
        async updateStats() {
          const e2 = await this._getStats(), t2 = this.statsResponsesToObjects(e2);
          this._stats = nN(aN);
          const i2 = t2.filter((e3) => "ssrc" === e3.type);
          this.processSSRCStats(i2);
          const n2 = t2.find((e3) => "VideoBwe" === e3.type);
          n2 && this.processBandwidthStats(n2), this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats;
        }
        processBandwidthStats(e2) {
          this._stats.bitrate = { actualEncoded: Number(e2.googActualEncBitrate), targetEncoded: Number(e2.googTargetEncBitrate), retransmit: Number(e2.googRetransmitBitrate), transmit: Number(e2.googTransmitBitrate) }, this._stats.sendBandwidth = Number(e2.googAvailableSendBandwidth);
        }
        processSSRCStats(e2) {
          e2.forEach((e3) => {
            var t2;
            const i2 = kn(t2 = e3.id).call(t2, "send");
            switch ("".concat(e3.mediaType, "_").concat(i2 ? "send" : "recv")) {
              case "video_send": {
                const t3 = nN(dN);
                t3.codec = e3.googCodecName, t3.adaptionChangeReason = "none", e3.googCpuLimitedResolution && (t3.adaptionChangeReason = "cpu"), e3.googBandwidthLimitedResolution && (t3.adaptionChangeReason = "bandwidth"), t3.avgEncodeMs = Number(e3.googAvgEncodeMs), t3.inputFrame = { width: Number(e3.googFrameWidthInput) || Number(e3.googFrameWidthSent), height: Number(e3.googFrameHeightInput) || Number(e3.googFrameHeightSent), frameRate: Number(e3.googFrameRateInput) }, t3.sentFrame = { width: Number(e3.googFrameWidthSent), height: Number(e3.googFrameHeightSent), frameRate: Number(e3.googFrameRateInput) }, t3.firsCount = Number(e3.googFirReceived), t3.nacksCount = Number(e3.googNacksReceived), t3.plisCount = Number(e3.googPlisReceived), t3.frameCount = Number(e3.framesEncoded), t3.bytes = Number(e3.bytesSent), t3.packets = Number(e3.packetsSent), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.rttMs = Number(e3.googRtt || 0), this._stats.videoSend.push(t3), this._stats.rtt = t3.rttMs;
                break;
              }
              case "video_recv": {
                const t3 = nN(cN), i3 = this.lastDecodeVideoReceiverStats.get(Number(e3.ssrc));
                if (t3.codec = e3.googCodecName, t3.targetDelayMs = Number(e3.googTargetDelayMs), t3.renderDelayMs = Number(e3.googRenderDelayMs), t3.currentDelayMs = Number(e3.googCurrentDelayMs), t3.minPlayoutDelayMs = Number(e3.googMinPlayoutDelayMs), t3.decodeMs = Number(e3.googDecodeMs), t3.maxDecodeMs = Number(e3.googMaxDecodeMs), t3.receivedFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateReceived) }, t3.decodedFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateDecoded) }, t3.decodeFrameRate = Number(e3.googFrameRateDecoded), t3.outputFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateOutput) }, t3.jitterBufferMs = Number(e3.googJitterBufferMs), t3.firsCount = Number(e3.googFirsSent), t3.nacksCount = Number(e3.googNacksSent), t3.plisCount = Number(e3.googPlisSent), t3.framesDecodeCount = Number(e3.framesDecoded), t3.bytes = Number(e3.bytesReceived), t3.packets = Number(e3.packetsReceived), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.packets > 0 && !this.isFirstVideoReceived[t3.ssrc] && (this.onFirstVideoReceived && this.onFirstVideoReceived(t3.ssrc), this.isFirstVideoReceived[t3.ssrc] = true), t3.framesDecodeCount > 0 && !this.isFirstVideoDecoded[t3.ssrc] && (this.onFirstVideoDecoded && this.onFirstVideoDecoded(t3.ssrc, t3.decodedFrame.width, t3.decodedFrame.height), this.isFirstVideoDecoded[t3.ssrc] = true), i3) {
                  const n2 = i3.stats, r2 = Date.now() - i3.lts;
                  t3.framesDecodeFreezeTime = n2.framesDecodeFreezeTime, t3.framesDecodeInterval = n2.framesDecodeInterval, t3.framesDecodeCount > n2.framesDecodeCount && this.isFirstVideoDecoded[t3.ssrc] ? (i3.lts = Date.now(), t3.framesDecodeInterval = r2, t3.framesDecodeInterval >= this.options.freezeRateLimit && (this.getVideoIsReady(parseInt(e3.ssrc, 10)) ? t3.framesDecodeFreezeTime += t3.framesDecodeInterval : this.setVideoIsReady2(parseInt(e3.ssrc, 10), true))) : t3.framesDecodeCount < i3.stats.framesDecodeCount && (t3.framesDecodeInterval = 0);
                }
                this.lastDecodeVideoReceiverStats.set(t3.ssrc, { stats: Mw({}, t3), lts: Date.now() }), this._stats.videoRecv.push(t3);
                break;
              }
              case "audio_recv": {
                const t3 = nN(uN);
                t3.codec = e3.googCodecName, t3.outputLevel = Math.abs(Number(e3.audioOutputLevel)) / 32767, t3.decodingCNG = Number(e3.googDecodingCNG), t3.decodingCTN = Number(e3.googDecodingCTN), t3.decodingCTSG = Number(e3.googDecodingCTSG), t3.decodingNormal = Number(e3.googDecodingNormal), t3.decodingPLC = Number(e3.googDecodingPLC), t3.decodingPLCCNG = Number(e3.googDecodingPLCCNG), t3.expandRate = Number(e3.googExpandRate), t3.accelerateRate = Number(e3.googAccelerateRate), t3.preemptiveExpandRate = Number(e3.googPreemptiveExpandRate), t3.secondaryDecodedRate = Number(e3.googSecondaryDecodedRate), t3.speechExpandRate = Number(e3.googSpeechExpandRate), t3.preferredJitterBufferMs = Number(e3.googPreferredJitterBufferMs), t3.jitterBufferMs = Number(e3.googJitterBufferMs), t3.jitterMs = Number(e3.googJitterReceived), t3.bytes = Number(e3.bytesReceived), t3.packets = Number(e3.packetsReceived), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.receivedFrames = Number(e3.googDecodingCTN) || Number(e3.packetsReceived), t3.droppedFrames = Number(e3.googDecodingPLC) + Number(e3.googDecodingPLCCNG) || Number(e3.packetsLost), t3.receivedFrames > 0 && !this.isFirstAudioReceived[t3.ssrc] && (this.onFirstAudioReceived && this.onFirstAudioReceived(t3.ssrc), this.isFirstAudioReceived[t3.ssrc] = true), t3.decodingNormal > 0 && !this.isFirstAudioDecoded[t3.ssrc] && (this.onFirstAudioDecoded && this.onFirstAudioDecoded(t3.ssrc), this.isFirstAudioDecoded[t3.ssrc] = true), this._stats.audioRecv.push(t3);
                break;
              }
              case "audio_send": {
                const t3 = nN(lN);
                t3.codec = e3.googCodecName, t3.inputLevel = Math.abs(Number(e3.audioInputLevel)) / 32767, t3.aecReturnLoss = Number(e3.googEchoCancellationReturnLoss || 0), t3.aecReturnLossEnhancement = Number(e3.googEchoCancellationReturnLossEnhancement || 0), t3.residualEchoLikelihood = Number(e3.googResidualEchoLikelihood || 0), t3.residualEchoLikelihoodRecentMax = Number(e3.googResidualEchoLikelihoodRecentMax || 0), t3.bytes = Number(e3.bytesSent), t3.packets = Number(e3.packetsSent), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.rttMs = Number(e3.googRtt || 0), this._stats.rtt = t3.rttMs, this._stats.audioSend.push(t3);
                break;
              }
            }
          });
        }
        _getStats() {
          return new np((e2, t2) => {
            this.pc.getStats(e2, t2);
          });
        }
        statsResponsesToObjects(e2) {
          const t2 = [];
          return e2.result().forEach((e3) => {
            const i2 = { id: e3.id, timestamp: e3.timestamp.valueOf().toString(), type: e3.type };
            e3.names().forEach((t3) => {
              i2[t3] = e3.stat(t3);
            }), t2.push(i2);
          }), t2;
        }
      }, _N = function(e2) {
        return e2.BANDWIDTH = "bandwidth", e2.CPU = "cpu", e2.NONE = "none", e2.OTHER = "other", e2;
      }({}), EN = function(e2) {
        return e2.L1T1 = "L1T1", e2.L1T2 = "L1T2", e2.L1T3 = "L1T3", e2.L1T3_KEY = "L1T3_KEY", e2.L2T1_KEY = "L2T1_KEY", e2.L2T2_KEY = "L2T2_KEY", e2.L2T3_KEY = "L2T3_KEY", e2.L3T1_KEY = "L3T1_KEY", e2.L3T2_KEY = "L3T2_KEY", e2.L3T3_KEY = "L3T3_KEY", e2;
      }({}), mN = function(e2) {
        return e2[e2.new = 0] = "new", e2[e2.connecting = 1] = "connecting", e2[e2.connected = 2] = "connected", e2[e2.disconnected = 3] = "disconnected", e2[e2.failed = 4] = "failed", e2[e2.closed = 5] = "closed", e2;
      }({}), fN = function(e2) {
        return e2.CERTIFICATE = "certificate", e2.CODEC = "codec", e2.CANDIDATE_PAIR = "candidate-pair", e2.LOCAL_CANDIDATE = "local-candidate", e2.REMOTE_CANDIDATE = "remote-candidate", e2.INBOUND = "inbound-rtp", e2.TRACK = "track", e2.OUTBOUND = "outbound-rtp", e2.PC = "peer-connection", e2.REMOTE_INBOUND = "remote-inbound-rtp", e2.REMOTE_OUTBOUND = "remote-outbound-rtp", e2.TRANSPORT = "transport", e2.CSRC = "csrc", e2.DATA_CHANNEL = "data-channel", e2.STREAM = "stream", e2.SENDER = "sender", e2.RECEIVER = "receiver", e2;
      }({});
      var TN = function(e2) {
        return e2[e2.kNone = 1] = "kNone", e2[e2.kMillisecondsFromSeconds = 1e3] = "kMillisecondsFromSeconds", e2[e2.kBytesToBits = 8] = "kBytesToBits", e2;
      }(TN || {});
      function SN(e2, t2, i2, n2) {
        let r2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : TN.kNone;
        if (!t2) return;
        const o2 = Number(t2[i2]);
        if ("number" != typeof o2) return;
        const s2 = Number(t2[n2]);
        if ("number" != typeof s2) return;
        if (!e2) return s2 ? o2 / s2 * r2 : void 0;
        const a2 = Number(e2[i2]);
        if ("number" != typeof a2) return;
        const c2 = Number(e2[n2]);
        if ("number" != typeof c2) return;
        const d2 = s2 - c2;
        return d2 ? (o2 - a2) / d2 * r2 : void 0;
      }
      let gN = class extends hN {
        constructor() {
          super(...arguments), Lw(this, "_stats", aN), Lw(this, "report", void 0), Lw(this, "lastDecodeVideoReceiverStats", /* @__PURE__ */ new Map()), Lw(this, "lastVideoFramesRecv", /* @__PURE__ */ new Map()), Lw(this, "lastVideoFramesSent", /* @__PURE__ */ new Map()), Lw(this, "lastVideoFramesDecode", /* @__PURE__ */ new Map()), Lw(this, "lastVideoFramesOutput", /* @__PURE__ */ new Map()), Lw(this, "lastVideoJBDelay", /* @__PURE__ */ new Map()), Lw(this, "lastAudioJBDelay", /* @__PURE__ */ new Map()), Lw(this, "mediaBytesSent", /* @__PURE__ */ new Map()), Lw(this, "mediaBytesRetransmit", /* @__PURE__ */ new Map()), Lw(this, "mediaBytesTargetEncode", /* @__PURE__ */ new Map()), Lw(this, "lastDecodeAudioReceiverStats", /* @__PURE__ */ new Map()), Lw(this, "lastEncoderMs", /* @__PURE__ */ new Map());
        }
        async updateStats() {
          this.report = await this.pc.getStats(), this._stats = nN(aN), this.report.forEach((e2) => {
            switch (e2.type) {
              case fN.OUTBOUND:
              case fN.INBOUND: {
                const t2 = e2.mediaType || e2.kind, i2 = !t2 && "frameWidth" in e2, n2 = !t2 && !("frameWidth" in e2);
                e2.type === fN.OUTBOUND ? "audio" === t2 || n2 ? this.processAudioOutboundStats(e2) : ("video" === t2 || i2) && this.processVideoOutboundStats(e2) : e2.type === fN.INBOUND && ("audio" === t2 || n2 ? this.processAudioInboundStats(e2) : ("video" === t2 || i2) && this.processVideoInboundStats(e2));
                break;
              }
              case fN.TRANSPORT: {
                const t2 = this.report.get(e2.selectedCandidatePairId);
                t2 && this.processCandidatePairStats(t2);
                break;
              }
              case fN.CANDIDATE_PAIR:
                e2.selected && this.processCandidatePairStats(e2);
            }
          }), this.updateSendBitrate(), this._stats.updateInterval = Date.now() - this.stats.timestamp, this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats;
        }
        async getSelectedCandidatePair() {
          const e2 = await this.pc.getStats(), t2 = { local: Mw({}, sN), remote: Mw({}, sN) };
          return e2.forEach((i2) => {
            let n2;
            if (i2.type === fN.TRANSPORT && (n2 = e2.get(i2.selectedCandidatePairId)), i2.type === fN.CANDIDATE_PAIR && i2.selected && (n2 = i2), n2) {
              const i3 = (e3, t3) => {
                e3.type = t3.type, e3.id = t3.id, t3.address && (e3.address = t3.address), t3.candidateType && (e3.candidateType = t3.candidateType), t3.port && (e3.port = t3.port), t3.priority && (e3.priority = t3.priority), t3.protocol && (e3.protocol = t3.protocol), t3.relayProtocol && (e3.relayProtocol = t3.relayProtocol);
              };
              if (n2.localCandidateId) {
                const r2 = e2.get(n2.localCandidateId);
                r2 && i3(t2.local, r2);
              }
              if (n2.remoteCandidateId) {
                const r2 = e2.get(n2.remoteCandidateId);
                r2 && i3(t2.remote, r2);
              }
            }
          }), t2;
        }
        processCandidatePairStats(e2) {
          if (this._stats.sendBandwidth = e2.availableOutgoingBitrate || 0, e2.currentRoundTripTime && (this._stats.rtt = 1e3 * e2.currentRoundTripTime), this._stats.videoSend.forEach((t2) => {
            e2.currentRoundTripTime && (t2.rttMs = 1e3 * e2.currentRoundTripTime);
          }), this._stats.audioSend.forEach((t2) => {
            e2.currentRoundTripTime && (t2.rttMs = 1e3 * e2.currentRoundTripTime);
          }), this._stats.selectedCandidatePair.id = e2.id, e2.localCandidateId) {
            const t2 = this.report.get(e2.localCandidateId);
            t2 && this.processCandidateStats(t2);
          }
          if (e2.remoteCandidateId) {
            const t2 = this.report.get(e2.remoteCandidateId);
            t2 && this.processCandidateStats(t2);
          }
        }
        processCandidateStats(e2) {
          let t2;
          e2.type === fN.LOCAL_CANDIDATE && (t2 = this._stats.selectedCandidatePair.localCandidate), e2.type === fN.REMOTE_CANDIDATE && (t2 = this._stats.selectedCandidatePair.remoteCandidate), t2 && (t2.type = e2.type, t2.id = e2.id, e2.address && (t2.address = e2.address), e2.candidateType && (t2.candidateType = e2.candidateType), e2.port && (t2.port = e2.port), e2.priority && (t2.priority = e2.priority), e2.protocol && (t2.protocol = e2.protocol), e2.relayProtocol && (t2.relayProtocol = e2.relayProtocol), e2.type === fN.LOCAL_CANDIDATE && this.stats.selectedCandidatePair.localCandidate.id !== t2.id && this.onSelectedLocalCandidateChanged && this.onSelectedLocalCandidateChanged(Mw({}, t2), Mw({}, this.stats.selectedCandidatePair.localCandidate)), e2.type === fN.REMOTE_CANDIDATE && this.stats.selectedCandidatePair.remoteCandidate.id !== t2.id && this.onSelectedRemoteCandidateChanged && this.onSelectedRemoteCandidateChanged(Mw({}, t2), Mw({}, this.stats.selectedCandidatePair.remoteCandidate)));
        }
        processAudioInboundStats(e2) {
          let t2 = this._stats.audioRecv.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = nN(uN), this._stats.audioRecv.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsReceived, t2.packetsLost = e2.packetsLost, t2.packetsDiscarded = e2.packetsDiscarded, t2.bytes = e2.bytesReceived, t2.jitterMs = 1e3 * e2.jitter, t2.retransmittedBytesReceived = e2.retransmittedBytesReceived, t2.retransmittedPacketsReceived = e2.retransmittedPacketsReceived, t2.totalProcessingDelay = e2.totalProcessingDelay, t2.jitterBufferEmittedCount = e2.jitterBufferEmittedCount;
          const i2 = this.lastDecodeAudioReceiverStats.get(t2.ssrc);
          t2.avgProcessingDelayMs = SN(i2, t2, "totalProcessingDelay", "jitterBufferEmittedCount", TN.kMillisecondsFromSeconds), this.processAudioTrackReceiverStats(e2, e2.trackId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), t2.receivedFrames || (t2.receivedFrames = e2.packetsReceived), t2.droppedFrames || (t2.droppedFrames = e2.packetsLost), t2.receivedFrames > 0 && !this.isFirstAudioReceived[t2.ssrc] && (this.onFirstAudioReceived && this.onFirstAudioReceived(t2.ssrc), this.isFirstAudioReceived[t2.ssrc] = true), t2.outputLevel && t2.outputLevel > 0 && !this.isFirstAudioDecoded[t2.ssrc] && (this.onFirstAudioDecoded && this.onFirstAudioDecoded(t2.ssrc), this.isFirstAudioDecoded[t2.ssrc] = true), "number" == typeof e2.concealedSamples && (t2.concealedSamples = e2.concealedSamples), this.lastDecodeAudioReceiverStats.set(t2.ssrc, Mw({}, t2));
        }
        processVideoInboundStats(e2) {
          let t2 = this._stats.videoRecv.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = nN(cN), this._stats.videoRecv.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsReceived, t2.packetsLost = e2.packetsLost, t2.bytes = e2.bytesReceived, t2.firsCount = e2.firCount, t2.nacksCount = e2.nackCount, t2.plisCount = e2.pliCount, t2.framesDecodeCount = e2.framesDecoded, t2.framesDroppedCount = e2.framesDropped, t2.totalInterFrameDelay = e2.totalInterFrameDelay, t2.totalSquaredInterFrameDelay = e2.totalSquaredInterFrameDelay, t2.totalFreezesDuration = e2.totalFreezesDuration, t2.totalProcessingDelay = e2.totalProcessingDelay, t2.packetsDiscarded = e2.packetsDiscarded, t2.framesAssembledFromMultiplePackets = e2.framesAssembledFromMultiplePackets, t2.totalAssemblyTime = e2.totalAssemblyTime, t2.keyFramesDecoded = e2.keyFramesDecoded, t2.retransmittedBytesReceived = e2.retransmittedBytesReceived, t2.retransmittedPacketsReceived = e2.retransmittedPacketsReceived;
          const i2 = this.lastDecodeVideoReceiverStats.get(t2.ssrc), n2 = this.lastVideoFramesDecode.get(t2.ssrc), r2 = this.lastVideoFramesOutput.get(t2.ssrc), o2 = Date.now();
          if (t2.framesDecodeCount > 0 && !this.isFirstVideoDecoded[t2.ssrc]) {
            const e3 = t2.decodedFrame ? t2.decodedFrame.width : 0, i3 = t2.decodedFrame ? t2.decodedFrame.height : 0;
            this.onFirstVideoDecoded && this.onFirstVideoDecoded(t2.ssrc, e3, i3), this.isFirstVideoDecoded[t2.ssrc] = true;
          }
          if (i2) {
            const n3 = i2.stats, r3 = o2 - i2.lts;
            t2.framesDecodeFreezeTime = n3.framesDecodeFreezeTime, t2.framesDecodeInterval = n3.framesDecodeInterval, !this.isFirstVideoDecoded[t2.ssrc] && r3 > this.options.firstVideoDecodedTimeout && !this.isFirstVideoDecodedTimeout[t2.ssrc] && (this.onFirstVideoDecodedTimeout && this.onFirstVideoDecodedTimeout(t2.ssrc), this.isFirstVideoDecodedTimeout[t2.ssrc] = true), t2.framesDecodeCount > n3.framesDecodeCount && this.isFirstVideoDecoded[t2.ssrc] ? (i2.lts = Date.now(), t2.framesDecodeInterval = r3, t2.framesDecodeInterval >= this.options.freezeRateLimit && (this.getVideoIsReady(parseInt(e2.ssrc)) ? t2.framesDecodeFreezeTime += t2.framesDecodeInterval : this.setVideoIsReady2(parseInt(e2.ssrc, 10), true))) : t2.framesDecodeCount < n3.framesDecodeCount && (t2.framesDecodeInterval = 0), e2.framesDecoded && e2.qpSum && (i2.stats.framesDecodeCount > e2.framesDecoded ? t2.qpSumPerFrame = e2.qpSum / e2.framesDecoded : t2.qpSumPerFrame = (e2.qpSum - i2.qpSum) / (e2.framesDecoded - i2.stats.framesDecodeCount));
          }
          e2.totalDecodeTime && (t2.decodeMs = 1e3 * e2.totalDecodeTime, t2.avgDecodeMs = SN(null == i2 ? void 0 : i2.stats, t2, "decodeMs", "framesDecodeCount")), t2.avgProcessingDelayMs = SN(null == i2 ? void 0 : i2.stats, t2, "totalProcessingDelay", "framesDecodeCount", TN.kMillisecondsFromSeconds), t2.avgFramesAssembledFromMultiplePacketsMs = SN(null == i2 ? void 0 : i2.stats, t2, "totalAssemblyTime", "framesAssembledFromMultiplePackets", TN.kMillisecondsFromSeconds), t2.avgInterFrameDelayMs = SN(null == i2 ? void 0 : i2.stats, t2, "totalInterFrameDelay", "framesDecodeCount", TN.kMillisecondsFromSeconds), n2 && o2 - n2.lts >= 800 ? (t2.decodeFrameRate = Math.round((t2.framesDecodeCount - n2.count) / ((o2 - n2.lts) / 1e3)), this.lastVideoFramesDecode.set(t2.ssrc, { count: t2.framesDecodeCount, lts: o2, rate: t2.decodeFrameRate })) : n2 ? t2.decodeFrameRate = n2.rate : this.lastVideoFramesDecode.set(t2.ssrc, { count: t2.framesDecodeCount, lts: o2, rate: 0 }), t2.framesDroppedCount && e2.framesReceived && (r2 && o2 - r2.lts >= 800 ? (t2.outputFrameRate = Math.round((e2.framesReceived - t2.framesDroppedCount - r2.count) / ((o2 - r2.lts) / 1e3)), this.lastVideoFramesOutput.set(t2.ssrc, { count: e2.framesReceived - t2.framesDroppedCount, lts: o2, rate: Math.max(t2.outputFrameRate, 0) })) : r2 ? t2.outputFrameRate = r2.rate : this.lastVideoFramesOutput.set(t2.ssrc, { count: e2.framesReceived - t2.framesDroppedCount, lts: o2, rate: 0 })), this.processVideoTrackReceiverStats(e2, e2.trackId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), e2.framerateMean && (t2.framesRateFirefox = e2.framerateMean), t2.packets > 0 && !this.isFirstVideoReceived[t2.ssrc] && (this.onFirstVideoReceived && this.onFirstVideoReceived(t2.ssrc), this.isFirstVideoReceived[t2.ssrc] = true), this.lastDecodeVideoReceiverStats.set(t2.ssrc, { stats: Mw({}, t2), lts: i2 ? i2.lts : Date.now(), qpSum: e2.qpSum });
        }
        processVideoOutboundStats(e2) {
          let t2 = this._stats.videoSend.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = nN(dN), this._stats.videoSend.push(t2));
          const i2 = this.mediaBytesSent.get(e2.ssrc);
          if (i2) i2.add(e2.bytesSent);
          else {
            const t3 = new oN(10);
            t3.add(e2.bytesSent), this.mediaBytesSent.set(e2.ssrc, t3);
          }
          if (void 0 !== e2.retransmittedBytesSent) {
            const t3 = this.mediaBytesRetransmit.get(e2.ssrc);
            if (t3) t3.add(e2.retransmittedBytesSent);
            else {
              const t4 = new oN(10);
              t4.add(e2.retransmittedBytesSent), this.mediaBytesRetransmit.set(e2.ssrc, t4);
            }
          }
          if (e2.totalEncodedBytesTarget) {
            const t3 = this.mediaBytesTargetEncode.get(e2.ssrc);
            if (t3) t3.add(e2.totalEncodedBytesTarget);
            else {
              const t4 = new oN(10);
              t4.add(e2.totalEncodedBytesTarget), this.mediaBytesTargetEncode.set(e2.ssrc, t4);
            }
          }
          if (t2.ssrc = e2.ssrc, t2.bytes = e2.bytesSent, t2.packets = e2.packetsSent, t2.firsCount = e2.firCount, t2.nacksCount = e2.nackCount, t2.plisCount = e2.pliCount, t2.frameCount = e2.framesEncoded, t2.adaptionChangeReason = e2.qualityLimitationReason, t2.scalabilityMode = e2.scalabilityMode, t2.retransmittedBytesSent = e2.retransmittedBytesSent, t2.retransmittedPacketsSent = e2.retransmittedPacketsSent, t2.hugeFramesSent = e2.hugeFramesSent, t2.keyFramesEncoded = e2.keyFramesEncoded, e2.totalEncodeTime && e2.framesEncoded) {
            const i3 = this.lastEncoderMs.get(e2.ssrc);
            if (!i3 || i3.lastFrameCount > e2.framesEncoded) t2.avgEncodeMs = 1e3 * e2.totalEncodeTime / e2.framesEncoded;
            else {
              const n2 = e2.framesEncoded - i3.lastFrameCount, r2 = e2.totalEncodeTime - i3.lastEncoderTime;
              t2.avgEncodeMs = 1e3 * r2 / n2;
            }
          }
          if (e2.framesEncoded && e2.qpSum) {
            const i3 = this.lastEncoderMs.get(e2.ssrc);
            !i3 || i3.lastFrameCount > e2.framesEncoded ? t2.qpSumPerFrame = e2.qpSum / e2.framesEncoded : t2.qpSumPerFrame = (e2.qpSum - i3.lastQpSum) / (e2.framesEncoded - i3.lastFrameCount);
          }
          if (this.lastEncoderMs.set(e2.ssrc, { lastFrameCount: e2.framesEncoded, lastEncoderTime: e2.totalEncodeTime, lastQpSum: e2.qpSum, lts: Date.now() }), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), e2.mediaSourceId && this.processVideoMediaSource(e2.mediaSourceId, t2), this.processVideoTrackSenderStats(e2, e2.trackId, t2), e2.remoteId) this.processRemoteInboundStats(e2.remoteId, t2);
          else {
            const i3 = this.findRemoteStatsId(e2.ssrc, fN.REMOTE_INBOUND);
            i3 && this.processRemoteInboundStats(i3, t2);
          }
        }
        processAudioOutboundStats(e2) {
          let t2 = this._stats.audioSend.find((t3) => t3.ssrc === e2.ssrc);
          if (t2 || (t2 = nN(lN), this._stats.audioSend.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsSent, t2.bytes = e2.bytesSent, t2.retransmittedBytesSent = e2.retransmittedBytesSent, t2.retransmittedPacketsSent = e2.retransmittedPacketsSent, e2.mediaSourceId && this.processAudioMediaSource(e2.mediaSourceId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), this.processAudioTrackSenderStats(e2, e2.trackId, t2), e2.remoteId) this.processRemoteInboundStats(e2.remoteId, t2);
          else {
            const i2 = this.findRemoteStatsId(e2.ssrc, fN.REMOTE_INBOUND);
            i2 && this.processRemoteInboundStats(i2, t2);
          }
        }
        findRemoteStatsId(e2, t2) {
          var i2;
          const n2 = Array.from(hp(i2 = this.report).call(i2)).find((i3) => i3.type === t2 && i3.ssrc === e2);
          return n2 ? n2.id : null;
        }
        processVideoMediaSource(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && i2.width && i2.height && i2.framesPerSecond && (t2.inputFrame = { width: i2.width, height: i2.height, frameRate: i2.framesPerSecond });
        }
        processAudioMediaSource(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && (t2.inputLevel = i2.audioLevel);
        }
        processVideoTrackSenderStats(e2, t2, i2) {
          var n2, r2, o2, s2;
          const a2 = t2 ? this.report.get(t2) : void 0, c2 = null !== (n2 = null == a2 ? void 0 : a2.framesSent) && void 0 !== n2 ? n2 : e2.framesSent;
          if ("number" != typeof c2) return;
          let d2 = null !== (r2 = null == a2 ? void 0 : a2.frameWidth) && void 0 !== r2 ? r2 : e2.frameWidth, l2 = null !== (o2 = null == a2 ? void 0 : a2.frameHeight) && void 0 !== o2 ? o2 : e2.frameHeight, u2 = null !== (s2 = null == a2 ? void 0 : a2.framesPerSecond) && void 0 !== s2 ? s2 : e2.framesPerSecond;
          if ("number" == typeof d2 && "number" == typeof l2 || (d2 = 0, l2 = 0), null == u2) {
            const e3 = Date.now(), t3 = this.lastVideoFramesSent.get(i2.ssrc);
            t3 && e3 - t3.lts >= 800 ? (u2 = Math.round((c2 - t3.count) / ((e3 - t3.lts) / 1e3)), this.lastVideoFramesSent.set(i2.ssrc, { count: c2, lts: e3, rate: u2 })) : t3 ? u2 = t3.rate : this.lastVideoFramesSent.set(i2.ssrc, { count: c2, lts: e3, rate: 0 });
          }
          i2.sentFrame = { width: d2, height: l2, frameRate: Math.max(0, u2) };
        }
        processVideoTrackReceiverStats(e2, t2, i2) {
          var n2, r2, o2, s2, a2;
          const c2 = t2 ? this.report.get(t2) : void 0, d2 = null !== (n2 = null == c2 ? void 0 : c2.framesReceived) && void 0 !== n2 ? n2 : e2.framesReceived, l2 = null !== (r2 = null == c2 ? void 0 : c2.frameWidth) && void 0 !== r2 ? r2 : e2.frameWidth, u2 = null !== (o2 = null == c2 ? void 0 : c2.frameHeight) && void 0 !== o2 ? o2 : e2.frameHeight, h2 = null !== (s2 = null == c2 ? void 0 : c2.jitterBufferDelay) && void 0 !== s2 ? s2 : e2.jitterBufferDelay, p2 = null !== (a2 = null == c2 ? void 0 : c2.jitterBufferEmittedCount) && void 0 !== a2 ? a2 : e2.jitterBufferEmittedCount;
          if ("number" == typeof d2) {
            const e3 = this.lastVideoFramesRecv.get(i2.ssrc), t3 = Date.now();
            i2.framesReceivedCount = d2;
            let n3 = 0;
            e3 && t3 - e3.lts >= 800 ? (n3 = Math.round((d2 - e3.count) / ((t3 - e3.lts) / 1e3)), this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: t3, rate: n3 })) : e3 ? n3 = e3.rate : this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: t3, rate: 0 }), i2.receivedFrame = { width: l2 || 0, height: u2 || 0, frameRate: n3 || 0 }, i2.decodedFrame = { width: l2 || 0, height: u2 || 0, frameRate: i2.decodeFrameRate || 0 }, i2.outputFrame = { width: l2 || 0, height: u2 || 0, frameRate: i2.outputFrameRate || i2.decodeFrameRate || 0 };
          }
          if (h2 && p2) {
            const e3 = this.lastVideoJBDelay.get(i2.ssrc) || { jitterBufferDelay: 0, jitterBufferEmittedCount: 0, jitterBufferMs: 0 };
            let t3 = e3.jitterBufferMs;
            const n3 = p2 - e3.jitterBufferEmittedCount;
            n3 > 0 && (t3 = 1e3 * (h2 - e3.jitterBufferDelay) / n3), i2.jitterBufferMs = t3, i2.currentDelayMs = Math.round(t3), this.lastVideoJBDelay.set(i2.ssrc, { jitterBufferDelay: h2, jitterBufferEmittedCount: p2, jitterBufferMs: i2.currentDelayMs });
          }
        }
        processAudioTrackSenderStats(e2, t2, i2) {
          var n2, r2, o2, s2;
          const a2 = t2 ? this.report.get(t2) : void 0, c2 = null !== (n2 = null !== (r2 = null == a2 ? void 0 : a2.echoReturnLoss) && void 0 !== r2 ? r2 : e2.echoReturnLoss) && void 0 !== n2 ? n2 : 0, d2 = null !== (o2 = null !== (s2 = null == a2 ? void 0 : a2.echoReturnLossEnhancement) && void 0 !== s2 ? s2 : e2.echoReturnLossEnhancement) && void 0 !== o2 ? o2 : 0;
          i2.aecReturnLoss = c2, i2.aecReturnLossEnhancement = d2;
        }
        processAudioTrackReceiverStats(e2, t2, i2) {
          var n2, r2, o2, s2, a2, c2, d2;
          const l2 = t2 ? this.report.get(t2) : void 0, u2 = null !== (n2 = null == l2 ? void 0 : l2.removedSamplesForAcceleration) && void 0 !== n2 ? n2 : e2.removedSamplesForAcceleration, h2 = null !== (r2 = null == l2 ? void 0 : l2.totalSamplesReceived) && void 0 !== r2 ? r2 : e2.totalSamplesReceived, p2 = null !== (o2 = null == l2 ? void 0 : l2.jitterBufferDelay) && void 0 !== o2 ? o2 : e2.jitterBufferDelay, _2 = null !== (s2 = null == l2 ? void 0 : l2.jitterBufferEmittedCount) && void 0 !== s2 ? s2 : e2.jitterBufferEmittedCount, E2 = null !== (a2 = null == l2 ? void 0 : l2.audioLevel) && void 0 !== a2 ? a2 : null == e2 ? void 0 : e2.audioLevel, m2 = null !== (c2 = null == l2 ? void 0 : l2.totalSamplesDuration) && void 0 !== c2 ? c2 : null == e2 ? void 0 : e2.totalSamplesDuration, f2 = null !== (d2 = null == l2 ? void 0 : l2.concealedSamples) && void 0 !== d2 ? d2 : e2.concealedSamples;
          if (u2 && h2 && (i2.accelerateRate = u2 / h2), p2 && _2) {
            const e3 = this.lastAudioJBDelay.get(i2.ssrc) || { jitterBufferDelay: 0, jitterBufferEmittedCount: 0, jitterBufferMs: 0 };
            let t3 = e3.jitterBufferMs;
            const n3 = _2 - e3.jitterBufferEmittedCount;
            n3 > 0 && (t3 = 1e3 * (p2 - e3.jitterBufferDelay) / n3), i2.jitterBufferMs = Math.round(t3), this.lastAudioJBDelay.set(i2.ssrc, { jitterBufferDelay: p2, jitterBufferEmittedCount: _2, jitterBufferMs: i2.jitterBufferMs });
          }
          i2.outputLevel = E2;
          let T2 = 1920;
          m2 && h2 && (T2 = h2 / m2 / 50, i2.receivedFrames = Math.round(h2 / T2)), f2 && (i2.droppedFrames = Math.round(f2 / T2));
        }
        processRemoteInboundStats(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && (t2.packetsLost = i2.packetsLost, i2.roundTripTime && (t2.rttMs = 1e3 * i2.roundTripTime), i2.jitter && (t2.jitterMs = 1e3 * i2.jitter), i2.timestamp && (t2.timestamp = i2.timestamp));
        }
        getCodecFromCodecStats(e2) {
          const t2 = this.report.get(e2);
          if (!t2) return "";
          const i2 = t2.mimeType.match(/\/(.*)$/);
          return i2 && i2[1] ? i2[1] : "";
        }
        updateSendBitrate() {
          let e2 = 0, t2 = null, i2 = null;
          this.mediaBytesSent.forEach((t3) => {
            e2 += t3.diffMean();
          }), this.mediaBytesRetransmit.forEach((e3) => {
            t2 = null === t2 ? e3.diffMean() : t2 + e3.diffMean();
          }), this.mediaBytesTargetEncode.forEach((e3) => {
            i2 = null === i2 ? e3.diffMean() : i2 + e3.diffMean();
          });
          const n2 = null !== t2 ? e2 - t2 : e2;
          this._stats.bitrate = { actualEncoded: 8 * n2 / (this.options.updateInterval / 1e3), transmit: 8 * e2 / (this.options.updateInterval / 1e3) }, null !== t2 && (this._stats.bitrate.retransmit = 8 * t2 / (this.options.updateInterval / 1e3)), null !== i2 && (this._stats.bitrate.targetEncoded = 8 * i2 / (this.options.updateInterval / 1e3));
        }
      }, RN = class extends hN {
        updateStats() {
          return np.resolve();
        }
      };
      function vN(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 250, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 8, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 500, r2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1e4;
        const o2 = function() {
          const e3 = navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]*/i);
          return e3 && e3[0] ? Number(e3[0].split("/")[1]) : null;
        }();
        return o2 ? o2 < 76 ? new pN(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: r2 }) : new gN(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: r2 }) : function(e3) {
          if (!window.RTCStatsReport) return false;
          const t3 = e3.getStats();
          return !!(t3 instanceof np || function(e4) {
            return !!e4 && ("object" == typeof e4 || "function" == typeof e4) && "function" == typeof e4.then;
          }(t3));
        }(e2) ? new gN(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: r2 }) : new RN(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: r2 });
      }
      const CN = "websdk_ng_install_id";
      function IN() {
        try {
          if (MN("INSTALL_ID")) return MN("INSTALL_ID");
          let e2 = window.localStorage.getItem(CN);
          return e2 || (e2 = kO(), window.localStorage.setItem(CN, e2)), kN("INSTALL_ID", e2), e2;
        } catch (e2) {
          return;
        }
      }
      const yN = function(e2) {
        if (e2.match(/[0-9]+\.[0-9]+\.[0-9]+$/)) return e2;
        const t2 = e2.match(/([0-9]+\.[0-9]+\.[0-9]+)\-([0-9]+)/);
        if (t2 && t2[1] && t2[2]) {
          const e3 = t2[1], i2 = t2[2];
          return "".concat(e3, ".").concat(i2);
        }
        return "4.0.0.999";
      }("4.23.1"), AN = function() {
        try {
          return true === JSON.parse("true");
        } catch (e2) {
          return true;
        }
      }();
      let bN = function(e2) {
        return e2.Default = "default", e2.Auto = "auto", e2.Relay = "relay", e2.SdRtn = "sd-rtn", e2;
      }({});
      const wN = function() {
        const e2 = "us".concat("erna", "me"), t2 = "pa".concat("sswo", "rd"), i2 = ["t", "s", "t"];
        i2.splice(1, 0, "e");
        const n2 = i2.join(""), r2 = [];
        for (let e3 = 0; e3 < 6; e3++) r2.push("1");
        const o2 = r2.join(""), s2 = {};
        return s2[e2] = n2, s2[t2] = o2, Object.assign(s2, { turnServerURL: "", tcpport: 3433, udpport: 3478, forceturn: false });
      }();
      window.DEFAULT_TURN_CONFIG = wN;
      const ON = { ENABLE_PUBLISHED_USER_LIST: true, MAX_SUBSCRIPTION: 50, SUBSCRIBE_AUDIO_FILTER_TOPN: void 0, ENABLE_PUBLISH_AUDIO_FILTER: void 0, ENABLE_USER_LICENSE_CHECK: true, DISABLE_FEC: void 0, ENABLE_NTP_REPORT: false, ENABLE_INSTANT_VIDEO: false, ENABLE_USER_AUTO_REBALANCE_CHECK: true, ENABLE_LOSSBASED_BWE: true, ENABLE_AUT_CC: false, ENABLE_CC_FALLBACK: void 0, SUBSCRIBE_TWCC: true, PUBLISH_TWCC: false, ENABLE_SVC_DEFAULT_CODECS: ["H264", "VP8", "VP9", "AV1"], SVC: [], ENABLE_FULL_LINK_AV_SYNC: false, SVC_MODE: null, PRE_SUB_NUM: 2, ENABLE_AUT_FEEDBACK: false, SVC_EXTENDED: ["VP9"] }, NN = { MIN_FRAME_RATE: 1, MAX_FRAME_RATE: 30, MAX_THRESHOLD_FRAMERATE: 30, BITRATE_MIN_THRESHOLD: 100, BITRATE_MAX_THRESHOLD: 100, MAX_SCALE: 5, BWE_SCALE_UP_THRESHOLD: 0.6, BWE_SCALE_DOWN_THRESHOLD: 0.6, PERF_SCALE_UP_THRESHOLD: 0.7, PERF_SCALE_DOWN_THRESHOLD: 0.6, MOTION_RESOLUTION_FACTOR: 0.8, MOTION_BITRATE_FACTOR: 0.6, DETAIL_FRAMERATE_FACTOR: 0.8, DETAIL_BITRATE_FACTOR: 0.6, BALANCE_RESOLUTION_FACTOR: 0.9, BALANCE_FRAMERATE_FACTOR: 0.9, BALANCE_BITRATE_FACTOR: 0.6, OVERUSE_TIMES_THRESHOLD: 10, UNDERUSE_TIMES_THRESHOLD: 40 }, DN = "v4.23.1-0-gea45199f-dirty(1/16/2025, 3:18:04 PM)", PN = { ENABLE_EVENT_REPORT: true, UPLOAD_LOG: false, ENABLE_AG_ADAPTATION: true, FORCE_AG_HIGH_FRAMERATE: false, FORCE_SUPPORT_AG_ADAPTATION: false, ENCODER_CONFIG_LIMIT: {}, CAMERA_CAPTURE_CONFIG: void 0, ENABLE_PRELOAD: true, NEW_ICE_RESTART: false, ICE_RESTART_INTERVAL: 1e4, RESTART_SEQUENCE: ["udp_tcp_relay", "relay"] }, LN = Mw(Mw(Mw({}, PN), {}, { PROCESS_ID: "", ENCRYPT_AES: true, AREAS: ["CHINA", "GLOBAL"], WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io", "webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io", "webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-web-2.ap.sd-rtn.com", "cds-ap-web-3.agora.io", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-web-2.ap.sd-rtn.com", "sua-ap-web-3.agora.io", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-web-2.ap.sd-rtn.com", "uap-ap-web-3.agora.io", "uap-web-4.ap.sd-rtn.com"], LOG_UPLOAD_SERVER: "logservice.agora.io", EVENT_REPORT_DOMAIN: "statscollector-1.agora.io", EVENT_REPORT_BACKUP_DOMAIN: "web-2.statscollector.sd-rtn.com", GATEWAY_ADDRESS: [], GATEWAY_WSS_ADDRESS: "", LIVE_STREAMING_ADDRESS: "", HTTP_CONNECT_TIMEOUT: 5e3, SIGNAL_REQUEST_TIMEOUT: 1e4, REPORT_STATS: true, NOT_REPORT_EVENT: [], PING_PONG_TIME_OUT: 10, WEBSOCKET_TIMEOUT_MIN: 1e4, EVENT_REPORT_SEND_INTERVAL: 3e3, CONFIG_DISTRIBUTE_INTERVAL: 3e5, ENABLE_CONFIG_DISTRIBUTE: true, CANDIDATE_TIMEOUT: 5e3, SHOW_REPORT_INVOKER_LOG: false, SHOW_REPORT_USER_INVOKER_LOG: true, JOIN_EXTEND: "", PUB_EXTEND: "", SUB_EXTEND: "", FORCE_TURN: false, TURN_ENABLE_TCP: true, TURN_ENABLE_UDP: true, MAX_UPLOAD_CACHE: 50, UPLOAD_CACHE_INTERVAL: 2e3, AJAX_REQUEST_CONCURRENT: 3, REPORT_APP_SCENARIO: void 0, GATEWAY_DOMAINS: ["edge.agora.io", "edge.sd-rtn.com"], CONNECT_GATEWAY_WITHOUT_DOMAIN: false, WORKER_DOMAIN: "edge.agora.io", TURN_DOMAIN: "edge.agora.io", EVENT_REPORT_RETRY: true, CHROME_FORCE_PLAN_B: false, AUDIO_SOURCE_VOLUME_UPDATE_INTERVAL: 400, AUDIO_SOURCE_AVG_VOLUME_DURATION: 3e3, AUDIO_VOLUME_INDICATION_INTERVAL: 2e3, VOLUME_VOICE_WEIGHT: 10, GET_VOLUME_OF_MUTED_AUDIO_TRACK: false, STATS_UPDATE_INTERVAL: 250, NORMAL_EVENT_QUEUE_CAPACITY: 100, CUSTOM_REPORT: true, CUSTOM_REPORT_LIMIT: 20, PROXY_SERVER_TYPE2: "webnginx-proxy.agora.io", PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com", "webrtc-cloud-proxy.agora.io"], CUSTOM_PUB_ANSWER_MODIFIER: null, CUSTOM_SUB_ANSWER_MODIFIER: null, CUSTOM_PUB_OFFER_MODIFIER: null, CUSTOM_SUB_OFFER_MODIFIER: null, DSCP_TYPE: "high", REMOVE_NEW_CODECS: true, FRAGEMENT_LENGTH: 3, WEBSOCKET_COMPRESS: false, SIMULCAST: false, PRELOAD_MEDIA_COUNT: 0, CHECK_VIDEO_VISIBLE_INTERVAL: 3e4, CHECK_LOCAL_STATS_INTERVAL: 250, PROFILE_SWITCH_INTERVAL: 2e3, UNSUPPORTED_VIDEO_CODEC: [], ENUMERATE_DEVICES_INTERVAL: false, ENUMERATE_DEVICES_INTERVAL_TIME: 1e4, USE_NEW_TOKEN: false, CLOSE_AFB_FOR_LOCAL_AP: true, JOIN_MAX_CONCURRENCY: 6, JOIN_WITH_FALLBACK_SIGNAL_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE: false, JOIN_GATEWAY_TRY_443PORT_DURATION: 2e3, JOIN_GATEWAY_USE_443PORT_ONLY: false, JOIN_GATEWAY_USE_DUAL_DOMAIN: true, JOIN_GATEWAY_FALLBACK_PORT: 443, USE_TURN_SERVER_OF_GATEWAY: false, H264_PROFILE_LEVEL_ID: "", USE_NEW_LOG: false, LOG_VERSION: 3, MEDIA_DEVICE_CONSTRAINTS: null, ENCRYPT_PROXY_USERNAME_AND_PSW: true, SDP_LOGGING: false, CSP_DETECTED_HOSTNAME_LIST: ["agora.io", "sd-rtn.com"], REMOTE_AUDIO_TRACK_USES_WEB_AUDIO: false, LOCAL_AUDIO_TRACK_USES_WEB_AUDIO: false, BITRATE_ADAPTER_TYPE: "STANDARD_BITRATE", AI_DENOISER_PARAMETERS: { excludedLinks: [] }, ADJUST_3A_FROM_PLUGINS: true, RAISE_H264_BASELINE_PRIORITY: true, FILTER_SEND_H264_BASELINE: false, FIRST_H264_PROFILE_LEVEL_ID: "42001f", FIRST_PACKETIZATION_MODE: "", X_GOOGLE_START_BITRATE: void 0, NEW_REPORT_SERVER: false, NEW_REPORT_SERVER_DOMAINS: ["data-reporting.agora.io", "data-reporting.agora.io"], VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT: 3e5, VIDEO_INSPECT_INTERVAL_MINIMUM: 1e3, VIDEO_INSPECT_QUALITY_RATIO: 0.9, VIDEO_INSPECT_WORKER_MANAGER_HOST: "edge.agora.io", VIDEO_INSPECT_WORKER_MANAGER_PORT: "", VIDEO_INSPECT_WORKER_PORT: "", SHOW_VIDEO_INSPECT_WORKER_MESSAGE: false, STATS_COLLECTOR_PORT: 443, FORCE_TURN_TCP: false, WEBAUDIO_INIT_OPTIONS: void 0, FILTER_VIDEO_FEC: true, FILTER_AUDIO_FEC: false, CHROME_DUAL_STREAM_USE_ENCODING: true, DISABLE_DUAL_STREAM_USE_ENCODING: false, EXTENSION_USAGE_UPLOAD_INTERVAL: 1e4, ICE_RESTART: true, FINGERPRINT: null, ENABLE_VIDEO_FRAME_CALLBACK: true, VIDEO_FREEZE_DURATION: 500, SPATIALIZER_PARAMETERS: {}, UPLOAD_LOG_INTERVAL: 3e3, UPLOAD_LOG_REQUEST_RETRY_INTERVAL: 2e3, UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL: 2e4, UPLOAD_LOG_TRY_INTERVAL_WHILE_OFF: 5e3, UPLOAD_LOG_RETRY_INTERVAL_V1: 1e4, UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1: 200, UPLOAD_LOG_LENGTH_EACH_TIME: 10, APP_TYPE: 0, DISABLE_WEBAUDIO: false, CHANNEL_MEDIA_RELAY_SERVERS: void 0, KEEP_LAST_FRAME: true, FORWARD_P2P_CREATION: true, SYNC_GROUP: true, BLOCK_LOCAL_CLIENT: false, ENABLE_AUDIO_TOPN: false, ENABLE_AUDIO_METADATA: false, TOPN_SMOOTH_LEVEL: void 0, TOPN_NEW_SPEAKER_DELAY: void 0, TOPN_SWITCH_HOLD_MS: void 0, TOPN_AUDIO_GAIN: void 0, TOPN_SILENCE_THRESHOLD: 250, AP_AREA: true, ENABLE_ENCODED_TRANSFORM: false, ENABLE_VIDEO_SEI: false, IMAGE_MODERATION_WORKER_HOST: "edge.agora.io", IMAGE_MODERATION_WORKER_MESSAGE_LENGTH_LIMIT: 3e5, IMAGE_MODERATION_INTERVAL_MINIMUM: 1e3, SHOW_IMAGE_MODERATION_WORKER_MESSAGE: false, IMAGE_MODERATION_QUALITY_RATIO: 0.9, IMAGE_MODERATION_UPLOAD_REPORT_INTERVAL: 5e3, SHOW_GLOBAL_CLIENT_LIST: false, DATASTREAM_MAX_RETRANSMITS: 10, TCP_CANDIDATE_ONLY: false, EXTERNAL_SIGNAL_REQUEST_TIMEOUT: 3e3, SHOW_P2P_LOG: false, MAX_P2P_TIMEOUT: 3e4, P2P_TOKEN_INTERVAL: 1e3, SHOW_DATASTREAM2_LOG: false, RESTRICTION_SET_PLAYBACK_DEVICE: true, USE_PURE_ENCRYPTION_MASTER_KEY: false, ACCOUNT_REGISTER_RETRY_TIMEOUT: 1, ACCOUNT_REGISTER_RETRY_RATIO: 2, ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX: 6e4, ACCOUNT_REGISTER_RETRY_COUNT_MAX: 1e5, AUDIO_CONTEXT: null, WEBCS_BACKUP_CONNECT_TIMEOUT: 6e3, PLAYER_STATE_DEFER: 2e3, SIGNAL_REQUEST_WATCH_INTERVAL: 1e3, FILEPATH_LENMAX: 255, DUALSTREAM_OPERATION_CHECK: true, MEDIA_ELEMENT_EXISTS_DEPTH: 3, SHIM_CANDIDATE: false, LEAVE_MSG_TIMEOUT: 2e3, STATS_FILTER: { transportId: true, googTrackId: true }, FILTER_VIDEO_CODEC: [], USE_NEW_NETWORK_CONFIG: false, AUTO_RESET_AUDIO_ROUTE: false, PLUGIN_INFO: [], OVERUSE_DETECTOR_PARAMS: NN, CUSTOM_ADAPTATION_DEFAULT_MODE: "", HIDE_NO_POSTER: false, AP_CACHE_NUM: 10, AP_UPDATE_INTERVAL: 12e4, AP_CACHE_LIFETIME: 12e4, MAX_PRELOAD_ASYNC_LENGTH: 3, DISABLE_SCREEN_SHARE_REMB: false }, ON), {}, { USE_CANDIDATE_FROM_AP_DETAIL: false, AP_REQUEST_DETAIL: void 0, ENABLE_ROLE_SELECT_EDGE: false, CLIENT_ROLE_OPTIONS: void 0, COMPATIBLE_SDP_EXTENSION: ["gdpr_forbidden"], LIMIT_BITRATE: void 0, EXPERIMENTS: {}, USE_PUB_RTX: true, USE_SUB_RTX: true, ENABLE_DATASTREAM_2: false, USE_XR: true, ENABLE_PREALLOC_PC: false, ENABLE_PRE_SUB: false, ENABLE_SVC: false }, { INSTALL_ID: "" });
      function kN(e2, t2, i2) {
        var n2, r2, o2;
        kn(n2 = Object.keys(LN)).call(n2, e2) && (!i2 && kn(r2 = Object.keys(xN)).call(r2, e2) || (LN[e2] = t2, "ENABLE_VIDEO_SEI" !== e2 && "ENABLE_AUDIO_TOPN" !== e2 && "ENABLE_AUDIO_METADATA" !== e2 || true !== t2 || (LN.ENABLE_ENCODED_TRANSFORM = true), "USE_NEW_NETWORK_CONFIG" === e2 && t2 && (o2 = !!t2, LN.USE_NEW_NETWORK_CONFIG = o2, o2 && (LN.WEBCS_DOMAIN = ["webrtc2-2.ap.sd-rtn.com"], LN.WEBCS_DOMAIN_BACKUP_LIST = ["webrtc2-4.ap.sd-rtn.com"], LN.CDS_AP = ["cds-web-2.ap.sd-rtn.com", "cds-web-4.ap.sd-rtn.com"], LN.ACCOUNT_REGISTER = ["sua-web-2.ap.sd-rtn.com", "sua-web-4.ap.sd-rtn.com"], LN.EVENT_REPORT_DOMAIN = "web-2.statscollector.sd-rtn.com", LN.EVENT_REPORT_BACKUP_DOMAIN = "statscollector-1.agora.io", LN.GATEWAY_DOMAINS = ["edge.sd-rtn.com"])), "ENABLE_PRE_SUB" === e2 && t2 && (LN.ENABLE_INSTANT_VIDEO = true, LN.ENABLE_PREALLOC_PC = true), "ENABLE_SVC" === e2 && t2 && (LN.ENABLE_AUT_CC = true)));
      }
      function MN(e2) {
        return LN[e2];
      }
      AN || (LN.WEBCS_DOMAIN = ["ap-web-1-oversea.agora.io", "ap-web-1-north-america.agora.io"], LN.WEBCS_DOMAIN_BACKUP_LIST = ["ap-web-2-oversea.agora.io", "ap-web-2-north-america.agora.io"], LN.PROXY_CS = ["proxy-ap-web-oversea.agora.io", "proxy-ap-web-america.agora.io"], LN.CDS_AP = ["cds-ap-web-oversea.agora.io", "cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], LN.ACCOUNT_REGISTER = ["sua-ap-web-oversea.agora.io", "sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], LN.UAP_AP = ["uap-ap-web-oversea.agora.io", "uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], LN.LOG_UPLOAD_SERVER = "logservice-oversea.agora.io", LN.EVENT_REPORT_DOMAIN = "statscollector-1-oversea.agora.io", LN.EVENT_REPORT_BACKUP_DOMAIN = "statscollector-2-oversea.agora.io", LN.PROXY_SERVER_TYPE3 = "webrtc-cloud-proxy.agora.io", LN.AREAS = ["NORTH_AMERICA", "OVERSEA"]);
      let UN = function(e2) {
        return e2[e2.REALTIME = 1] = "REALTIME", e2;
      }({});
      const xN = {};
      var VN = function(e2) {
        return e2.SET_SESSION_ID = "SET_SESSION_ID", e2.SET_P2P_ID = "SET_P2P_id", e2.SET_DC_ID = "SET_DC_id", e2.SET_UID = "SET_UID", e2.SET_INT_UID = "SET_INT_UID", e2.SET_PUB_ID = "SET_PUB_ID", e2.SET_CLOUD_PROXY_SERVER_MODE = "SET_CLOUD_PROXY_SERVER_MODE", e2.KEY_METRIC_CLIENT_CREATED = "KEY_METRIC_CLIENT_CREATED", e2.KEY_METRIC_JOIN_START = "KEY_METRIC_JOIN_START", e2.AVOID_JOIN_START = "AVOID_JOIN_START", e2.KEY_METRIC_JOIN_END = "KEY_METRIC_JOIN_END", e2.KEY_METRIC_REQUEST_AP_START = "KEY_METRIC_REQUEST_AP_START", e2.KEY_METRIC_REQUEST_AP_END = "KEY_METRIC_REQUEST_AP_END", e2.KEY_METRIC_JOIN_GATEWAY_START = "KEY_METRIC_JOIN_GATEWAY_START", e2.KEY_METRIC_JOIN_GATEWAY_END = "KEY_METRIC_JOIN_GATEWAY_END", e2.KEY_METRIC_PEER_CONNECTION_START = "KEY_METRIC_PEER_CONNECTION_START", e2.KEY_METRIC_PEER_CONNECTION_END = "KEY_METRIC_PEER_CONNECTION_END", e2.KEY_METRIC_DESCRIPTION_START = "KEY_METRIC_DESCRIPTION_START", e2.KEY_METRIC_ICE_CONNECTION_END = "KEY_METRIC_ICE_CONNECTION_END", e2.KEY_METRIC_SIGNAL_CHANNEL_OPEN = "KEY_METRIC_SIGNAL_CHANNEL_OPEN", e2.KEY_METRIC_PUBLISH = "KEY_METRIC_PUBLISH", e2.KEY_METRIC_SUBSCRIBE = "KEY_METRIC_SUBSCRIBE", e2.RECORD_JOIN_CHANNEL_SERVICE = "RECORD_JOIN_CHANNEL_SERVICE", e2.RESET_JOIN_CHANNEL_SERVICE_RECORDS = "RESET_JOIN_CHANNEL_SERVICE_RECORDS", e2.RESET_KEY_METRICS = "RESET_KEY_METRICS", e2.SET_USE_P2P = "SET_USE_P2P", e2.SET_TRANSPORT_TYPE = "SET_TRANSPORT_TYPE", e2;
      }(VN || {});
      let FN = class {
        constructor(e2, t2, i2, n2) {
          Lw(this, "state", void 0), this.state = { codec: e2, audioCodec: t2, mode: i2, clientId: n2, sessionId: null, p2pId: 0, dcId: 0, pubId: 0, subId: 0, avoidJoinStart: 0, keyMetrics: { publish: [], subscribe: [] }, joinChannelServiceRecords: [], cloudProxyServerMode: "disabled", useP2P: false, p2pTransport: bN.Default, hasStartJoinChannel: false, isABTestSuccess: false };
        }
        dispatch(e2) {
          this.state = function(e3, t2) {
            switch (t2.type) {
              case VN.SET_SESSION_ID:
                return Mw(Mw({}, e3), {}, { sessionId: t2.sessionId });
              case VN.SET_P2P_ID:
                return Mw(Mw({}, e3), {}, { p2pId: t2.p2pId });
              case VN.SET_UID:
                return Mw(Mw({}, e3), {}, { uid: t2.uid });
              case VN.SET_INT_UID:
                return Mw(Mw({}, e3), {}, { intUid: t2.intUid });
              case VN.SET_PUB_ID:
                return Mw(Mw({}, e3), {}, { pubId: t2.pubId });
              case VN.KEY_METRIC_CLIENT_CREATED:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { clientCreated: t2.metric }) });
              case VN.KEY_METRIC_JOIN_START:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { joinStart: t2.metric }) });
              case VN.AVOID_JOIN_START:
                return Mw(Mw({}, e3), {}, { avoidJoinStart: t2.avoidJoinStart });
              case VN.KEY_METRIC_JOIN_END:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { joinEnd: t2.metric }) });
              case VN.KEY_METRIC_REQUEST_AP_START:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { requestAPStart: t2.metric }) });
              case VN.KEY_METRIC_REQUEST_AP_END:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { requestAPEnd: t2.metric }) });
              case VN.KEY_METRIC_JOIN_GATEWAY_START:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { joinGatewayStart: t2.metric }) });
              case VN.KEY_METRIC_JOIN_GATEWAY_END:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { joinGatewayEnd: t2.metric }) });
              case VN.KEY_METRIC_PEER_CONNECTION_START:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { peerConnectionStart: t2.metric }) });
              case VN.KEY_METRIC_PEER_CONNECTION_END:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { peerConnectionEnd: t2.metric }) });
              case VN.KEY_METRIC_DESCRIPTION_START:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { descriptionStart: t2.metric }) });
              case VN.KEY_METRIC_SIGNAL_CHANNEL_OPEN:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { signalChannelOpen: t2.metric }) });
              case VN.KEY_METRIC_ICE_CONNECTION_END:
                return Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { iceConnectionEnd: t2.metric }) });
              case VN.KEY_METRIC_PUBLISH: {
                const i2 = e3.keyMetrics.publish, n2 = i2.findIndex((e4) => e4.trackId === t2.metric.trackId);
                return -1 !== n2 ? (i2[n2] = Mw(Mw({}, i2[n2]), t2.metric), Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { publish: [...i2] }) })) : Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { publish: [...e3.keyMetrics.publish, t2.metric] }) });
              }
              case VN.KEY_METRIC_SUBSCRIBE: {
                const i2 = e3.keyMetrics.subscribe, n2 = i2.findIndex((e4) => e4.userId === t2.metric.userId && e4.type === t2.metric.type);
                return -1 !== n2 ? (i2[n2] = Mw(Mw({}, i2[n2]), t2.metric), Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { subscribe: [...i2] }) })) : Mw(Mw({}, e3), {}, { keyMetrics: Mw(Mw({}, e3.keyMetrics), {}, { subscribe: [...e3.keyMetrics.subscribe, t2.metric] }) });
              }
              case VN.SET_CLOUD_PROXY_SERVER_MODE:
                return e3.cloudProxyServerMode = t2.mode, e3;
              case VN.RECORD_JOIN_CHANNEL_SERVICE:
                return "number" != typeof t2.index ? e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords, t2.record] : (e3.joinChannelServiceRecords[t2.index] = Mw(Mw({}, e3.joinChannelServiceRecords[t2.index]), t2.record), e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords]), e3;
              case VN.RESET_JOIN_CHANNEL_SERVICE_RECORDS:
                return e3.joinChannelServiceRecords = [], e3;
              case VN.RESET_KEY_METRICS:
                return e3.keyMetrics = { publish: [], subscribe: [] }, e3;
              case VN.SET_USE_P2P:
                return Mw(Mw({}, e3), {}, { useP2P: t2.val });
              case VN.SET_TRANSPORT_TYPE:
                return Mw(Mw({}, e3), {}, { p2pTransport: t2.val });
              default:
                return e3;
            }
          }(this.state, e2);
        }
        set sessionId(e2) {
          this.dispatch({ type: VN.SET_SESSION_ID, sessionId: e2 });
        }
        get sessionId() {
          return this.state.sessionId;
        }
        set cid(e2) {
          this.state.cid = e2;
        }
        get cid() {
          return this.state.cid;
        }
        set codec(e2) {
          this.state.codec = e2;
        }
        get codec() {
          return this.state.codec;
        }
        get mode() {
          return this.state.mode;
        }
        get audioCodec() {
          return this.state.audioCodec;
        }
        get clientId() {
          return this.state.clientId;
        }
        set p2pId(e2) {
          this.dispatch({ type: VN.SET_P2P_ID, p2pId: e2 });
        }
        get p2pId() {
          return this.state.p2pId;
        }
        set dcId(e2) {
          this.dispatch({ type: VN.SET_DC_ID, dcId: e2 });
        }
        get dcId() {
          return this.state.dcId;
        }
        set uid(e2) {
          this.dispatch({ type: VN.SET_UID, uid: e2 });
        }
        get uid() {
          return this.state.uid;
        }
        set intUid(e2) {
          this.dispatch({ type: VN.SET_INT_UID, intUid: e2 });
        }
        get intUid() {
          return this.state.intUid;
        }
        set pubId(e2) {
          this.dispatch({ type: VN.SET_PUB_ID, pubId: e2 });
        }
        get pubId() {
          return this.state.pubId;
        }
        set cloudProxyServerMode(e2) {
          this.dispatch({ type: VN.SET_CLOUD_PROXY_SERVER_MODE, mode: e2 });
        }
        get cloudProxyServerMode() {
          return this.state.cloudProxyServerMode;
        }
        set useP2P(e2) {
          this.dispatch({ type: VN.SET_USE_P2P, val: e2 });
        }
        get useP2P() {
          return this.state.useP2P;
        }
        set p2pTransport(e2) {
          this.dispatch({ type: VN.SET_TRANSPORT_TYPE, val: e2 });
        }
        get p2pTransport() {
          return this.state.p2pTransport;
        }
        set hasStartJoinChannel(e2) {
          this.state.hasStartJoinChannel = e2;
        }
        get hasStartJoinChannel() {
          return this.state.hasStartJoinChannel;
        }
        set isABTestSuccess(e2) {
          this.state.isABTestSuccess = e2;
        }
        get isABTestSuccess() {
          return this.state.isABTestSuccess;
        }
        clientCreated() {
          this.dispatch({ type: VN.KEY_METRIC_CLIENT_CREATED, metric: Date.now() });
        }
        joinStart() {
          this.dispatch({ type: VN.KEY_METRIC_JOIN_START, metric: Date.now() });
        }
        joinEnd() {
          this.dispatch({ type: VN.KEY_METRIC_JOIN_END, metric: Date.now() });
        }
        requestAPStart() {
          this.dispatch({ type: VN.KEY_METRIC_REQUEST_AP_START, metric: Date.now() });
        }
        requestAPEnd() {
          this.dispatch({ type: VN.KEY_METRIC_REQUEST_AP_END, metric: Date.now() });
        }
        joinGatewayStart() {
          this.dispatch({ type: VN.KEY_METRIC_JOIN_GATEWAY_START, metric: Date.now() });
        }
        joinGatewayEnd() {
          this.dispatch({ type: VN.KEY_METRIC_JOIN_GATEWAY_END, metric: Date.now() });
        }
        peerConnectionStart() {
          this.dispatch({ type: VN.KEY_METRIC_PEER_CONNECTION_START, metric: Date.now() });
        }
        peerConnectionEnd() {
          this.dispatch({ type: VN.KEY_METRIC_PEER_CONNECTION_END, metric: Date.now() });
        }
        descriptionStart() {
          this.dispatch({ type: VN.KEY_METRIC_DESCRIPTION_START, metric: Date.now() });
        }
        signalChannelOpen() {
          this.dispatch({ type: VN.KEY_METRIC_SIGNAL_CHANNEL_OPEN, metric: Date.now() });
        }
        iceConnectionEnd() {
          this.dispatch({ type: VN.KEY_METRIC_ICE_CONNECTION_END, metric: Date.now() });
        }
        publish(e2, t2, i2, n2) {
          this.dispatch({ type: VN.KEY_METRIC_PUBLISH, metric: Mw(Mw({ trackId: e2, type: t2 }, i2 && { publishStart: i2 }), n2 && { publishEnd: n2 }) });
        }
        subscribe(e2, t2, i2, n2, r2, o2, s2) {
          this.dispatch({ type: VN.KEY_METRIC_SUBSCRIBE, metric: Mw(Mw(Mw(Mw(Mw({ userId: e2, type: t2 }, i2 && { subscribeStart: i2 }), n2 && { subscribeEnd: n2 }), r2 && { firstFrame: r2 }), o2 && { streamAdded: o2 }), s2 && { firstDecoded: s2 }) });
        }
        massSubscribe(e2, t2, i2, n2) {
          e2.forEach((e3) => {
            this.dispatch({ type: VN.KEY_METRIC_SUBSCRIBE, metric: Mw(Mw(Mw({ userId: e3.userId, type: e3.type }, t2 && { subscribeStart: t2 }), i2 && { subscribeEnd: i2 }), n2 && { firstFrame: n2 }) });
          });
        }
        get keyMetrics() {
          return this.state.keyMetrics;
        }
        recordJoinChannelService(e2, t2) {
          "gateway" === e2.service && Array.isArray(e2.urls) && (e2.urls = e2.urls.map((e3) => e3.replace(/(\d+)-\d+-\d+-(\d+)/, "$1-*-*-$2")));
          try {
            return "number" != typeof t2 ? (this.dispatch({ type: VN.RECORD_JOIN_CHANNEL_SERVICE, record: Mw(Mw({}, e2), {}, { sessionId: this.sessionId, cloudProxyMode: this.cloudProxyServerMode, uid: this.uid }) }), this.state.joinChannelServiceRecords.length - 1) : (t2 < 0 || t2 >= this.state.joinChannelServiceRecords.length || this.dispatch({ type: VN.RECORD_JOIN_CHANNEL_SERVICE, record: e2, index: t2 }), t2);
          } catch (e3) {
            return 0;
          }
        }
        resetJoinChannelServiceRecords() {
          this.dispatch({ type: VN.RESET_JOIN_CHANNEL_SERVICE_RECORDS });
        }
        resetKeyMetrics() {
          this.dispatch({ type: VN.RESET_KEY_METRICS });
        }
        get joinChannelServiceRecords() {
          try {
            return this.state.joinChannelServiceRecords;
          } catch (e2) {
            return [];
          }
        }
        get avoidJoinStart() {
          return this.state.avoidJoinStart;
        }
        set avoidJoinStart(e2) {
          this.dispatch({ type: VN.AVOID_JOIN_START, avoidJoinStart: e2 });
        }
      }, BN = function(e2) {
        return e2.h264 = "h264", e2.h265 = "h265", e2.vp8 = "vp8", e2.vp9 = "vp9", e2.av1 = "av1", e2;
      }({});
      !function(e2) {
        e2.opus = "opus", e2.pcma = "pcma", e2.pcmu = "pcmu", e2.g722 = "g722";
      }({});
      let jN = 0;
      var GN = (() => {
        var e2 = { 8: (e3, t3, i3) => {
          i3.r(t3), i3.d(t3, { Parser: () => v2, Printer: () => b2, parse: () => D2, print: () => P2 });
          const n2 = "\n", r2 = "".concat("\r").concat(n2), o2 = " ";
          let s2;
          function a2(e4) {
            return e4 >= "0" && e4 <= "9";
          }
          function c2(e4) {
            return e4 >= "!" && e4 <= "~";
          }
          function d2(e4) {
            return c2(e4) || e4 >= "Â" && e4 <= "Ã¿";
          }
          function l2(e4) {
            return "!" === e4 || e4 >= "#" && e4 <= "'" || e4 >= "*" && e4 <= "+" || e4 >= "-" && e4 <= "." || e4 >= "0" && e4 <= "9" || e4 >= "A" && e4 <= "Z" || e4 >= "^" && e4 <= "~";
          }
          function u2(e4) {
            return e4 >= "1" && e4 <= "9";
          }
          function h2(e4) {
            return e4 >= "A" && e4 <= "Z" || e4 >= "a" && e4 <= "z";
          }
          function p2(e4) {
            return "d" === e4 || "h" === e4 || "m" === e4 || "s" === e4;
          }
          function _2(e4) {
            return e4 > "" && e4 < "	" || e4 > "\v" && e4 < "\f" || e4 > "" && e4 < "Ã¿";
          }
          function E2(e4) {
            return h2(e4) || a2(e4) || "+" === e4 || "/" === e4;
          }
          function m2(e4) {
            return a2(e4) || h2(e4) || "+" === e4 || "/" === e4 || "-" === e4 || "_" === e4;
          }
          function f2(e4) {
            return h2(e4) || a2(e4) || "+" === e4 || "/" === e4;
          }
          function T2(e4, t4) {
            var i4 = Object.keys(e4);
            if (Object.getOwnPropertySymbols) {
              var n3 = Object.getOwnPropertySymbols(e4);
              t4 && (n3 = n3.filter(function(t5) {
                return Object.getOwnPropertyDescriptor(e4, t5).enumerable;
              })), i4.push.apply(i4, n3);
            }
            return i4;
          }
          function S2(e4) {
            for (var t4 = 1; t4 < arguments.length; t4++) {
              var i4 = null != arguments[t4] ? arguments[t4] : {};
              t4 % 2 ? T2(Object(i4), true).forEach(function(t5) {
                g2(e4, t5, i4[t5]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i4)) : T2(Object(i4)).forEach(function(t5) {
                Object.defineProperty(e4, t5, Object.getOwnPropertyDescriptor(i4, t5));
              });
            }
            return e4;
          }
          function g2(e4, t4, i4) {
            return t4 in e4 ? Object.defineProperty(e4, t4, { value: i4, enumerable: true, configurable: true, writable: true }) : e4[t4] = i4, e4;
          }
          !function(e4) {
            e4.VERSION = "v", e4.ORIGIN = "o", e4.SESSION_NAME = "s", e4.INFORMATION = "i", e4.URI = "u", e4.EMAIL = "e", e4.PHONE = "p", e4.CONNECTION = "c", e4.BANDWIDTH = "b", e4.TIME = "t", e4.REPEAT = "r", e4.ZONE_ADJUSTMENTS = "z", e4.KEY = "k", e4.ATTRIBUTE = "a", e4.MEDIA = "m";
          }(s2 || (s2 = {}));
          class R2 {
            consumeText(e4, t4) {
              let i4 = t4;
              for (; i4 < e4.length; ) {
                const t5 = e4[i4];
                if ("\0" === t5 || "\r" === t5 || t5 === n2) break;
                i4 += 1;
              }
              if (i4 - t4 == 0) throw new Error("Invalid text, at ".concat(e4));
              return i4;
            }
            consumeUnicastAddress(e4, t4, i4) {
              return this.consumeTill(e4, t4, o2);
            }
            consumeOneOrMore(e4, t4, i4) {
              let n3 = t4;
              for (; i4(e4[n3]); ) n3++;
              if (n3 - t4 == 0) throw new Error("Invalid rule at ".concat(t4, "."));
              return n3;
            }
            consumeSpace(e4, t4) {
              if (e4[t4] === o2) return t4 + 1;
              throw new Error("Invalid space at ".concat(t4, "."));
            }
            consumeIP4Address(e4, t4) {
              let i4 = t4;
              for (let t5 = 0; t5 < 4; t5++) if (i4 = this.consumeDecimalUChar(e4, i4), 3 !== t5) {
                if ("." !== e4[i4]) throw new Error("Invalid IP4 address.");
                i4++;
              }
              return i4;
            }
            consumeDecimalUChar(e4, t4) {
              let i4 = t4;
              for (let t5 = 0; t5 < 3 && a2(e4[i4]); t5++, i4++) ;
              if (i4 - t4 == 0) throw new Error("Invalid decimal uchar.");
              const n3 = parseInt(e4.slice(t4, i4));
              if (n3 >= 0 && n3 <= 255) return i4;
              throw new Error("Invalid decimal uchar");
            }
            consumeIP6Address(e4, t4) {
              let i4 = this.consumeHexpart(e4, t4);
              return ":" === e4[i4] ? (i4 += 1, i4 = this.consumeIP4Address(e4, i4), i4) : i4;
            }
            consumeHexpart(e4, t4) {
              let i4 = t4;
              if (":" === e4[i4] && ":" === e4[i4 + 1]) {
                i4 += 2;
                try {
                  i4 = this.consumeHexseq(e4, i4);
                } catch (e5) {
                }
                return i4;
              }
              if (i4 = this.consumeHexseq(e4, i4), ":" === e4[i4] && ":" === e4[i4 + 1]) {
                i4 += 2;
                try {
                  i4 = this.consumeHexseq(e4, i4);
                } catch (e5) {
                }
                return i4;
              }
              return i4;
            }
            consumeHexseq(e4, t4) {
              let i4 = t4;
              for (; i4 = this.consumeHex4(e4, i4), ":" === e4[i4] && ":" !== e4[i4 + 1]; ) i4 += 1;
              return i4;
            }
            consumeHex4(e4, t4) {
              let i4 = 0;
              for (; i4 < 4; i4++) if (!((n3 = e4[t4 + i4]) >= "0" && n3 <= "9" || n3 >= "a" && n3 <= "f" || n3 >= "A" && n3 <= "F")) {
                if (0 === i4) throw new Error("Invalid hex 4");
                break;
              }
              var n3;
              return t4 + i4;
            }
            consumeFQDN(e4, t4) {
              let i4 = t4;
              for (; a2(e4[i4]) || h2(e4[i4]) || "-" === e4[i4] || "." === e4[i4]; ) i4 += 1;
              if (i4 - t4 < 4) throw new Error("Invalid FQDN");
              return i4;
            }
            consumeExtnAddr(e4, t4) {
              return this.consumeOneOrMore(e4, t4, d2);
            }
            consumeMulticastAddress(e4, t4, i4) {
              switch (i4) {
                case "IP4":
                case "ip4":
                  return this.consumeIP4MulticastAddress(e4, t4);
                case "IP6":
                case "ip6":
                  return this.consumeIP6MulticastAddress(e4, t4);
                default:
                  try {
                    return this.consumeFQDN(e4, t4);
                  } catch (i5) {
                    return this.consumeExtnAddr(e4, t4);
                  }
              }
            }
            consumeIP6MulticastAddress(e4, t4) {
              const i4 = this.consumeHexpart(e4, t4);
              return "/" === e4[i4] ? this.consumeInteger(e4, i4 + 1) : i4;
            }
            consumeIP4MulticastAddress(e4, t4) {
              let i4 = t4 + 3;
              const n3 = e4.slice(t4, i4), r3 = parseInt(n3);
              if (r3 < 224 || r3 > 239) throw new Error("Invalid IP4 multicast address, IPv4 multicast addresses may be in the range 224.0.0.0 to 239.255.255.255.");
              for (let t5 = 0; t5 < 3; t5++) {
                if ("." !== e4[i4]) throw new Error("Invalid IP4 multicast address.");
                i4 += 1, i4 = this.consumeDecimalUChar(e4, i4);
              }
              return "/" === e4[i4] && (i4 += 1), i4 = this.consumeTTL(e4, i4), "/" === e4[i4] && (i4 = this.consumeInteger(e4, i4)), i4;
            }
            consumeInteger(e4, t4) {
              if (!u2(e4[t4])) throw new Error("Invalid integer.");
              for (t4 += 1; a2(e4[t4]); ) t4 += 1;
              return t4;
            }
            consumeTTL(e4, t4) {
              if ("0" === e4[t4]) return t4 + 1;
              if (!u2(e4[t4])) throw new Error("Invalid TTL.");
              t4 += 1;
              for (let i4 = 0; i4 < 2 && a2(e4[t4]); i4++) t4 += 1;
              return t4;
            }
            consumeToken(e4, t4) {
              return this.consumeOneOrMore(e4, t4, l2);
            }
            consumeTime(e4, t4) {
              let i4 = t4;
              if ("0" === e4[i4]) return i4 + 1;
              for (u2(e4[i4]) && (i4 += 1); a2(e4[i4]); ) i4++;
              if (i4 - t4 < 10) throw new Error("Invalid time");
              return i4;
            }
            consumeAddress(e4, t4) {
              return this.consumeTill(e4, t4, o2);
            }
            consumeTypedTime(e4, t4) {
              let i4 = t4;
              return i4 = this.consumeOneOrMore(e4, i4, a2), p2(e4[i4]) ? i4 + 1 : i4;
            }
            consumeRepeatInterval(e4, t4) {
              if (!u2(e4[t4])) throw new Error("Invalid repeat interval");
              for (t4 += 1; a2(e4[t4]); ) t4 += 1;
              return p2(e4[t4]) && (t4 += 1), t4;
            }
            consumePort(e4, t4) {
              return this.consumeOneOrMore(e4, t4, a2);
            }
            consume(e4, t4, i4) {
              for (let n3 = 0; n3 < i4.length; n3++) {
                if (t4 + n3 >= e4.length) throw new Error("consume exceeding value length");
                if (e4[t4 + n3] !== i4[n3]) throw new Error("consume ".concat(i4, " failed at ").concat(n3));
              }
              return t4 + i4.length;
            }
            consumeTill(e4, t4, i4) {
              let n3 = t4;
              for (; n3 < e4.length && ("string" != typeof i4 || e4[n3] !== i4) && ("function" != typeof i4 || !i4(e4[n3])); ) n3++;
              return n3;
            }
          }
          class v2 extends R2 {
            constructor() {
              super(), g2(this, "records", []), g2(this, "currentLine", 0);
            }
            parse(e4) {
              const t4 = this.probeEOL(e4);
              this.records = e4.split(t4).filter((e5) => !!eS(e5).call(e5)).map(this.parseLine), this.currentLine = 0;
              const i4 = this.parseVersion(), n3 = this.parseOrigin(), r3 = this.parseSessionName(), o3 = this.parseInformation(), s3 = this.parseUri(), a3 = this.parseEmail(), c3 = this.parsePhone(), d3 = this.parseConnection(), l3 = this.parseBandWidth(), u3 = this.parseTimeFields(), h3 = this.parseKey(), p3 = this.parseSessionAttribute(), _3 = this.parseMediaDescription();
              if (this.currentLine !== this.records.length) throw new Error("parsing failed, non exhaustive sdp lines.");
              return { version: i4, origin: n3, sessionName: r3, information: o3, uri: s3, emails: a3, phones: c3, connection: d3, bandwidths: l3, timeFields: u3, key: h3, attributes: p3, mediaDescriptions: _3 };
            }
            getCurrentRecord() {
              const e4 = this.records[this.currentLine];
              if (!e4) throw new Error("Record doesn't exit.");
              return e4;
            }
            probeEOL(e4) {
              for (let t4 = 0; t4 < e4.length; t4++) if (e4[t4] === n2) return "\r" === e4[t4 - 1] ? r2 : n2;
              throw new Error("Invalid newline character.");
            }
            parseLine(e4, t4) {
              if (e4.length < 2) throw new Error("Invalid sdp line, sdp line should be of form <type>=<value>.");
              const i4 = e4[0];
              if ("=" !== e4[1]) throw new Error('Invalid sdp line, <type> should be a single character followed by an "=" sign.');
              return { type: i4, value: e4.slice(2), line: t4, cur: 0 };
            }
            parseSessionAttribute() {
              const e4 = new I2();
              for (; this.currentLine < this.records.length; ) {
                const t4 = this.getCurrentRecord();
                if (t4.type !== s2.ATTRIBUTE) break;
                const i4 = { attField: this.extractOneOrMore(t4, (e5) => l2(e5) && ":" !== e5), _cur: 0 };
                ":" === t4.value[t4.cur] && (t4.cur += 1, i4.attValue = this.extractOneOrMore(t4, _2)), e4.parse(i4), this.currentLine++;
              }
              return e4.digest();
            }
            parseMediaAttributes(e4) {
              const t4 = new y2(e4);
              for (; this.currentLine < this.records.length; ) {
                const e5 = this.getCurrentRecord();
                if (e5.type !== s2.ATTRIBUTE) break;
                const i4 = { attField: this.extractOneOrMore(e5, (e6) => l2(e6) && ":" !== e6), _cur: 0 };
                ":" === e5.value[e5.cur] && (e5.cur += 1, i4.attValue = this.extractOneOrMore(e5, _2)), t4.parse(i4), this.currentLine++;
              }
              return t4.digest();
            }
            parseKey() {
              const e4 = this.getCurrentRecord();
              if (e4.type === s2.KEY) {
                if ("prompt" === e4.value || "clear:" === e4.value || "base64:" === e4.value || "uri:" === e4.value) return e4.value;
                throw this.currentLine++, new Error("Invalid key.");
              }
            }
            parseZone() {
              const e4 = this.getCurrentRecord();
              if (e4.type === s2.ZONE_ADJUSTMENTS) {
                const t4 = [];
                for (; ; ) try {
                  const i4 = this.extract(e4, this.consumeTime);
                  this.consumeSpaceForRecord(e4);
                  let n3 = false;
                  "-" === e4.value[e4.cur] && (n3 = true, e4.cur += 1);
                  const r3 = this.extract(e4, this.consumeTypedTime);
                  t4.push({ time: i4, typedTime: r3, back: n3 });
                } catch (e5) {
                  break;
                }
                if (0 === t4.length) throw new Error("Invalid zone adjustments");
                return this.currentLine++, t4;
              }
              return [];
            }
            parseRepeat() {
              const e4 = [];
              for (; ; ) {
                const t4 = this.getCurrentRecord();
                if (t4.type !== s2.REPEAT) break;
                {
                  const i4 = this.extract(t4, this.consumeRepeatInterval), n3 = this.parseTypedTime(t4);
                  e4.push({ repeatInterval: i4, typedTimes: n3 }), this.currentLine++;
                }
              }
              return e4;
            }
            parseTypedTime(e4) {
              const t4 = [];
              for (; ; ) try {
                this.consumeSpaceForRecord(e4), t4.push(this.extract(e4, this.consumeTypedTime));
              } catch (e5) {
                break;
              }
              if (0 === t4.length) throw new Error("Invalid typed time.");
              return t4;
            }
            parseTime() {
              const e4 = this.getCurrentRecord(), t4 = this.extract(e4, this.consumeTime);
              this.consumeSpaceForRecord(e4);
              const i4 = this.extract(e4, this.consumeTime);
              return this.currentLine++, { startTime: t4, stopTime: i4 };
            }
            parseBandWidth() {
              const e4 = [];
              for (; this.currentLine < this.records.length; ) {
                const t4 = this.getCurrentRecord();
                if (t4.type !== s2.BANDWIDTH) break;
                {
                  const i4 = this.extractOneOrMore(t4, l2);
                  if (":" !== t4.value[t4.cur]) throw new Error("Invalid bandwidth field.");
                  t4.cur++;
                  const n3 = this.extractOneOrMore(t4, a2);
                  e4.push({ bwtype: i4, bandwidth: n3 }), this.currentLine++;
                }
              }
              return e4;
            }
            parseVersion() {
              const e4 = this.getCurrentRecord();
              if (e4.type !== s2.VERSION) throw new Error("first sdp record must be version");
              const t4 = e4.value.slice(0, this.consumeOneOrMore(e4.value, 0, a2));
              if (t4.length !== e4.value.length) throw new Error('invalid proto version, "v='.concat(e4.value, '"'));
              return this.currentLine++, t4;
            }
            parseOrigin() {
              const e4 = this.getCurrentRecord();
              if (e4.type !== s2.ORIGIN) throw new Error("second line of sdp must be origin");
              const t4 = this.extractOneOrMore(e4, d2);
              this.consumeSpaceForRecord(e4);
              const i4 = this.extractOneOrMore(e4, a2);
              this.consumeSpaceForRecord(e4);
              const n3 = this.extractOneOrMore(e4, a2);
              this.consumeSpaceForRecord(e4);
              const r3 = this.extractOneOrMore(e4, l2);
              this.consumeSpaceForRecord(e4);
              const o3 = this.extractOneOrMore(e4, l2);
              this.consumeSpaceForRecord(e4);
              const c3 = this.extract(e4, this.consumeUnicastAddress);
              return this.currentLine++, { username: t4, sessId: i4, sessVersion: n3, nettype: r3, addrtype: o3, unicastAddress: c3 };
            }
            parseSessionName() {
              const e4 = this.getCurrentRecord();
              if (e4.type === s2.SESSION_NAME) {
                const t4 = this.extract(e4, this.consumeText);
                return this.currentLine++, t4;
              }
            }
            parseInformation() {
              const e4 = this.getCurrentRecord();
              if (e4.type !== s2.INFORMATION) return;
              const t4 = this.extract(e4, this.consumeText);
              return this.currentLine++, t4;
            }
            parseUri() {
              const e4 = this.getCurrentRecord();
              if (e4.type === s2.URI) return this.currentLine++, e4.value;
            }
            parseEmail() {
              const e4 = [];
              for (; ; ) {
                const t4 = this.getCurrentRecord();
                if (t4.type !== s2.EMAIL) break;
                e4.push(t4.value), this.currentLine++;
              }
              return e4;
            }
            parsePhone() {
              const e4 = [];
              for (; ; ) {
                const t4 = this.getCurrentRecord();
                if (t4.type !== s2.PHONE) break;
                e4.push(t4.value), this.currentLine++;
              }
              return e4;
            }
            parseConnection() {
              const e4 = this.getCurrentRecord();
              if (e4.type === s2.CONNECTION) {
                const t4 = this.extractOneOrMore(e4, l2);
                this.consumeSpaceForRecord(e4);
                const i4 = this.extractOneOrMore(e4, l2);
                this.consumeSpaceForRecord(e4);
                const n3 = this.extract(e4, this.consumeAddress);
                return this.currentLine++, { nettype: t4, addrtype: i4, address: n3 };
              }
            }
            parseMedia() {
              const e4 = this.getCurrentRecord(), t4 = this.extract(e4, this.consumeToken);
              this.consumeSpaceForRecord(e4);
              let i4 = this.extract(e4, this.consumePort);
              "/" === e4.value[e4.cur] && (e4.cur += 1, i4 += this.extract(e4, this.consumeInteger)), this.consumeSpaceForRecord(e4);
              const n3 = [];
              for (n3.push(this.extract(e4, this.consumeToken)); "/" === e4.value[e4.cur]; ) e4.cur += 1, n3.push(this.extract(e4, this.consumeToken));
              if (0 === n3.length) throw new Error("Invalid proto");
              const r3 = this.parseFmt(e4);
              return this.currentLine++, { mediaType: t4, port: i4, protos: n3, fmts: r3 };
            }
            parseTimeFields() {
              const e4 = [];
              for (; this.getCurrentRecord().type === s2.TIME; ) {
                const t4 = this.parseTime(), i4 = this.parseRepeat(), n3 = this.parseZone();
                e4.push({ time: t4, repeats: i4, zones: n3 });
              }
              return e4;
            }
            parseMediaDescription() {
              const e4 = [];
              for (; this.currentLine < this.records.length && this.getCurrentRecord().type === s2.MEDIA; ) {
                const t4 = this.parseMedia(), i4 = this.parseInformation(), n3 = this.parseConnections(), r3 = this.parseBandWidth(), o3 = this.parseKey(), s3 = this.parseMediaAttributes(t4);
                e4.push({ media: t4, information: i4, connections: n3, bandwidths: r3, key: o3, attributes: s3 });
              }
              return e4;
            }
            parseConnections() {
              const e4 = [];
              for (; this.currentLine < this.records.length && this.getCurrentRecord().type === s2.CONNECTION; ) e4.push(this.parseConnection());
              return e4;
            }
            parseFmt(e4) {
              const t4 = [];
              for (; ; ) try {
                this.consumeSpaceForRecord(e4), t4.push(this.extract(e4, this.consumeToken));
              } catch (e5) {
                break;
              }
              if (0 === t4.length) throw new Error("Invalid fmts");
              return t4;
            }
            extract(e4, t4) {
              for (var i4 = arguments.length, n3 = new Array(i4 > 2 ? i4 - 2 : 0), r3 = 2; r3 < i4; r3++) n3[r3 - 2] = arguments[r3];
              const o3 = t4.call(this, e4.value, e4.cur, ...n3), s3 = e4.value.slice(e4.cur, o3);
              return e4.cur = o3, s3;
            }
            extractOneOrMore(e4, t4) {
              const i4 = this.consumeOneOrMore(e4.value, e4.cur, t4), n3 = e4.value.slice(e4.cur, i4);
              return e4.cur = i4, n3;
            }
            consumeSpaceForRecord(e4) {
              if (e4.value[e4.cur] !== o2) throw new Error("Invalid space at ".concat(e4.cur, "."));
              e4.cur += 1;
            }
          }
          class C2 extends R2 {
            constructor() {
              super(...arguments), g2(this, "attributes", void 0), g2(this, "digested", false);
            }
            extractOneOrMore(e4, t4, i4) {
              const n3 = this.consumeOneOrMore(e4.attValue, e4._cur, t4), r3 = e4.attValue.slice(e4._cur, n3), [o3, s3] = i4 || [];
              if ("number" == typeof o3 && r3.length < o3) throw new Error("error in length, should be more or equal than ".concat(o3, " characters."));
              if ("number" == typeof s3 && r3.length > s3) throw new Error("error in length, should be less or equal than ".concat(s3, " characters."));
              return e4._cur = n3, r3;
            }
            consumeAttributeSpace(e4) {
              if (e4.attValue[e4._cur] !== o2) throw new Error("Invalid space at ".concat(e4._cur, "."));
              e4._cur += 1;
            }
            extract(e4, t4) {
              if (!e4.attValue) throw new Error("Nothing to extract from attValue.");
              for (var i4 = arguments.length, n3 = new Array(i4 > 2 ? i4 - 2 : 0), r3 = 2; r3 < i4; r3++) n3[r3 - 2] = arguments[r3];
              const o3 = t4.call(this, e4.attValue, e4._cur, ...n3), s3 = e4.attValue.slice(e4._cur, o3);
              return e4._cur = o3, s3;
            }
            atEnd(e4) {
              if (!e4.attValue) throw new Error();
              return e4._cur >= e4.attValue.length;
            }
            peekChar(e4) {
              if (!e4.attValue) throw new Error();
              return e4.attValue[e4._cur];
            }
            peek(e4, t4) {
              if (!e4.attValue) throw new Error();
              for (let i4 = 0; i4 < t4.length; i4++) if (t4[i4] !== e4.attValue[e4._cur + i4]) return false;
              return true;
            }
            parseIceUfrag(e4) {
              if (this.attributes.iceUfrag) throw new Error("Invalid ice-ufrag, should be only a single line if 'a=ice-ufrag'");
              this.attributes.iceUfrag = this.extractOneOrMore(e4, E2, [4, 256]);
            }
            parseIcePwd(e4) {
              if (this.attributes.icePwd) throw new Error("Invalid ice-pwd, should be only a single line if 'a=ice-pwd'");
              this.attributes.icePwd = this.extractOneOrMore(e4, E2, [22, 256]);
            }
            parseIceOptions(e4) {
              if (this.attributes.iceOptions) throw new Error("Invalid ice-options, should be only one 'ice-options' line");
              const t4 = [];
              for (; !this.atEnd(e4); ) {
                t4.push(this.extractOneOrMore(e4, E2));
                try {
                  this.consumeAttributeSpace(e4);
                } catch (t5) {
                  if (this.atEnd(e4)) break;
                  throw t5;
                }
              }
              this.attributes.iceOptions = t4;
            }
            parseFingerprint(e4) {
              const t4 = this.extract(e4, this.consumeToken);
              this.consumeAttributeSpace(e4);
              const i4 = this.extract(e4, this.consumeTill);
              this.attributes.fingerprints.push({ hashFunction: t4, fingerprint: i4 });
            }
            parseExtmap(e4) {
              const t4 = this.extractOneOrMore(e4, a2);
              let i4;
              "/" === this.peekChar(e4) && (this.extract(e4, this.consume, "/"), i4 = this.extract(e4, this.consumeToken)), this.consumeAttributeSpace(e4);
              const n3 = this.extract(e4, this.consumeTill, o2), r3 = S2(S2({ entry: parseInt(t4, 10) }, i4 && { direction: i4 }), {}, { extensionName: n3 });
              this.peekChar(e4) === o2 && (this.consumeAttributeSpace(e4), r3.extensionAttributes = this.extract(e4, this.consumeTill)), this.attributes.extmaps.push(r3);
            }
            parseSetup(e4) {
              if (this.attributes.setup) throw new Error("must only be one single 'a=setup' line.");
              const t4 = this.extract(e4, this.consumeTill);
              if ("active" !== t4 && "passive" !== t4 && "actpass" !== t4 && "holdconn" !== t4) throw new Error("role must be one of 'active', 'passive', 'actpass', 'holdconn'.");
              this.attributes.setup = t4;
            }
          }
          class I2 extends C2 {
            constructor() {
              super(...arguments), g2(this, "attributes", { unrecognized: [], groups: [], extmaps: [], fingerprints: [], identities: [] });
            }
            parse(e4) {
              if (this.digested) throw new Error("already digested");
              try {
                switch (e4.attField) {
                  case "group":
                    this.parseGroup(e4);
                    break;
                  case "ice-lite":
                    this.parseIceLite();
                    break;
                  case "ice-ufrag":
                    this.parseIceUfrag(e4);
                    break;
                  case "ice-pwd":
                    this.parseIcePwd(e4);
                    break;
                  case "ice-options":
                    this.parseIceOptions(e4);
                    break;
                  case "fingerprint":
                    this.parseFingerprint(e4);
                    break;
                  case "setup":
                    this.parseSetup(e4);
                    break;
                  case "tls-id":
                    this.parseTlsId(e4);
                    break;
                  case "identity":
                    this.parseIdentity(e4);
                    break;
                  case "extmap":
                    this.parseExtmap(e4);
                    break;
                  case "msid-semantic":
                    this.parseMsidSemantic(e4);
                    break;
                  default:
                    e4.ignored = true, this.attributes.unrecognized.push(e4);
                }
              } catch (t4) {
                throw console.error("parsing session attribute ".concat(e4.attField, ' error, "a=').concat(e4.attField, ":").concat(e4.attValue, '"')), t4;
              }
              if (!e4.ignored && e4.attValue && !this.atEnd(e4)) throw new Error("attribute parsing error");
            }
            digest() {
              return this.digested = true, this.attributes;
            }
            parseGroup(e4) {
              const t4 = this.extract(e4, this.consumeToken), i4 = [];
              for (; !this.atEnd(e4) && this.peekChar(e4) === o2; ) this.consumeAttributeSpace(e4), i4.push(this.extract(e4, this.consumeToken));
              this.attributes.groups.push({ semantic: t4, identificationTag: i4 });
            }
            parseIceLite() {
              if (this.attributes.iceLite) throw new Error("Invalid ice-lite, should be only a single line of 'a=ice-lite'");
              this.attributes.iceLite = true;
            }
            parseTlsId(e4) {
              if (this.attributes.tlsId) throw new Error("must be only one tld-id line");
              this.attributes.tlsId = this.extractOneOrMore(e4, m2);
            }
            parseIdentity(e4) {
              const t4 = this.extractOneOrMore(e4, f2), i4 = [];
              for (; !this.atEnd(e4) && this.peekChar(e4) === o2; ) {
                this.consumeAttributeSpace(e4);
                const t5 = this.extract(e4, this.consumeToken);
                this.extract(e4, this.consume, "=");
                const n3 = this.extractOneOrMore(e4, (e5) => e5 !== o2 && _2(e5));
                i4.push({ name: t5, value: n3 });
              }
              this.attributes.identities.push({ assertionValue: t4, extensions: i4 });
            }
            parseMsidSemantic(e4) {
              this.peekChar(e4) === o2 && this.consumeAttributeSpace(e4);
              const t4 = { semantic: this.extract(e4, this.consumeToken), identifierList: [] };
              for (; ; ) {
                try {
                  this.consumeAttributeSpace(e4);
                } catch (e5) {
                  break;
                }
                if ("*" === this.peekChar(e4)) {
                  this.extract(e4, this.consume, "*"), t4.applyForAll = true;
                  break;
                }
                {
                  const i4 = this.extract(e4, this.consumeTill, o2);
                  t4.identifierList.push(i4);
                }
              }
              this.attributes.msidSemantic = t4;
            }
          }
          class y2 extends C2 {
            constructor(e4) {
              super(), g2(this, "attributes", void 0), -1 !== e4.protos.indexOf("RTP") || e4.protos.indexOf("rtp"), this.attributes = { unrecognized: [], candidates: [], extmaps: [], fingerprints: [], imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: [], ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: [] };
            }
            parse(e4) {
              if (this.digested) throw new Error("already digested");
              try {
                switch (e4.attField) {
                  case "extmap":
                    this.parseExtmap(e4);
                    break;
                  case "setup":
                    this.parseSetup(e4);
                    break;
                  case "ice-ufrag":
                    this.parseIceUfrag(e4);
                    break;
                  case "ice-pwd":
                    this.parseIcePwd(e4);
                    break;
                  case "ice-options":
                    this.parseIceOptions(e4);
                    break;
                  case "candidate":
                    this.parseCandidate(e4);
                    break;
                  case "remote-candidate":
                    this.parseRemoteCandidate(e4);
                    break;
                  case "end-of-candidates":
                    this.parseEndOfCandidates();
                    break;
                  case "fingerprint":
                    this.parseFingerprint(e4);
                    break;
                  case "rtpmap":
                    this.parseRtpmap(e4);
                    break;
                  case "ptime":
                    this.parsePtime(e4);
                    break;
                  case "maxptime":
                    this.parseMaxPtime(e4);
                    break;
                  case "sendrecv":
                  case "recvonly":
                  case "sendonly":
                  case "inactive":
                    this.parseDirection(e4);
                    break;
                  case "ssrc":
                    this.parseSSRC(e4);
                    break;
                  case "fmtp":
                    this.parseFmtp(e4);
                    break;
                  case "rtcp-fb":
                    this.parseRtcpFb(e4);
                    break;
                  case "rtcp-mux":
                    this.parseRTCPMux();
                    break;
                  case "rtcp-mux-only":
                    this.parseRTCPMuxOnly();
                    break;
                  case "rtcp-rsize":
                    this.parseRTCPRsize();
                    break;
                  case "rtcp":
                    this.parseRTCP(e4);
                    break;
                  case "mid":
                    this.parseMid(e4);
                    break;
                  case "msid":
                    this.parseMsid(e4);
                    break;
                  case "imageattr":
                    this.parseImageAttr(e4);
                    break;
                  case "rid":
                    this.parseRid(e4);
                    break;
                  case "simulcast":
                    this.parseSimulcast(e4);
                    break;
                  case "sctp-port":
                    this.parseSctpPort(e4);
                    break;
                  case "max-message-size":
                    this.parseMaxMessageSize(e4);
                    break;
                  case "ssrc-group":
                    this.parseSSRCGroup(e4);
                    break;
                  default:
                    e4.ignored = true, this.attributes.unrecognized.push(e4);
                }
              } catch (t4) {
                throw console.error("parsing media attribute ".concat(e4.attField, ' error, "a=').concat(e4.attField, ":").concat(e4.attValue, '"')), t4;
              }
              if (!e4.ignored && e4.attValue && !this.atEnd(e4)) throw new Error("attribute parsing error");
            }
            parseCandidate(e4) {
              const t4 = this.extractOneOrMore(e4, E2, [1, 32]);
              this.consumeAttributeSpace(e4);
              const i4 = this.extractOneOrMore(e4, a2, [1, 5]);
              this.consumeAttributeSpace(e4);
              const n3 = this.extract(e4, this.consumeToken);
              this.consumeAttributeSpace(e4);
              const r3 = this.extractOneOrMore(e4, a2, [1, 10]);
              this.consumeAttributeSpace(e4);
              const s3 = this.extract(e4, this.consumeAddress);
              this.consumeAttributeSpace(e4);
              const d3 = this.extract(e4, this.consumePort);
              this.consumeAttributeSpace(e4), this.extract(e4, this.consume, "typ"), this.consumeAttributeSpace(e4);
              const l3 = { foundation: t4, componentId: i4, transport: n3, priority: r3, connectionAddress: s3, port: d3, type: this.extract(e4, this.consumeToken), extension: {} };
              for (this.peek(e4, " raddr") && (this.extract(e4, this.consume, " raddr"), this.consumeAttributeSpace(e4), l3.relAddr = this.extract(e4, this.consumeAddress)), this.peek(e4, " rport") && (this.extract(e4, this.consume, " rport"), this.consumeAttributeSpace(e4), l3.relPort = this.extract(e4, this.consumePort)); this.peekChar(e4) === o2; ) {
                this.consumeAttributeSpace(e4);
                const t5 = this.extract(e4, this.consumeToken);
                this.consumeAttributeSpace(e4), l3.extension[t5] = this.extractOneOrMore(e4, c2);
              }
              this.attributes.candidates.push(l3);
            }
            parseRemoteCandidate(e4) {
              const t4 = [];
              for (; ; ) {
                const i4 = this.extractOneOrMore(e4, a2, [1, 5]);
                this.consumeAttributeSpace(e4);
                const n3 = this.extract(e4, this.consumeAddress);
                this.consumeAttributeSpace(e4);
                const r3 = this.extract(e4, this.consumePort);
                t4.push({ componentId: i4, connectionAddress: n3, port: r3 });
                try {
                  this.consumeAttributeSpace(e4);
                } catch (e5) {
                  break;
                }
              }
              this.attributes.remoteCandidatesList.push(t4);
            }
            parseEndOfCandidates() {
              if (this.attributes.endOfCandidates) throw new Error("must be only one line of end-of-candidates");
              this.attributes.endOfCandidates = true;
            }
            parseRtpmap(e4) {
              const t4 = this.extract(e4, this.consumeToken);
              this.consumeAttributeSpace(e4);
              const i4 = this.extract(e4, this.consumeTill, "/");
              this.extract(e4, this.consume, "/");
              const n3 = { encodingName: i4, clockRate: this.extractOneOrMore(e4, a2) };
              this.atEnd(e4) || "/" !== this.peekChar(e4) || (this.extract(e4, this.consume, "/"), n3.encodingParameters = parseInt(this.extract(e4, this.consumeTill), 10));
              const r3 = this.attributes.payloads.find((e5) => e5.payloadType === parseInt(t4, 10));
              r3 ? r3.rtpMap = n3 : this.attributes.payloads.push({ payloadType: parseInt(t4, 10), rtpMap: n3, rtcpFeedbacks: [] });
            }
            parsePtime(e4) {
              if (this.attributes.ptime) throw new Error("must be only one line of ptime");
              this.attributes.ptime = this.extract(e4, this.consumeTill);
            }
            parseMaxPtime(e4) {
              if (this.attributes.maxPtime) throw new Error("must be only one line of ptime");
              this.attributes.maxPtime = this.extract(e4, this.consumeTill);
            }
            parseDirection(e4) {
              if (this.attributes.direction) throw new Error("must be only one line of direction info");
              this.attributes.direction = e4.attField;
            }
            parseSSRC(e4) {
              const t4 = this.extractOneOrMore(e4, a2);
              this.consumeAttributeSpace(e4);
              const i4 = this.extract(e4, this.consumeTill, ":");
              let n3;
              ":" === this.peekChar(e4) && (this.extract(e4, this.consume, ":"), n3 = this.extract(e4, this.consumeTill));
              const r3 = this.attributes.ssrcs.find((e5) => e5.ssrcId === parseInt(t4, 10));
              r3 ? r3.attributes[i4] = n3 : this.attributes.ssrcs.push({ ssrcId: parseInt(t4, 10), attributes: { [i4]: n3 } });
            }
            parseFmtp(e4) {
              const t4 = this.extract(e4, this.consumeTill, o2);
              this.consumeAttributeSpace(e4);
              const i4 = this.extract(e4, this.consumeTill), n3 = {};
              i4.split(";").forEach((e5) => {
                let [t5, i5] = e5.split("=");
                t5 = eS(t5).call(t5);
                const r4 = "string" == typeof i5 ? eS(i5).call(i5) : null;
                "string" == typeof t5 && t5.length > 0 && (n3[t5] = r4);
              });
              const r3 = this.attributes.payloads.find((e5) => e5.payloadType === parseInt(t4, 10));
              r3 ? r3.fmtp = { parameters: n3 } : this.attributes.payloads.push({ payloadType: parseInt(t4, 10), rtcpFeedbacks: [], fmtp: { parameters: n3 } });
            }
            parseFmtParameters(e4) {
              const t4 = {}, i4 = this.extract(e4, this.consumeTill, "=");
              e4._cur++;
              const n3 = this.extract(e4, this.consumeTill, ";");
              for (t4[i4] = n3; ";" === e4.attValue[e4._cur]; ) {
                const i5 = this.extract(e4, this.consumeTill, "=");
                e4._cur++;
                const n4 = this.extract(e4, this.consumeTill, ";");
                t4[i5] = n4;
              }
              return t4;
            }
            parseRtcpFb(e4) {
              let t4 = "";
              t4 = "*" === this.peekChar(e4) ? this.extract(e4, this.consume, "*") : this.extract(e4, this.consumeTill, o2), this.consumeAttributeSpace(e4);
              const i4 = this.extract(e4, this.consumeTill, o2);
              let n3;
              if ("trr-int" === i4) n3 = { type: i4, interval: this.extract(e4, this.consumeTill) };
              else {
                const t5 = { type: i4 };
                this.peekChar(e4) === o2 && (this.consumeAttributeSpace(e4), t5.parameter = this.extract(e4, this.consumeToken), this.peekChar(e4) === o2 && (t5.additional = this.extract(e4, this.consumeTill))), n3 = t5;
              }
              if ("*" === t4) this.attributes.rtcpFeedbackWildcards.push(n3);
              else {
                const e5 = this.attributes.payloads.find((e6) => e6.payloadType === parseInt(t4, 10));
                e5 ? e5.rtcpFeedbacks.push(n3) : this.attributes.payloads.push({ payloadType: parseInt(t4, 10), rtcpFeedbacks: [n3] });
              }
            }
            parseRTCPMux() {
              if (this.attributes.rtcpMux) throw new Error("must be single line of rtcp-mux");
              this.attributes.rtcpMux = true;
            }
            parseRTCPMuxOnly() {
              if (this.attributes.rtcpMuxOnly) throw new Error("must be single line of rtcp-only");
              this.attributes.rtcpMuxOnly = true;
            }
            parseRTCPRsize() {
              if (this.attributes.rtcpRsize) throw new Error("must be single line of rtcp-rsize");
              this.attributes.rtcpRsize = true;
            }
            parseRTCP(e4) {
              if (this.attributes.rtcp) throw new Error("must be single line of rtcp");
              const t4 = { port: this.extract(e4, this.consumePort) };
              this.peekChar(e4) === o2 && (this.consumeAttributeSpace(e4), t4.netType = this.extractOneOrMore(e4, l2), this.consumeAttributeSpace(e4), t4.addressType = this.extractOneOrMore(e4, l2), this.consumeAttributeSpace(e4), t4.address = this.extract(e4, this.consumeAddress)), this.attributes.rtcp = t4;
            }
            parseMsid(e4) {
              const t4 = { id: this.extractOneOrMore(e4, l2, [1, 64]) };
              this.peekChar(e4) === o2 && (this.consumeAttributeSpace(e4), t4.appdata = this.extractOneOrMore(e4, l2, [1, 64])), this.attributes.msids.push(t4);
            }
            parseImageAttr(e4) {
              this.attributes.imageattr.push(e4.attValue);
            }
            parseRid(e4) {
              const t4 = this.extractOneOrMore(e4, (e5) => h2(e5) || a2(e5) || "_" === e5 || "-" === e5);
              this.consumeAttributeSpace(e4);
              const i4 = { id: t4, direction: this.extract(e4, this.consumeToken), params: [] };
              if (this.peekChar(e4) === o2) {
                if (this.consumeAttributeSpace(e4), this.peek(e4, "pt=")) {
                  this.extract(e4, this.consume, "pt=");
                  const t5 = [];
                  for (; ; ) {
                    const i5 = this.extract(e4, this.consumeToken);
                    t5.push(i5);
                    try {
                      this.extract(e4, this.consume, ",");
                    } catch (e5) {
                      break;
                    }
                  }
                  i4.payloads = t5, this.peekChar(e4) === o2 && this.extract(e4, this.consume, o2);
                }
                for (; ; ) {
                  const t5 = this.extract(e4, this.consumeToken);
                  switch (t5) {
                    case "depend": {
                      const n3 = { type: t5, rids: this.extract(e4, this.consume, "=").split(",") };
                      i4.params.push(n3);
                      break;
                    }
                    default: {
                      const n3 = { type: t5 };
                      "=" === this.peekChar(e4) && (this.extract(e4, this.consume, "="), n3.val = this.extract(e4, this.consumeTill, ";")), i4.params.push(n3);
                    }
                  }
                  try {
                    this.extract(e4, this.consume, ";");
                  } catch (e5) {
                    break;
                  }
                }
              }
              this.attributes.rids.push(i4);
            }
            parseSimulcast(e4) {
              if (this.attributes.simulcast) throw new Error("must be single line of simulcast");
              this.attributes.simulcast = e4.attValue, this.extract(e4, this.consumeTill);
            }
            parseSctpPort(e4) {
              this.attributes.sctpPort = this.extractOneOrMore(e4, a2, [1, 5]);
            }
            parseMaxMessageSize(e4) {
              this.attributes.maxMessageSize = this.extractOneOrMore(e4, a2, [1, void 0]);
            }
            digest() {
              return this.digested = true, this.attributes;
            }
            parseMid(e4) {
              this.attributes.mid = this.extract(e4, this.consumeToken);
            }
            parseSSRCGroup(e4) {
              const t4 = this.extract(e4, this.consumeToken), i4 = [];
              for (; ; ) try {
                this.consumeAttributeSpace(e4);
                const t5 = this.extract(e4, this.consumeInteger);
                i4.push(parseInt(t5, 10));
              } catch (e5) {
                break;
              }
              this.attributes.ssrcGroups.push({ semantic: t4, ssrcIds: i4 });
            }
          }
          function A2(e4, t4, i4) {
            return t4 in e4 ? Object.defineProperty(e4, t4, { value: i4, enumerable: true, configurable: true, writable: true }) : e4[t4] = i4, e4;
          }
          class b2 {
            constructor() {
              A2(this, "eol", r2);
            }
            print(e4, t4) {
              let i4 = "";
              return t4 && (this.eol = t4), i4 += this.printVersion(e4.version), i4 += this.printOrigin(e4.origin), i4 += this.printSessionName(e4.sessionName), i4 += this.printInformation(e4.information), i4 += this.printUri(e4.uri), i4 += this.printEmail(e4.emails), i4 += this.printPhone(e4.phones), i4 += this.printConnection(e4.connection), i4 += this.printBandwidth(e4.bandwidths), i4 += this.printTimeFields(e4.timeFields), i4 += this.printKey(e4.key), i4 += this.printSessionAttributes(e4.attributes), i4 += this.printMediaDescription(e4.mediaDescriptions), i4;
            }
            printVersion(e4) {
              return "v=".concat(e4).concat(this.eol);
            }
            printOrigin(e4) {
              return "o=".concat(e4.username, " ").concat(e4.sessId, " ").concat(e4.sessVersion, " ").concat(e4.nettype, " ").concat(e4.addrtype, " ").concat(e4.unicastAddress).concat(this.eol);
            }
            printSessionName(e4) {
              return e4 ? "s=".concat(e4).concat(this.eol) : "";
            }
            printInformation(e4) {
              return e4 ? "i=".concat(e4).concat(this.eol) : "";
            }
            printUri(e4) {
              return e4 ? "u=".concat(e4).concat(this.eol) : "";
            }
            printEmail(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += "e=".concat(i4).concat(this.eol);
              return t4;
            }
            printPhone(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += "e=".concat(i4).concat(this.eol);
              return t4;
            }
            printConnection(e4) {
              return e4 ? "c=".concat(e4.nettype, " ").concat(e4.addrtype, " ").concat(e4.address).concat(this.eol) : "";
            }
            printBandwidth(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += "b=".concat(i4.bwtype, ":").concat(i4.bandwidth).concat(this.eol);
              return t4;
            }
            printTimeFields(e4) {
              let t4 = "";
              for (const i4 of e4) {
                t4 += "t=".concat(i4.time.startTime, " ").concat(i4.time.startTime).concat(this.eol);
                for (const e5 of i4.repeats) t4 += "r=".concat(e5.repeatInterval, " ").concat(e5.typedTimes.join(" ")).concat(this.eol);
                i4.zoneAdjustments && (t4 += "z=", t4 += "z=".concat(i4.zoneAdjustments.map((e5) => "".concat(e5.time, " ").concat(e5.back ? "-" : "", " ").concat(e5.typedTime)).join(" ")).concat(this.eol), t4 += this.eol);
              }
              return t4;
            }
            printKey(e4) {
              return e4 ? "k=".concat(e4).concat(this.eol) : "";
            }
            printAttributes(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += "a=".concat(i4.attField).concat(i4.attValue ? ":".concat(i4.attValue) : "").concat(this.eol);
              return t4;
            }
            printMediaDescription(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += this.printMedia(i4.media), t4 += this.printInformation(i4.information), t4 += this.printConnections(i4.connections), t4 += this.printBandwidth(i4.bandwidths), t4 += this.printKey(i4.key), t4 += this.printMediaAttributes(i4);
              return t4;
            }
            printConnections(e4) {
              let t4 = "";
              for (const i4 of e4) t4 += this.printConnection(i4);
              return t4;
            }
            printMedia(e4) {
              return "m=".concat(e4.mediaType, " ").concat(e4.port, " ").concat(e4.protos.join("/"), " ").concat(e4.fmts.join(" ")).concat(this.eol);
            }
            printSessionAttributes(e4) {
              return new O2(this.eol).print(e4);
            }
            printMediaAttributes(e4) {
              return new N2(this.eol).print(e4);
            }
          }
          class w2 {
            constructor(e4) {
              A2(this, "eol", void 0), this.eol = e4;
            }
            printIceUfrag(e4) {
              return void 0 === e4 ? "" : "a=ice-ufrag:".concat(e4).concat(this.eol);
            }
            printIcePwd(e4) {
              return void 0 === e4 ? "" : "a=ice-pwd:".concat(e4).concat(this.eol);
            }
            printIceOptions(e4) {
              return void 0 === e4 ? "" : "a=ice-options:".concat(e4.join(o2)).concat(this.eol);
            }
            printFingerprints(e4) {
              return e4.length > 0 ? e4.map((e5) => "a=fingerprint:".concat(e5.hashFunction).concat(o2).concat(e5.fingerprint)).join(this.eol) + this.eol : "";
            }
            printExtmap(e4) {
              return e4.map((e5) => "a=extmap:".concat(e5.entry).concat(e5.direction ? "/".concat(e5.direction) : "").concat(o2).concat(e5.extensionName).concat(e5.extensionAttributes ? "".concat(o2).concat(e5.extensionAttributes) : "").concat(this.eol)).join("");
            }
            printSetup(e4) {
              return void 0 === e4 ? "" : "a=setup:".concat(e4).concat(this.eol);
            }
            printUnrecognized(e4) {
              return e4.map((e5) => "a=".concat(e5.attField).concat(e5.attValue ? ":".concat(e5.attValue) : "").concat(this.eol)).join("");
            }
          }
          class O2 extends w2 {
            print(e4) {
              let t4 = "";
              return t4 += this.printGroups(e4.groups), t4 += this.printMsidSemantic(e4.msidSemantic), t4 += this.printIceLite(e4.iceLite), t4 += this.printIceUfrag(e4.iceUfrag), t4 += this.printIcePwd(e4.icePwd), t4 += this.printIceOptions(e4.iceOptions), t4 += this.printFingerprints(e4.fingerprints), t4 += this.printSetup(e4.setup), t4 += this.printTlsId(e4.tlsId), t4 += this.printIdentity(e4.identities), t4 += this.printExtmap(e4.extmaps), t4 += this.printUnrecognized(e4.unrecognized), t4;
            }
            printGroups(e4) {
              let t4 = "";
              return e4.length > 0 && (t4 += e4.map((e5) => "a=group:".concat(e5.semantic).concat(e5.identificationTag.map((e6) => "".concat(o2).concat(e6)).join("")).concat(this.eol)).join("")), t4;
            }
            printIceLite(e4) {
              return void 0 === e4 ? "" : "a=ice-lite" + this.eol;
            }
            printTlsId(e4) {
              return e4 ? "a=tls-id:".concat(e4).concat(this.eol) : "";
            }
            printIdentity(e4) {
              return 0 === e4.length ? "" : e4.map((e5) => "a=identity:".concat(e5.assertionValue).concat(e5.extensions.map((e6) => "".concat(o2).concat(e6.name).concat(e6.value ? "=".concat(e6.value) : "")))).join(this.eol) + this.eol;
            }
            printMsidSemantic(e4) {
              if (!e4) return "";
              let t4 = "a=msid-semantic:".concat(e4.semantic);
              return e4.applyForAll ? t4 += "".concat(o2, "*") : e4.identifierList.length > 0 && (t4 += e4.identifierList.map((e5) => "".concat(o2).concat(e5))), t4 + this.eol;
            }
          }
          class N2 extends w2 {
            print(e4) {
              const t4 = e4.attributes;
              let i4 = "";
              return i4 += this.printRTCP(t4.rtcp), i4 += this.printIceUfrag(t4.iceUfrag), i4 += this.printIcePwd(t4.icePwd), i4 += this.printIceOptions(t4.iceOptions), i4 += this.printCandidates(t4.candidates), i4 += this.printRemoteCandidatesList(t4.remoteCandidatesList), i4 += this.printEndOfCandidates(t4.endOfCandidates), i4 += this.printFingerprints(t4.fingerprints), i4 += this.printSetup(t4.setup), i4 += this.printMid(t4.mid), i4 += this.printExtmap(t4.extmaps), i4 += this.printRTPRelated(t4), i4 += this.printPtime(t4.ptime), i4 += this.printMaxPtime(t4.maxPtime), i4 += this.printDirection(t4.direction), i4 += this.printSSRCGroups(t4.ssrcGroups), i4 += this.printSSRC(t4.ssrcs), i4 += this.printRTCPMux(t4.rtcpMux), i4 += this.printRTCPMuxOnly(t4.rtcpMuxOnly), i4 += this.printRTCPRsize(t4.rtcpRsize), i4 += this.printMSId(t4.msids), i4 += this.printImageattr(t4.imageattr), i4 += this.printRid(t4.rids), i4 += this.printSimulcast(t4.simulcast), i4 += this.printSCTPPort(t4.sctpPort), i4 += this.printMaxMessageSize(t4.maxMessageSize), i4 += this.printUnrecognized(t4.unrecognized), i4;
            }
            printCandidates(e4) {
              return e4.map((e5) => "a=candidate:".concat(e5.foundation).concat(o2).concat(e5.componentId).concat(o2).concat(e5.transport).concat(o2).concat(e5.priority).concat(o2).concat(e5.connectionAddress).concat(o2).concat(e5.port).concat(o2, "typ").concat(o2).concat(e5.type).concat(e5.relAddr ? "".concat(o2, "raddr").concat(o2).concat(e5.relAddr) : "").concat(e5.relPort ? "".concat(o2, "rport").concat(o2).concat(e5.relPort) : "").concat(Object.keys(e5.extension).map((t4) => "".concat(o2).concat(t4).concat(o2).concat(e5.extension[t4])).join("")).concat(this.eol)).join("");
            }
            printRemoteCandidatesList(e4) {
              return e4.map((e5) => "a=remote-candidates:".concat(e5.join(o2)).concat(this.eol)).join("");
            }
            printEndOfCandidates(e4) {
              return void 0 === e4 ? "" : "a=end-of-candidates" + this.eol;
            }
            printRTPRelated(e4) {
              if (!e4.payloads) return "";
              const t4 = e4.payloads;
              let i4 = "";
              i4 += e4.rtcpFeedbackWildcards.map((e5) => this.printRTCPFeedback("*", e5)).join("");
              for (const e5 of t4) i4 += this.printRtpMap(e5.payloadType, e5.rtpMap), i4 += this.printFmtp(e5.payloadType, e5.fmtp), i4 += e5.rtcpFeedbacks.map((t5) => this.printRTCPFeedback(e5.payloadType, t5)).join("");
              return i4;
            }
            printFmtp(e4, t4) {
              if (!t4) return "";
              const i4 = Object.keys(t4.parameters);
              return 1 === i4.length && null === t4.parameters[i4[0]] ? "a=fmtp:".concat(e4).concat(o2).concat(i4[0]).concat(this.eol) : "a=fmtp:".concat(e4).concat(o2).concat(Object.keys(t4.parameters).map((e5) => "".concat(e5, "=").concat(t4.parameters[e5])).join(";")).concat(this.eol);
            }
            printRtpMap(e4, t4) {
              return t4 ? "a=rtpmap:".concat(e4).concat(o2).concat(t4.encodingName, "/").concat(t4.clockRate).concat(t4.encodingParameters ? "/".concat(t4.encodingParameters) : "").concat(this.eol) : "";
            }
            printRTCPFeedback(e4, t4) {
              let i4 = "a=rtcp-fb:".concat(e4).concat(o2), n3 = t4;
              return "trr-int" === n3.type ? i4 += "ttr-int".concat(o2).concat(n3.interval) : (i4 += "".concat(n3.type), n3.parameter && (i4 += "".concat(o2).concat(n3.parameter), n3.additional && (i4 += "".concat(o2).concat(n3.additional)))), i4 + this.eol;
            }
            printPtime(e4) {
              return void 0 === e4 ? "" : "a=ptime:".concat(e4).concat(this.eol);
            }
            printMaxPtime(e4) {
              return void 0 === e4 ? "" : "a=maxptime:".concat(e4).concat(this.eol);
            }
            printDirection(e4) {
              return void 0 === e4 ? "" : "a=".concat(e4).concat(this.eol);
            }
            printSSRC(e4) {
              return e4.map((e5) => Object.keys(e5.attributes).map((t4) => "a=ssrc:".concat(e5.ssrcId.toString(10)).concat(o2).concat(t4).concat(e5.attributes[t4] ? ":".concat(e5.attributes[t4]) : "").concat(this.eol)).join("")).join("");
            }
            printRTCPMux(e4) {
              return void 0 === e4 ? "" : "a=rtcp-mux".concat(this.eol);
            }
            printRTCPMuxOnly(e4) {
              return void 0 === e4 ? "" : "a=rtcp-mux-only".concat(this.eol);
            }
            printRTCPRsize(e4) {
              return void 0 === e4 ? "" : "a=rtcp-rsize".concat(this.eol);
            }
            printRTCP(e4) {
              if (void 0 === e4) return "";
              let t4 = "a=rtcp:".concat(e4.port);
              return e4.netType && (t4 += "".concat(o2).concat(e4.netType)), e4.addressType && (t4 += "".concat(o2).concat(e4.addressType)), e4.address && (t4 += "".concat(o2).concat(e4.address)), t4 + this.eol;
            }
            printMSId(e4) {
              return e4.map((e5) => "a=msid:".concat(e5.id).concat(e5.appdata ? "".concat(o2).concat(e5.appdata) : "").concat(this.eol)).join("");
            }
            printImageattr(e4) {
              return e4.map((e5) => "a=imageattr:".concat(e5).concat(this.eol)).join("");
            }
            printRid(e4) {
              return e4.map((e5) => {
                let t4 = "a=rid:".concat(e5.id).concat(o2).concat(e5.direction);
                return e5.payloads && (t4 += "".concat(o2, "pt=").concat(e5.payloads.join(","))), e5.params.length > 0 && (t4 += "".concat(o2).concat(e5.params.map((e6) => "depend" === e6.type ? "depend=".concat(e6.rids.join(",")) : "".concat(e6.type, "=").concat(e6.val)).join(";"))), t4 + this.eol;
              }).join("");
            }
            printSimulcast(e4) {
              return void 0 === e4 ? "" : "a=simulcast:".concat(e4).concat(this.eol);
            }
            printSCTPPort(e4) {
              return void 0 === e4 ? "" : "a=sctp-port:".concat(e4).concat(this.eol);
            }
            printMaxMessageSize(e4) {
              return void 0 === e4 ? "" : "a=max-message-size:".concat(e4).concat(this.eol);
            }
            printMid(e4) {
              return void 0 === e4 ? "" : "a=mid:".concat(e4).concat(this.eol);
            }
            printSSRCGroups(e4) {
              return e4.map((e5) => "a=ssrc-group:".concat(e5.semantic).concat(e5.ssrcIds.map((e6) => "".concat(o2).concat(e6.toString(10))).join("")).concat(this.eol)).join("");
            }
          }
          function D2(e4) {
            return new v2().parse(e4);
          }
          function P2(e4, t4) {
            return new b2().print(e4, t4);
          }
        } }, t2 = {};
        function i2(n2) {
          if (t2[n2]) return t2[n2].exports;
          var r2 = t2[n2] = { exports: {} };
          return e2[n2](r2, r2.exports, i2), r2.exports;
        }
        return i2.d = (e3, t3) => {
          for (var n2 in t3) i2.o(t3, n2) && !i2.o(e3, n2) && Object.defineProperty(e3, n2, { enumerable: true, get: t3[n2] });
        }, i2.o = (e3, t3) => Object.prototype.hasOwnProperty.call(e3, t3), i2.r = (e3) => {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e3, "__esModule", { value: true });
        }, i2(8);
      })();
      function WN(e2) {
        return GN.parse(e2);
      }
      function HN(e2, t2) {
        return GN.print(e2, t2);
      }
      var KN = $i("Array", "keys"), YN = mn, qN = et, zN = l, JN = KN, XN = Array.prototype, QN = { DOMTokenList: true, NodeList: true }, ZN = function(e2) {
        var t2 = e2.keys;
        return e2 === XN || zN(XN, e2) && t2 === XN.keys || qN(QN, YN(e2)) ? JN : t2;
      }, $N = i(ZN);
      function eD(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4) {
            if ("object" != typeof e4 || !e4) return e4;
            var t4 = e4[Symbol.toPrimitive];
            if (void 0 !== t4) {
              var i3 = t4.call(e4, "string");
              if ("object" != typeof i3) return i3;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : t3 + "";
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      function tD(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function iD(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? tD(Object(i2), true).forEach(function(t3) {
            eD(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : tD(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const nD = new class extends Zw {
        constructor() {
          super(...arguments), eD(this, "currentUploadLogID", 0);
        }
        reportLogUploadError(e2) {
          const { errorRange: t2 } = e2;
          t2[t2.length - 1] && t2[t2.length - 1] > this.currentUploadLogID && (this.currentUploadLogID = t2[t2.length - 1], this.emit("REPORT_LOG_UPLOAD", e2));
        }
      }();
      class rD {
        constructor(e2) {
          eD(this, "logger", void 0), eD(this, "prefixLists", []), this.logger = e2;
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          this.logger.debug(...this.prefixLists, ...t2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          this.logger.info(...this.prefixLists, ...t2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          this.logger.warning(...this.prefixLists, ...t2);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          this.logger.error(...this.prefixLists, ...t2);
        }
        prefix(e2) {
          return this.prefixLists.push(e2), this;
        }
        popPrefix() {
          return this.prefixLists.pop(), this;
        }
      }
      function oD() {
        const e2 = /* @__PURE__ */ new Date();
        return e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      function sD() {
        const e2 = /* @__PURE__ */ new Date(), t2 = /((\d+:){2}\d+)/.exec((/* @__PURE__ */ new Date()).toUTCString());
        return t2 ? (null == t2 ? void 0 : t2[0]) + ":" + e2.getUTCMilliseconds() : e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      const aD = { DEBUG: 0, INFO: 1, WARNING: 2, ERROR: 3, NONE: 4 }, cD = Date.now(), dD = (e2) => {
        for (const t2 in aD) if (Object.prototype.hasOwnProperty.call(aD, t2) && aD[t2] === e2) return t2;
        return "DEFAULT";
      };
      const lD = new class {
        constructor() {
          eD(this, "proxyServerURL", void 0), eD(this, "logLevel", aD.DEBUG), eD(this, "uploadState", "collecting"), eD(this, "uploadLogWaitingList", []), eD(this, "uploadLogUploadingList", []), eD(this, "uploadErrorCount", 0), eD(this, "currentLogID", 0), eD(this, "url", void 0), eD(this, "extLog", (e2, t2) => {
            this.appendLogToWaitingList(e2, ...t2);
          });
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          const n2 = [aD.DEBUG].concat(t2);
          this.log.apply(this, n2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          const n2 = [aD.INFO].concat(t2);
          this.log.apply(this, n2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          const n2 = [aD.WARNING].concat(t2);
          this.log.apply(this, n2);
        }
        warn() {
          this.warning(...arguments);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          const n2 = [aD.ERROR].concat(t2);
          this.log.apply(this, n2);
        }
        upload() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          const n2 = [aD.DEBUG].concat(t2);
          this.uploadLog.apply(this, n2);
        }
        setLogLevel(e2) {
          e2 = Math.min(Math.max(0, e2), 4), this.logLevel = e2;
        }
        enableLogUpload() {
          kN("UPLOAD_LOG", true);
        }
        disableLogUpload() {
          kN("UPLOAD_LOG", false), this.uploadLogUploadingList = [], this.uploadLogWaitingList = [];
        }
        setProxyServer(e2) {
          this.proxyServerURL = e2;
        }
        prefix(e2) {
          return new rD(this).prefix(e2);
        }
        log() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          if (Date.now() - cD < 100) return void setTimeout(() => {
            this.log(...t2);
          }, Date.now() - cD);
          const n2 = Math.max(0, Math.min(4, t2[0]));
          if (t2[0] = oD() + " Agora-SDK [".concat(dD(n2), "]:"), this.appendLogToWaitingList(n2, ...t2), n2 < this.logLevel) return;
          const r2 = oD() + " %cAgora-SDK [".concat(dD(n2), "]:");
          let o2 = [];
          if (!MN("USE_NEW_LOG")) switch (n2) {
            case aD.DEBUG:
              o2 = [r2, "color: #64B5F6;"].concat(t2.slice(1)), console.log.apply(console, o2);
              break;
            case aD.INFO:
              o2 = [r2, "color: #1E88E5; font-weight: bold;"].concat(t2.slice(1)), console.log.apply(console, o2);
              break;
            case aD.WARNING:
              o2 = [r2, "color: #FB8C00; font-weight: bold;"].concat(t2.slice(1)), console.warn.apply(console, o2);
              break;
            case aD.ERROR:
              o2 = [r2, "color: #B00020; font-weight: bold;"].concat(t2.slice(1)), console.error.apply(console, o2);
          }
        }
        uploadLog() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++) t2[i2] = arguments[i2];
          if (Date.now() - cD < 100) return void setTimeout(() => {
            this.uploadLog(...t2);
          }, Date.now() - cD);
          const n2 = Math.max(0, Math.min(4, t2[0]));
          t2[0] = oD() + " Agora-SDK [".concat(dD(n2), "]:"), this.appendLogToWaitingList(n2, ...t2);
        }
        appendLogToWaitingList(e2) {
          if (!MN("UPLOAD_LOG")) return;
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++) i2[n2 - 1] = arguments[n2];
          Array.isArray(i2[0]) ? i2[0][0] = sD() + " Agora-SDK [".concat(dD(e2), "]:") : i2[0] = sD() + " Agora-SDK [".concat(dD(e2), "]:");
          let r2 = "";
          i2.forEach((e3) => {
            "object" == typeof e3 && (e3 = JSON.stringify(e3)), r2 += "".concat(e3, " ");
          }), this.uploadLogWaitingList.push({ payload_str: r2, log_level: e2, log_item_id: this.currentLogID++ }), "uploading" === this.uploadState && 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        startUpload() {
          this.uploadState = "uploading", 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        async uploadLogs() {
          const e2 = this.uploadLogUploadingList, t2 = { sdk_version: yN, process_id: MN("PROCESS_ID"), payload: JSON.stringify(e2) };
          return JO(async () => {
            const e3 = await qb.post(this.url || (this.proxyServerURL ? "https://".concat(this.proxyServerURL, "/ls/?h=").concat(MN("LOG_UPLOAD_SERVER"), "&p=443&d=upload/v1") : "https://".concat(MN("LOG_UPLOAD_SERVER"), "/upload/v1")), t2, { responseType: "text" });
            if ("OK" !== e3.data) {
              const t3 = new Error("unexpected upload log response");
              throw t3.response = e3, t3;
            }
          }, () => (this.uploadLogUploadingList = [], false), (t3) => {
            const i2 = { status: -1, message: t3.message, errorRange: e2.map((e3) => e3.log_item_id) };
            return t3.response ? (i2.status = t3.response.status, i2.data = t3.response.data, i2.headers = t3.response.headers) : t3.request && (i2.status = t3.request.status), nD.reportLogUploadError(i2), true;
          }, { timeout: MN("UPLOAD_LOG_REQUEST_RETRY_INTERVAL"), maxRetryTimeout: MN("UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL") });
        }
        uploadLogInterval() {
          0 === this.uploadLogUploadingList.length && 0 === this.uploadLogWaitingList.length || (0 === this.uploadLogUploadingList.length && (this.uploadLogUploadingList = this.uploadLogWaitingList.splice(0, MN("UPLOAD_LOG_LENGTH_EACH_TIME"))), this.uploadLogs().then(() => {
            this.uploadErrorCount = 0, this.uploadLogWaitingList.length > 0 && window.setTimeout(() => this.uploadLogInterval(), MN("UPLOAD_LOG_INTERVAL"));
          }).catch((e2) => {
            this.uploadErrorCount += 1, this.uploadErrorCount < 2 ? window.setTimeout(() => this.uploadLogInterval(), MN("UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1")) : window.setTimeout(() => this.uploadLogInterval(), MN("UPLOAD_LOG_RETRY_INTERVAL_V1"));
          }));
        }
      }();
      var uD;
      function hD(e2) {
        return Gw(e2.reportId, "params.reportId", 0, 100, false), Gw(e2.category, "params.category", 0, 100, false), Gw(e2.event, "params.event", 0, 100, false), Gw(e2.label, "params.label", 0, 100, false), Bw(e2.value, "params.value", Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, false), true;
      }
      (uD = {}).FREE = "free", uD.UPLOADING = "uploading", function(e2) {
        e2[e2.MISC = 0] = "MISC", e2[e2.INTERNAL_EVENT = 1] = "INTERNAL_EVENT", e2[e2.PUBLIC_EVENT = 2] = "PUBLIC_EVENT", e2[e2.WEB_EVENT = 3] = "WEB_EVENT", e2[e2.INTERNAL_API = 4] = "INTERNAL_API", e2[e2.WEB_API = 5] = "WEB_API", e2[e2.PUBLIC_API = 6] = "PUBLIC_API";
      }({});
      const pD = { sid: "", lts: 0, success: null, cname: null, uid: null, peer: null, cid: null, elapse: null, extend: null, vid: 0 };
      let _D = function(e2) {
        return e2.PUBLISH = "publish", e2.SUBSCRIBE = "subscribe", e2.WS_COMPRESSOR_INIT = "ws_compressor_init", e2.SESSION_INIT = "session_init", e2.JOIN_CHOOSE_SERVER = "join_choose_server", e2.REQ_USER_ACCOUNT = "req_user_account", e2.JOIN_GATEWAY = "join_gateway", e2.REJOIN_GATEWAY = "rejoin_gateway", e2.STREAM_SWITCH = "stream_switch", e2.REQUEST_PROXY_WORKER_MANAGER = "request_proxy_worker_manager", e2.REQUEST_PROXY_APPCENTER = "request_proxy_appcenter", e2.FIRST_VIDEO_RECEIVED = "first_video_received", e2.FIRST_AUDIO_RECEIVED = "first_audio_received", e2.FIRST_VIDEO_DECODE = "first_video_decode", e2.FIRST_AUDIO_DECODE = "first_audio_decode", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_UPDATE_STREAM = "on_update_stream", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.USER_ANALYTICS = "req_user_analytics", e2.PC_STATS = "pc_stats", e2.UPDATE_REMOTE_RTPCAPABILITIES = "update_remote_rtpCapabilities", e2.AB_TEST = "ab_test", e2;
      }({}), ED = function(e2) {
        return e2.SESSION = "io.agora.pb.Wrtc.Session", e2.JOIN_CHOOSE_SERVER = "io.agora.pb.Wrtc.JoinChooseServer", e2.REQ_USER_ACCOUNT = "io.agora.pb.Wrtc.ReqUserAccount", e2.JOIN_GATEWAY = "io.agora.pb.Wrtc.JoinGateway", e2.RE_JOIN_GATEWAY = "io.agora.pb.Wrtc.ReJoinGateway", e2.PUBLISH = "io.agora.pb.Wrtc.Publish", e2.SUBSCRIBE = "io.agora.pb.Wrtc.Subscribe", e2.WS_COMPRESSOR_INIT = "io.agora.pb.Wrtc.WsCompressorInit", e2.STREAM_SWITCH = "io.agora.pb.Wrtc.StreamSwitch", e2.AUDIO_SENDING_STOPPED = "io.agora.pb.Wrtc.AudioSendingStopped", e2.VIDEO_SENDING_STOPPED = "io.agora.pb.Wrtc.VideoSendingStopped", e2.REQUEST_PROXY_APPCENTER = "io.agora.pb.Wrtc.RequestProxyAppCenter", e2.REQUEST_PROXY_WORKER_MANAGER = "io.agora.pb.Wrtc.RequestProxyWorkerManager", e2.API_INVOKE = "io.agora.pb.Wrtc.ApiInvoke", e2.FIRST_VIDEO_RECEIVED = "io.agora.pb.Wrtc.FirstVideoReceived", e2.FIRST_AUDIO_RECEIVED = "io.agora.pb.Wrtc.FirstAudioReceived", e2.FIRST_VIDEO_DECODE = "io.agora.pb.Wrtc.FirstVideoDecode", e2.FIRST_AUDIO_DECODE = "io.agora.pb.Wrtc.FirstAudioDecode", e2.ON_ADD_AUDIO_STREAM = "io.agora.pb.Wrtc.OnAddAudioStream", e2.ON_ADD_VIDEO_STREAM = "io.agora.pb.Wrtc.OnAddVideoStream", e2.ON_UPDATE_STREAM = "io.agora.pb.Wrtc.OnUpdateStream", e2.ON_REMOVE_STREAM = "io.agora.pb.Wrtc.OnRemoveStream", e2.JOIN_CHANNEL_TIMEOUT = "io.agora.pb.Wrtc.JoinChannelTimeout", e2.PEER_PUBLISH_STATUS = "io.agora.pb.Wrtc.PeerPublishStatus", e2.WORKER_EVENT = "io.agora.pb.Wrtc.WorkerEvent", e2.AP_WORKER_EVENT = "io.agora.pb.Wrtc.APWorkerEvent", e2.JOIN_WEB_PROXY_AP = "io.agora.pb.Wrtc.JoinWebProxyAP", e2.WEBSOCKET_QUIT = "io.agora.pb.Wrtc.WebSocketQuit", e2.USER_ANALYTICS = "io.agora.pb.Wrtc.UserAnalytics", e2.AUTOPLAY_FAILED = "io.agora.pb.Wrtc.AutoplayFailed", e2.PC_STATS = "io.agora.pb.Wrtc.PCStats", e2.UPDATE_REMOTE_RTPCAPABILITIES = "io.agora.pb.Wrtc.UpdateRemoteRTPCapabilities", e2.AB_TEST = "io.agora.pb.Wrtc.ABTest", e2;
      }({});
      !function(e2) {
        e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT";
      }({});
      let mD = function(e2) {
        return e2[e2.SESSION = 26] = "SESSION", e2[e2.JOIN_CHOOSE_SERVER = 27] = "JOIN_CHOOSE_SERVER", e2[e2.REQ_USER_ACCOUNT = 196] = "REQ_USER_ACCOUNT", e2[e2.JOIN_GATEWAY = 28] = "JOIN_GATEWAY", e2[e2.PUBLISH = 30] = "PUBLISH", e2[e2.SUBSCRIBE = 29] = "SUBSCRIBE", e2[e2.WS_COMPRESSOR_INIT = 9430] = "WS_COMPRESSOR_INIT", e2[e2.STREAM_SWITCH = 32] = "STREAM_SWITCH", e2[e2.AUDIO_SENDING_STOPPED = 33] = "AUDIO_SENDING_STOPPED", e2[e2.VIDEO_SENDING_STOPPED = 34] = "VIDEO_SENDING_STOPPED", e2[e2.REQUEST_PROXY_APPCENTER = 35] = "REQUEST_PROXY_APPCENTER", e2[e2.REQUEST_PROXY_WORKER_MANAGER = 36] = "REQUEST_PROXY_WORKER_MANAGER", e2[e2.API_INVOKE = 41] = "API_INVOKE", e2[e2.FIRST_VIDEO_RECEIVED = 348] = "FIRST_VIDEO_RECEIVED", e2[e2.FIRST_AUDIO_RECEIVED = 349] = "FIRST_AUDIO_RECEIVED", e2[e2.FIRST_VIDEO_DECODE = 350] = "FIRST_VIDEO_DECODE", e2[e2.FIRST_AUDIO_DECODE = 351] = "FIRST_AUDIO_DECODE", e2[e2.ON_ADD_AUDIO_STREAM = 352] = "ON_ADD_AUDIO_STREAM", e2[e2.ON_ADD_VIDEO_STREAM = 353] = "ON_ADD_VIDEO_STREAM", e2[e2.ON_UPDATE_STREAM = 356] = "ON_UPDATE_STREAM", e2[e2.ON_REMOVE_STREAM = 355] = "ON_REMOVE_STREAM", e2[e2.JOIN_CHANNEL_TIMEOUT = 407] = "JOIN_CHANNEL_TIMEOUT", e2[e2.PEER_PUBLISH_STATUS = 408] = "PEER_PUBLISH_STATUS", e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT", e2[e2.JOIN_WEB_PROXY_AP = 700] = "JOIN_WEB_PROXY_AP", e2[e2.WEBSOCKET_QUIT = 671] = "WEBSOCKET_QUIT", e2[e2.USER_ANALYTICS = 1e4] = "USER_ANALYTICS", e2[e2.AUTOPLAY_FAILED = 9178] = "AUTOPLAY_FAILED", e2;
      }({});
      function fD() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return function(t2, i2, n2) {
          const r2 = n2.value;
          if ("function" == typeof r2) {
            const o2 = e2.className || t2.__className__ || ("AgoraRTCClient" === t2.constructor.name ? "Client" : t2.constructor.name);
            n2.value = function() {
              for (var t3, n3 = arguments.length, s2 = new Array(n3), a2 = 0; a2 < n3; a2++) s2[a2] = arguments[a2];
              let c2 = s2;
              if (e2.argsMap) try {
                c2 = e2.argsMap(this, ...s2);
              } catch (e3) {
                lD.warning(e3), c2 = [];
              }
              try {
                JSON.stringify(c2);
              } catch (e3) {
                lD.warning("arguments for method ".concat(o2, ".").concat(String(i2), " not serializable for apiInvoke.")), c2 = [];
              }
              const d2 = (e2.report || TD).reportApiInvoke(this._sessionId || null, { id: this._clientId || (null === (t3 = this.store) || void 0 === t3 ? void 0 : t3.clientId) || this._ID, name: "".concat(o2, ".").concat(String(i2)), options: c2, tag: iO.TRACER, reportResult: e2.reportResult }, e2.throttleTime);
              try {
                const t4 = r2.apply(this, s2);
                return t4 instanceof np ? t4.then((t5) => (d2.onSuccess(e2.reportResult && t5), t5)).catch((e3) => {
                  throw d2.onError(e3), e3;
                }) : (d2.onSuccess(e2.reportResult && t4), t4);
              } catch (e3) {
                throw d2.onError(e3), e3;
              }
            };
          }
          return n2;
        };
      }
      const TD = new class {
        constructor() {
          eD(this, "baseInfoMap", /* @__PURE__ */ new Map()), eD(this, "proxyServer", void 0), eD(this, "eventUploadTimer", void 0), eD(this, "setSessionIdTimer", void 0), eD(this, "url", void 0), eD(this, "sids", /* @__PURE__ */ new Set()), eD(this, "backupUrl", void 0), eD(this, "_appId", void 0), eD(this, "_aid", 0), eD(this, "keyEventUploadPendingItems", []), eD(this, "normalEventUploadPendingItems", []), eD(this, "apiInvokeUploadPendingItems", []), eD(this, "apiInvokeCount", 0), eD(this, "apiInvokeLoggedCount", 0), eD(this, "ltsList", []), eD(this, "lastSendNormalEventTime", Date.now()), eD(this, "customReportCounterTimer", void 0), eD(this, "customReportCount", 0), eD(this, "extApiInvoke", async (e2) => {
            for (const t2 of e2) {
              const e3 = iD(iD({}, t2), {}, { sid: null, invokeId: ++this.apiInvokeCount, tag: iO.TRACER });
              this.sendApiInvoke(e3);
            }
          }), this.eventUploadTimer = window.setInterval(this.doSend.bind(this), MN("EVENT_REPORT_SEND_INTERVAL")), this.setSessionIdTimer = window.setInterval(this.appendSessionId.bind(this), MN("EVENT_REPORT_SEND_INTERVAL"));
        }
        getBaseInfoBySessionId(e2) {
          return this.baseInfoMap.get(e2);
        }
        setAppId(e2) {
          this._appId = e2, this._aid = parseInt(e2.replace(/[a-fA-F0-9]{8}/g, (e3) => {
            let [t2, i2] = e3;
            return t2 + i2;
          }), 16) || 0;
        }
        reportApiInvoke(e2, t2, i2) {
          t2.timeout = t2.timeout || 6e4, t2.reportResult = void 0 === t2.reportResult || t2.reportResult;
          const n2 = Date.now();
          this.apiInvokeCount += 1;
          const r2 = this.apiInvokeCount, o2 = !!MN("SHOW_REPORT_INVOKER_LOG"), s2 = !!MN("SHOW_REPORT_USER_INVOKER_LOG"), a2 = o2 || s2 && t2.id;
          a2 && (this.apiInvokeLoggedCount += 1);
          const c2 = this.apiInvokeLoggedCount;
          function d2(e3, i3) {
            if (a2) {
              let n3 = "[apiInvoke-".concat(c2, "]");
              t2.id && (n3 += "[".concat(t2.id, "]")), t2.name && (n3 += "[".concat(t2.name, "]")), lD.info("".concat(n3, " ").concat(e3), "start" === e3 ? t2.options : i3 || "");
            }
          }
          const l2 = () => ({ tag: t2.tag, invokeId: r2, sid: e2, name: t2.name, apiInvokeTime: n2, options: t2.options, states: t2.states || null });
          d2("start");
          let u2 = false;
          PO(t2.timeout).then(() => {
            u2 || (this.sendApiInvoke(iD(iD({}, l2()), {}, { error: Uw.API_INVOKE_TIMEOUT, success: false })), d2("timeout"));
          });
          const h2 = new xw(Uw.UNEXPECTED_ERROR, "".concat(t2.name, ": this api invoke is end"));
          return { onSuccess: (e3) => {
            const n3 = () => {
              if (u2) throw h2;
              return u2 = true, this.sendApiInvoke(iD(iD({}, l2()), {}, { success: true }, t2.reportResult && { result: e3 })), d2("onSuccess"), e3;
            };
            return i2 ? xO(n3, t2.name + "Success", i2, () => u2 = true) : n3();
          }, onError: (e3) => {
            const n3 = () => {
              if (u2) throw e3;
              u2 = true, this.sendApiInvoke(iD(iD({}, l2()), {}, { success: false, error: e3 })), d2("onFailure", e3.toString());
            };
            return i2 ? xO(n3, t2.name + "Error", i2, () => u2 = true) : n3();
          } };
        }
        sessionInit(e2, t2) {
          if (this.baseInfoMap.has(e2)) return;
          const i2 = Date.now(), n2 = this.createBaseInfo(e2, i2);
          n2.cname = t2.cname;
          const r2 = Object.assign({}, { willUploadConsoleLog: MN("UPLOAD_LOG"), maxTouchPoints: navigator.maxTouchPoints, areaVersion: AN ? "global" : "oversea", areas: MN("AREAS") && MN("AREAS").join(",") }, t2.extend), { stringUid: o2, channelProfile: s2, channelMode: a2, isABTestSuccess: c2, lsid: d2, clientRole: l2 } = t2, u2 = Date.now(), h2 = iD(iD({}, n2), {}, { eventType: _D.SESSION_INIT, appid: t2.appid, browser: navigator.userAgent, buildFormat: t2.buildFormat, build: DN, lts: u2, elapse: u2 - i2, extend: JSON.stringify(r2), mode: t2.mode, process: MN("PROCESS_ID"), appType: MN("APP_TYPE"), success: true, version: yN, stringUid: o2, channelProfile: s2, channelMode: a2, isABTestSuccess: c2, lsid: d2, clientType: kn(p2 = window.navigator.userAgent).call(p2, "AgoraWebView") ? 42 : 20, clientRole: l2, serviceId: MN("PROCESS_ID"), extensionID: MN("PLUGIN_INFO").join(",") || "" });
          var p2;
          this.send({ type: ED.SESSION, data: h2 }, true);
        }
        joinChooseServer(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { role: t2.role, eventType: _D.JOIN_CHOOSE_SERVER, lts: r2, eventElapse: t2.elapse || r2 - t2.lts, chooseServerAddr: t2.csAddr, errorCode: t2.ec, elapse: r2 - i2.startTime, success: t2.succ, chooseServerAddrList: JSON.stringify(t2.serverList), uid: t2.uid ? parseInt(t2.uid) : null, cid: t2.cid ? parseInt(t2.cid) : null, chooseServerIp: t2.csIp || "", opid: t2.opid, unilbsServerIds: t2.unilbsServerIds, extend: t2.extend || void 0, isHttp3: t2.isHttp3, corssRegionTagReq: t2.corssRegionTagReq || void 0, corssRegionTagRes: t2.corssRegionTagRes || void 0 });
          this.send({ type: ED.JOIN_CHOOSE_SERVER, data: o2 }, true);
        }
        reqUserAccount(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { eventType: _D.REQ_USER_ACCOUNT, lts: r2, success: t2.success, serverAddress: t2.serverAddr, stringUid: t2.stringUid, uid: t2.uid, errorCode: t2.errorCode, elapse: t2.elapse || r2 - i2.startTime, eventElapse: r2 - t2.lts, extend: JSON.stringify(t2.extend) });
          this.send({ type: ED.REQ_USER_ACCOUNT, data: o2 }, true);
        }
        joinGateway(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info;
          t2.vid && (n2.vid = t2.vid), n2.uid = t2.uid, n2.cid = t2.cid;
          const r2 = Date.now(), { firstSuccess: o2, avoidJoinStartTime: s2, addr: a2, isProxy: c2 } = t2, d2 = r2 - (o2 && s2 ? s2 : i2.startTime), l2 = iD(iD({}, n2), {}, { eventType: _D.JOIN_GATEWAY, lts: r2, gatewayAddr: t2.addr, success: t2.succ, errorCode: t2.ec, errorMsg: t2.errorMsg || "", elapse: d2, eventElapse: r2 - t2.lts, firstSuccess: o2, signalChannel: t2.signalChannel, preload: t2.preload ? 1 : 0, installId: IN(), isABTestSuccess: t2.isABTestSuccess ? 1 : 0 }), u2 = l2.success ? 1 : 0;
          if (t2.succ && (i2.lastJoinSuccessTime = r2), o2) this.send({ type: ED.JOIN_GATEWAY, data: l2 }, true);
          else {
            let e3;
            if (a2) if (c2) {
              const t4 = a2.match(/h=(\d{1,3}-){3}\d{1,3}/g), i3 = a2.match(/p=[0-9]{1,6}/g);
              e3 = { isSuccess: u2, gatewayIp: t4 && t4.length ? t4[0].split("=")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split("=")[1] : "", isProxy: c2 ? 1 : 0 };
            } else {
              const t4 = a2.match(/wss:\/\/(\d{1,3}-){3}\d{1,3}/g), i3 = a2.match(/(:|p=)[0-9]{1,6}/g);
              e3 = { isSuccess: u2, gatewayIp: t4 && t4.length ? t4[0].split("//")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split(/:|p=/g)[1] : "", isProxy: c2 ? 1 : 0 };
            }
            else e3 = { isSuccess: u2, gatewayIp: "", port: "", isProxy: c2 ? 1 : 0 };
            delete l2.success, delete l2.eventType, delete l2.firstSuccess, l2.vid = Number(l2.vid);
            const t3 = Object.assign({}, l2, e3, { eventType: _D.REJOIN_GATEWAY });
            this.send({ type: ED.RE_JOIN_GATEWAY, data: t3 }, true);
          }
        }
        joinChannelTimeout(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = Date.now(), r2 = iD(iD({}, i2.info), {}, { lts: n2, timeout: t2, elapse: n2 - i2.startTime });
          this.send({ type: ED.JOIN_CHANNEL_TIMEOUT, data: r2 }, true);
        }
        publish(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { eventType: _D.PUBLISH, lts: r2, eventElapse: t2.eventElapse, elapse: r2 - i2.startTime, success: t2.succ, errorCode: t2.ec, videoName: t2.videoName, audioName: t2.audioName, screenName: t2.screenName, screenshare: t2.screenshare, audio: t2.audio, video: t2.video, p2pid: t2.p2pid, publishRequestid: t2.publishRequestid });
          this.send({ type: ED.PUBLISH, data: o2 }, true);
        }
        subscribe(e2, t2, i2) {
          const n2 = this.baseInfoMap.get(e2);
          if (!n2) return;
          const r2 = n2.info, o2 = Date.now(), s2 = iD(iD({}, r2), {}, { eventType: _D.SUBSCRIBE, lts: o2, eventElapse: t2.eventElapse, elapse: o2 - n2.startTime, success: t2.succ, errorCode: t2.ec, video: t2.video, audio: t2.audio, subscribeRequestid: t2.subscribeRequestid, p2pid: t2.p2pid, preSsrc: t2.preSsrc ? 1 : 0 }, i2 && { extend: JSON.stringify({ isMassSubscribe: true }) });
          "string" == typeof t2.peerid ? s2.peerSuid = t2.peerid : s2.peer = t2.peerid, this.send({ type: ED.SUBSCRIBE, data: s2 }, true);
        }
        wsCompressorInit(e2) {
          var t2;
          const i2 = [...$N(t2 = this.baseInfoMap).call(t2)], n2 = i2.length ? i2[0] : "UnableToGetSid", r2 = this.baseInfoMap.get(n2);
          if (!r2) return;
          const o2 = r2.info, s2 = Date.now(), a2 = iD(iD({}, o2), {}, { eventType: _D.WS_COMPRESSOR_INIT, lts: s2, eventElapse: e2.eventElapse, elapse: s2 - r2.startTime, status: e2.status ? 1 : 2 });
          this.send({ type: ED.WS_COMPRESSOR_INIT, data: a2 }, true);
        }
        firstRemoteVideoDecode(e2, t2, i2, n2) {
          const r2 = this.baseInfoMap.get(e2);
          if (!r2) return;
          const o2 = r2.info, s2 = Date.now(), a2 = iD(iD(iD({}, o2), n2), {}, { elapse: s2 - r2.startTime, eventType: t2, lts: s2, firstDecodeFrame: Math.max((n2.firstFrame || s2) - r2.startTime, 0), apEnd: Math.max(n2.apEnd - r2.startTime, 0), apStart: Math.max(n2.apStart - r2.startTime, 0), joinGwEnd: Math.max(n2.joinGwEnd - r2.startTime, 0), joinGwStart: Math.max(n2.joinGwStart - r2.startTime, 0), pcEnd: Math.max(n2.pcEnd - r2.startTime, 0), pcStart: Math.max(n2.pcStart - r2.startTime, 0), subscriberEnd: Math.max(n2.subscriberEnd - r2.startTime, 0), subscriberStart: Math.max(n2.subscriberStart - r2.startTime, 0), videoAddNotify: Math.max(n2.videoAddNotify - r2.startTime, 0) });
          this.send({ type: i2, data: a2 }, true);
        }
        firstRemoteFrame(e2, t2, i2, n2) {
          const r2 = this.baseInfoMap.get(e2);
          if (!r2) return;
          const o2 = r2.info, s2 = Date.now(), a2 = iD(iD(iD({}, o2), n2), {}, { elapse: s2 - r2.startTime, eventType: t2, lts: s2 });
          this.send({ type: i2, data: a2 }, true);
        }
        abTest(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { vid: void 0 === n2.vid ? 0 : Number(n2.vid), elapse: r2 - i2.startTime, eventType: _D.AB_TEST, lts: r2 });
          this.send({ type: ED.AB_TEST, data: o2 }, true);
        }
        pcStats(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { vid: void 0 === n2.vid ? 0 : Number(n2.vid), elapse: r2 - i2.startTime, eventType: _D.PC_STATS, lts: r2, preallocation: t2.preallocation ? 1 : 0 });
          this.send({ type: ED.PC_STATS, data: o2 }, true);
        }
        updateRemoteRTPCapabilities(e2, t2) {
          if (e2) {
            const i2 = this.baseInfoMap.get(e2);
            if (!i2) return;
            const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { vid: void 0 === n2.vid ? 0 : Number(n2.vid), eventType: _D.UPDATE_REMOTE_RTPCAPABILITIES, lts: r2 });
            this.send({ type: ED.UPDATE_REMOTE_RTPCAPABILITIES, data: o2 }, true);
          }
        }
        onGatewayStream(e2, t2, i2, n2) {
          const r2 = this.baseInfoMap.get(e2);
          if (!r2) return;
          const o2 = r2.info, s2 = Date.now(), a2 = iD(iD(iD({}, o2), n2), {}, { eventType: t2, lts: s2 });
          this.send({ type: i2, data: a2 }, true);
        }
        streamSwitch(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { eventType: _D.STREAM_SWITCH, lts: r2, isDual: t2.isdual, elapse: r2 - i2.startTime, success: t2.succ });
          this.send({ type: ED.STREAM_SWITCH, data: o2 }, true);
        }
        requestProxyAppCenter(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { eventType: _D.REQUEST_PROXY_APPCENTER, lts: r2, eventElapse: r2 - t2.lts, elapse: r2 - i2.startTime, APAddr: t2.APAddr, workerManagerList: t2.workerManagerList, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: ED.REQUEST_PROXY_APPCENTER, data: o2 }, true);
        }
        requestProxyWorkerManager(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { eventType: _D.REQUEST_PROXY_WORKER_MANAGER, lts: r2, eventElapse: r2 - t2.lts, elapse: r2 - i2.startTime, workerManagerAddr: t2.workerManagerAddr, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: ED.REQUEST_PROXY_WORKER_MANAGER, data: o2 }, true);
        }
        setProxyServer(e2) {
          this.proxyServer = e2, e2 ? lD.debug("reportProxyServerurl: ".concat(e2)) : lD.debug("disable reportProxyServerurl: ".concat(e2));
        }
        peerPublishStatus(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD({}, n2), {}, { subscribeElapse: t2.subscribeElapse, peer: t2.peer, peerPublishDuration: Math.max(t2.audioPublishDuration, t2.videoPublishDuration), audiotag: t2.audioPublishDuration > 0 ? 1 : -1, videotag: t2.videoPublishDuration > 0 ? 1 : -1, lts: r2, elapse: r2 - i2.startTime, joinChannelSuccessElapse: r2 - (i2.lastJoinSuccessTime || r2), peerPublishDurationVideo: t2.videoPublishDuration, peerPublishDurationAudio: t2.audioPublishDuration });
          this.send({ type: ED.PEER_PUBLISH_STATUS, data: o2 }, true);
        }
        workerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now();
          (function(e3, t3, i3) {
            const n3 = e3[t3];
            if (!n3 || "string" != typeof n3) return [e3];
            e3[t3] = "";
            const r3 = OO(JSON.stringify(e3));
            let o2 = 0;
            const s2 = [];
            let a2 = 0;
            for (let c2 = 0; c2 < n3.length; c2++) a2 += n3.charCodeAt(c2) <= 127 ? 1 : 3, a2 <= i3 - r3 || (s2[s2.length] = Mw(Mw({}, e3), {}, { [t3]: n3.substring(o2, c2) }), o2 = c2, a2 = n3.charCodeAt(c2) <= 127 ? 1 : 3);
            return o2 !== n3.length - 1 && (s2[s2.length] = Mw(Mw({}, e3), {}, { [t3]: n3.substring(o2) })), s2;
          })(iD(iD(iD({}, n2), t2), {}, { elapse: r2 - i2.startTime, lts: r2, productType: "WebRTC" }), "payload", 1300).forEach((e3) => this.send({ type: ED.WORKER_EVENT, data: e3 }, true));
        }
        apworkerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { elapse: r2 - i2.startTime, lts: r2 });
          this.send({ type: ED.AP_WORKER_EVENT, data: o2 }, true);
        }
        joinWebProxyAP(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { elapse: r2 - i2.startTime, lts: r2, extend: t2.extend || void 0 });
          this.send({ type: ED.JOIN_WEB_PROXY_AP, data: o2 }, true);
        }
        WebSocketQuit(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2) return;
          const n2 = i2.info, r2 = Date.now(), o2 = iD(iD(iD({}, n2), t2), {}, { elapse: r2 - i2.startTime, lts: r2 });
          this.send({ type: ED.WEBSOCKET_QUIT, data: o2 }, true);
        }
        async sendCustomReportMessage(e2, t2) {
          if (this.customReportCount += t2.length, this.customReportCount > MN("CUSTOM_REPORT_LIMIT")) throw new xw(Uw.CUSTOM_REPORT_FREQUENCY_TOO_HIGH);
          this.customReportCounterTimer || (this.customReportCounterTimer = window.setInterval(() => {
            this.customReportCount = 0;
          }, 5e3));
          const i2 = Date.now(), n2 = t2.map((t3) => ({ type: ED.USER_ANALYTICS, data: iD(iD({ sid: e2 }, t3), {}, { lts: i2 }) }));
          try {
            MN("NEW_REPORT_SERVER") ? await this.postDataToStatsCollector2(n2) : await this.postDataToStatsCollector(n2);
          } catch (e3) {
            throw lD.error("send custom report message failed", e3.toString()), new xw(Uw.CUSTOM_REPORT_SEND_FAILED, e3.message);
          }
        }
        sendApiInvoke(e2) {
          const t2 = MN("NOT_REPORT_EVENT");
          if (e2.tag && kn(t2) && kn(t2).call(t2, e2.tag)) return false;
          if (null === e2.sid) return this.apiInvokeUploadPendingItems.push(e2), false;
          const i2 = this.baseInfoMap.get(e2.sid);
          if (!i2) return this.apiInvokeUploadPendingItems.push(e2), false;
          const { cname: n2, uid: r2, cid: o2 } = i2.info;
          let s2;
          if (e2.lts = e2.lts || Date.now(), e2.error) if (e2.error instanceof xw) {
            const { code: t3, message: i3 } = e2.error;
            s2 = t3 || i3 || e2.error.toString();
          } else s2 = e2.error.toString();
          const a2 = { invokeId: e2.invokeId, sid: e2.sid, cname: n2, cid: o2, uid: r2, lts: e2.lts, success: e2.success, elapse: e2.lts - i2.startTime, execElapse: e2.lts - e2.apiInvokeTime, apiName: e2.name, options: e2.options ? JSON.stringify(e2.options) : void 0, execStates: e2.states ? JSON.stringify(e2.states) : void 0, execResult: e2.result ? JSON.stringify(e2.result) : void 0, errorCode: e2.error ? s2 : void 0, errorMsg: e2.error ? JSON.stringify(e2.error) : void 0 };
          return this.send({ type: ED.API_INVOKE, data: a2 }, false), true;
        }
        addSid(e2) {
          this.sids.add(e2);
        }
        removeSid(e2) {
          this.sids.delete(e2);
        }
        appendSessionId() {
          const e2 = this.apiInvokeUploadPendingItems;
          if (0 === e2.length) return;
          const t2 = Array.from(this.sids).find((e3) => null !== e3);
          t2 && e2.forEach((e3) => {
            e3 && (e3.sid = t2, this.sendApiInvoke(Object.assign({}, e3)));
          }), e2.length = 0;
        }
        send(e2, t2) {
          if (t2) return this.keyEventUploadPendingItems.push(e2), void this.sendItems(this.keyEventUploadPendingItems, true);
          this.normalEventUploadPendingItems.push(e2), this.normalEventUploadPendingItems.length > MN("NORMAL_EVENT_QUEUE_CAPACITY") && this.normalEventUploadPendingItems.splice(0, 1), this.normalEventUploadPendingItems.length >= 10 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        doSend() {
          this.keyEventUploadPendingItems.length > 0 && this.sendItems(this.keyEventUploadPendingItems, true), this.normalEventUploadPendingItems.length > 0 && Date.now() - this.lastSendNormalEventTime >= 5e3 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        sendItems(e2, t2) {
          const i2 = [], n2 = [];
          for (; e2.length; ) {
            const t3 = e2.shift();
            i2.length < 20 ? i2.push(t3) : n2.push(t3);
          }
          e2.push(...n2);
          for (const e3 of [...i2]) {
            var r2;
            -1 !== this.ltsList.indexOf(e3.data.lts) ? (e3.data.lts = this.ltsList[this.ltsList.length - 1] + 1, this.ltsList.push(e3.data.lts)) : (this.ltsList.push(e3.data.lts), qS(r2 = this.ltsList).call(r2, (e4, t3) => e4 - t3));
          }
          return t2 || (this.lastSendNormalEventTime = Date.now()), MN("ENABLE_EVENT_REPORT") ? (i2.length && (MN("NEW_REPORT_SERVER") ? this.postDataToStatsCollector2(i2) : this.postDataToStatsCollector(i2)).catch(/* @__PURE__ */ ((e3) => (i3) => {
            MN("EVENT_REPORT_RETRY") && (t2 ? this.keyEventUploadPendingItems = this.keyEventUploadPendingItems.concat(e3) : (this.normalEventUploadPendingItems = this.normalEventUploadPendingItems.concat(e3), this.normalEventUploadPendingItems.length > MN("NORMAL_EVENT_QUEUE_CAPACITY") && (this.normalEventUploadPendingItems.splice(0, this.normalEventUploadPendingItems.length - MN("NORMAL_EVENT_QUEUE_CAPACITY")), lD.warning("report: drop normal events"))));
          })(i2)), e2) : e2;
        }
        async postDataToStatsCollector2(e2) {
          fO.networkState === uO.OFFLINE && await np.race([fO.onlineWaiter, PO(2 * qO.maxRetryTimeout)]);
          const t2 = (e3) => {
            let t3 = new Uint8Array();
            return e3.forEach((e4) => {
              const i3 = Jw(JSON.stringify(e4.data)), n3 = new ArrayBuffer(5), r2 = ((e5) => {
                let t4 = 0;
                return Object.entries(ED).forEach((i4) => {
                  let [n4, r3] = i4;
                  r3 === e5.type && (t4 = mD[n4]);
                }), t4;
              })(e4), o2 = new DataView(n3);
              o2.setUint16(0, i3.byteLength, true), o2.setUint8(2, 255 & r2), o2.setUint8(3, r2 >>> 8 & 255), o2.setUint8(4, r2 >>> 16 & 255), t3 = Xw(t3, new Uint8Array(n3)), t3 = Xw(t3, i3);
            }), t3;
          }, i2 = "event";
          let n2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(MN("NEW_REPORT_SERVER_DOMAINS")[0], "&p=443&d=").concat(i2) : "https://".concat(MN("NEW_REPORT_SERVER_DOMAINS")[0], "/").concat(i2);
          for (let r2 = 0; r2 < 2; r2 += 1) {
            1 === r2 && (n2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(MN("NEW_REPORT_SERVER_DOMAINS")[1], "&p=443&d=").concat(i2) : "https://".concat(MN("NEW_REPORT_SERVER_DOMAINS")[1], "/").concat(i2));
            try {
              await eN(n2, { timeout: 1e4, data: t2(e2), headers: iD(iD({ biz: "webrtc", sendts: Math.round(Date.now() / 1e3), debug: "false" }, this._appId && { appid: this._appId }), {}, { "Content-Type": "application/octet-stream" }) }, true);
            } catch (e3) {
              if (1 === r2) throw e3;
              continue;
            }
            return;
          }
        }
        async postDataToStatsCollector(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          const i2 = ((e3) => {
            const t3 = e3 && e3.data.sid && this.baseInfoMap.get(e3.data.sid);
            return t3 && t3.info.vid && +t3.info.vid || 0;
          })(e2[0]), n2 = i2 ? void 0 : this._aid, r2 = { msgType: "EventMessages", sentTs: Math.round(Date.now() / 1e3), payloads: e2.map((e3) => JSON.stringify(e3)), vid: i2, aid: n2 };
          fO.networkState === uO.OFFLINE && await np.race([fO.onlineWaiter, PO(2 * qO.maxRetryTimeout)]);
          const o2 = t2 ? "/events/proto-raws" : "/events/messages";
          let s2 = this.url || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(MN("EVENT_REPORT_DOMAIN"), "&p=").concat(MN("STATS_COLLECTOR_PORT"), "&d=").concat(o2) : "https://".concat(MN("EVENT_REPORT_DOMAIN"), ":").concat(MN("STATS_COLLECTOR_PORT")).concat(o2));
          for (let e3 = 0; e3 < 2; e3 += 1) {
            1 === e3 && (s2 = this.backupUrl || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(MN("EVENT_REPORT_BACKUP_DOMAIN"), "&p=").concat(MN("STATS_COLLECTOR_PORT"), "&d=").concat(o2) : "https://".concat(MN("EVENT_REPORT_BACKUP_DOMAIN"), ":").concat(MN("STATS_COLLECTOR_PORT")).concat(o2)));
            try {
              t2 ? await tN(s2, { timeout: 1e4, data: r2 }) : await eN(s2, { timeout: 1e4, data: r2 });
            } catch (t3) {
              if (1 === e3) throw t3;
              continue;
            }
            return;
          }
        }
        createBaseInfo(e2, t2) {
          const i2 = Object.assign({}, pD);
          return i2.sid = e2, this.baseInfoMap.set(e2, { info: i2, startTime: t2 }), i2;
        }
        reportResourceTiming(e2, t2) {
          const i2 = performance.getEntriesByName(e2), n2 = i2[i2.length - 1];
          n2 && this.reportApiInvoke(t2, { name: "Client.resourceTiming", options: n2, tag: iO.TRACER }).onSuccess();
        }
      }();
      nD.on("REPORT_LOG_UPLOAD", (e2) => {
        e2.networkState = fO.networkState, TD.reportApiInvoke(null, { name: "logUploadError", options: e2, tag: iO.TRACER }).onSuccess("logUploadError");
      });
      class SD extends xw {
        constructor(e2) {
          super(e2, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", arguments.length > 2 ? arguments[2] : void 0), eD(this, "name", "AgoraRTCException");
        }
        print() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "error";
          return super.print(e2, lD);
        }
        throw() {
          super.throw(lD);
        }
      }
      const gD = { getDisplayMedia: false, getStreamFromExtension: false, supportUnifiedPlan: false, supportMinBitrate: false, supportSetRtpSenderParameters: false, supportDualStream: true, webAudioMediaStreamDest: false, supportReplaceTrack: false, supportWebGL: false, webAudioWithAEC: false, supportRequestFrame: false, supportShareAudio: false, supportDualStreamEncoding: false, supportDataChannel: false, supportPCSetConfiguration: false, supportWebRTCEncodedTransform: false, supportWebRTCInsertableStream: false, supportRequestVideoFrameCallback: false, supportWebCrypto: false };
      function RD() {
        return gD;
      }
      function vD() {
        return "setSinkId" in HTMLAudioElement.prototype && (!MN("RESTRICTION_SET_PLAYBACK_DEVICE") || (dw() || uw()) && !Ow());
      }
      function CD() {
        return !gD.supportUnifiedPlan || MN("CHROME_FORCE_PLAN_B") && Nw();
      }
      let ID = function(e2) {
        return e2.IOS_15_16_INTERRUPTION_START = "ios15_16-interruption-start", e2.IOS_15_16_INTERRUPTION_END = "ios15_16-interruption-end", e2.IOS_INTERRUPTION_START = "ios-interruption-start", e2.IOS_INTERRUPTION_END = "ios-interruption-end", e2.STATE_CHANGE = "state-change", e2;
      }({});
      function yD(e2, t2, i2) {
        return { sampleRate: e2, stereo: t2, bitrate: i2 };
      }
      function AD(e2, t2, i2, n2, r2) {
        return { width: e2, height: t2, frameRate: i2, bitrateMin: n2, bitrateMax: r2 };
      }
      function bD(e2, t2, i2, n2, r2) {
        return { width: { max: e2 }, height: { max: t2 }, frameRate: i2, bitrateMin: n2, bitrateMax: r2 };
      }
      function wD(e2, t2) {
        return { numSpatialLayers: e2, numTemporalLayers: t2 };
      }
      const OD = { "90p": AD(160, 90), "90p_1": AD(160, 90), "120p": AD(160, 120, 15, 30, 65), "120p_1": AD(160, 120, 15, 30, 65), "120p_3": AD(120, 120, 15, 30, 50), "120p_4": AD(212, 120), "180p": AD(320, 180, 15, 30, 140), "180p_1": AD(320, 180, 15, 30, 140), "180p_3": AD(180, 180, 15, 30, 100), "180p_4": AD(240, 180, 15, 30, 120), "240p": AD(320, 240, 15, 40, 200), "240p_1": AD(320, 240, 15, 40, 200), "240p_3": AD(240, 240, 15, 40, 140), "240p_4": AD(424, 240, 15, 40, 220), "360p": AD(640, 360, 15, 80, 400), "360p_1": AD(640, 360, 15, 80, 400), "360p_3": AD(360, 360, 15, 80, 260), "360p_4": AD(640, 360, 30, 80, 600), "360p_6": AD(360, 360, 30, 80, 400), "360p_7": AD(480, 360, 15, 80, 320), "360p_8": AD(480, 360, 30, 80, 490), "360p_9": AD(640, 360, 15, 80, 800), "360p_10": AD(640, 360, 24, 80, 800), "360p_11": AD(640, 360, 24, 80, 1e3), "480p": AD(640, 480, 15, 100, 500), "480p_1": AD(640, 480, 15, 100, 500), "480p_2": AD(640, 480, 30, 100, 1e3), "480p_3": AD(480, 480, 15, 100, 400), "480p_4": AD(640, 480, 30, 100, 750), "480p_6": AD(480, 480, 30, 100, 600), "480p_8": AD(848, 480, 15, 100, 610), "480p_9": AD(848, 480, 30, 100, 930), "480p_10": AD(640, 480, 10, 100, 400), "720p": AD(1280, 720, 15, 120, 1130), "720p_auto": AD(1280, 720, 30, 900, 3e3), "720p_1": AD(1280, 720, 15, 120, 1130), "720p_2": AD(1280, 720, 30, 120, 2e3), "720p_3": AD(1280, 720, 30, 120, 1710), "720p_5": AD(960, 720, 15, 120, 910), "720p_6": AD(960, 720, 30, 120, 1380), "1080p": AD(1920, 1080, 15, 120, 2080), "1080p_1": AD(1920, 1080, 15, 120, 2080), "1080p_2": AD(1920, 1080, 30, 120, 3e3), "1080p_3": AD(1920, 1080, 30, 120, 3150), "1080p_5": AD(1920, 1080, 60, 120, 4780), "1440p": AD(2560, 1440, 30, 120, 4850), "1440p_1": AD(2560, 1440, 30, 120, 4850), "1440p_2": AD(2560, 1440, 60, 120, 7350), "4k": AD(3840, 2160, 30, 120, 8910), "4k_1": AD(3840, 2160, 30, 120, 8910), "4k_3": AD(3840, 2160, 60, 120, 13500) }, ND = { "480p": bD(640, 480, 5), "480p_1": bD(640, 480, 5), "480p_2": bD(640, 480, 30), "480p_3": bD(640, 480, 15), "720p": bD(1280, 720, 5), "720p_auto": AD(1280, 720, 30, 900, 3e3), "720p_1": bD(1280, 720, 5), "720p_2": bD(1280, 720, 30), "720p_3": bD(1280, 720, 15), "1080p": bD(1920, 1080, 5), "1080p_1": bD(1920, 1080, 5), "1080p_2": bD(1920, 1080, 30), "1080p_3": bD(1920, 1080, 15) }, DD = { "1SL1TL": wD(1, 1), "3SL3TL": wD(3, 3), "2SL3TL": wD(2, 3) };
      function PD(e2) {
        return e2 || (e2 = "480p_1"), "string" == typeof e2 ? Object.assign({}, OD[e2]) : e2;
      }
      function LD(e2) {
        return "string" == typeof e2 ? Object.assign({}, ND[e2]) : e2;
      }
      function kD(e2) {
        return "string" == typeof e2 ? Object.assign({}, DD[e2]) : e2;
      }
      const MD = { speech_low_quality: yD(16e3, false), speech_standard: yD(32e3, false, 18), music_standard: yD(48e3, false), standard_stereo: yD(48e3, true, 56), high_quality: yD(48e3, false, 128), high_quality_stereo: yD(48e3, true, 192) };
      function UD(e2) {
        return "string" == typeof e2 ? Object.assign({}, MD[e2]) : e2;
      }
      const xD = [];
      function VD(e2) {
        return Fw(e2, "mediaSource", ["screen", "window", "application"]), true;
      }
      let FD = function(e2) {
        return e2.NEED_RENEGOTIATE = "@need_renegotiate", e2.NEED_REPLACE_TRACK = "@need_replace_track", e2.NEED_REPLACE_MIXING_TRACK = "@need_replace_mixing_track", e2.NEED_CLOSE = "@need_close", e2.NEED_ENABLE_TRACK = "@need_enable_track", e2.NEED_DISABLE_TRACK = "@need_disable_track", e2.NEED_SESSION_ID = "@need_sid", e2.SET_OPTIMIZATION_MODE = "@set_optimization_mode", e2.GET_STATS = "@get_stats", e2.GET_RTC_STATS = "@get_rtc_stats", e2.GET_LOW_VIDEO_TRACK = "@get_low_video_track", e2.NEED_RESET_REMOTE_SDP = "@need_reset_remote_sdp", e2.NEED_UPDATE_VIDEO_ENCODER = "@need_update_video_encoder", e2.NEED_UPDATE_VIDEO_SEND_PARAMETERS = "@need_update_video_send_parameters", e2.NEED_MUTE_TRACK = "@need_mute_track", e2.NEED_UNMUTE_TRACK = "@need_unmute_track", e2;
      }({}), BD = function(e2) {
        return e2.SCREEN_TRACK = "screen_track", e2.CUSTOM_TRACK = "custome_track", e2.LOW_STREAM = "low_stream", e2.SCREEN_LOW_TRACK = "screen_low_track", e2;
      }({});
      let jD = function(e2) {
        return e2[e2.HIGH_STREAM = 0] = "HIGH_STREAM", e2[e2.LOW_STREAM = 1] = "LOW_STREAM", e2;
      }({}), GD = function(e2) {
        return e2[e2.HIGH_STREAM = 0] = "HIGH_STREAM", e2[e2.LOW_STREAM = 1] = "LOW_STREAM", e2[e2.HIGH_STREAM_LAYER1 = 4] = "HIGH_STREAM_LAYER1", e2[e2.HIGH_STREAM_LAYER2 = 5] = "HIGH_STREAM_LAYER2", e2[e2.HIGH_STREAM_LAYER3 = 6] = "HIGH_STREAM_LAYER3", e2[e2.HIGH_STREAM_LAYER4 = 7] = "HIGH_STREAM_LAYER4", e2[e2.HIGH_STREAM_LAYER5 = 8] = "HIGH_STREAM_LAYER5", e2[e2.HIGH_STREAM_LAYER6 = 9] = "HIGH_STREAM_LAYER6", e2;
      }({}), WD = function(e2) {
        return e2[e2.DISABLE = 0] = "DISABLE", e2[e2.LOW_STREAM = 1] = "LOW_STREAM", e2[e2.AUDIO_ONLY = 2] = "AUDIO_ONLY", e2[e2.HIGH_STREAM_LAYER1 = 3] = "HIGH_STREAM_LAYER1", e2[e2.HIGH_STREAM_LAYER2 = 4] = "HIGH_STREAM_LAYER2", e2[e2.HIGH_STREAM_LAYER3 = 5] = "HIGH_STREAM_LAYER3", e2[e2.HIGH_STREAM_LAYER4 = 6] = "HIGH_STREAM_LAYER4", e2[e2.HIGH_STREAM_LAYER5 = 7] = "HIGH_STREAM_LAYER5", e2[e2.HIGH_STREAM_LAYER6 = 8] = "HIGH_STREAM_LAYER6", e2;
      }({}), HD = function(e2) {
        return e2.TRANSCEIVER_UPDATED = "transceiver-updated", e2.SEI_TO_SEND = "sei-to-send", e2.SEI_RECEIVED = "sei-received", e2.TRACK_UPDATED = "track-updated", e2;
      }({}), KD = function(e2) {
        return e2.SOURCE_STATE_CHANGE = "source-state-change", e2.TRACK_ENDED = "track-ended", e2.BEAUTY_EFFECT_OVERLOAD = "beauty-effect-overload", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status", e2.CLOSED = "closed", e2;
      }({}), YD = function(e2) {
        return e2.FIRST_FRAME_DECODED = "first-frame-decoded", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status", e2.VIDEO_STATE_CHANGED = "video-state-changed", e2;
      }({}), qD = function(e2) {
        return e2.AUDIO = "audio", e2.VIDEO = "video", e2.DATA = "data", e2;
      }({}), zD = function(e2) {
        return e2.AUDIO_SOURCE_STATE_CHANGE = "audio_source_state_change", e2.RECEIVE_TRACK_BUFFER = "receive_track_buffer", e2.ON_AUDIO_BUFFER = "on_audio_buffer", e2.UPDATE_SOURCE = "update_source", e2;
      }({});
      !function(e2) {
        e2.UPDATE_TRACK_SOURCE = "update-track-source";
      }({});
      const JD = { sendVolumeLevel: 0, sendBitrate: 0, sendBytes: 0, sendPackets: 0, sendPacketsLost: 0, sendJitterMs: 0, sendRttMs: 0, currentPacketLossRate: 0 }, XD = { sendBytes: 0, sendBitrate: 0, sendPackets: 0, sendPacketsLost: 0, sendJitterMs: 0, sendRttMs: 0, sendResolutionHeight: 0, sendResolutionWidth: 0, captureResolutionHeight: 0, captureResolutionWidth: 0, targetSendBitrate: 0, totalDuration: 0, totalFreezeTime: 0, currentPacketLossRate: 0 }, QD = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveLevel: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, receivePacketsDiscarded: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 }, ZD = { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 }, $D = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, receiveResolutionHeight: 0, receiveResolutionWidth: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 };
      let eP = function(e2) {
        return e2.ON_TRACK = "on_track", e2.ON_NODE = "on_node", e2;
      }({}), tP = function(e2) {
        return e2.REQUEST_UPDATE_CONSTRAINTS = "request_update_constraints", e2.REQUEST_CONSTRAINTS = "request_constraints", e2;
      }({}), iP = function(e2) {
        return e2.IDLE = "IDLE", e2.INITING = "INITING", e2.INITEND = "INITEND", e2;
      }({}), nP = function(e2) {
        return e2.STATE_CHANGE = "state_change", e2.RECORDING_DEVICE_CHANGED = "recordingDeviceChanged", e2.PLAYOUT_DEVICE_CHANGED = "playoutDeviceChanged", e2.CAMERA_DEVICE_CHANGED = "cameraDeviceChanged", e2;
      }({}), rP = function(e2) {
        return e2.NONE = "none", e2.INIT = "init", e2.CANPLAY = "canplay", e2.PLAYING = "playing", e2.PAUSED = "paused", e2.SUSPEND = "suspend", e2.STALLED = "stalled", e2.WAITING = "waiting", e2.ERROR = "error", e2.DESTROYED = "destroyed", e2.ABORT = "abort", e2.ENDED = "ended", e2.EMPTIED = "emptied", e2.LOADEDDATA = "loadeddata", e2;
      }({}), oP = function(e2) {
        return e2[e2.VideoStateStopped = 0] = "VideoStateStopped", e2[e2.VideoStateStarting = 1] = "VideoStateStarting", e2[e2.VideoStateDecoding = 2] = "VideoStateDecoding", e2[e2.VideoStateFrozen = 3] = "VideoStateFrozen", e2;
      }({});
      const sP = { uninit: 100, none: 110, init: 120, loadeddata: 130, canplay: 200, playing: 210, paused: 220, suspend: 300, stalled: 310, waiting: 320, error: 330, destroyed: 340, abort: 350, ended: 360, emptied: 370 };
      let aP = function(e2) {
        return e2.OPEN = "open", e2.MESSAGE = "message", e2.CLOSE = "close", e2.CLOSING = "closing", e2.ERROR = "error", e2;
      }({});
      function cP(e2, t2, i2, n2, r2) {
        var o2, s2, a2 = {};
        return Object.keys(n2).forEach(function(e3) {
          a2[e3] = n2[e3];
        }), a2.enumerable = !!a2.enumerable, a2.configurable = !!a2.configurable, ("value" in a2 || a2.initializer) && (a2.writable = true), a2 = rr(o2 = fr(s2 = i2.slice()).call(s2)).call(o2, function(i3, n3) {
          return n3(e2, t2, i3) || i3;
        }, a2), r2 && void 0 !== a2.initializer && (a2.value = a2.initializer ? a2.initializer.call(r2) : void 0, a2.initializer = void 0), void 0 === a2.initializer ? (Object.defineProperty(e2, t2, a2), null) : a2;
      }
      function dP(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4) {
            if ("object" != typeof e4 || !e4) return e4;
            var t4 = e4[Symbol.toPrimitive];
            if (void 0 !== t4) {
              var i3 = t4.call(e4, "string");
              if ("object" != typeof i3) return i3;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : t3 + "";
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      function lP(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function uP(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? lP(Object(i2), true).forEach(function(t3) {
            dP(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : lP(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class hP extends Zw {
        set _mediaStreamTrack(e2) {
          e2 !== this.mediaStreamTrack && (this.safeEmit(HD.TRACK_UPDATED, e2), this.mediaStreamTrack = e2);
        }
        get _mediaStreamTrack() {
          return this.mediaStreamTrack;
        }
        constructor(e2, t2) {
          super(), dP(this, "trackMediaType", void 0), dP(this, "_ID", void 0), dP(this, "_rtpTransceiver", void 0), dP(this, "_lowRtpTransceiver", void 0), dP(this, "_hints", []), dP(this, "_isClosed", false), dP(this, "_originMediaStreamTrack", void 0), dP(this, "mediaStreamTrack", void 0), dP(this, "_external", {}), this._ID = t2 || LO(8, "track-"), this._originMediaStreamTrack = e2, this.mediaStreamTrack = e2, function(e3) {
            kn(xD).call(xD, e3) || xD.push(e3);
          }(this);
        }
        toString() {
          return this._ID;
        }
        getTrackId() {
          return this._ID;
        }
        getMediaStreamTrack(e2) {
          return e2 || IO(() => {
            var e3;
            TD.reportApiInvoke(null, { name: tO.GET_MEDIA_STREAM_TRACK, options: [], tag: iO.TRACER }).onSuccess((null === (e3 = this._mediaStreamTrack) || void 0 === e3 ? void 0 : e3.label) || "");
          }, this.mediaStreamTrack.id || this.getTrackId()), this._mediaStreamTrack;
        }
        getRTCRtpTransceiver(e2) {
          return e2 === jD.LOW_STREAM ? this._lowRtpTransceiver : this._rtpTransceiver;
        }
        getMediaStreamTrackSettings() {
          return this.getMediaStreamTrack(true).getSettings();
        }
        close() {
          this._isClosed = true, this._lowRtpTransceiver = void 0, this._rtpTransceiver = void 0, function(e2) {
            const t2 = xD.indexOf(e2);
            -1 !== t2 && xD.splice(t2, 1);
          }(this), this.emit(KD.CLOSED), this.removeAllListeners(HD.SEI_RECEIVED);
        }
        _updateRtpTransceiver(e2, t2) {
          if (t2 === jD.LOW_STREAM) {
            if (this._lowRtpTransceiver === e2) return;
            this._lowRtpTransceiver = e2;
          } else {
            if (this._rtpTransceiver === e2) return;
            this._rtpTransceiver = e2;
          }
          this.emit(HD.TRANSCEIVER_UPDATED, e2, t2);
        }
      }
      class pP extends hP {
        get isExternalTrack() {
          return this._isExternalTrack;
        }
        get muted() {
          return this._muted;
        }
        get enabled() {
          return this._enabled;
        }
        get processorContext() {
          return this._processorContext;
        }
        constructor(e2, t2) {
          super(e2, t2), dP(this, "_enabled", true), dP(this, "_muted", false), dP(this, "_isExternalTrack", false), dP(this, "_isClosed", false), dP(this, "_enabledMutex", void 0), dP(this, "processor", void 0), dP(this, "_processorContext", void 0), dP(this, "_handleTrackEnded", () => {
            this.onTrackEnded();
          }), this._enabledMutex = new KO("".concat(this.getTrackId())), e2.addEventListener("ended", this._handleTrackEnded);
        }
        getTrackLabel() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originMediaStreamTrack) || void 0 === t2 ? void 0 : t2.label) && void 0 !== e2 ? e2 : "";
        }
        close() {
          this._isClosed || (this.stop(), this._originMediaStreamTrack.stop(), this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack.stop(), this._mediaStreamTrack = null), this._originMediaStreamTrack = null, this._enabledMutex = null, lD.debug("[".concat(this.getTrackId(), "] close")), this.emit(FD.NEED_CLOSE), super.close());
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          this._isExternalTrack = i2, e2 !== this._originMediaStreamTrack && (this._originMediaStreamTrack && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop()), e2.addEventListener("ended", this._handleTrackEnded), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await _O(this, FD.NEED_REPLACE_TRACK, this), this.processor && this._processorContext && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this._processorContext }));
        }
        _getDefaultPlayerConfig() {
          return {};
        }
        onTrackEnded() {
          lD.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(KD.TRACK_ENDED);
        }
        stateCheck(e2, t2) {
          if (lD.debug("check track state, [muted: ".concat(this._muted, ", enabled: ").concat(this._enabled, "] to [").concat(e2, ": ").concat(t2, "]")), Vw(t2, e2), this._enabled && this._muted && "enabled" === e2 && false === t2) throw new xw(Uw.TRACK_STATE_UNREACHABLE, "cannot set enabled while the track is muted").print("error", lD);
          if (!this._enabled && !this._muted && "muted" === e2 && true === t2) throw new xw(Uw.TRACK_STATE_UNREACHABLE, "cannot set muted while the track is disabled").print("error", lD);
        }
        getProcessorStats() {
          return this._processorContext && this._processorContext.gatherStats() || [];
        }
        getProcessorUsage() {
          return this._processorContext ? this._processorContext.gatherUsage() : np.resolve([]);
        }
      }
      const _P = window.AudioContext || window.webkitAudioContext;
      let EP = null;
      const mP = new class extends Zw {
        constructor() {
          super(...arguments), dP(this, "prevState", void 0), dP(this, "curState", void 0), dP(this, "currentTime", void 0), dP(this, "currentTimeStuckAt", void 0), dP(this, "interruptDetectorTrack", void 0), dP(this, "onLocalAudioTrackMute", () => {
            lD.info("ios15-interruption-start"), this.emit(ID.IOS_15_16_INTERRUPTION_START);
          }), dP(this, "onLocalAudioTrackUnmute", async () => {
            lD.info("ios15-interruption-end"), "running" !== this.curState || this.duringInterruption ? lD.info("ios15-interruption-end-canceled") : (EP && await EP.suspend(), this.emit(ID.IOS_15_16_INTERRUPTION_END));
          });
        }
        get duringInterruption() {
          return "running" === this.prevState && "interrupted" === this.curState;
        }
        bindInterruptDetectorTrack(e2) {
          lD.debug("webaudio bindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack || (this.interruptDetectorTrack = e2, this.interruptDetectorTrack._mediaStreamTrack.onmute = this.onLocalAudioTrackMute, this.interruptDetectorTrack._mediaStreamTrack.onunmute = this.onLocalAudioTrackUnmute);
        }
        unbindInterruptDetectorTrack(e2) {
          lD.debug("webaudio unbindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack && this.interruptDetectorTrack === e2 && (this.interruptDetectorTrack._mediaStreamTrack && (this.interruptDetectorTrack._mediaStreamTrack.onmute = null, this.interruptDetectorTrack._mediaStreamTrack.onunmute = null), this.interruptDetectorTrack = void 0);
        }
      }();
      function fP() {
        if (!EP) {
          if (function() {
            if (!_P) return void lD.error("your browser is not support web audio");
            lD.info("create audio context");
            const e2 = uP({}, MN("WEBAUDIO_INIT_OPTIONS"));
            lD.debug("audio context init option:", JSON.stringify(e2)), EP = new _P(e2), mP.curState = EP.state, EP.onstatechange = () => {
              mP.prevState = mP.curState, mP.curState = EP ? EP.state : void 0;
              const { prevState: e3, curState: t2 } = mP, i2 = "running" === t2, n2 = "interrupted" === t2, r2 = "running" === e3, o2 = "suspended" === e3, s2 = "interrupted" === e3, a2 = rw().osVersion;
              (pw() || Aw()) && r2 && n2 && (lD.info("ios".concat(a2, "-interruption-start")), mP.emit(ID.IOS_INTERRUPTION_START)), (pw() || Aw()) && (o2 || s2) && i2 && (lD.info("ios".concat(a2, "-interruption-end")), mP.emit(ID.IOS_INTERRUPTION_END)), e3 !== t2 && mP.emit(ID.STATE_CHANGE, t2, e3);
            }, setInterval(() => {
              var e3;
              const t2 = null === (e3 = EP) || void 0 === e3 ? void 0 : e3.currentTime;
              mP.currentTime !== t2 ? (mP.currentTimeStuckAt && (lD.debug("AudioContext current time resume at ".concat(t2)), mP.currentTimeStuckAt = void 0), mP.currentTime = t2) : (t2 !== mP.currentTimeStuckAt && (TD.reportApiInvoke(null, { name: "WEB_AUDIO_CURRENT_TIME_STUCK", options: { currentTime: t2 }, tag: iO.TRACER }).onSuccess(), lD.warning("AudioContext current time stuck at ".concat(t2))), mP.currentTimeStuckAt = t2);
            }, 5e3), async function(e3) {
              const t2 = ["click", "contextmenu", "auxclick", "dblclick", "mousedown", "mouseup", "touchend", "keydown", "keyup"];
              let i2, n2 = false, r2 = false, o2 = false;
              function s2(t3) {
                "running" === e3.state ? a2(false) : pw() || Aw() ? "suspended" === e3.state && (a2(true), t3 && e3.resume().then(c2, c2)) : "closed" !== e3.state && (a2(true), t3 && e3.resume().then(c2, c2));
              }
              function a2(e4) {
                if (n2 !== e4) {
                  n2 = e4;
                  for (let i3 = 0, n3 = t2; i3 < n3.length; i3 += 1) {
                    const t3 = n3[i3];
                    e4 ? window.addEventListener(t3, d2, { capture: true, passive: true }) : window.removeEventListener(t3, d2, { capture: true, passive: true });
                  }
                }
              }
              function c2() {
                s2(false);
              }
              function d2() {
                s2(true);
              }
              function l2(e4) {
                if (!o2) if (i2.paused) if (e4) {
                  let t3;
                  u2(false), o2 = true;
                  try {
                    t3 = i2.play(), t3 ? t3.then(h2, h2) : (i2.addEventListener("playing", h2), i2.addEventListener("abort", h2), i2.addEventListener("error", h2));
                  } catch (e5) {
                    h2();
                  }
                } else u2(true);
                else u2(false);
              }
              function u2(e4) {
                if (r2 !== e4) {
                  r2 = e4;
                  for (let i3 = 0, n3 = t2; i3 < n3.length; i3++) {
                    const t3 = n3[i3];
                    e4 ? window.addEventListener(t3, p2, { capture: true, passive: true }) : window.removeEventListener(t3, p2, { capture: true, passive: true });
                  }
                }
              }
              function h2() {
                i2.removeEventListener("playing", h2), i2.removeEventListener("abort", h2), i2.removeEventListener("error", h2), o2 = false, l2(false);
              }
              function p2() {
                l2(true);
              }
              if (pw()) {
                const t3 = e3.createMediaStreamDestination(), n3 = document.createElement("div");
                n3.innerHTML = "<audio x-webkit-airplay='deny'></audio>", i2 = n3.children.item(0), i2.controls = false, i2.disableRemotePlayback = true, i2.preload = "auto", i2.srcObject = t3.stream, l2(true);
              }
              mP.on(ID.STATE_CHANGE, function() {
                s2(true);
              }), s2(false);
            }(EP);
          }(), !EP) throw new xw(Uw.NOT_SUPPORTED, "can not create audio context");
          return EP;
        }
        return EP;
      }
      function TP(e2) {
        if (function() {
          if (null !== SP) return SP;
          const e3 = fP(), t3 = e3.createBufferSource(), i3 = e3.createGain(), n2 = e3.createGain();
          t3.connect(i3), t3.connect(n2), t3.disconnect(i3);
          let r2 = false;
          try {
            t3.disconnect(i3);
          } catch (e4) {
            r2 = true;
          }
          return t3.disconnect(), SP = r2, r2;
        }()) return;
        const t2 = e2.connect, i2 = e2.disconnect;
        e2.connect = (i3, n2, r2) => {
          var o2;
          return e2._inputNodes || (e2._inputNodes = []), kn(o2 = e2._inputNodes).call(o2, i3) || (i3 instanceof AudioNode ? (e2._inputNodes.push(i3), t2.call(e2, i3, n2, r2)) : t2.call(e2, i3, n2)), e2;
        }, e2.disconnect = (n2, r2, o2) => {
          i2.call(e2), n2 ? TO(e2._inputNodes, n2) : e2._inputNodes = [];
          for (const i3 of e2._inputNodes) t2.call(e2, i3);
        };
      }
      let SP = null;
      function gP(e2, t2) {
        let i2 = false;
        const n2 = 1 / t2;
        if (MN("DISABLE_WEBAUDIO")) {
          const t3 = window.setInterval(() => {
            i2 ? window.clearInterval(t3) : e2(performance.now() / 1e3);
          }, 1e3 * n2);
        } else {
          const t3 = fP();
          let r2 = t3.createGain();
          r2.gain.value = 0, r2.connect(t3.destination);
          const o2 = () => {
            if (i2) return void (r2 = null);
            const s2 = t3.createOscillator();
            s2.onended = o2, s2.connect(r2), s2.start(0), s2.stop(t3.currentTime + n2), e2(t3.currentTime);
          };
          o2();
        }
        return () => {
          i2 = true;
        };
      }
      class RP {
        constructor() {
          dP(this, "context", void 0), dP(this, "analyserNode", void 0), dP(this, "sourceNode", void 0), this.context = fP(), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4;
        }
        updateSource(e2) {
          if (e2 !== this.sourceNode) {
            if (this.sourceNode) try {
              this.sourceNode.disconnect(this.analyserNode);
            } catch (e3) {
            }
            this.sourceNode = e2, null == e2 || e2.connect(this.analyserNode);
          }
        }
        getVolumeLevel() {
          if (!this.sourceNode) return 0;
          if (!this.context || pw() || Aw() || "running" !== this.context.state && this.context.resume(), !this.analyserNode) return 0;
          const e2 = new Float32Array(this.analyserNode.fftSize);
          if (this.analyserNode.getFloatTimeDomainData) this.analyserNode.getFloatTimeDomainData(e2);
          else {
            const t3 = new Uint8Array(this.analyserNode.fftSize);
            this.analyserNode.getByteTimeDomainData(t3);
            for (let i2 = 0; i2 < e2.length; ++i2) e2[i2] = t3[i2] / 128 - 1;
          }
          const t2 = rr(e2).call(e2, (e3, t3) => e3 + t3 * t3, 0) / e2.length;
          return Math.max(10 * Math.log10(t2) + 100, 0) / 100;
        }
        getAnalyserNode() {
          return this.analyserNode;
        }
        rebuildAnalyser() {
          try {
            var e2, t2;
            null === (e2 = this.sourceNode) || void 0 === e2 || e2.disconnect(this.analyserNode), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4, null === (t2 = this.sourceNode) || void 0 === t2 || t2.connect(this.analyserNode);
          } catch (e3) {
            lD.warning("rebuild analyser node failed.");
          }
        }
        destroy() {
          this.updateSource(void 0);
        }
      }
      class vP extends Zw {
        get processSourceNode() {
          return this.sourceNode;
        }
        set processedNode(e2) {
          var t2;
          if (!this.isDestroyed && this._processedNode !== e2) {
            try {
              var i2;
              null === (i2 = this.sourceNode) || void 0 === i2 || i2.disconnect(this.outputNode);
            } catch (e3) {
            }
            null === (t2 = this._processedNode) || void 0 === t2 || t2.disconnect(), this._processedNode = e2, this.connect();
          }
        }
        get processedNode() {
          return this._processedNode;
        }
        constructor() {
          super(), dP(this, "outputNode", void 0), dP(this, "outputTrack", void 0), dP(this, "isPlayed", false), dP(this, "sourceNode", void 0), dP(this, "context", void 0), dP(this, "audioBufferNode", void 0), dP(this, "destNode", void 0), dP(this, "audioOutputLevel", 0), dP(this, "volumeLevelAnalyser", void 0), dP(this, "_processedNode", void 0), dP(this, "playNode", void 0), dP(this, "isDestroyed", false), dP(this, "onNoAudioInput", void 0), dP(this, "isNoAudioInput", false), dP(this, "_noAudioInputCount", 0), this.context = fP(), this.playNode = this.context.destination, this.outputNode = this.context.createGain(), TP(this.outputNode), this.volumeLevelAnalyser = new RP();
        }
        startGetAudioBuffer(e2) {
          this.audioBufferNode || (this.audioBufferNode = this.context.createScriptProcessor(e2), this.outputNode.connect(this.audioBufferNode), this.audioBufferNode.connect(this.context.destination), this.audioBufferNode.onaudioprocess = (e3) => {
            this.emit(zD.ON_AUDIO_BUFFER, function(e4) {
              for (let t2 = 0; t2 < e4.outputBuffer.numberOfChannels; t2 += 1) {
                const i2 = e4.outputBuffer.getChannelData(t2);
                for (let e5 = 0; e5 < i2.length; e5 += 1) i2[e5] = 0;
              }
              return e4.inputBuffer;
            }(e3));
          });
        }
        stopGetAudioBuffer() {
          this.audioBufferNode && (this.audioBufferNode.onaudioprocess = null, this.outputNode.disconnect(this.audioBufferNode), this.audioBufferNode = void 0);
        }
        createOutputTrack() {
          if (!RD().webAudioMediaStreamDest) throw new xw(Uw.NOT_SUPPORTED, "your browser is not support audio processor");
          return this.destNode && this.outputTrack || (this.destNode = this.context.createMediaStreamDestination(), this.outputNode.connect(this.destNode), this.outputTrack = this.destNode.stream.getAudioTracks()[0]), this.outputTrack;
        }
        play(e2) {
          "running" !== this.context.state && gO(() => {
            mP.emit("autoplay-failed");
          }), this.isPlayed = true, this.playNode = e2 || this.context.destination, this.outputNode.connect(this.playNode);
        }
        stop() {
          if (this.isPlayed) try {
            this.outputNode.disconnect(this.playNode);
          } catch (e2) {
          }
          this.isPlayed = false;
        }
        getAccurateVolumeLevel() {
          return this.volumeLevelAnalyser.getVolumeLevel();
        }
        async checkHasAudioInput() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          if (e2 > 5) return this.isNoAudioInput = true, this.onNoAudioInput && this.onNoAudioInput(), false;
          pw() || Aw() ? "suspended" === this.context.state && this.context.resume() : "running" !== this.context.state && this.context.resume();
          const t2 = this.volumeLevelAnalyser.getAnalyserNode();
          let i2;
          t2.getFloatTimeDomainData ? (i2 = new Float32Array(t2.fftSize), t2.getFloatTimeDomainData(i2)) : (i2 = new Uint8Array(t2.fftSize), t2.getByteTimeDomainData(i2));
          let n2 = false;
          for (let e3 = 0; e3 < i2.length; e3++) 0 !== i2[e3] && (n2 = true);
          return n2 ? (this.isNoAudioInput = false, true) : (await PO(200), await this.checkHasAudioInput(e2 ? e2 + 1 : 1) && n2);
        }
        getAudioVolume() {
          return this.outputNode.gain.value;
        }
        setVolume(e2) {
          this.outputNode.gain.setValueAtTime(e2, this.context.currentTime);
        }
        destroy() {
          this.disconnect(), this.stop(), this.isDestroyed = true, this.onNoAudioInput = void 0;
        }
        disconnect() {
          var e2, t2;
          null === (e2 = this.processedNode) || void 0 === e2 || e2.disconnect(), null === (t2 = this.sourceNode) || void 0 === t2 || t2.disconnect(), this.outputNode && this.outputNode.disconnect();
        }
        connect() {
          var e2;
          this.processedNode ? null === (e2 = this.processedNode) || void 0 === e2 || e2.connect(this.outputNode) : this.sourceNode && this.sourceNode.connect(this.outputNode), this.volumeLevelAnalyser.updateSource(this.outputNode);
        }
      }
      class CP extends vP {
        get isFreeze() {
          return false;
        }
        constructor(e2, t2, i2) {
          var n2;
          if (super(), dP(this, "sourceNode", void 0), dP(this, "track", void 0), dP(this, "clonedTrack", void 0), dP(this, "audioElement", void 0), dP(this, "isCurrentTrackCloned", false), dP(this, "isRemoteTrack", false), dP(this, "originVolumeLevelAnalyser", void 0), dP(this, "rebuildWebAudio", async () => {
            if (lD.debug("ready to rebuild web audio, state:", this.context.state), this.isNoAudioInput && await this.checkHasAudioInput(), !this.isNoAudioInput || this.isDestroyed) return document.body.removeEventListener("click", this.rebuildWebAudio, true), void lD.debug("rebuild web audio success, current volume status", this.getAccurateVolumeLevel());
            this.context.resume().then(() => lD.info("resume success")), lD.debug("rebuild web audio because of ios 12 bugs"), this.disconnect();
            const e3 = this.track;
            this.track = this.track.clone(), this.isCurrentTrackCloned ? e3.stop() : this.isCurrentTrackCloned = true;
            const t3 = new MediaStream([this.track]);
            this.sourceNode = this.context.createMediaStreamSource(t3), TP(this.sourceNode), this.volumeLevelAnalyser.rebuildAnalyser();
            const i3 = this.outputNode.gain.value;
            this.outputNode = this.context.createGain(), this.outputNode.gain.setValueAtTime(i3, this.context.currentTime), TP(this.outputNode), this.emit(zD.UPDATE_SOURCE), this.connect(), this.audioElement.srcObject = t3, this.isPlayed && this.play(this.playNode), this.checkHasAudioInput();
          }), "audio" !== e2.kind) throw new xw(Uw.UNEXPECTED_ERROR);
          this.track = e2;
          const r2 = new MediaStream([this.track]);
          if (this.isRemoteTrack = !!t2, this.sourceNode = this.context.createMediaStreamSource(r2), TP(this.sourceNode), i2) {
            const e3 = i2.clone();
            e3.enabled = true, this.clonedTrack = e3, lD.debug("create an unmuted track ".concat(e3.id, " from the original track ").concat(i2.id, " to get the volume"));
            const t3 = this.context.createMediaStreamSource(new MediaStream([e3]));
            TP(t3), this.originVolumeLevelAnalyser = new RP(), this.originVolumeLevelAnalyser.updateSource(t3);
          }
          this.connect(), this.audioElement = document.createElement("audio"), this.audioElement.srcObject = r2;
          const o2 = rw();
          t2 && o2.os === $b.IOS && Number(null === (n2 = o2.osVersion) || void 0 === n2 ? void 0 : n2.split(".")[0]) < 15 && (mP.on(ID.STATE_CHANGE, () => {
            "suspended" === this.context.state ? document.body.addEventListener("click", this.rebuildWebAudio, true) : "running" === this.context.state && this.rebuildWebAudio();
          }), this.checkHasAudioInput().then((e3) => {
            e3 || document.body.addEventListener("click", this.rebuildWebAudio, true);
          }));
        }
        updateTrack(e2) {
          this.sourceNode.disconnect(), this.track = e2, this.isCurrentTrackCloned = false;
          const t2 = new MediaStream([e2]);
          this.sourceNode = this.context.createMediaStreamSource(t2), TP(this.sourceNode), this.processedNode || this.sourceNode.connect(this.outputNode), this.emit(zD.UPDATE_SOURCE), this.audioElement.srcObject = t2;
        }
        destroy() {
          var e2;
          this.audioElement.srcObject = null, this.audioElement.remove(), mP.off("state-change", this.rebuildWebAudio), null === (e2 = this.originVolumeLevelAnalyser) || void 0 === e2 || e2.destroy(), this.clonedTrack = void 0, super.destroy();
        }
        createMediaStreamSourceNode(e2) {
          return this.context.createMediaStreamSource(new MediaStream([e2]));
        }
        updateOriginTrack(e2) {
          const t2 = e2.clone();
          t2.enabled = true, this.clonedTrack && (this.clonedTrack.stop(), this.clonedTrack = t2), lD.debug("create an unmuted track ".concat(t2.id, " from the original track ").concat(e2.id, " to get the volume"));
          const i2 = this.context.createMediaStreamSource(new MediaStream([t2]));
          TP(i2), this.originVolumeLevelAnalyser && this.originVolumeLevelAnalyser.updateSource(i2);
        }
        getOriginVolumeLevel() {
          return this.originVolumeLevelAnalyser ? this.originVolumeLevelAnalyser.getVolumeLevel() : this.getAccurateVolumeLevel();
        }
      }
      async function IP(e2, t2, i2) {
        const n2 = (e3, t3) => e3 ? "number" != typeof e3 ? e3.max || e3.exact || e3.ideal || e3.min || t3 : e3 : t3, r2 = { audio: !!i2 && { mandatory: { chromeMediaSource: "desktop" } }, video: { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: e2, maxHeight: n2(t2.height, 1080), maxWidth: n2(t2.width, 1920) } } };
        return t2.frameRate && "number" != typeof t2.frameRate ? (r2.video.mandatory.maxFrameRate = t2.frameRate.max, r2.video.mandatory.minFrameRate = t2.frameRate.min) : "number" == typeof t2.frameRate && (r2.video.mandatory.maxFrameRate = t2.frameRate), await navigator.mediaDevices.getUserMedia(r2);
      }
      async function yP(e2, t2) {
        const i2 = await AP(e2.mediaSource), { sourceId: n2, audio: r2 } = await function(e3) {
          let t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return new np((i3, n3) => {
            const r3 = document.createElement("div");
            r3.innerText = "share screen", r3.setAttribute("style", "text-align: center; height: 25px; line-height: 25px; border-radius: 4px 4px 0 0; background: #D4D2D4; border-bottom:  solid 1px #B9B8B9;");
            const o2 = document.createElement("div");
            o2.setAttribute("style", "width: 100%; height: 500px; padding: 15px 25px ; box-sizing: border-box;");
            const s2 = document.createElement("div");
            s2.innerText = "Agora Web Screensharing wants to share the contents of your screen with webdemo.agorabeckon.com. Choose what you'd like to share.", s2.setAttribute("style", "height: 12%;");
            const a2 = document.createElement("div");
            a2.setAttribute("style", "width: 100%; height: 80%; background: #FFF; border:  solid 1px #CBCBCB; display: flex; flex-wrap: wrap; justify-content: space-around; overflow-y: scroll; padding: 0 15px; box-sizing: border-box;");
            const c2 = document.createElement("div");
            c2.setAttribute("style", "display: flex; justify-content: space-between; padding: 16px 0;");
            const d2 = document.createElement("button");
            d2.innerHTML = "cancel", d2.setAttribute("style", "width: 85px;"), d2.onclick = () => {
              document.body.removeChild(h2);
              const e4 = new Error("NotAllowedError");
              e4.name = "NotAllowedError", n3(e4);
            };
            let l2 = t3;
            const u2 = document.createElement("div");
            if (t3) {
              const e4 = document.createElement("input");
              e4.setAttribute("type", "checkbox");
              const t4 = document.createElement("span");
              e4.setAttribute("style", "margin-right: 6px;"), t4.innerText = "Share audio", e4.checked = l2, e4.onchange = () => {
                l2 = e4.checked;
              }, u2.appendChild(e4), u2.appendChild(t4);
            }
            c2.appendChild(u2), c2.appendChild(d2), o2.appendChild(s2), o2.appendChild(a2), o2.appendChild(c2);
            const h2 = document.createElement("div");
            h2.setAttribute("style", "position: fixed; z-index: 99999999; top: 50%; left: 50%; width: 620px; height: 525px; background: #ECECEC; border-radius: 4px; -webkit-transform: translate(-50%,-50%); transform: translate(-50%,-50%);"), h2.appendChild(r3), h2.appendChild(o2), document.body.appendChild(h2), e3.map((e4) => {
              if (e4.id) {
                const t4 = document.createElement("div");
                t4.setAttribute("style", "width: 30%; height: 160px; padding: 20px 0; text-align: center;box-sizing: content-box;");
                let n4 = e4.thumbnail;
                try {
                  const { width: e5 } = n4.getSize();
                  e5 > 1920 && (n4 = n4.resize({ width: 1920 }));
                } catch (e5) {
                  throw e5 && e5.message.startsWith("Illegal invocation") && console.error("Operate thumbnail error, please try to set contextIsolation: false. (https://github.com/electron/electron/issues/34953)"), e5;
                }
                t4.innerHTML = '<div style="height: 120px; display: table-cell; vertical-align: middle;"><img style="width: 100%; background: #333333; box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.2);" src=' + n4.toDataURL() + ' /></div><span style="	height: 40px; line-height: 40px; display: inline-block; width: 70%; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">' + e4.name.replace(/[\u00A0-\u9999<>\&]/g, function(e5) {
                  return "&#" + e5.charCodeAt(0) + ";";
                }) + "</span>", t4.onclick = () => {
                  document.body.removeChild(h2), i3({ sourceId: e4.id, audio: l2 });
                }, a2.appendChild(t4);
              }
            });
          });
        }(i2, t2);
        return await IP(n2, e2, r2);
      }
      async function AP(e2) {
        let t2 = ["window", "screen"];
        "application" !== e2 && "window" !== e2 || (t2 = ["window"]), "screen" === e2 && (t2 = ["screen"]);
        const i2 = eO();
        if (!i2) throw console.error("failed to fetch electron, please mount it to window"), new xw(Uw.ELECTRON_IS_NULL);
        let n2 = null;
        try {
          var r2;
          n2 = (null === (r2 = i2.desktopCapturer) || void 0 === r2 ? void 0 : r2.getSources({ types: t2 })) || i2.ipcRenderer.invoke("DESKTOP_CAPTURER_GET_SOURCES", { types: t2 });
        } catch (e3) {
          n2 = null;
        }
        n2 && n2.then || (n2 = new np((e3, n3) => {
          i2.desktopCapturer.getSources({ types: t2 }, (t3, i3) => {
            t3 ? n3(t3) : e3(i3);
          });
        }));
        try {
          return await n2;
        } catch (e3) {
          throw new xw(Uw.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR, e3.toString());
        }
      }
      const bP = new KO("safari");
      let wP = false, OP = false;
      async function NP(e2, t2) {
        let i2 = 0, n2 = null;
        for (; i2 < 2; ) try {
          n2 = await DP(e2, t2, i2 > 0);
          break;
        } catch (e3) {
          if (e3 instanceof xw) throw lD.error("[".concat(t2, "] ").concat(e3.toString())), e3;
          const n3 = PP(e3.name || e3.code || e3, e3.message);
          if (n3.code === Uw.MEDIA_OPTION_INVALID) {
            lD.debug("[".concat(t2, "] detect media option invalid, retry")), i2 += 1, await PO(500);
            continue;
          }
          throw lD.error("[".concat(t2, "] ").concat(n3.toString())), n3;
        }
        if (!n2) throw new xw(Uw.UNEXPECTED_ERROR, "can not find stream after getUserMedia");
        return n2;
      }
      async function DP(e2, t2, i2) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) throw new xw(Uw.NOT_SUPPORTED, "can not find getUserMedia");
        i2 && (e2.video && (delete e2.video.width, delete e2.video.height), e2.screen && (delete e2.screen.width, delete e2.screen.height));
        const n2 = RD(), r2 = new MediaStream();
        if (e2.audioSource && r2.addTrack(e2.audioSource), e2.videoSource && r2.addTrack(e2.videoSource), !e2.audio && !e2.video && !e2.screen) return lD.debug("Using Video Source/ Audio Source"), r2;
        if (e2.screen) if (eO()) e2.screen.sourceId ? LP(r2, await IP(e2.screen.sourceId, e2.screen, !!e2.screenAudio)) : LP(r2, await yP(e2.screen, !!e2.screenAudio));
        else if (dw() && e2.screen.extensionId && e2.screen.mandatory) {
          if (!n2.getStreamFromExtension) throw new xw(Uw.NOT_SUPPORTED, "This browser does not support screen sharing");
          lD.debug("[".concat(t2, '] Screen access on chrome stable, looking for extension"'));
          const i3 = await (s2 = e2.screen.extensionId, a2 = t2, new np((e3, t3) => {
            try {
              chrome.runtime.sendMessage(s2, { getStream: true }, (i4) => {
                if (!i4 || !i4.streamId) return lD.error("[".concat(a2, "] No response from Chrome Plugin. Plugin not installed properly"), i4), void t3(new xw(Uw.CHROME_PLUGIN_NO_RESPONSE, "No response from Chrome Plugin. Plugin not installed properly"));
                e3(i4.streamId);
              });
            } catch (e4) {
              lD.error("[".concat(a2, "] AgoraRTC screensharing plugin is not accessible(").concat(s2, ")"), e4.toString()), t3(new xw(Uw.CHROME_PLUGIN_NOT_INSTALL));
            }
          }));
          e2.screen.mandatory.chromeMediaSourceId = i3, LP(r2, await navigator.mediaDevices.getUserMedia({ video: { mandatory: e2.screen.mandatory } }));
        } else if (n2.getDisplayMedia) {
          var o2;
          e2.screen.mediaSource && VD(e2.screen.mediaSource);
          const i3 = { width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate, displaySurface: null !== (o2 = e2.screen.displaySurface) && void 0 !== o2 ? o2 : "screen" === e2.screen.mediaSource ? "monitor" : e2.screen.mediaSource }, { selfBrowserSurface: n3, surfaceSwitching: s3, systemAudio: a3, preferCurrentTab: c3 } = e2.screen, d3 = { selfBrowserSurface: n3, surfaceSwitching: s3, systemAudio: a3, preferCurrentTab: c3 };
          !n3 && delete d3.selfBrowserSurface, !s3 && delete d3.surfaceSwitching, !a3 && delete d3.systemAudio, !c3 && delete d3.preferCurrentTab, lD.debug("[".concat(t2, "] getDisplayMedia:"), JSON.stringify({ video: i3, audio: e2.screenAudio, controls: d3 })), LP(r2, await navigator.mediaDevices.getDisplayMedia(uP({ video: i3, audio: e2.screenAudio }, d3)));
        } else {
          if (!hw()) throw lD.error("[".concat(t2, "] This browser does not support screenSharing")), new xw(Uw.NOT_SUPPORTED, "This browser does not support screen sharing");
          {
            e2.screen.mediaSource && VD(e2.screen.mediaSource);
            const i3 = { video: { mediaSource: e2.screen.mediaSource, width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate } };
            lD.debug("[".concat(t2, "] getUserMedia: ").concat(JSON.stringify(i3))), LP(r2, await navigator.mediaDevices.getUserMedia(i3));
          }
        }
        var s2, a2;
        if (!e2.video && !e2.audio) return r2;
        let c2 = { video: e2.video, audio: e2.audio }, d2 = MN("MEDIA_DEVICE_CONSTRAINTS");
        if (d2) try {
          "string" == typeof d2 && (d2 = JSON.parse(d2)), c2 = FO(c2, d2);
        } catch (e3) {
        }
        lD.debug("[".concat(t2, "] GetUserMedia"), JSON.stringify(c2)), rw();
        let l2, u2 = null;
        (lw() || pw() || cw()) && (u2 = await bP.lock());
        try {
          l2 = await navigator.mediaDevices.getUserMedia(c2);
        } catch (e3) {
          throw u2 && u2(), e3;
        }
        return c2.audio && (wP = true), c2.video && (OP = true), LP(r2, l2), u2 && u2(), r2;
      }
      function PP(e2, t2) {
        switch (e2) {
          case "Starting video failed":
          case "OverconstrainedError":
          case "TrackStartError":
            return new xw(Uw.MEDIA_OPTION_INVALID, "".concat(e2, ": ").concat(t2));
          case "NotFoundError":
          case "DevicesNotFoundError":
            return new xw(Uw.DEVICE_NOT_FOUND, "".concat(e2, ": ").concat(t2));
          case "NotSupportedError":
            return new xw(Uw.NOT_SUPPORTED, "".concat(e2, ": ").concat(t2));
          case "NotReadableError":
            return new xw(Uw.NOT_READABLE, "".concat(e2, ": ").concat(t2));
          case "InvalidStateError":
          case "NotAllowedError":
          case "PERMISSION_DENIED":
          case "PermissionDeniedError":
            return new xw(Uw.PERMISSION_DENIED, "".concat(e2, ": ").concat(t2));
          case "ConstraintNotSatisfiedError":
            return new xw(Uw.CONSTRAINT_NOT_SATISFIED, "".concat(e2, ": ").concat(t2));
          default:
            return lD.error("getUserMedia unexpected error", e2), new xw(Uw.UNEXPECTED_ERROR, "".concat(e2, ": ").concat(t2));
        }
      }
      function LP(e2, t2) {
        const i2 = e2.getVideoTracks()[0], n2 = e2.getAudioTracks()[0], r2 = t2.getVideoTracks()[0], o2 = t2.getAudioTracks()[0];
        o2 && (n2 && e2.removeTrack(n2), e2.addTrack(o2)), r2 && (i2 && e2.removeTrack(i2), e2.addTrack(r2));
      }
      const kP = new class extends Zw {
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this.emit(nP.STATE_CHANGE, e2), this._state = e2);
        }
        constructor() {
          super(), dP(this, "_state", iP.IDLE), dP(this, "isAccessMicrophonePermission", false), dP(this, "isAccessCameraPermission", false), dP(this, "lastAccessMicrophonePermission", false), dP(this, "lastAccessCameraPermission", false), dP(this, "checkdeviceMatched", false), dP(this, "deviceInfoMap", /* @__PURE__ */ new Map()), this.init().then(() => {
            navigator.mediaDevices.addEventListener && navigator.mediaDevices.addEventListener("devicechange", this.updateDevicesInfo.bind(this)), window.setInterval(() => {
              (MN("ENUMERATE_DEVICES_INTERVAL") || (Dw() || sw() === $b.HARMONY_OS) && Nw()) && this.updateDevicesInfo();
            }, MN("ENUMERATE_DEVICES_INTERVAL_TIME"));
          }).catch((e2) => lD.error(e2.toString()));
        }
        async enumerateDevices(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) return new xw(Uw.NOT_SUPPORTED, "enumerateDevices() not supported.").throw();
          const n2 = await navigator.mediaDevices.enumerateDevices(), r2 = this.checkMediaDeviceInfoIsOk(n2);
          let o2 = !this.isAccessMicrophonePermission && e2, s2 = !this.isAccessCameraPermission && t2;
          r2.audio && (o2 = false), r2.video && (s2 = false);
          let a2 = null, c2 = null, d2 = null;
          if (!i2 && (o2 || s2)) {
            if (bP.isLocked && (lD.debug("[device manager] wait GUM lock"), (await bP.lock())(), lD.debug("[device manager] GUM unlock")), wP && (o2 = false, this.isAccessMicrophonePermission = true), OP && (s2 = false, this.isAccessCameraPermission = true), lD.debug("[device manager] check media device permissions", e2, t2, o2, s2), o2 && s2) {
              try {
                d2 = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
              } catch (e3) {
                const t3 = PP(e3.name || e3.code || e3, e3.message);
                if (t3.code === Uw.PERMISSION_DENIED) throw t3;
                lD.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true, this.isAccessMicrophonePermission = true;
            } else if (o2) {
              try {
                a2 = await navigator.mediaDevices.getUserMedia({ audio: e2 });
              } catch (e3) {
                const t3 = PP(e3.name || e3.code || e3, e3.message);
                if (t3.code === Uw.PERMISSION_DENIED) throw t3;
                lD.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessMicrophonePermission = true;
            } else if (s2) {
              try {
                c2 = await navigator.mediaDevices.getUserMedia({ video: t2 });
              } catch (e3) {
                const t3 = PP(e3.name || e3.code || e3, e3.message);
                if (t3.code === Uw.PERMISSION_DENIED) throw t3;
                lD.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true;
            }
            lD.debug("[device manager] mic permission", e2, "cam permission", t2);
          }
          try {
            const e3 = await navigator.mediaDevices.enumerateDevices();
            return a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null, e3;
          } catch (e3) {
            return a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null, new xw(Uw.ENUMERATE_DEVICES_FAILED, e3.toString()).throw();
          }
        }
        async getRecordingDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audioinput" === e3.kind);
        }
        async getCamerasDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(false, true, e2)).filter((e3) => "videoinput" === e3.kind);
        }
        async getSpeakers() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audiooutput" === e3.kind);
        }
        searchDeviceIdByName(e2) {
          let t2 = null;
          return this.deviceInfoMap.forEach((i2) => {
            i2.device.label === e2 && (t2 = i2.device.deviceId);
          }), t2;
        }
        async getDeviceById(e2) {
          const t2 = (await this.enumerateDevices(true, true, true)).find((t3) => t3.deviceId === e2);
          if (!t2) throw new xw(Uw.DEVICE_NOT_FOUND, "deviceId: ".concat(e2));
          return t2;
        }
        async init() {
          this.state = iP.INITING;
          try {
            await this.updateDevicesInfo(), this.state = iP.INITEND;
          } catch (e2) {
            throw lD.warning("Device Detection functionality cannot start properly.", e2.toString()), this.state = iP.IDLE, ("boolean" == typeof isSecureContext ? isSecureContext : "https:" === location.protocol || "file:" === location.protocol || "localhost" === location.hostname || "127.0.0.1" === location.hostname || "::1" === location.hostname) || new xw(Uw.WEB_SECURITY_RESTRICT, "Your context is limited by web security, please try using https protocol or localhost.").throw(), e2;
          }
        }
        async updateDevicesInfo() {
          const e2 = await this.enumerateDevices(true, true, true), t2 = Date.now(), i2 = [];
          if (e2[0] && e2[0].label && false === this.checkdeviceMatched) {
            this.checkdeviceMatched = true;
            const t3 = e2.find((e3) => "audioinput" === e3.kind && "default" === e3.deviceId), i3 = e2.find((e3) => "audiooutput" === e3.kind && "default" === e3.deviceId);
            t3 && i3 ? i3.groupId === t3.groupId ? lD.debug("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is the same group")) : lD.debug("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is not the same group")) : lD.debug("[device-check] default input or output not found");
          }
          const n2 = this.checkMediaDeviceInfoIsOk(e2);
          if (e2.forEach((e3) => {
            if (!e3.deviceId) return;
            const n3 = this.deviceInfoMap.get("".concat(e3.kind, "_").concat(e3.deviceId));
            if ("ACTIVE" !== (n3 ? n3.state : "INACTIVE")) {
              const n4 = { initAt: t2, updateAt: t2, device: e3, state: "ACTIVE" };
              this.deviceInfoMap.set("".concat(e3.kind, "_").concat(e3.deviceId), n4), i2.push(n4);
            }
            n3 && (n3.updateAt = t2);
          }), this.deviceInfoMap.forEach((e3, n3) => {
            "ACTIVE" === e3.state && e3.updateAt !== t2 && (e3.state = "INACTIVE", i2.push(e3));
          }), this.state !== iP.INITEND) return n2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), void (n2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true));
          i2.forEach((e3) => {
            switch (e3.device.kind) {
              case "audioinput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(nP.RECORDING_DEVICE_CHANGED, e3);
                break;
              case "videoinput":
                this.lastAccessCameraPermission && this.isAccessCameraPermission && this.emit(nP.CAMERA_DEVICE_CHANGED, e3);
                break;
              case "audiooutput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(nP.PLAYOUT_DEVICE_CHANGED, e3);
            }
          }), n2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), n2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true);
        }
        checkMediaDeviceInfoIsOk(e2) {
          const t2 = e2.filter((e3) => "audioinput" === e3.kind), i2 = e2.filter((e3) => "videoinput" === e3.kind), n2 = { audio: false, video: false };
          for (const e3 of t2) if (e3.label && e3.deviceId) {
            n2.audio = true;
            break;
          }
          for (const e3 of i2) if (e3.label && e3.deviceId) {
            n2.video = true;
            break;
          }
          return n2;
        }
      }();
      let MP = false;
      const UP = new class extends Zw {
        constructor() {
          super(...arguments), dP(this, "onAutoplayFailed", void 0), dP(this, "onAudioAutoplayFailed", void 0);
        }
      }();
      function xP() {
        if (rw(), !MP) {
          const e2 = (t2) => {
            t2.preventDefault(), MP = false, Pw() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true));
          };
          MP = true, Pw() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), lD.info("detect media autoplay failed, document: https://docs.agora.io/cn/Voice/autoplay_policy_web_ng?platform=Web"), UP.onAutoplayFailed ? UP.onAutoplayFailed() : UP.onAudioAutoplayFailed ? lD.warning("AgoraRTC.onAudioAutoplayFailed has been deprecated in favor of AgoraRTC.onAutoplayFailed.\n\n  Please refer to the Agora document to migrate the newer API, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web .") : lD.warning("We have detected a media autoplay failed event, and found out that you haven't implemented AgoraRTC.onAutoplayFailed callback yet.\n\n  It will cause audio/video element not playing automatically on some browsers without user interaction, possibly hurting user experiences.\n\n  Please refer to the Agora document to properly handle autoplay failed event, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web ."), UP.emit("autoplay-failed");
        }
      }
      function VP(e2, t2, i2, n2) {
        if (!e2) return;
        const r2 = TD.getBaseInfoBySessionId(e2);
        if (!r2) return;
        const o2 = r2.info, s2 = Date.now(), a2 = uP(uP({}, o2), {}, { vid: void 0 === o2.vid ? 0 : Number(o2.vid), lts: s2, elapse: s2 - r2.startTime, cbRegistered: UP.onAutoplayFailed || UP.onAudioAutoplayFailed ? 1 : -1, errorMsg: i2, mediaType: t2, trackId: n2, extend: void 0 });
        TD.send({ type: ED.AUTOPLAY_FAILED, data: a2 }, true);
      }
      const FP = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "error"], BP = new class {
        constructor() {
          dP(this, "onAutoplayFailed", void 0), dP(this, "elementMap", /* @__PURE__ */ new Map()), dP(this, "elementStateMap", /* @__PURE__ */ new Map()), dP(this, "elementsNeedToResume", []), dP(this, "sinkIdMap", /* @__PURE__ */ new Map()), dP(this, "autoResumeAfterInterruption", (e2) => {
            Array.from(this.elementMap.entries()).forEach((t2) => {
              let [i2, n2] = t2;
              const r2 = this.elementStateMap.get(i2), o2 = n2.srcObject.getAudioTracks()[0], s2 = o2 && o2.readyState;
              if (lD.debug("resume after interrupted, ele: ".concat(r2, " audio: ").concat(s2, " ").concat(e2)), "live" === s2) {
                if (e2) return n2.pause(), void n2.play();
                if ("running" === mP.curState) return Cw() ? (n2.pause(), void n2.play()) : void (r2 && "paused" === r2 && n2.play());
              }
            });
          }), dP(this, "autoResumeAfterInterruptionOnIOS15_16", () => {
            Array.from(this.elementMap.entries()).forEach((e2) => {
              let [t2, i2] = e2;
              const n2 = i2.srcObject.getAudioTracks()[0];
              n2 && "live" === n2.readyState && (lD.debug("auto resume after interruption inside autoResumeAfterInterruptionOnIOS15"), i2.pause(), i2.play());
            });
          }), this.autoResumeAudioElement(), mP.on(ID.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), mP.on(ID.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16), mP.on(ID.STATE_CHANGE, () => {
            pw() && "suspended" === mP.prevState && "running" === mP.curState && this.autoResumeAfterInterruption();
          });
        }
        async setSinkID(e2, t2) {
          const i2 = this.elementMap.get(e2);
          if (this.sinkIdMap.set(e2, t2), i2) try {
            await i2.setSinkId(t2);
          } catch (e3) {
            throw new xw(Uw.PERMISSION_DENIED, "can not set sink id: " + e3.toString());
          }
        }
        play(e2, t2, i2, n2) {
          if (this.elementMap.has(t2)) return;
          const r2 = document.createElement("audio");
          r2.autoplay = true, r2.srcObject = new MediaStream([e2]), this.bindAudioElementEvents(t2, r2), this.elementMap.set(t2, r2), this.elementStateMap.set(t2, rP.INIT), this.setVolume(t2, i2);
          const o2 = this.sinkIdMap.get(t2);
          if (o2) try {
            r2.setSinkId(o2).catch((e3) => {
              lD.warning("[".concat(t2, "] set sink id failed"), e3.toString());
            });
          } catch (e3) {
            lD.warning("[".concat(t2, "] set sink id failed"), e3.toString());
          }
          const s2 = r2.play();
          s2 && s2.then && s2.catch((e3) => {
            n2 && VP(n2, "audio", e3.message, t2), lD.warning("audio element play warning", e3.toString()), this.elementMap.has(t2) && "NotAllowedError" === e3.name && (lD.warning("detected audio element autoplay failed"), this.elementsNeedToResume.push(r2), gO(() => {
              this.onAutoplayFailed && this.onAutoplayFailed(), xP();
            }));
          });
        }
        updateTrack(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (i2.srcObject = new MediaStream([t2]));
        }
        isPlaying(e2) {
          return this.elementMap.has(e2) && "playing" === this.elementStateMap.get(e2);
        }
        setVolume(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (t2 = Math.max(0, Math.min(100, t2)), i2.volume = t2 / 100);
        }
        stop(e2) {
          const t2 = this.elementMap.get(e2);
          if (this.sinkIdMap.delete(e2), !t2) return;
          const i2 = this.elementsNeedToResume.indexOf(t2);
          this.elementsNeedToResume.splice(i2, 1), t2.srcObject = null, t2.remove(), this.elementMap.delete(e2), this.elementStateMap.delete(e2);
        }
        bindAudioElementEvents(e2, t2) {
          FP.forEach((i2) => {
            t2.addEventListener(i2, (i3) => {
              const n2 = this.elementStateMap.get(e2), r2 = "pause" === i3.type ? "paused" : i3.type;
              if (lD.debug("[".concat(e2, "] audio-element-status change ").concat(n2, " => ").concat(r2)), "error" === i3.type) {
                const i4 = null == t2 ? void 0 : t2.error;
                i4 && lD.error("[".concat(e2, "] media error, code: ").concat(i4.code, ", message: ").concat(i4.message));
              }
              this.elementStateMap.set(e2, r2);
            });
          });
        }
        getPlayerState(e2) {
          return this.elementStateMap.get(e2) || "uninit";
        }
        autoResumeAudioElement() {
          const e2 = () => {
            this.elementsNeedToResume.forEach((e3) => {
              e3.play().then((e4) => {
                lD.debug("Auto resume audio element success");
              }).catch((e4) => {
                lD.warning("Auto resume audio element failed!", e4);
              });
            }), this.elementsNeedToResume = [];
          };
          new np((e3) => {
            document.body ? e3() : window.addEventListener("load", () => e3());
          }).then(() => {
            Pw() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true));
          });
        }
      }();
      function jP() {
        return function(e2, t2, i2) {
          const n2 = i2.value;
          return "function" == typeof n2 && (i2.value = function() {
            this._isClosed && new xw(Uw.INVALID_OPERATION, "[".concat(this.getTrackId(), "] cannot operate a closed track")).print("warning", lD);
            for (var e3 = arguments.length, t3 = new Array(e3), i3 = 0; i3 < e3; i3++) t3[i3] = arguments[i3];
            const r2 = n2.apply(this, t3);
            return r2 instanceof np ? new np((e4, t4) => {
              r2.then(e4).catch(t4);
            }) : r2;
          }), i2;
        };
      }
      class GP extends Zw {
        constructor(e2) {
          super(), dP(this, "name", "VideoProcessorDestination"), dP(this, "ID", "0"), dP(this, "_source", void 0), dP(this, "videoContext", void 0), dP(this, "inputTrack", void 0), this.videoContext = e2;
        }
        get kind() {
          return "video";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new xw(Uw.NOT_SUPPORTED, "VideoProcessor cannot pipe to any other Processor");
        }
        unpipe() {
          throw new xw(Uw.NOT_SUPPORTED, "VideoProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        updateInput(e2) {
          if (e2.context !== this.videoContext) throw new Error("ProcessorContext passed to VideoTrack.processorDestination doesn't match it's belonging VideoTrack's context.\nProbably you are making pipeline like this:\nvideoTrack1.pipe(processor).pipe(videoTrack2.processorDestination).");
          e2.track && e2.track !== this.inputTrack && (this.videoContext.chained = true, this.inputTrack = e2.track, this.emit(eP.ON_TRACK, e2.track));
        }
        reset() {
          this.inputTrack = void 0, this.videoContext.chained = false, this.emit(eP.ON_TRACK, void 0);
        }
      }
      class WP extends Zw {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2) {
          super(), dP(this, "constraintsMap", /* @__PURE__ */ new Map()), dP(this, "statsRegistry", []), dP(this, "usageRegistry", []), dP(this, "trackId", void 0), dP(this, "direction", void 0), dP(this, "_chained", false), this.trackId = e2, this.direction = t2;
        }
        async getConstraints() {
          return await pO(this, tP.REQUEST_CONSTRAINTS);
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return lD.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), _O(this, tP.REQUEST_UPDATE_CONSTRAINTS, Array.from(hp(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2)) return lD.info("processor ".concat(e2.name, " requestRevertConstraints for ").concat(this.trackId)), this.constraintsMap.delete(e2), _O(this, tP.REQUEST_UPDATE_CONSTRAINTS, Array.from(hp(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: n2, cb: r2 } of this.statsRegistry) try {
            const o2 = r2();
            e2.push({ processorID: t2, processorName: i2, type: n2, stats: o2 });
          } catch (e3) {
            lD.error(new xw(Uw.UNEXPECTED_ERROR, e3.message));
          }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained) return [];
          for (const { cb: t2 } of this.usageRegistry) try {
            let i2 = t2();
            i2 instanceof np && (i2 = await i2), e2.push(uP(uP({}, i2), {}, { direction: this.direction }));
          } catch (e3) {
            lD.error("gather extension usage error", e3);
          }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class HP extends Zw {
        constructor(e2) {
          super(), dP(this, "name", "AudioProcessorDestination"), dP(this, "ID", "0"), dP(this, "inputTrack", void 0), dP(this, "inputNode", void 0), dP(this, "audioProcessorContext", void 0), dP(this, "_source", void 0), this.audioProcessorContext = e2;
        }
        get kind() {
          return "audio";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new xw(Uw.NOT_SUPPORTED, "AudioProcessorDestination cannot pipe to any other Processor");
        }
        unpipe() {
          throw new xw(Uw.NOT_SUPPORTED, "AudioProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        reset() {
          this.inputTrack = void 0, this.inputNode = void 0, this.audioProcessorContext.chained = false, this.emit(eP.ON_TRACK, void 0), this.emit(eP.ON_NODE, void 0);
        }
        updateInput(e2) {
          if (e2.context !== this.audioProcessorContext) throw new Error("ProcessorContext passed to AudioTrack.processorDestination doesn't match it's belonging AudioTrack's context.\n        Probably you are making pipeline like this: audioTrack1.pipe(processor).pipe(audioTrack2.processorDestination).");
          e2.track && this.inputTrack !== e2.track && (this.audioProcessorContext.chained = true, this.inputTrack = e2.track, this.emit(eP.ON_TRACK, this.inputTrack)), e2.node && this.inputNode !== e2.node && (this.audioProcessorContext.chained = true, this.inputNode = e2.node, this.emit(eP.ON_NODE, this.inputNode));
        }
      }
      class KP extends Zw {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2, i2) {
          super(), dP(this, "constraintsMap", /* @__PURE__ */ new Map()), dP(this, "statsRegistry", []), dP(this, "audioContext", void 0), dP(this, "trackId", void 0), dP(this, "direction", void 0), dP(this, "usageRegistry", []), dP(this, "_chained", false), this.audioContext = e2, this.trackId = t2, this.direction = i2;
        }
        async getConstraints() {
          return pO(this, tP.REQUEST_CONSTRAINTS);
        }
        getAudioContext() {
          return this.audioContext;
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return lD.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), _O(this, tP.REQUEST_UPDATE_CONSTRAINTS, Array.from(hp(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2)) return this.constraintsMap.delete(e2), _O(this, tP.REQUEST_UPDATE_CONSTRAINTS, Array.from(hp(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: n2, cb: r2 } of this.statsRegistry) try {
            const o2 = r2();
            e2.push({ processorID: t2, processorName: i2, type: n2, stats: o2 });
          } catch (e3) {
            lD.error(new xw(Uw.UNEXPECTED_ERROR, e3.message));
          }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained) return [];
          for (const { cb: t2 } of this.usageRegistry) try {
            let i2 = t2();
            i2 instanceof np && (i2 = await i2), e2.push(uP(uP({}, i2), {}, { direction: this.direction }));
          } catch (e3) {
            lD.error("gather extension usage error", e3);
          }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class YP extends Zw {
        get isPlayed() {
          return true;
        }
        get isFreeze() {
          return false;
        }
        constructor() {
          super(), dP(this, "context", void 0), dP(this, "processSourceNode", void 0), dP(this, "outputTrack", void 0), dP(this, "processedNode", void 0), dP(this, "clonedTrack", void 0), dP(this, "outputNode", void 0), this.outputNode = new qP();
        }
        setVolume() {
        }
        createOutputTrack() {
          throw new xw(Uw.NOT_SUPPORTED, "can not create output MediaStreamTrack when WebAudio disabled");
        }
        getOriginVolumeLevel() {
          return 0;
        }
        getAccurateVolumeLevel() {
          return 0;
        }
        stopGetAudioBuffer() {
        }
        startGetAudioBuffer() {
        }
        play() {
        }
        stop() {
        }
        destroy() {
        }
        updateTrack() {
        }
        updateOriginTrack() {
        }
        createMediaStreamSourceNode() {
        }
      }
      class qP {
        disconnect() {
        }
        connect() {
        }
      }
      function zP(e2) {
        return new np((t2, i2) => {
          let n2 = false;
          const r2 = document.createElement("video");
          r2.setAttribute("autoplay", ""), r2.setAttribute("muted", ""), r2.muted = true, r2.autoplay = true, r2.setAttribute("playsinline", ""), r2.setAttribute("style", "position: fixed; top: 0; left: 0; width: 1px; height: 1px"), document.body.appendChild(r2);
          const o2 = pw() ? "canplay" : "playing";
          r2.addEventListener(o2, () => {
            const e3 = r2.videoWidth, i3 = r2.videoHeight;
            !e3 && hw() || (n2 = true, r2.srcObject = null, r2.remove(), t2([e3, i3]));
          }), r2.srcObject = new MediaStream([e2]), r2.play().catch(MO), setTimeout(() => {
            n2 || (r2.srcObject = null, r2.remove(), t2([r2.videoWidth, r2.videoHeight]));
          }, 4e3);
        });
      }
      function JP(e2) {
        const t2 = {};
        e2.facingMode && (t2.facingMode = e2.facingMode), e2.cameraId && (t2.deviceId = { exact: e2.cameraId });
        const i2 = PD(e2.encoderConfig);
        return null != i2.width && (t2.width = i2.width), null != i2.height && (t2.height = i2.height), !ww() && i2.frameRate && (t2.frameRate = i2.frameRate), uw() && "object" == typeof t2.frameRate && (t2.frameRate.max = 60), hw() && (t2.frameRate = { ideal: 30, max: 30 }), t2;
      }
      function XP(e2) {
        const t2 = {};
        return ww() || (void 0 !== e2.AGC && (t2.autoGainControl = e2.AGC), void 0 !== e2.AEC && (t2.echoCancellation = e2.AEC), void 0 !== e2.ANS && (t2.noiseSuppression = e2.ANS, dw() && e2.ANS && (t2.googHighpassFilter = e2.ANS))), t2;
      }
      function QP(e2) {
        const t2 = XP(e2);
        if (e2.encoderConfig) {
          const i2 = UD(e2.encoderConfig);
          t2.channelCount = i2.stereo ? 2 : 1, t2.sampleRate = i2.sampleRate, t2.sampleSize = i2.sampleSize;
        }
        return e2.microphoneId && (t2.deviceId = { exact: e2.microphoneId }), Dw() && (t2.sampleRate = void 0), t2;
      }
      const ZP = (e2) => {
        const t2 = e2._encoderConfig;
        if (!t2) return;
        const { frameRate: i2, width: n2, height: r2 } = e2.getMediaStreamTrackSettings();
        let { frameRate: o2 = i2, width: s2 = n2, height: a2 = r2 } = t2;
        if (!o2 || !s2 || !a2) return;
        s2 = jO(s2), a2 = jO(a2), o2 = jO(o2);
        const { max: c2, min: d2 } = function(e3, t3, i3) {
          const n3 = 200 * Math.pow(i3 / 15, 0.6) * Math.pow(e3 * t3 / 640 / 360, 0.75);
          return { min: Math.floor(n3), max: Math.floor(4 * n3) };
        }(s2, a2, o2), { bitrateMax: l2, bitrateMin: u2 } = t2 || {};
        l2 || lD.debug("calculate bitrate: [w: ".concat(s2, ", h: ").concat(a2, ", fps: ").concat(o2, "] => [brMax: ").concat(l2, ", brMin: ").concat(u2, "]"));
        const { maxFramerate: h2 } = MN("ENCODER_CONFIG_LIMIT");
        return h2 && "number" == typeof h2 && (o2 = Math.min(o2, h2)), { frameRate: o2, bitrateMax: l2 || c2, bitrateMin: u2 || d2, scaleResolutionDownBy: 1, scale: 0 };
      }, $P = async (e2, t2, i2) => await (async (e3, t3, i3) => {
        const n2 = function(e4) {
          const t4 = [];
          for (let i4 = 0; i4 < e4.length; i4 += 2) t4.push(parseInt(e4.slice(i4, i4 + 2), 16));
          return Uint8Array.from(t4);
        }(GO("" + t3 + i3)).slice(0, 16), r2 = n2.slice(0, 12), o2 = await window.crypto.subtle.importKey("raw", n2, "AES-GCM", true, ["encrypt"]);
        return new Uint8Array(await window.crypto.subtle.encrypt({ name: "AES-GCM", iv: r2 }, o2, e3));
      })(e2.buffer, t2, i2), eL = (e2) => {
        const t2 = document.createElement("canvas");
        return t2.width = 2, t2.height = 2, new np((i2, n2) => {
          t2.toBlob(async (e3) => {
            if (t2.remove(), e3) {
              const n3 = await tL(e3);
              i2({ buffer: n3, width: t2.width, height: t2.height });
            } else n2(new xw(Uw.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
          }, e2, 1);
        });
      }, tL = async (e2) => {
        const t2 = await e2.arrayBuffer();
        return new Uint8Array(t2);
      };
      var iL, nL, rL, oL, sL, aL, cL, dL, lL, uL, hL, pL, _L, EL, mL, fL, TL, SL, gL, RL, vL, CL, IL, yL, AL, bL, wL, OL, NL, DL, PL, LL, kL, ML, UL, xL, VL, FL, BL, jL;
      let GL = (iL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), nL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), rL = jP(), oL = YO("LocalAudioTrack", "_enabledMutex"), sL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), aL = jP(), cL = YO("LocalAudioTrack", "_enabledMutex"), dL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), lL = jP(), uL = jP(), hL = jP(), pL = fD({ argsMap: (e2) => [e2.getTrackId()] }), _L = jP(), EL = fD({ argsMap: (e2) => [e2.getTrackId()] }), mL = jP(), fL = fD({ argsMap: (e2) => [e2.getTrackId()] }), TL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), SL = fD({ argsMap: (e2) => [e2.getTrackId()] }), cP((gL = class extends pP {
        get _source() {
          return this.initWebAudio();
        }
        set _source(e2) {
          this._trackSource = e2;
        }
        get processorContext() {
          return this._processorContext || (this._processorContext = this.initProcessor().processorContext), this._processorContext;
        }
        get processorDestination() {
          return this._processorDestination || (this._processorDestination = this.initProcessor().processorDestination), this._processorDestination;
        }
        get isPlaying() {
          return this._useAudioElement ? BP.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "LocalAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, i2), dP(this, "trackMediaType", qD.AUDIO), dP(this, "_encoderConfig", void 0), dP(this, "_trackSource", void 0), dP(this, "metadata", []), dP(this, "_enabled", true), dP(this, "_volume", 100), dP(this, "_useAudioElement", true), dP(this, "_bypassWebAudio", false), dP(this, "processor", void 0), dP(this, "_processorContext", void 0), dP(this, "_processorDestination", void 0), dP(this, "_getOriginVolumeLevel", void 0), this._encoderConfig = t2, this._getOriginVolumeLevel = !!n2, this._trackSource = new YP(), MN("DISABLE_WEBAUDIO") && (this._bypassWebAudio = true), MN("LOCAL_AUDIO_TRACK_USES_WEB_AUDIO") && (this._useAudioElement = false), lw() && !EP ? setTimeout(() => this.initWebAudio()) : this.initWebAudio();
        }
        setVolume(e2) {
          Bw(e2, "volume", 0, 1e3), this._volume = e2, this._source.setVolume(e2 / 100), this._useAudioElement && BP.setVolume(this.getTrackId(), e2);
          try {
            if (this._bypassWebAudio) return void lD.debug("[".concat(this.getTrackId(), "] setVolume returned because no pass through WebAudio."));
            const e3 = this._source.createOutputTrack();
            this._mediaStreamTrack !== e3 && (this._mediaStreamTrack = e3, _O(this, FD.NEED_REPLACE_TRACK, this).then(() => {
              lD.debug("[".concat(this.getTrackId(), "] replace web audio track success"));
            }).catch((e4) => {
              lD.warning("[".concat(this.getTrackId(), "] replace web audio track failed"), e4);
            }));
          } catch (e3) {
          }
        }
        getVolumeLevel() {
          return this._muted && this.enabled && this._getOriginVolumeLevel ? this._source.getOriginVolumeLevel() : this._source.getAccurateVolumeLevel();
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement || !vD()) throw new xw(Uw.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await BP.setSinkID(this.getTrackId(), e2);
        }
        async setEnabled(e2, t2, i2) {
          return this._setEnabled(e2, t2, i2);
        }
        async _setEnabled(e2, t2, i2) {
          if (!i2) {
            if (e2 === this._enabled) return;
            this.stateCheck("enabled", e2);
          }
          if (lD.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), e2) {
            this._originMediaStreamTrack.enabled = true;
            try {
              i2 || (this._enabled = true), await _O(this, FD.NEED_ENABLE_TRACK, this), lD.info("[".concat(this.getTrackId(), "] setEnabled to ").concat(e2, " success"));
            } catch (e3) {
              throw i2 || (this._enabled = false), lD.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e3.toString()), e3;
            }
          } else {
            this._originMediaStreamTrack.enabled = false, i2 || (this._enabled = false);
            try {
              await _O(this, FD.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw i2 || (this._enabled = true), lD.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
          }
        }
        async setMuted(e2) {
          e2 !== this._muted && (this.stateCheck("muted", e2), this._muted = e2, this._originMediaStreamTrack.enabled = !e2, lD.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e2)), e2 ? await _O(this, FD.NEED_MUTE_TRACK, this) : await _O(this, FD.NEED_UNMUTE_TRACK, this));
        }
        getStats() {
          IO(() => {
            lD.warning("[deprecated] LocalAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalAudioStats instead");
          }, "localAudioTrackGetStatsWarning");
          return EO(this, FD.GET_STATS) || uP({}, JD);
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2) return this._source.removeAllListeners(zD.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners(zD.ON_AUDIO_BUFFER), this._source.on(zD.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        play() {
          lD.debug("[".concat(this.getTrackId(), "] start audio playback")), this._useAudioElement ? (lD.debug("[".concat(this.getTrackId(), "] start audio playback in element")), BP.play(this._mediaStreamTrack, this.getTrackId(), this._volume)) : this._source.play();
        }
        stop() {
          lD.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._useAudioElement ? BP.stop(this.getTrackId()) : this._source.stop();
        }
        close() {
          super.close(), this._processorDestination && this.unbindProcessorDestinationEvents(this._processorDestination), this._processorContext && this.unbindProcessorContextEvents(this._processorContext), this.unpipe(), this._processorDestination && this._processorDestination._source && this._processorDestination._source.unpipe(), this._source.destroy();
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          lD.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && BP.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          this._originMediaStreamTrack !== e2 && (this._originMediaStreamTrack && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop()), e2.addEventListener("ended", this._handleTrackEnded), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this.processor && this._processorContext && this.processor.updateInput({ track: e2, context: this._processorContext }), this._mediaStreamTrack !== this._source.outputTrack ? (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await _O(this, FD.NEED_REPLACE_TRACK, this)) : this._source.updateTrack(this._originMediaStreamTrack), this._getOriginVolumeLevel && this._source.updateOriginTrack(e2));
        }
        renewMediaStreamTrack(e2) {
          return np.resolve(void 0);
        }
        pipe(e2) {
          if (this._bypassWebAudio) throw new xw(Uw.INVALID_OPERATION, "Can not process AudioTrack when bypassWebAudio set to true.");
          if (this.processor === e2) return e2;
          if (e2._source) throw new xw(Uw.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (!this.processor) return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents(e2) {
          e2.on(eP.ON_TRACK, async (e3) => {
            e3 ? e3 !== this._mediaStreamTrack && (this._mediaStreamTrack = e3, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e3), await _O(this, FD.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await _O(this, FD.NEED_REPLACE_TRACK, this));
          }), e2.on(eP.ON_NODE, (e3) => {
            this._source.processedNode = e3;
          });
        }
        unbindProcessorDestinationEvents(e2) {
          e2.removeAllListeners(eP.ON_TRACK), e2.removeAllListeners(eP.ON_NODE);
        }
        bindProcessorContextEvents(e2) {
          e2.on(tP.REQUEST_CONSTRAINTS, async (e3) => {
            e3(this._originMediaStreamTrack.getSettings());
          });
        }
        unbindProcessorContextEvents(e2) {
          e2.removeAllListeners(tP.REQUEST_CONSTRAINTS);
        }
        initWebAudio() {
          return this._trackSource instanceof YP && (this._trackSource = new CP(this._mediaStreamTrack, false, this._getOriginVolumeLevel ? this._mediaStreamTrack : void 0)), this._trackSource;
        }
        initProcessor() {
          const e2 = new KP(this._source.context, this.getTrackId(), "local"), t2 = new HP(e2);
          return this._processorContext = e2, this._processorDestination = t2, this.bindProcessorContextEvents(e2), this.bindProcessorDestinationEvents(t2), this._source.on(zD.UPDATE_SOURCE, () => {
            this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: e2 });
          }), this._useAudioElement && (this._useAudioElement = false, this.isPlaying && (BP.stop(this.getTrackId()), this._source.play()), _O(this, FD.NEED_REPLACE_MIXING_TRACK, this).then(() => {
            lD.debug("[".concat(this.getTrackId(), "] replace from origin track to web audio track success"));
          }).catch((e3) => {
            lD.warning("[".concat(this.getTrackId(), "] replace from origin track to web audio track failed"), e3);
          })), { processorContext: e2, processorDestination: t2 };
        }
      }).prototype, "setVolume", [iL], Object.getOwnPropertyDescriptor(gL.prototype, "setVolume"), gL.prototype), cP(gL.prototype, "setPlaybackDevice", [nL, rL], Object.getOwnPropertyDescriptor(gL.prototype, "setPlaybackDevice"), gL.prototype), cP(gL.prototype, "setEnabled", [oL, sL, aL], Object.getOwnPropertyDescriptor(gL.prototype, "setEnabled"), gL.prototype), cP(gL.prototype, "setMuted", [cL, dL, lL], Object.getOwnPropertyDescriptor(gL.prototype, "setMuted"), gL.prototype), cP(gL.prototype, "getStats", [uL], Object.getOwnPropertyDescriptor(gL.prototype, "getStats"), gL.prototype), cP(gL.prototype, "setAudioFrameCallback", [hL], Object.getOwnPropertyDescriptor(gL.prototype, "setAudioFrameCallback"), gL.prototype), cP(gL.prototype, "play", [pL, _L], Object.getOwnPropertyDescriptor(gL.prototype, "play"), gL.prototype), cP(gL.prototype, "stop", [EL, mL], Object.getOwnPropertyDescriptor(gL.prototype, "stop"), gL.prototype), cP(gL.prototype, "close", [fL], Object.getOwnPropertyDescriptor(gL.prototype, "close"), gL.prototype), cP(gL.prototype, "pipe", [TL], Object.getOwnPropertyDescriptor(gL.prototype, "pipe"), gL.prototype), cP(gL.prototype, "unpipe", [SL], Object.getOwnPropertyDescriptor(gL.prototype, "unpipe"), gL.prototype), gL), WL = (RL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), vL = jP(), CL = YO("MicrophoneAudioTrack", "_enabledMutex"), IL = fD({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), yL = jP(), AL = fD({ argsMap: (e2) => [e2.getTrackId()] }), cP((bL = class extends GL {
        get __className__() {
          return "MicrophoneAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2.encoderConfig ? UD(t2.encoderConfig) : {}, n2, MN("GET_VOLUME_OF_MUTED_AUDIO_TRACK")), dP(this, "_config", void 0), dP(this, "_deviceName", "default"), dP(this, "_constraints", void 0), dP(this, "_originalConstraints", void 0), dP(this, "_enabled", true), this._config = t2, this._constraints = i2, this._originalConstraints = i2, this._deviceName = e2.label, "boolean" == typeof t2.bypassWebAudio && (this._bypassWebAudio = t2.bypassWebAudio), (Cw() || Iw()) && mP.bindInterruptDetectorTrack(this);
        }
        async setDevice(e2) {
          if (lD.info("[".concat(this.getTrackId(), "] start set device to ").concat(e2)), this._enabled) try {
            const t2 = await kP.getDeviceById(e2), i2 = {};
            i2.audio = uP({}, this._constraints), i2.audio.deviceId = { exact: e2 }, this._originMediaStreamTrack.stop();
            let n2 = null;
            try {
              n2 = await NP(i2, this.getTrackId());
            } catch (e3) {
              throw lD.error("[".concat(this.getTrackId(), "] setDevice failed"), e3.toString()), n2 = await NP({ audio: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(n2.getAudioTracks()[0], false), e3;
            }
            await this._updateOriginMediaStreamTrack(n2.getAudioTracks()[0], false), this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
          } catch (e3) {
            throw lD.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
          }
          else try {
            const t2 = await kP.getDeviceById(e2);
            this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
          } catch (e3) {
            throw lD.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
          }
          lD.info("[".concat(this.getTrackId(), "] set device to ").concat(e2, " success"));
        }
        async setEnabled(e2, t2, i2) {
          if (t2) return lD.debug("[".concat(this.getTrackId(), "] setEnabled false (do not close microphone)")), await super._setEnabled(e2);
          if (!i2) {
            if (e2 === this._enabled) return;
            this.stateCheck("enabled", e2);
          }
          if (lD.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), MN("AUTO_RESET_AUDIO_ROUTE") && (pw() || Aw())) {
            const t3 = navigator.audioSession;
            t3 && (e2 || (t3.type = "playback"), t3.type = "auto");
          }
          if (!e2) {
            var n2;
            this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop(), null === (n2 = this._source.clonedTrack) || void 0 === n2 || n2.stop(), i2 || (this._enabled = false);
            try {
              await _O(this, FD.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw lD.error("[".concat(this.getTrackId(), "] setEnabled false failed"), e3.toString()), e3;
            }
            return;
          }
          const r2 = uP({}, this._constraints), o2 = kP.searchDeviceIdByName(this._deviceName);
          o2 && !r2.deviceId && (r2.deviceId = o2);
          try {
            i2 || (this._enabled = true);
            const e3 = await NP({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], false), await _O(this, FD.NEED_ENABLE_TRACK, this);
          } catch (e3) {
            throw i2 || (this._enabled = false), lD.error("[".concat(this.getTrackId(), "] setEnabled true failed"), e3.toString()), e3;
          }
          lD.info("[".concat(this.getTrackId(), "] setEnabled success"));
        }
        close() {
          super.close(), (Cw() || Iw()) && mP.unbindInterruptDetectorTrack(this);
        }
        onTrackEnded() {
          if ((pw() || Aw()) && this._enabled && !this._isClosed && mP.duringInterruption) {
            const e2 = async () => {
              mP.off(ID.IOS_INTERRUPTION_END, e2), this._enabled && !this._isClosed && (lD.debug("[".concat(this.getTrackId(), "] try capture microphone media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            mP.on(ID.IOS_INTERRUPTION_END, e2);
          } else lD.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(KD.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e2) {
          const t2 = e2 || this._constraints, i2 = kP.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = i2), this._constraints = t2, this._enabled) {
            this._originMediaStreamTrack.stop();
            const e3 = await NP({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], true);
          }
        }
        bindProcessorContextEvents(e2) {
          super.bindProcessorContextEvents(e2), e2.on(tP.REQUEST_UPDATE_CONSTRAINTS, async (e3, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e3);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e4) {
              i2(e4);
            }
          });
        }
        unbindProcessorContextEvents(e2) {
          super.unbindProcessorContextEvents(e2), e2.removeAllListeners(tP.REQUEST_UPDATE_CONSTRAINTS);
        }
      }).prototype, "setDevice", [RL, vL], Object.getOwnPropertyDescriptor(bL.prototype, "setDevice"), bL.prototype), cP(bL.prototype, "setEnabled", [CL, IL, yL], Object.getOwnPropertyDescriptor(bL.prototype, "setEnabled"), bL.prototype), cP(bL.prototype, "close", [AL], Object.getOwnPropertyDescriptor(bL.prototype, "close"), bL.prototype), bL), HL = (wL = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2, e2.duration] }), OL = jP(), NL = fD({ argsMap: (e2) => [e2.getTrackId()] }), DL = jP(), PL = fD({ argsMap: (e2) => [e2.getTrackId()] }), LL = jP(), kL = fD({ argsMap: (e2) => [e2.getTrackId()] }), ML = jP(), UL = fD({ argsMap: (e2) => [e2.getTrackId()] }), xL = jP(), VL = fD({ argsMap: (e2) => [e2.getTrackId()] }), FL = fD({ argsMap: (e2) => [e2.getTrackId()] }), BL = jP(), cP((jL = class extends GL {
        get __className__() {
          return "BufferSourceAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(t2.createOutputTrack(), i2, n2), dP(this, "source", void 0), dP(this, "_bufferSource", void 0), this._useAudioElement = false, this.source = e2, this._bufferSource = t2, this._bufferSource.on(zD.AUDIO_SOURCE_STATE_CHANGE, (e3) => {
            this.safeEmit(KD.SOURCE_STATE_CHANGE, e3);
          });
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
        }
        get currentState() {
          return this._bufferSource.currentState;
        }
        get duration() {
          return this._bufferSource.duration;
        }
        get playbackSpeed() {
          return this._bufferSource.playbackSpeed;
        }
        getCurrentTime() {
          return this._bufferSource.currentTime;
        }
        startProcessAudioBuffer(e2) {
          e2 && this._bufferSource.updateOptions(e2), this._bufferSource.startProcessAudioBuffer();
        }
        pauseProcessAudioBuffer() {
          this._bufferSource.pauseProcessAudioBuffer();
        }
        seekAudioBuffer(e2) {
          this._bufferSource.seekAudioBuffer(e2);
        }
        resumeProcessAudioBuffer() {
          this._bufferSource.resumeProcessAudioBuffer();
        }
        stopProcessAudioBuffer() {
          this._bufferSource.stopProcessAudioBuffer();
        }
        close() {
          this.source = null, this._bufferSource.destroy(), super.close();
        }
        setAudioBufferPlaybackSpeed(e2) {
          Bw(e2, "speed", 0), this._bufferSource.setAudioBufferPlaybackSpeed(e2);
        }
      }).prototype, "startProcessAudioBuffer", [wL, OL], Object.getOwnPropertyDescriptor(jL.prototype, "startProcessAudioBuffer"), jL.prototype), cP(jL.prototype, "pauseProcessAudioBuffer", [NL, DL], Object.getOwnPropertyDescriptor(jL.prototype, "pauseProcessAudioBuffer"), jL.prototype), cP(jL.prototype, "seekAudioBuffer", [PL, LL], Object.getOwnPropertyDescriptor(jL.prototype, "seekAudioBuffer"), jL.prototype), cP(jL.prototype, "resumeProcessAudioBuffer", [kL, ML], Object.getOwnPropertyDescriptor(jL.prototype, "resumeProcessAudioBuffer"), jL.prototype), cP(jL.prototype, "stopProcessAudioBuffer", [UL, xL], Object.getOwnPropertyDescriptor(jL.prototype, "stopProcessAudioBuffer"), jL.prototype), cP(jL.prototype, "close", [VL], Object.getOwnPropertyDescriptor(jL.prototype, "close"), jL.prototype), cP(jL.prototype, "setAudioBufferPlaybackSpeed", [FL, BL], Object.getOwnPropertyDescriptor(jL.prototype, "setAudioBufferPlaybackSpeed"), jL.prototype), jL);
      class KL extends GL {
        get __className__() {
          return "MixingAudioTrack";
        }
        get isActive() {
          for (const e2 of this.trackList) if (e2._enabled && !e2._isClosed && !e2.muted) return true;
          return false;
        }
        constructor() {
          const e2 = fP().createMediaStreamDestination();
          super(e2.stream.getAudioTracks()[0], void 0, LO(8, "track-mix-")), dP(this, "trackList", void 0), dP(this, "destNode", void 0), this._useAudioElement = false;
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
          this.destNode = e2, this.trackList = [];
        }
        hasAudioTrack(e2) {
          return -1 !== this.trackList.indexOf(e2);
        }
        addAudioTrack(e2) {
          -1 === this.trackList.indexOf(e2) ? (lD.debug("add ".concat(e2.getTrackId(), " to mixing track")), e2._source.outputNode.connect(this.destNode), this.trackList.push(e2), this.updateEncoderConfig()) : lD.debug("track ".concat(e2.getTrackId(), " is already added"));
        }
        removeAudioTrack(e2) {
          if (-1 !== this.trackList.indexOf(e2)) {
            lD.debug("remove ".concat(e2.getTrackId(), " from mixing track"));
            try {
              e2._source.outputNode.disconnect(this.destNode);
            } catch (e3) {
            }
            TO(this.trackList, e2), this.updateEncoderConfig();
          }
        }
        updateEncoderConfig() {
          const e2 = {};
          this.trackList.forEach((t2) => {
            t2._encoderConfig && ((t2._encoderConfig.bitrate || 0) > (e2.bitrate || 0) && (e2.bitrate = t2._encoderConfig.bitrate), (t2._encoderConfig.sampleRate || 0) > (e2.sampleRate || 0) && (e2.sampleRate = t2._encoderConfig.sampleRate), (t2._encoderConfig.sampleSize || 0) > (e2.sampleSize || 0) && (e2.sampleSize = t2._encoderConfig.sampleSize), t2._encoderConfig.stereo && (e2.stereo = true));
          }), this._encoderConfig = e2;
        }
        _updateRtpTransceiver(e2) {
          this._rtpTransceiver !== e2 && (this._rtpTransceiver = e2, this.trackList.forEach((t2) => {
            t2 instanceof KL ? t2.emit(HD.TRANSCEIVER_UPDATED, e2) : t2._updateRtpTransceiver(e2);
          }));
        }
      }
      class YL extends vP {
        set currentState(e2) {
          e2 !== this._currentState && (this._currentState = e2, this.safeEmit(zD.AUDIO_SOURCE_STATE_CHANGE, this._currentState));
        }
        get currentState() {
          return this._currentState;
        }
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          super(), dP(this, "audioBuffer", void 0), dP(this, "sourceNode", void 0), dP(this, "startPlayTime", 0), dP(this, "startPlayOffset", 0), dP(this, "pausePlayTime", 0), dP(this, "options", void 0), dP(this, "currentLoopCount", 0), dP(this, "currentPlaybackSpeed", 100), dP(this, "_currentState", "stopped"), this.audioBuffer = e2, this.options = t2, this.startPlayOffset = this.options.startPlayTime || 0;
        }
        createWebAudioDiagram() {
          return this.context.createGain();
        }
        get duration() {
          return this.audioBuffer ? this.audioBuffer.duration : 0;
        }
        get playbackSpeed() {
          return this.currentPlaybackSpeed;
        }
        get currentTime() {
          return this.audioBuffer ? "stopped" === this.currentState ? 0 : "paused" === this.currentState ? this.pausePlayTime : ((this.context.currentTime - this.startPlayTime) * (this.playbackSpeed / 100) + this.startPlayOffset) % this.audioBuffer.duration : 0;
        }
        updateOptions(e2) {
          "stopped" === this.currentState ? (this.options = e2, this.startPlayOffset = this.options.startPlayTime || 0) : lD.warning("can not set audio source options");
        }
        startProcessAudioBuffer() {
          this.sourceNode && this.stopProcessAudioBuffer(), this.sourceNode = this.createSourceNode(), this.startSourceNode(), this.currentState = "playing";
        }
        pauseProcessAudioBuffer() {
          this.sourceNode && "playing" === this.currentState && (this.pausePlayTime = this.currentTime, this.sourceNode.onended = null, this.sourceNode.stop(), this.sourceNode.buffer = null, this.sourceNode = this.createSourceNode(), this.currentState = "paused");
        }
        seekAudioBuffer(e2) {
          this.sourceNode && (this.sourceNode.onended = null, "playing" === this.currentState && this.sourceNode.stop(), this.sourceNode = this.createSourceNode(), "playing" === this.currentState ? (this.startPlayOffset = e2, this.startSourceNode()) : "paused" === this.currentState && (this.pausePlayTime = e2));
        }
        resumeProcessAudioBuffer() {
          "paused" === this.currentState && this.sourceNode && (this.startPlayOffset = this.pausePlayTime, this.pausePlayTime = 0, this.startSourceNode(), this.currentState = "playing");
        }
        stopProcessAudioBuffer() {
          if (this.sourceNode) {
            this.sourceNode.onended = null;
            try {
              this.sourceNode.stop();
            } catch (e2) {
            }
            this.reset();
          }
        }
        destroy() {
          this.audioBuffer = null, super.destroy();
        }
        setAudioBufferPlaybackSpeed(e2) {
          this.sourceNode && ("playing" === this.currentState && (this.startPlayOffset = this.currentTime, this.startPlayTime = this.context.currentTime), this.sourceNode.playbackRate.value = e2 / 100), this.currentPlaybackSpeed = e2;
        }
        startSourceNode() {
          this.sourceNode && this.sourceNode.buffer && (this.sourceNode.start(0, this.startPlayOffset), this.startPlayTime = this.context.currentTime, this.sourceNode.onended = this.handleSourceNodeEnded.bind(this));
        }
        createSourceNode() {
          const e2 = this.context.createBufferSource();
          return e2.buffer = this.audioBuffer, e2.loop = !!this.options.loop, e2.connect(this.outputNode), e2.playbackRate.value = this.currentPlaybackSpeed / 100, e2;
        }
        handleSourceNodeEnded() {
          if (this.currentLoopCount += 1, this.options.cycle && this.options.cycle > this.currentLoopCount) return this.startPlayOffset = 0, this.sourceNode = void 0, void this.startProcessAudioBuffer();
          this.reset();
        }
        reset() {
          this.startPlayOffset = this.options.startPlayTime || 0, this.currentState = "stopped", this.sourceNode && (this.sourceNode.disconnect(), this.sourceNode = void 0), this.currentLoopCount = 0;
        }
      }
      const qL = /* @__PURE__ */ new Map();
      class zL {
        get rendFrameRate() {
          if (this.renderStats && this.renderStats.curTs !== this.renderStats.lastTs) {
            const e2 = this.renderStats.curTs - this.renderStats.lastTs, t2 = (this.renderStats.renderNum - this.renderStats.lastRenderNum) / e2;
            return this.renderStats.lastRenderNum = this.renderStats.renderNum, this.renderStats.lastTs = this.renderStats.curTs, t2;
          }
          return 0;
        }
        get videoElementStatus() {
          return this._videoElementStatus;
        }
        set videoElementStatus(e2) {
          e2 !== this._videoElementStatus && (lD.debug("[".concat(this.trackId, "] video-element-status change ").concat(this._videoElementStatus, " => ").concat(e2)), this._videoElementStatus = e2);
        }
        get videoState() {
          return this._videoState;
        }
        set videoState(e2) {
          var t2;
          e2 !== this._videoState && (this._videoState = e2, null === (t2 = this.onVideoStateChanged) || void 0 === t2 || t2.call(this, this.videoState));
        }
        constructor(e2) {
          dP(this, "trackId", void 0), dP(this, "config", void 0), dP(this, "onFirstVideoFrameDecoded", void 0), dP(this, "onVideoStateChanged", void 0), dP(this, "freezeTimeCounterList", []), dP(this, "renderFreezeAccTime", 0), dP(this, "isKeepLastFrame", false), dP(this, "timeUpdatedCount", 0), dP(this, "freezeTime", 0), dP(this, "playbackTime", 0), dP(this, "lastTimeUpdatedTime", 0), dP(this, "autoplayFailed", false), dP(this, "videoTrack", void 0), dP(this, "videoElement", void 0), dP(this, "cacheVideoElement", void 0), dP(this, "renderStats", void 0), dP(this, "_videoState", oP.VideoStateStopped), dP(this, "videoElementCheckInterval", void 0), dP(this, "videoElementFreezeTimeout", void 0), dP(this, "_videoElementStatus", rP.NONE), dP(this, "isGettingVideoDimensions", false), dP(this, "startGetVideoDimensions", () => {
            const e3 = () => {
              if (this.isGettingVideoDimensions = true, this.videoElement.videoWidth * this.videoElement.videoHeight > 4) return lD.debug("[".concat(this.trackId, "] current video dimensions:"), this.videoElement.videoWidth, this.videoElement.videoHeight), void (this.isGettingVideoDimensions = false);
              setTimeout(e3, 500);
            };
            !this.isGettingVideoDimensions && e3();
          }), dP(this, "autoResumeAfterInterruption", () => {
            this.videoTrack && "live" === this.videoTrack.readyState && "running" === mP.curState && (lD.debug("[track-".concat(this.trackId, "] video element paused, auto resume for ").concat(aw())), yw() ? (this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : (this.videoElement.pause(), this.videoElement.play()));
          }), dP(this, "handleVideoEvents", (e3) => {
            switch (e3.type) {
              case "play":
              case "playing":
                this.startGetVideoDimensions(), this.videoElementStatus = rP.PLAYING;
                break;
              case "loadeddata":
                if (this.videoState = oP.VideoStateStarting, this.onFirstVideoFrameDecoded && this.onFirstVideoFrameDecoded(), this.cacheVideoElement) {
                  try {
                    this.cacheVideoElement.srcObject = null, this.cacheVideoElement.remove();
                  } catch (e4) {
                  }
                  this.cacheVideoElement = void 0;
                }
                break;
              case "canplay":
                this.videoElementStatus = rP.CANPLAY;
                break;
              case "stalled":
                this.videoElementStatus = rP.STALLED;
                break;
              case "suspend":
                this.videoElementStatus = rP.SUSPEND;
                break;
              case "pause":
                this.videoElementStatus = rP.PAUSED, pw() || Aw() || lw() && this.autoplayFailed || !this.videoTrack || "live" !== this.videoTrack.readyState || (lD.debug("[track-".concat(this.trackId, "] video element paused, auto resume")), this.videoElement.play());
                break;
              case "waiting":
                this.videoElementStatus = rP.WAITING;
                break;
              case "abort":
                this.videoElementStatus = rP.ABORT;
                break;
              case "ended":
                this.videoElementStatus = rP.ENDED;
                break;
              case "emptied":
                this.videoElementStatus = rP.EMPTIED;
                break;
              case "error": {
                const e4 = this.videoElement.error;
                e4 && (this.videoElementStatus = rP.ERROR, lD.error("[".concat(this.trackId, "] media error: ").concat(e4.message, " (").concat(e4.code, ")")));
                break;
              }
              case "timeupdate": {
                const e4 = performance.now();
                if (this.timeUpdatedCount += 1, this.timeUpdatedCount < 10) return void (this.lastTimeUpdatedTime = e4);
                const t2 = e4 - this.lastTimeUpdatedTime, i2 = this.lastTimeUpdatedTime;
                if (this.lastTimeUpdatedTime = e4, Jk.lastVisibleTime < Jk.lastHiddenTime || i2 < Jk.lastHiddenTime || i2 < Jk.lastVisibleTime) return;
                for (t2 > MN("VIDEO_FREEZE_DURATION") && (this.freezeTime += t2), this.playbackTime += t2; this.playbackTime >= 6e3; ) {
                  this.playbackTime -= 6e3;
                  const e5 = Math.min(6e3, this.freezeTime);
                  this.freezeTimeCounterList.push(e5), this.freezeTime = Math.max(0, this.freezeTime - 6e3);
                }
                break;
              }
            }
          }), dP(this, "autoResumeAfterInterruptionOnIOS15_16", () => {
            this.videoTrack && "live" === this.videoTrack.readyState && (lD.debug("[track-".concat(this.trackId, "] video element paused, auto resume for ").concat(aw())), yw() ? (this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : (this.videoElement.pause(), this.videoElement.play()));
          }), this.trackId = e2.trackId, this.config = e2, e2.element instanceof HTMLVideoElement ? this.videoElement = e2.element : this.videoElement = document.createElement("video"), mP.on(ID.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), mP.on(ID.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16);
        }
        getVideoElement() {
          return this.videoElement;
        }
        getContainerElement() {
          var e2;
          return null !== (e2 = this.videoElement.parentElement) && void 0 !== e2 ? e2 : void 0;
        }
        updateConfig(e2) {
          this.config = e2, this.trackId = e2.trackId, e2.element !== this.videoElement && (this.destroy(), this.videoElement = e2.element), this.videoTrack && this.initVideoElement();
        }
        updateVideoTrack(e2) {
          this.videoTrack !== e2 && (this.videoTrack = e2, this.initVideoElement());
        }
        play(e2) {
          const t2 = this.videoElement.play();
          t2 && t2.catch && t2.catch((t3) => {
            e2 && VP(e2, "video", t3.message, this.trackId), "NotAllowedError" === t3.name ? (lD.warning("detected video element autoplay failed", t3), this.autoplayFailed = true, this.handleAutoPlayFailed()) : lD.warning("[".concat(this.trackId, "] play warning: "), t3);
          });
          const i2 = rw();
          if (("Safari" === i2.name && 15 === Number(i2.version) || Cw()) && t2 && t2.then) {
            const e3 = () => {
              this.config.mirror && (this.videoElement.style.transform = "rotateY(180deg)");
            };
            t2.then(e3).catch(e3);
          }
        }
        getCurrentFrame() {
          const e2 = document.createElement("canvas");
          e2.width = this.videoElement.videoWidth, e2.height = this.videoElement.videoHeight;
          const t2 = e2.getContext("2d");
          if (!t2) return lD.error("create canvas context failed!"), new ImageData(2, 2);
          t2.drawImage(this.videoElement, 0, 0, e2.width, e2.height);
          const i2 = t2.getImageData(0, 0, e2.width, e2.height);
          return e2.remove(), i2;
        }
        async getCurrentFrameToUint8Array(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          const i2 = document.createElement("canvas");
          i2.width = this.videoElement.videoWidth, i2.height = this.videoElement.videoHeight;
          const n2 = i2.getContext("2d");
          return n2 ? (n2.drawImage(this.videoElement, 0, 0, i2.width, i2.height), new np((n3, r2) => {
            i2.toBlob(async (e3) => {
              if (i2.remove(), e3) {
                const t3 = await tL(e3);
                n3({ buffer: t3, width: i2.width, height: i2.height });
              } else r2(new xw(Uw.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
            }, e2, t2 < 0 ? 0.1 : t2 > 1 ? 1 : t2);
          })) : await eL(e2);
        }
        destroy() {
          this.renderStats = void 0, mP.off(ID.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), mP.off(ID.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16), this.videoElement.srcObject = null, this.resetVideoElement(), this.freezeTimeCounterList = [], this.videoState = oP.VideoStateStopped;
        }
        initVideoElement() {
          if (this.videoElementStatus = rP.INIT, !this.videoElementCheckInterval && (JL.forEach((e3) => {
            this.videoElement.addEventListener(e3, this.handleVideoEvents);
          }), this.videoElementCheckInterval = window.setInterval(() => {
            (function(e3) {
              return e3 !== document.body && document.body.contains(e3);
            })(this.videoElement) || (this.videoElementStatus = rP.DESTROYED);
          }, 1e3), MN("ENABLE_VIDEO_FRAME_CALLBACK"))) {
            var e2, t2;
            let i3;
            const n3 = () => {
              "visible" === document.visibilityState && (document.removeEventListener("visibilitychange", n3), this.videoElementFreezeTimeout = window.setTimeout(r2, MN("VIDEO_FREEZE_DURATION")));
            }, r2 = () => {
              this.videoElementFreezeTimeout = void 0, this.videoState === oP.VideoStateDecoding && ("visible" === document.visibilityState ? this.videoState = oP.VideoStateFrozen : document.addEventListener("visibilitychange", n3));
            }, o2 = (e3, t3) => {
              if (this.videoElementStatus === rP.PLAYING) {
                if (this.renderStats ? (this.renderStats.renderNum++, this.renderStats.curTs = t3.mediaTime) : this.renderStats = { lastTs: t3.mediaTime, curTs: t3.mediaTime, lastRenderNum: 0, renderNum: 0 }, i3) {
                  const e4 = t3.presentationTime - i3.presentationTime;
                  this.videoState === oP.VideoStateStarting && (this.videoState = oP.VideoStateDecoding), this.videoState === oP.VideoStateDecoding && this.onVideoStateChanged && (this.videoElementFreezeTimeout && window.clearTimeout(this.videoElementFreezeTimeout), this.videoElementFreezeTimeout = window.setTimeout(r2, MN("VIDEO_FREEZE_DURATION"))), e4 < MN("VIDEO_FREEZE_DURATION") && this.videoState === oP.VideoStateFrozen && (this.videoState = oP.VideoStateDecoding), e4 > MN("VIDEO_FREEZE_DURATION") && Jk.lastVisibleTime >= Jk.lastHiddenTime && i3.timestamp > Jk.lastVisibleTime && i3.timestamp > Jk.lastHiddenTime && (this.renderFreezeAccTime += e4);
                }
                i3 = uP(uP({}, t3), {}, { timestamp: e3 });
              }
              var n4, s2;
              MN("ENABLE_VIDEO_FRAME_CALLBACK") && (null === (n4 = (s2 = this.videoElement).requestVideoFrameCallback) || void 0 === n4 || n4.call(s2, o2));
            };
            null === (e2 = (t2 = this.videoElement).requestVideoFrameCallback) || void 0 === e2 || e2.call(t2, o2);
          }
          this.videoElement.controls = false, this.videoElement.setAttribute("playsinline", ""), Dw() && !MN("HIDE_NO_POSTER") && (this.videoElement.poster = "noposter");
          const i2 = rw();
          "Safari" === i2.name && 15 === Number(i2.version) || Cw() || !this.config.mirror || (this.videoElement.style.transform = "rotateY(180deg)"), this.config.fit ? this.videoElement.style.objectFit = this.config.fit : this.videoElement.style.objectFit = "cover", this.videoElement.setAttribute("muted", ""), this.videoElement.muted = true, this.videoElement.srcObject && this.videoElement.srcObject instanceof MediaStream ? this.videoElement.srcObject.getVideoTracks()[0] !== this.videoTrack && (this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, hw() && this.videoElement.load()) : (this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, hw() && this.videoElement.load());
          const n2 = this.videoElement.play();
          void 0 !== n2 && n2.catch((e3) => {
            lD.debug("[".concat(this.trackId, "] playback interrupted"), e3.toString());
          });
        }
        resetVideoElement() {
          JL.forEach((e2) => {
            this.videoElement && this.videoElement.removeEventListener(e2, this.handleVideoEvents);
          }), this.videoElementCheckInterval && (window.clearInterval(this.videoElementCheckInterval), this.videoElementCheckInterval = void 0), this.videoElementStatus = rP.NONE;
        }
        handleAutoPlayFailed() {
          const e2 = (t2) => {
            t2.preventDefault(), this.videoElement.play().then(() => {
              lD.debug("[".concat(this.trackId, "] Video element for trackId:").concat(this.trackId, " autoplay resumed."));
            }).catch((e3) => {
              lD.error(e3);
            }), this.autoplayFailed = false, Pw() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true));
          };
          Pw() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), xP();
        }
      }
      const JL = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "timeupdate", "error"];
      class XL extends zL {
        constructor(e2) {
          super(e2), dP(this, "container", void 0), dP(this, "slot", void 0), this.slot = e2.element, this.updateConfig(e2);
        }
        updateConfig(e2) {
          this.config = e2, this.trackId = e2.trackId;
          const t2 = e2.element;
          t2 !== this.slot && (this.destroy(), this.slot = t2), this.createElements();
        }
        updateVideoTrack(e2) {
          this.videoTrack !== e2 && (this.videoTrack = e2, this.createElements());
        }
        play(e2) {
          var t2;
          null !== (t2 = this.container) && void 0 !== t2 && t2.contains(this.videoElement) && super.play(e2);
        }
        getCurrentFrame() {
          var e2;
          return null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) ? super.getCurrentFrame() : new ImageData(2, 2);
        }
        async getCurrentFrameToUint8Array(e2) {
          var t2;
          let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          return null !== (t2 = this.container) && void 0 !== t2 && t2.contains(this.videoElement) ? await super.getCurrentFrameToUint8Array(e2, i2) : await eL(e2);
        }
        destroy() {
          if (super.destroy(), this.videoElement.remove(), this.videoElement = document.createElement("video"), this.container) {
            try {
              this.container.remove(), this.slot.removeChild(this.container);
            } catch (e2) {
            }
            this.container = void 0;
          }
        }
        createElements() {
          this.container || (this.container = document.createElement("div")), this.container.id = "agora-video-player-".concat(this.trackId), this.container.style.width = "100%", this.container.style.height = "100%", this.container.style.position = "relative", this.container.style.overflow = "hidden", this.videoTrack ? (this.container.style.backgroundColor = "black", MN("KEEP_LAST_FRAME") && this.isKeepLastFrame && this.videoElement.paused && this.resetVideoElement(), this.mountedVideoElement()) : this.unmountedVideoElement(), this.slot.appendChild(this.container);
        }
        mountedVideoElement() {
          var e2;
          !this.container || null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) || this.container.appendChild(this.videoElement), super.initVideoElement(), this.videoElement.id = "video_".concat(this.trackId), this.videoElement.className = "agora_video_player", this.videoElement.style.width = "100%", this.videoElement.style.height = "100%", this.videoElement.style.position = "absolute", this.videoElement.style.left = "0", this.videoElement.style.top = "0";
        }
        unmountedVideoElement() {
          var e2;
          if (null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement)) {
            super.resetVideoElement();
            try {
              this.container && this.container.removeChild(this.videoElement);
            } catch (e3) {
            }
            this.videoElement = document.createElement("video");
          }
        }
        resetVideoElement() {
          var e2;
          null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) && (super.resetVideoElement(), this.cacheVideoElement = this.videoElement, this.videoElement = document.createElement("video"));
        }
        getContainerElement() {
          return this.container;
        }
      }
      var QL, ZL, $L, ek, tk, ik, nk, rk, ok, sk, ak, ck, dk, lk, uk, hk, pk, _k, Ek, mk, fk, Tk, Sk, gk, Rk, vk, Ck, Ik, yk, Ak, bk, wk, Ok, Nk;
      let Dk = (QL = fD({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : t2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement", i2] }), ZL = jP(), $L = fD({ argsMap: (e2) => [e2.getTrackId()] }), ek = YO("LocalVideoTrack", "_enabledMutex"), tk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), ik = jP(), nk = YO("LocalVideoTrack", "_enabledMutex"), rk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), ok = jP(), sk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), ak = jP(), ck = jP(), dk = fD({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), lk = jP(), uk = jP(), hk = jP(), pk = jP(), _k = jP(), Ek = jP(), mk = jP(), fk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), Tk = fD({ argsMap: (e2) => [e2.getTrackId()] }), Sk = fD({ argsMap: (e2) => [e2.getTrackId()] }), gk = fD({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2.label, i2] }), Rk = class e2 extends pP {
        get videoHeight() {
          if (lw()) {
            const { height: e3 } = this._mediaStreamTrack.getSettings();
            return this._videoHeight = e3, this._videoHeight;
          }
          return this._videoHeight;
        }
        get videoWidth() {
          if (lw()) {
            const { width: e3 } = this._mediaStreamTrack.getSettings();
            return this._videoWidth = e3, this._videoWidth;
          }
          return this._videoWidth;
        }
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== rP.PLAYING);
        }
        get processorDestination() {
          return this._processorDestination;
        }
        get processorContext() {
          return this._processorContext;
        }
        set processorContext(e3) {
          this._processorContext = e3;
        }
        get __className__() {
          return "LocalVideoTrack";
        }
        constructor(e3, t2, i2, n2, r2, o2) {
          if (super(e3, r2), dP(this, "trackMediaType", qD.VIDEO), dP(this, "_player", void 0), dP(this, "isUseScaleResolutionDownBy", false), dP(this, "_videoVisibleTimer", null), dP(this, "_previousVideoVisibleStatus", void 0), dP(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), dP(this, "_encoderConfig", void 0), dP(this, "_scalabilityMode", { numSpatialLayers: 1, numTemporalLayers: 1 }), dP(this, "_optimizationMode", void 0), dP(this, "_videoHeight", void 0), dP(this, "_videoWidth", void 0), dP(this, "_forceBitrateLimit", void 0), dP(this, "_enabled", true), dP(this, "_processorDestination", void 0), dP(this, "_processorContext", void 0), lw()) {
            const { width: t3, height: i3 } = e3.getSettings();
            this._videoWidth = t3, this._videoHeight = i3;
          } else this.updateMediaStreamTrackResolution();
          if (this._encoderConfig = t2, this._scalabilityMode = i2, this._optimizationMode = n2, this._hints = o2 || [], -1 === this._hints.indexOf(BD.SCREEN_TRACK)) this.updateBitrateFromProfile();
          else if (mw(ew.CHROME, 115) && -1 !== sw().indexOf("Windows")) {
            const t3 = function(e4, t4) {
              if ("VideoFrame" in window && "TransformStream" in window && RD().supportWebRTCInsertableStream) {
                const i3 = new MediaStreamTrackProcessor(e4), n3 = new MediaStreamTrackGenerator({ kind: "video" });
                let r3, o3, s2 = Date.now();
                const a2 = () => {
                  c2 && (clearInterval(c2), c2 = void 0), r3 && (r3.close(), r3 = void 0), e4.stop(), o3 = void 0, n3.removeEventListener("ended", a2);
                };
                let c2 = window.setInterval(() => {
                  if (o3 && r3 && Date.now() - s2 > (null != t4 ? t4 : 1e3)) try {
                    "live" === n3.readyState ? o3.enqueue(r3.clone()) : a2();
                  } catch (e5) {
                    a2();
                  }
                }, null != t4 ? t4 : 1e3);
                const d2 = new TransformStream({ transform: (e5, t5) => {
                  "live" === n3.readyState ? (o3 = t5, s2 = Date.now(), void 0 === r3 ? (r3 = e5, t5.enqueue(e5.clone())) : (t5.enqueue(r3), r3 = e5)) : e5.close();
                } });
                return n3.addEventListener("ended", a2), i3.readable.pipeThrough(d2).pipeTo(n3.writable), n3;
              }
            }(e3);
            t3 && (lD.info("local screen video track begin to inject frame"), this._mediaStreamTrack = t3);
          }
          t2 && -1 !== this._hints.indexOf(BD.CUSTOM_TRACK) && this.setEncoderConfiguration(t2), this._processorContext = new WP(this.getTrackId(), "local"), this._processorDestination = new GP(this.processorContext), this.bindProcessorDestinationEvents();
        }
        play(e3) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e3) {
            const t3 = document.getElementById(e3);
            t3 ? e3 = t3 : (lD.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e3, '" element, use document.body')), e3 = document.body);
          }
          lD.debug("[".concat(this.getTrackId(), "] start video playback in ").concat(e3 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement"), JSON.stringify(t2));
          const i2 = uP(uP(uP({}, this._getDefaultPlayerConfig()), t2), {}, { trackId: this.getTrackId(), element: e3 });
          this._player ? this._player.updateConfig(i2) : (e3 instanceof HTMLVideoElement ? this._player = new zL(i2) : this._player = new XL(i2), this._player.updateVideoTrack(this._mediaStreamTrack)), this._player.play(), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e4 = this.getVideoElementVisibleStatus();
              this.safeEmit(KD.VIDEO_ELEMENT_VISIBLE_STATUS, e4);
            } catch (e4) {
            }
          }, MN("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, lD.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        async setEnabled(e3, t2) {
          if (!t2) {
            if (e3 === this._enabled) return;
            this.stateCheck("enabled", e3);
          }
          if (lD.info("[".concat(this.getTrackId(), "] start setEnabled"), e3), !e3) {
            this._originMediaStreamTrack.enabled = false;
            try {
              await _O(this, FD.NEED_DISABLE_TRACK, this);
            } catch (e4) {
              throw lD.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e4.toString()), e4;
            }
            return t2 || (this._enabled = false), void lD.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
          this._originMediaStreamTrack.enabled = true;
          try {
            await _O(this, FD.NEED_ENABLE_TRACK, this);
          } catch (e4) {
            throw lD.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e4.toString()), e4;
          }
          lD.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
        }
        async setMuted(e3) {
          e3 !== this._muted && (this.stateCheck("muted", e3), this._muted = e3, this._originMediaStreamTrack.enabled = !e3, lD.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e3)), e3 ? await _O(this, FD.NEED_MUTE_TRACK, this) : await _O(this, FD.NEED_UNMUTE_TRACK, this));
        }
        async setEncoderConfiguration(e3, t2) {
          if (!this._enabled) throw new xw(Uw.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          if (e3 = PD(e3), this._forceBitrateLimit && (e3.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e3.bitrateMax, e3.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e3.bitrateMin), e3.width || e3.height || e3.frameRate) {
            const t3 = JP({ encoderConfig: e3 });
            (lw() || pw() || Aw()) && (t3.deviceId = void 0), lD.debug("[".concat(this.getTrackId(), "] setEncoderConfiguration applyConstraints"), JSON.stringify(e3), JSON.stringify(t3));
            try {
              await this._originMediaStreamTrack.applyConstraints(t3), this.updateMediaStreamTrackResolution();
            } catch (e4) {
              const t4 = new xw(Uw.UNEXPECTED_ERROR, e4.toString());
              throw lD.error("[".concat(this.getTrackId(), "] applyConstraints error"), t4.toString()), t4;
            }
          }
          this._encoderConfig = e3, -1 === this._hints.indexOf(BD.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await _O(this, FD.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e4) {
            return e4.throw(lD);
          }
        }
        getStats() {
          IO(() => {
            lD.warning("[deprecated] LocalVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalVideoStats instead");
          }, "localVideoTrackGetStatsWarning");
          return EO(this, FD.GET_STATS) || uP({}, XD);
        }
        async setBeautyEffect(e3) {
          lD.error("LocalVideoTrack.setBeautyEffect was deprecated, please migrate to agora-extension-beauty-effect");
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        async getCurrentFrameImage(e3) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          return this._player ? this._player.getCurrentFrameToUint8Array(e3, t2) : await eL(e3);
        }
        async setBitrateLimit(e3) {
          lD.debug("[".concat(this.getTrackId(), "] set bitrate limit, ").concat(JSON.stringify(e3))), e3 && (this._forceBitrateLimit = e3, this._encoderConfig && (this._encoderConfig.bitrateMax ? this._encoderConfig.bitrateMax = this._encoderConfig.bitrateMax < e3.max_bitrate ? this._encoderConfig.bitrateMax : e3.max_bitrate : this._encoderConfig.bitrateMax = e3.max_bitrate, this._encoderConfig.bitrateMin, this._encoderConfig.bitrateMin = e3.min_bitrate));
        }
        async setOptimizationMode(e3) {
          if ("motion" !== e3 && "detail" !== e3 && "balanced" !== e3) return void lD.error(Uw.INVALID_PARAMS, "optimization mode must be motion, detail or balanced");
          const t2 = this._optimizationMode;
          try {
            this._optimizationMode = e3, await _O(this, FD.NEED_UPDATE_VIDEO_SEND_PARAMETERS, this);
          } catch (e4) {
            throw this._optimizationMode = t2, lD.error("[".concat(this.getTrackId(), "] set optimization mode failed"), e4.toString()), e4;
          }
          lD.info("[".concat(this.getTrackId(), "] set optimization mode success (").concat(e3, ")"));
        }
        setScalabiltyMode(e3) {
          if (1 === e3.numSpatialLayers && 1 !== e3.numTemporalLayers) return lD.error(Uw.INVALID_PARAMS, "scalability mode currently not supported, no SVC."), void (this._scalabilityMode = { numSpatialLayers: 1, numTemporalLayers: 1 });
          this._scalabilityMode = e3, lD.info("[".concat(this.getTrackId(), "] set scalability mode success (").concat(e3, ")"));
        }
        updateMediaStreamTrackResolution() {
          zP(this._originMediaStreamTrack).then((e3) => {
            let [t2, i2] = e3;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(MO);
        }
        _updatePlayerSource() {
          this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        _getDefaultPlayerConfig() {
          return { fit: "contain" };
        }
        async setSenderConfiguration(e3) {
          if (!this._enabled) throw new xw(Uw.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          lD.debug("[".concat(this.getTrackId(), "] setSenderConfiguration applyConstraints"), JSON.stringify(e3)), e3 = PD(e3), this._forceBitrateLimit && (e3.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e3.bitrateMax, e3.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e3.bitrateMin), this._encoderConfig = e3, -1 === this._hints.indexOf(BD.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await _O(this, FD.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e4) {
            return e4.throw(lD);
          }
        }
        updateBitrateFromProfile() {
          if (!this._encoderConfig) return;
          const { width: e3, height: t2, frameRate: i2 } = this.getMediaStreamTrackSettings();
          if (!e3 || !t2 || !i2) return;
          const { bitrateMax: n2, bitrateMin: r2 } = this._encoderConfig;
          if (null == r2 || null == n2) {
            const { max: o2, min: s2 } = function(e4, t3, i3, n3, r3) {
              const o3 = MN("BITRATE_ADAPTER_TYPE");
              if ("DEFAULT_BITRATE" === o3) return { min: n3, max: r3 };
              if (void 0 === r3) {
                var s3;
                const a3 = Math.floor(200 * Math.pow(i3 / 15, 0.6) * Math.pow(e4 * t3 / 640 / 360, 0.75));
                r3 = "STANDARD_BITRATE" === o3 ? 4 * a3 : 2 * a3, n3 = null !== (s3 = n3) && void 0 !== s3 ? s3 : a3;
              } else {
                var a2;
                n3 = null !== (a2 = n3) && void 0 !== a2 ? a2 : Math.floor(r3 / 10);
              }
              return { min: n3, max: r3 };
            }(e3, t2, i2, r2, n2);
            this._encoderConfig.bitrateMin = s2, this._encoderConfig.bitrateMax = o2, lD.debug("[".concat(this.getTrackId(), "] update bitrate from profile, [w: ").concat(e3, ", h: ").concat(t2, ", fps: ").concat(i2, "] => [brMax: ").concat(o2, ", brMin: ").concat(s2, "]"));
          }
        }
        getVideoElementVisibleStatus() {
          try {
            var e3, t2;
            const i2 = null == this || null === (e3 = this._player) || void 0 === e3 ? void 0 : e3.getContainerElement(), n2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: r2, slot: o2 } = n2;
            if (this.isPlaying && r2 instanceof HTMLVideoElement && o2 instanceof HTMLElement) {
              const e4 = zw.checkOneElementVisible(r2), t3 = Object.assign({}, e4);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e5 = TD.reportApiInvoke(null, { tag: iO.TRACER, name: tO.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e5.onSuccess("Video is visible") : e5.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e4) {
            throw new xw(Uw.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e4.message);
          }
        }
        async renewMediaStreamTrack(e3) {
        }
        pipe(e3) {
          if (this.processor === e3) return e3;
          if (e3._source) throw new xw(Uw.INVALID_OPERATION, "Processor ".concat(e3.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e3, this.processor._source = this, e3.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e3;
        }
        unpipe() {
          if (!this.processor) return;
          const e3 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e3.reset();
        }
        close() {
          super.close(), this.unbindProcessorDestinationEvents(), this.unbindProcessorContextEvents(), this.unpipe(), this.processorDestination._source && this.processorDestination._source.unpipe();
        }
        clone(t2) {
          let i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n2 = this._encoderConfig;
          t2 && (n2 = uP(uP({}, n2), PD(t2))), n2 = vO(n2);
          const r2 = LO(8, "track-video-cloned-"), o2 = new e2(i2 ? this._mediaStreamTrack.clone() : this._mediaStreamTrack, n2, vO(this._scalabilityMode), this._optimizationMode, r2, vO(this._hints));
          return t2 && n2 && o2.setEncoderConfiguration(n2), lD.debug("clone video track from ".concat(this.getTrackId(), " to ").concat(r2, ", clone ").concat(i2)), o2;
        }
        async replaceTrack(e3, t2) {
          if (!(e3 instanceof MediaStreamTrack)) throw new xw(Uw.INVALID_PARAMS, "track should be an instance of MediaStreamTrack");
          if ("video" !== e3.kind) throw new xw(Uw.INVALID_PARAMS, "track should be a video MediaStreamTrack");
          await this._updateOriginMediaStreamTrack(e3, t2, true), this.updateMediaStreamTrackResolution();
        }
        sendSeiData(e3) {
          if (IO(() => {
            TD.reportApiInvoke(null, { name: tO.LOCAL_VIDEO_SEND_SEI_DATA, options: [], tag: iO.TRACER }).onSuccess("");
          }, this._mediaStreamTrack.id || this.getTrackId()), !MN("ENABLE_VIDEO_SEI") || !MN("ENABLE_ENCODED_TRANSFORM")) return void lD.warning('To send/receive SEI, please call AgoraRTC.setParameter("ENABLE_VIDEO_SEI", true) before instantiate IAgoraRtcClient');
          if (e3 instanceof Uint8Array == 0) return new xw(Uw.INVALID_PARAMS, "Invalid argument type, ILocalVideoTrack.sendSeiData() only accept Uint8Array argument.").throw();
          const t2 = this.getRTCRtpTransceiver();
          if (!t2) return void lD.warning("Video track is not published, SEI can not be send");
          const i2 = t2.sender.getParameters();
          if (0 === i2.codecs.length) return;
          const n2 = i2.codecs[0].mimeType.toLocaleLowerCase();
          "video/h264" === n2 ? this.safeEmit("sei-to-send", e3) : lD.warning("SEI is not supported by ".concat(n2));
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(eP.ON_TRACK, async (e3) => {
            e3 ? e3 !== this._mediaStreamTrack && (this._mediaStreamTrack = e3, this._updatePlayerSource(), await _O(this, FD.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await _O(this, FD.NEED_REPLACE_TRACK, this));
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(eP.ON_TRACK);
        }
        unbindProcessorContextEvents() {
          this.processorContext.removeAllListeners(tP.REQUEST_UPDATE_CONSTRAINTS), this.processorContext.removeAllListeners(tP.REQUEST_CONSTRAINTS);
        }
      }, cP(Rk.prototype, "play", [QL, ZL], Object.getOwnPropertyDescriptor(Rk.prototype, "play"), Rk.prototype), cP(Rk.prototype, "stop", [$L], Object.getOwnPropertyDescriptor(Rk.prototype, "stop"), Rk.prototype), cP(Rk.prototype, "setEnabled", [ek, tk, ik], Object.getOwnPropertyDescriptor(Rk.prototype, "setEnabled"), Rk.prototype), cP(Rk.prototype, "setMuted", [nk, rk, ok], Object.getOwnPropertyDescriptor(Rk.prototype, "setMuted"), Rk.prototype), cP(Rk.prototype, "setEncoderConfiguration", [sk, ak], Object.getOwnPropertyDescriptor(Rk.prototype, "setEncoderConfiguration"), Rk.prototype), cP(Rk.prototype, "getStats", [ck], Object.getOwnPropertyDescriptor(Rk.prototype, "getStats"), Rk.prototype), cP(Rk.prototype, "setBeautyEffect", [dk, lk], Object.getOwnPropertyDescriptor(Rk.prototype, "setBeautyEffect"), Rk.prototype), cP(Rk.prototype, "getCurrentFrameData", [uk], Object.getOwnPropertyDescriptor(Rk.prototype, "getCurrentFrameData"), Rk.prototype), cP(Rk.prototype, "getCurrentFrameImage", [hk], Object.getOwnPropertyDescriptor(Rk.prototype, "getCurrentFrameImage"), Rk.prototype), cP(Rk.prototype, "setBitrateLimit", [pk], Object.getOwnPropertyDescriptor(Rk.prototype, "setBitrateLimit"), Rk.prototype), cP(Rk.prototype, "setOptimizationMode", [_k], Object.getOwnPropertyDescriptor(Rk.prototype, "setOptimizationMode"), Rk.prototype), cP(Rk.prototype, "setScalabiltyMode", [Ek], Object.getOwnPropertyDescriptor(Rk.prototype, "setScalabiltyMode"), Rk.prototype), cP(Rk.prototype, "updateMediaStreamTrackResolution", [mk], Object.getOwnPropertyDescriptor(Rk.prototype, "updateMediaStreamTrackResolution"), Rk.prototype), cP(Rk.prototype, "pipe", [fk], Object.getOwnPropertyDescriptor(Rk.prototype, "pipe"), Rk.prototype), cP(Rk.prototype, "unpipe", [Tk], Object.getOwnPropertyDescriptor(Rk.prototype, "unpipe"), Rk.prototype), cP(Rk.prototype, "close", [Sk], Object.getOwnPropertyDescriptor(Rk.prototype, "close"), Rk.prototype), cP(Rk.prototype, "replaceTrack", [gk], Object.getOwnPropertyDescriptor(Rk.prototype, "replaceTrack"), Rk.prototype), Rk), Pk = (vk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Ck = jP(), Ik = YO("CameraVideoTrack", "_enabledMutex"), yk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Ak = jP(), bk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), wk = jP(), Ok = fD({ argsMap: (e2) => [e2.getTrackId()] }), Nk = class e2 extends Dk {
        get __className__() {
          return "CameraVideoTrack";
        }
        constructor(e3, t2, i2, n2, r2, o2) {
          super(e3, PD(t2.encoderConfig), n2, r2, o2), dP(this, "_config", void 0), dP(this, "_originalConstraints", void 0), dP(this, "_constraints", void 0), dP(this, "_enabled", true), dP(this, "_deviceName", "default"), dP(this, "tryResumeVideoForIOS15_16WeChat", async () => {
            (Cw() || Iw()) && !function() {
              const e4 = rw();
              if (e4.os !== $b.IOS || !e4.osVersion) return false;
              const t3 = e4.osVersion.split(".");
              return 15 === Number(t3[0]) && Number(t3[1]) >= 2;
            }() && bw() && this._enabled && !this._isClosed && (lD.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS 15 device on WeChat.")), await this.renewMediaStreamTrack());
          }), this._config = t2, this._originalConstraints = i2, this._constraints = i2, this._deviceName = e3.label, this._encoderConfig = PD(this._config.encoderConfig), mP.on(ID.IOS_15_16_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), mP.on(ID.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), this.bindProcessorContextEvents();
        }
        async setDevice(e3) {
          return "string" == typeof e3 ? this._setDeviceById(e3) : e3.deviceId ? this._setDeviceById(e3.deviceId) : e3.facingMode ? this._setDeviceByFacingModel(e3.facingMode) : void 0;
        }
        async _setDeviceById(e3) {
          if (lD.info("[".concat(this.getTrackId(), "] set device to ").concat(e3)), this._enabled) try {
            const t2 = await kP.getDeviceById(e3), i2 = {};
            i2.video = uP({}, this._constraints), i2.video.deviceId = { exact: e3 }, i2.video.facingMode = void 0, this._originMediaStreamTrack.stop();
            let n2 = null;
            try {
              n2 = await NP(i2, this.getTrackId());
            } catch (e4) {
              throw lD.error("[".concat(this.getTrackId(), "] setDevice failed"), e4.toString()), n2 = await NP({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(n2.getVideoTracks()[0], false), e4;
            }
            await this._updateOriginMediaStreamTrack(n2.getVideoTracks()[0], false), this.updateMediaStreamTrackResolution(), this._deviceName = t2.label, this._config.cameraId = e3, this._constraints.deviceId = { exact: e3 };
          } catch (e4) {
            throw lD.error("[".concat(this.getTrackId(), "] setDevice error"), e4.toString()), e4;
          }
          else try {
            const t2 = await kP.getDeviceById(e3);
            this._deviceName = t2.label, this._config.cameraId = e3, this._constraints.deviceId = { exact: e3 };
          } catch (e4) {
            throw lD.error("[".concat(this.getTrackId(), "] setDevice error"), e4.toString()), e4;
          }
          lD.info("[".concat(this.getTrackId(), "] setDevice success"));
        }
        async _setDeviceByFacingModel(e3) {
          lD.info("[".concat(this.getTrackId(), "] set facingMode ").concat(e3));
          const t2 = { video: uP(uP({}, this._constraints), {}, { deviceId: void 0, facingMode: { exact: e3 } }) };
          if (this._enabled) {
            this._originMediaStreamTrack.stop();
            let e4 = null;
            try {
              e4 = await NP(t2, this.getTrackId());
            } catch (t3) {
              throw lD.error("[".concat(this.getTrackId(), "] setDeviceByFacingModel failed"), t3.toString()), e4 = await NP({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(e4.getVideoTracks()[0], false), t3;
            }
            await this._updateOriginMediaStreamTrack(e4.getVideoTracks()[0], false), this.updateMediaStreamTrackResolution();
          }
          this._deviceName = "", this._config.facingMode = e3, this._config.cameraId = void 0, this._constraints = uP({}, t2.video), lD.info("[".concat(this.getTrackId(), "] setDeviceByFacingModel success"));
        }
        async setEnabled(e3, t2) {
          if (!t2) {
            if (e3 === this._enabled) return;
            this.stateCheck("enabled", e3);
          }
          if (lD.info("[".concat(this.getTrackId(), "] start setEnabled"), e3), e3) {
            try {
              if (this.isExternalTrack) this._originMediaStreamTrack.enabled = true;
              else {
                const e4 = await NP({ video: this._constraints }, this.getTrackId());
                await this._updateOriginMediaStreamTrack(e4.getVideoTracks()[0], false);
              }
              await _O(this, FD.NEED_ENABLE_TRACK, this);
            } catch (e4) {
              throw lD.error("[".concat(this.getTrackId(), "] setEnabled true error"), e4.toString()), e4;
            }
            this.updateMediaStreamTrackResolution(), lD.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
          } else {
            this.isExternalTrack ? this._originMediaStreamTrack.enabled = false : (this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop()), t2 || (this._enabled = false);
            try {
              await _O(this, FD.NEED_DISABLE_TRACK, this);
            } catch (e4) {
              throw lD.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e4.toString()), e4;
            }
            lD.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
        }
        async setEncoderConfiguration(e3, t2) {
          if (!this._enabled) throw new xw(Uw.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          e3 = PD(e3), this._forceBitrateLimit && (e3.bitrateMax = this._forceBitrateLimit.max_bitrate || e3.bitrateMax, e3.bitrateMin = this._forceBitrateLimit.min_bitrate || e3.bitrateMin);
          const i2 = RO(this._config);
          i2.encoderConfig = e3;
          const n2 = JP(i2);
          (lw() || pw() || Aw()) && (n2.deviceId = void 0), lD.debug("[".concat(this.getTrackId(), "] setEncoderConfiguration applyConstraints"), JSON.stringify(e3), JSON.stringify(n2));
          try {
            await this._originMediaStreamTrack.applyConstraints(n2), this.updateMediaStreamTrackResolution();
          } catch (e4) {
            const t3 = new xw(Uw.UNEXPECTED_ERROR, e4.toString());
            throw lD.error("[".concat(this.getTrackId(), "] applyConstraints error"), t3.toString()), t3;
          }
          this._config = i2, this._constraints = n2, this._originalConstraints = n2, this._encoderConfig = e3, -1 === this._hints.indexOf(BD.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await _O(this, FD.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e4) {
            return e4.throw(lD);
          }
        }
        _getDefaultPlayerConfig() {
          return { mirror: true, fit: "cover" };
        }
        onTrackEnded() {
          if ((pw() || Aw()) && this._enabled && !this._isClosed && mP.duringInterruption) {
            const e3 = async () => {
              mP.off(ID.IOS_INTERRUPTION_END, e3), this._enabled && !this._isClosed && (lD.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            mP.on(ID.IOS_INTERRUPTION_END, e3);
          } else lD.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(KD.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e3) {
          const t2 = e3 || this._constraints, i2 = kP.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = { exact: i2 }), this._enabled) {
            const e4 = await NP({ video: t2 }, this.getTrackId());
            this._constraints = t2, await this._updateOriginMediaStreamTrack(e4.getVideoTracks()[0], true), this.updateMediaStreamTrackResolution();
          }
        }
        close() {
          super.close(), mP.off(ID.IOS_15_16_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), mP.off(ID.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat);
        }
        clone(t2) {
          let i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], n2 = this._encoderConfig;
          t2 && (n2 = uP(uP({}, n2), PD(t2))), n2 = vO(n2);
          const r2 = LO(8, "track-cam-cloned-"), o2 = new e2(i2 ? this._mediaStreamTrack.clone() : this._mediaStreamTrack, vO(uP(uP({}, this._config), {}, { encoderConfig: n2 })), vO(this._constraints), vO(this._scalabilityMode), this._optimizationMode, r2);
          return t2 && n2 && o2.setEncoderConfiguration(n2), lD.debug("clone track from ".concat(this.getTrackId(), " to ").concat(r2, ", clone ").concat(i2)), o2;
        }
        bindProcessorContextEvents() {
          this.processorContext.on(tP.REQUEST_UPDATE_CONSTRAINTS, async (e3, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e3);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e4) {
              i2(e4);
            }
          }), this.processorContext.on(tP.REQUEST_CONSTRAINTS, async (e3) => {
            e3(this._originMediaStreamTrack.getSettings());
          });
        }
      }, cP(Nk.prototype, "setDevice", [vk, Ck], Object.getOwnPropertyDescriptor(Nk.prototype, "setDevice"), Nk.prototype), cP(Nk.prototype, "setEnabled", [Ik, yk, Ak], Object.getOwnPropertyDescriptor(Nk.prototype, "setEnabled"), Nk.prototype), cP(Nk.prototype, "setEncoderConfiguration", [bk, wk], Object.getOwnPropertyDescriptor(Nk.prototype, "setEncoderConfiguration"), Nk.prototype), cP(Nk.prototype, "close", [Ok], Object.getOwnPropertyDescriptor(Nk.prototype, "close"), Nk.prototype), Nk);
      function Lk(e2, t2, i2, n2) {
        i2.optimizationMode && (n2 && n2.width && n2.height ? (i2.encoderConfig = uP(uP({}, n2), {}, { bitrateMin: n2.bitrateMin, bitrateMax: n2.bitrateMax }), "motion" !== i2.optimizationMode && "detail" !== i2.optimizationMode || (t2.contentHint = i2.optimizationMode, t2.contentHint === i2.optimizationMode ? lD.debug("[".concat(e2, "] set content hint to"), i2.optimizationMode) : lD.debug("[".concat(e2, "] set content hint failed")))) : lD.warning("[".concat(e2, "] can not apply optimization mode bitrate config, no encoderConfig")));
      }
      var kk, Mk, Uk, xk, Vk, Fk, Bk, jk, Gk, Wk, Hk, Kk;
      class Yk extends hP {
        getUserId() {
          return this._userId;
        }
        constructor(e2, t2, i2, n2) {
          super(e2, "track-".concat(e2.kind, "-").concat(t2, "-").concat(n2.clientId, "_").concat(LO(5, ""))), dP(this, "_userId", void 0), dP(this, "_uintId", void 0), dP(this, "_isDestroyed", false), dP(this, "store", void 0), dP(this, "processor", void 0), dP(this, "processorContext", void 0), this._userId = t2, this._uintId = i2, this.store = n2;
        }
        _updateOriginMediaStreamTrack(e2) {
          this._originMediaStreamTrack = e2, this._mediaStreamTrack = e2, this._updatePlayerSource(), this.processor && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext });
        }
        _destroy() {
          this._isDestroyed = true, lD.info("[".concat(this.getTrackId(), "] is destroyed")), this.stop(), super.close();
        }
        getProcessorStats() {
          return this.processorContext.gatherStats();
        }
        getProcessorUsage() {
          return this.processorContext.gatherUsage();
        }
      }
      let qk = (kk = fD({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : t2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement", i2] }), Mk = fD({ argsMap: (e2) => [e2.getTrackId()] }), Uk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xk = fD({ argsMap: (e2) => [e2.getTrackId()] }), cP((Vk = class extends Yk {
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== rP.PLAYING);
        }
        get __className__() {
          return "RemoteVideoTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2, i2, n2), dP(this, "_videoVisibleTimer", null), dP(this, "_previousVideoVisibleStatus", void 0), dP(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), dP(this, "trackMediaType", qD.VIDEO), dP(this, "_videoWidth", void 0), dP(this, "_videoHeight", void 0), dP(this, "_player", void 0), dP(this, "processorDestination", void 0), dP(this, "processorContext", void 0), this.updateMediaStreamTrackResolution(), this.processorContext = new WP(this.getTrackId(), "remote"), this.processorDestination = new GP(this.processorContext), this.bindProcessorDestinationEvents();
        }
        getStats() {
          return IO(() => {
            lD.warning("[deprecated] RemoteVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteVideoStats instead");
          }, "remoteVideoTrackGetStatsWarning"), EO(this, FD.GET_STATS) || uP({}, $D);
        }
        play(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e2) {
            const t3 = document.getElementById(e2);
            t3 ? e2 = t3 : (lD.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e2, '" element, use document.body')), e2 = document.body);
          }
          lD.debug("[".concat(this.getTrackId(), "] start video playback in ").concat(e2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement"), JSON.stringify(t2));
          const i2 = uP(uP({ fit: "cover" }, t2), {}, { trackId: this.getTrackId(), element: e2 });
          this._player ? this._player.updateConfig(i2) : (e2 instanceof HTMLVideoElement ? this._player = new zL(i2) : this._player = new XL(i2), this._player.updateVideoTrack(this._mediaStreamTrack), this._player.onFirstVideoFrameDecoded = () => {
            this.store.subscribe(this.getUserId(), "video", void 0, void 0, Date.now()), this.safeEmit(YD.FIRST_FRAME_DECODED);
          }, this._player.onVideoStateChanged = (e3) => {
            this.safeEmit(YD.VIDEO_STATE_CHANGED, e3);
          }), this._player.play(this.store.sessionId || void 0), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e3 = this.getVideoElementVisibleStatus();
              this.safeEmit(YD.VIDEO_ELEMENT_VISIBLE_STATUS, e3);
            } catch (e3) {
            }
          }, MN("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, lD.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        updateMediaStreamTrackResolution() {
          zP(this._originMediaStreamTrack).then((e2) => {
            let [t2, i2] = e2;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(MO);
        }
        _updatePlayerSource() {
          lD.debug("[".concat(this.getTrackId(), "] update player source track")), this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        getVideoElementVisibleStatus() {
          try {
            var e2, t2;
            const i2 = null == this || null === (e2 = this._player) || void 0 === e2 ? void 0 : e2.getContainerElement(), n2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: r2, slot: o2 } = n2;
            if (this.isPlaying && r2 instanceof HTMLVideoElement && o2 instanceof HTMLElement) {
              const e3 = zw.checkOneElementVisible(r2), t3 = Object.assign({}, e3);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e4 = TD.reportApiInvoke(null, { tag: iO.TRACER, name: tO.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e4.onSuccess("Video is visible") : e4.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e3) {
            throw new xw(Uw.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e3.message);
          }
        }
        pipe(e2) {
          if (this.processor === e2) return e2;
          if (e2._source) throw new xw(Uw.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e2;
        }
        unpipe() {
          if (!this.processor) return;
          const e2 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(eP.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource()) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(eP.ON_TRACK);
        }
        _destroy() {
          super._destroy(), this.unbindProcessorDestinationEvents();
        }
        _onSei(e2) {
          this.emit(HD.SEI_RECEIVED, e2);
        }
      }).prototype, "play", [kk], Object.getOwnPropertyDescriptor(Vk.prototype, "play"), Vk.prototype), cP(Vk.prototype, "stop", [Mk], Object.getOwnPropertyDescriptor(Vk.prototype, "stop"), Vk.prototype), cP(Vk.prototype, "pipe", [Uk], Object.getOwnPropertyDescriptor(Vk.prototype, "pipe"), Vk.prototype), cP(Vk.prototype, "unpipe", [xk], Object.getOwnPropertyDescriptor(Vk.prototype, "unpipe"), Vk.prototype), Vk), zk = (Fk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), Bk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), jk = fD({ argsMap: (e2) => [e2.getTrackId()] }), Gk = fD({ argsMap: (e2) => [e2.getTrackId()] }), Wk = fD({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), Hk = fD({ argsMap: (e2) => [e2.getTrackId()] }), cP((Kk = class extends Yk {
        get isPlaying() {
          return this._useAudioElement ? BP.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "RemoteAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2, i2, n2), dP(this, "trackMediaType", qD.AUDIO), dP(this, "_source", void 0), dP(this, "_useAudioElement", true), dP(this, "_volume", 100), dP(this, "processorContext", void 0), dP(this, "processorDestination", void 0), dP(this, "_played", false), dP(this, "_bypassWebAudio", false), MN("DISABLE_WEBAUDIO") ? (this._source = new YP(), this._bypassWebAudio = true, this._useAudioElement = true) : (this._source = new CP(e2, true), MN("REMOTE_AUDIO_TRACK_USES_WEB_AUDIO") && (this._useAudioElement = false)), this._source.once(zD.RECEIVE_TRACK_BUFFER, () => {
            this.safeEmit(YD.FIRST_FRAME_DECODED);
          }), this.processorContext = new KP(this._source.context, this.getTrackId(), "remote"), this.processorDestination = new HP(this.processorContext), this.bindProcessorDestinationEvents(), this._source.on(zD.UPDATE_SOURCE, () => {
            this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: this.processorContext });
          });
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2) return this._source.removeAllListeners(zD.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners(zD.ON_AUDIO_BUFFER), this._source.on(zD.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        setVolume(e2) {
          this._volume = e2, this._useAudioElement ? BP.setVolume(this.getTrackId(), e2) : this._source.setVolume(e2 / 100);
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement || !vD()) throw new xw(Uw.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await BP.setSinkID(this.getTrackId(), e2);
        }
        getVolumeLevel() {
          return this._source.getAccurateVolumeLevel();
        }
        getStats() {
          return IO(() => {
            lD.warning("[deprecated] RemoteAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteAudioStats instead");
          }, "remoteAudioTrackGetStatsWarning"), EO(this, FD.GET_STATS) || uP({}, QD);
        }
        play() {
          lD.debug("[".concat(this.getTrackId(), "] start audio playback")), this._played = true, this._useAudioElement ? (lD.debug("[".concat(this.getTrackId(), "] use audio element to play")), BP.play(this._mediaStreamTrack, this.getTrackId(), this._volume, this.store.sessionId || void 0)) : this._source.play();
        }
        stop() {
          lD.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._played = false, this._useAudioElement ? BP.stop(this.getTrackId()) : this._source.stop();
        }
        _destroy() {
          super._destroy(), this._played = false, this.unbindProcessorDestinationEvents(), this._source.destroy();
        }
        _isFreeze() {
          return this._source.isFreeze;
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          lD.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && BP.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        pipe(e2) {
          if (this._bypassWebAudio) throw new xw(Uw.NOT_SUPPORTED, "can not pipe extension when WebAudio disabled");
          if (this.processor === e2) return e2;
          if (e2._source) throw new xw(Uw.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (this._bypassWebAudio) throw new xw(Uw.NOT_SUPPORTED, "can not unpipe extension when WebAudio disabled");
          if (!this.processor) return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(eP.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e2)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          }), this.processorDestination.on(eP.ON_NODE, (e2) => {
            this._source.processedNode = e2;
            const t2 = !e2;
            this._useAudioElement !== t2 && (this._played ? (this.stop(), this._useAudioElement = t2, this.play()) : this._useAudioElement = t2);
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(eP.ON_TRACK), this.processorDestination.removeAllListeners(eP.ON_NODE);
        }
      }).prototype, "setVolume", [Fk], Object.getOwnPropertyDescriptor(Kk.prototype, "setVolume"), Kk.prototype), cP(Kk.prototype, "setPlaybackDevice", [Bk], Object.getOwnPropertyDescriptor(Kk.prototype, "setPlaybackDevice"), Kk.prototype), cP(Kk.prototype, "play", [jk], Object.getOwnPropertyDescriptor(Kk.prototype, "play"), Kk.prototype), cP(Kk.prototype, "stop", [Gk], Object.getOwnPropertyDescriptor(Kk.prototype, "stop"), Kk.prototype), cP(Kk.prototype, "pipe", [Wk], Object.getOwnPropertyDescriptor(Kk.prototype, "pipe"), Kk.prototype), cP(Kk.prototype, "unpipe", [Hk], Object.getOwnPropertyDescriptor(Kk.prototype, "unpipe"), Kk.prototype), Kk);
      const Jk = new class extends Zw {
        get visibility() {
          return document.visibilityState;
        }
        get lastHiddenTime() {
          return this._lastHiddenTime;
        }
        get lastVisibleTime() {
          return this._lastVisibleTime;
        }
        constructor() {
          super(), dP(this, "_lastHiddenTime", 0), dP(this, "_lastVisibleTime", 0), document.addEventListener("visibilitychange", () => {
            "hidden" === document.visibilityState ? this._lastHiddenTime = performance.now() : this._lastVisibleTime = performance.now(), lD.debug("current web page is ".concat(document.visibilityState)), this.emit("VISIBILITY_CHANGE", document.visibilityState);
          });
        }
      }();
      class Xk extends Zw {
        constructor(e2, t2) {
          super(), dP(this, "trackMediaType", qD.DATA), dP(this, "_version", 1), dP(this, "_type", 3), dP(this, "_config", void 0), dP(this, "_originDataChannel", void 0), dP(this, "_dataStreamPacketHeader", new ArrayBuffer(4)), dP(this, "_dataStreamPacketHandler", { serialize: (e3) => e3, deserialize: (e3) => e3 }), dP(this, "_datachannelEventMap", /* @__PURE__ */ new Map()), this._config = e2, t2 && (this._originDataChannel = t2, this._bandDataChannelEvents(t2)), this._initPacketHeader();
        }
        useDataStream(e2) {
          this._dataStreamPacketHandler = e2;
        }
        get id() {
          return this._config.id;
        }
        get ordered() {
          return this._config.ordered;
        }
        get maxRetransmits() {
          return MN("DATASTREAM_MAX_RETRANSMITS");
        }
        get metadata() {
          return this._config.metadata;
        }
        get readyState() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originDataChannel) || void 0 === t2 ? void 0 : t2.readyState) && void 0 !== e2 ? e2 : "connecting";
        }
        get _originDataChannelId() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originDataChannel) || void 0 === t2 ? void 0 : t2.id) && void 0 !== e2 ? e2 : null;
        }
        getChannelId() {
          return this.id;
        }
        getConfig() {
          return this._config;
        }
        _close() {
          this._originDataChannel && (this._unbindDataChannelEvents(this._originDataChannel), this._originDataChannel = void 0);
        }
        async _waitTillOpen() {
          return new np((e2, t2) => {
            if (this._originDataChannel) {
              "open" === this._originDataChannel.readyState && e2();
              const i2 = setTimeout(() => {
                var e3;
                t2(new xw(Uw.DATACHANNEL_CONNECTION_TIMEOUT, "Cannot create datachannel, id: ".concat(null === (e3 = this._originDataChannel) || void 0 === e3 ? void 0 : e3.id)));
              }, 1e4);
              this._originDataChannel.onopen = () => {
                clearTimeout(i2), this._originDataChannel && this._bandDataChannelEvents(this._originDataChannel), e2();
              }, this._originDataChannel.onerror = () => {
                throw clearTimeout(i2), new xw(Uw.DATACHANNEL_CONNECTION_TIMEOUT);
              };
            } else t2(new xw(Uw.DATACHANNEL_CONNECTION_TIMEOUT, "cannot find dataChannel"));
          });
        }
        _updateOriginDataChannel(e2) {
          this._originDataChannel = e2, this._bandDataChannelEvents(e2);
        }
        _initPacketHeader() {
          const e2 = new DataView(this._dataStreamPacketHeader);
          e2.setUint16(0, this._version), e2.setUint8(2, this._type), e2.setUint8(3, this._config.id);
        }
        _bandDataChannelEvents(e2) {
          this._unbindDataChannelEvents(e2), [aP.OPEN, aP.CLOSE, aP.ERROR].forEach((t2) => {
            const i2 = () => {
              this.emit(t2);
            };
            this._datachannelEventMap.set(t2, i2), e2.addEventListener(t2, i2);
          });
        }
        _unbindDataChannelEvents(e2) {
          Array.from(this._datachannelEventMap.entries()).forEach((t2) => {
            let [i2, n2] = t2;
            e2.removeEventListener(i2, n2);
          }), this._datachannelEventMap.clear();
        }
      }
      class Qk extends Xk {
        constructor(e2) {
          super(e2), dP(this, "_messageListener", void 0), this._messageListener = (e3) => {
            if (e3.data.byteLength < this._dataStreamPacketHeader.byteLength) throw Error("invalid byteLength: the byte length must exceed " + this._dataStreamPacketHeader.byteLength);
            const t2 = e3.data.slice(0, this._dataStreamPacketHeader.byteLength), i2 = new DataView(t2).getUint8(3);
            if (i2 !== this.id) return void (MN("SHOW_DATASTREAM2_LOG") && lD.debug("invalid datachannel id: ".concat(i2, " !== ").concat(this.id)));
            let n2 = e3.data.slice(this._dataStreamPacketHeader.byteLength);
            n2 = this._dataStreamPacketHandler.deserialize(n2), this.emit(aP.MESSAGE, n2);
          };
        }
        _updateOriginDataChannel(e2) {
          super._updateOriginDataChannel(e2), this._bandRemoteDataChannelEvents();
        }
        _close() {
          this._originDataChannel && (this._originDataChannel.removeEventListener("message", this._messageListener), super._close());
        }
        _bandRemoteDataChannelEvents() {
          this._originDataChannel && this._originDataChannel.addEventListener("message", this._messageListener);
        }
      }
      class Zk extends Xk {
        send(e2) {
          if (this._originDataChannel) {
            let t2 = e2;
            t2 = this._dataStreamPacketHandler.serialize(e2);
            const i2 = new Uint8Array(this._dataStreamPacketHeader.byteLength + t2.byteLength);
            i2.set(new Uint8Array(this._dataStreamPacketHeader), 0), i2.set(new Uint8Array(t2), this._dataStreamPacketHeader.byteLength), this._originDataChannel.send(i2.buffer);
          }
        }
      }
      function $k() {
        const e2 = new Blob([atob("ZnVuY3Rpb24gZShlLHQsbil7bGV0IHI9bmV3IFVpbnQ4QXJyYXkoZSx0LG4pLGE9W10sbz0wO2Zvcig7YS5sZW5ndGg8bjspbyszPG4mJjA9PT1yW29dJiYwPT09cltvKzFdJiYzPT09cltvKzJdJiYoMD09PXJbbyszXXx8MT09PXJbbyszXXx8Mj09PXJbbyszXXx8Mz09PXJbbyszXSk/KGEucHVzaChyW29dLHJbbysxXSxyW28rM10pLG8rPTQpOihhLnB1c2gocltvXSksbysrKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYSl9ZnVuY3Rpb24gdChlLHQpe2NvbnN0IG49ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLmxlbmd0aDtsZXQgbj1bXSxyPTA7Zm9yKDtyPHQ7KXIrMjx0JiYwPT09ZVtyXSYmMD09PWVbcisxXSYmKDA9PT1lW3IrMl18fDE9PT1lW3IrMl18fDI9PT1lW3IrMl18fDM9PT1lW3IrMl0pPyhuLnB1c2goZVtyXSxlW3IrMV0sMyxlW3IrMl0pLHIrPTMpOihuLnB1c2goZVtyXSkscisrKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkobil9KHQpLHI9bi5sZW5ndGgsYT1NYXRoLmZsb29yKHIvMjU1KSxvPXIlMjU1LHM9bmV3IFVpbnQ4QXJyYXkoNithKzErcitlLmJ5dGVMZW5ndGgpO3NbMF09MCxzWzFdPTAsc1syXT0wLHNbM109MSxzWzRdPTYsc1s1XT0xMDE7bGV0IGk9MDtmb3IoO2k8YTspc1s2K2ldPTI1NSxpKys7cmV0dXJuIHNbNitpXT1vLGkrKyxzLnNldChuLDYraSkscy5zZXQobmV3IFVpbnQ4QXJyYXkoZSksNitpK3IpLHMuYnVmZmVyfW5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZigiU2FmYXJpIik+LTEmJi0xPT09bmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCJDaHJvbWUiKSYmKHNlbGYub25ydGN0cmFuc2Zvcm09bj0+e2NvbnN0IHI9bi50cmFuc2Zvcm1lcjtsZXQgYT1bXTtyLm9wdGlvbnMucG9ydC5vbm1lc3NhZ2U9ZT0+e2UuZGF0YS5zZWkmJmEucHVzaChlLmRhdGEuc2VpKX0sc2VsZi5wb3N0TWVzc2FnZSgic3RhcnRlZCIpO2NvbnN0IG89ci5yZWFkYWJsZS5nZXRSZWFkZXIoKSxzPXIud3JpdGFibGUuZ2V0V3JpdGVyKCk7InJ4Ij09PXIub3B0aW9ucy5uYW1lP2Z1bmN0aW9uIHQobil7by5yZWFkKCkudGhlbigocj0+e2lmKCFyLmRvbmUpe2lmKHIudmFsdWUgaW5zdGFuY2VvZiBSVENFbmNvZGVkVmlkZW9GcmFtZSl7Y29uc3QgdD1mdW5jdGlvbih0KXtjb25zdCBuPW5ldyBEYXRhVmlldyh0LmRhdGEpO2xldCByPTA7Zm9yKDtyKzQ8dC5kYXRhLmJ5dGVMZW5ndGg7KXtpZigwPT09bi5nZXRVaW50OChyKzApJiYwPT09bi5nZXRVaW50OChyKzEpJiYwPT09bi5nZXRVaW50OChyKzIpJiYxPT09bi5nZXRVaW50OChyKzMpJiY2PT09bi5nZXRVaW50OChyKzQpKXtsZXQgYT1yKzYsbz0wLHM9MDtmb3IoOzI1NT09PShzPW4uZ2V0VWludDgoYSsrKSk7KW8rPTI1NTtvKz1zO2NvbnN0IGk9ZSh0LmRhdGEsYSxvKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoaSl9cisrfXJldHVybiBudWxsfShyLnZhbHVlKTt0JiZuLm9wdGlvbnMucG9ydC5wb3N0TWVzc2FnZSh7c2VpOnR9KX1zLndyaXRlKHIudmFsdWUpLG4ub3B0aW9ucy5wb3J0LnBvc3RNZXNzYWdlKHt0cmFuc2Zvcm1lZDohMH0pLHQobil9fSkpfShyKToidHgiPT09ci5vcHRpb25zLm5hbWUmJmZ1bmN0aW9uIGUobil7by5yZWFkKCkudGhlbigocj0+e2lmKCFyLmRvbmUpe2lmKHIudmFsdWUgaW5zdGFuY2VvZiBSVENFbmNvZGVkVmlkZW9GcmFtZSl7Y29uc3QgZT1hLnNoaWZ0KCk7ZSYmKHIudmFsdWUuZGF0YT10KHIudmFsdWUuZGF0YSxlKSl9cy53cml0ZShyLnZhbHVlKSxuLm9wdGlvbnMucG9ydC5wb3N0TWVzc2FnZSh7dHJhbnNmb3JtZWQ6ITB9KSxlKG4pfX0pKX0ocil9LHNlbGYucG9zdE1lc3NhZ2UoInJlZ2lzdGVyZWQiKSk7Cg==")], { type: "text/javascript" });
        return setTimeout(() => Wf.revokeObjectURL(e2), 0), new Worker(Wf.createObjectURL(e2));
      }
      var eM = function(e2) {
        return e2[e2.AUDIO_LEVEL = 1] = "AUDIO_LEVEL", e2[e2.METADATA = 2] = "METADATA", e2;
      }(eM || {});
      function tM(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        const i2 = e2.getUint8(0);
        if (71 !== i2) return;
        const n2 = e2.getUint16(1), r2 = 3 + n2, o2 = new Uint8Array(e2.byteLength - r2);
        o2.set(new Uint8Array(e2.buffer, r2, e2.byteLength - r2));
        const s2 = { m: i2, tlvLen: n2, tlv: [], frame: o2 };
        let a2 = 3;
        for (; a2 < r2; ) {
          const i3 = e2.getUint8(a2), n3 = e2.getUint16(a2 + 1), r3 = 3;
          if (i3 === eM.AUDIO_LEVEL) {
            let o3 = e2.getUint8(a2 + r3);
            for (let t3 = 1; t3 < n3; t3++) o3 = o3 << 8 | e2.getUint8(a2 + r3 + t3);
            s2.tlv.push({ tag: i3, length: n3, value: t2 ? 127 ^ o3 >> 1 : 127 & o3 });
          } else if (i3 === eM.METADATA) {
            const t3 = new Uint8Array(n3);
            for (let i4 = 0; i4 < n3; i4++) t3[i4] = e2.getUint8(a2 + r3 + i4);
            s2.tlv.push({ tag: i3, length: n3, value: t3 });
          }
          a2 += r3 + n3;
        }
        return s2;
      }
      const iM = /* @__PURE__ */ new Map();
      async function nM(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (!RD().supportWebRTCEncodedTransform) return void lD.warning("browser not support audio encoded transform");
        if (iM.has(e2)) return;
        if (!e2.track) return;
        const i2 = { track: e2.track };
        if (dw()) {
          if (!e2.createEncodedStreams) return void lD.warning("browser not support createEncodedStreams() API");
          let r2 = null;
          try {
            r2 = e2.createEncodedStreams();
          } catch (e3) {
            return void lD.error("create audio-encoded-streams error", e3 && e3.message);
          }
          const o2 = new TransformStream({ transform(r3, o3) {
            i2.controller || (i2.controller = o3), e2.track && e2.track.id !== i2.track.id && (lD.debug("audio track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
            const s2 = t2.metadata && t2.metadata();
            s2 ? function(e3, t3) {
              const { chunk: i3, controller: n3 } = t3;
              i3.data = function(e4, t4, i4) {
                const n4 = i4.byteLength, r4 = n4 + 1 + 2, o4 = 3 + r4, s3 = new ArrayBuffer(e4.byteLength + o4), a2 = new DataView(s3);
                a2.setUint8(0, 71), a2.setUint16(1, r4), a2.setUint8(3, t4), a2.setUint16(4, n4);
                for (let e5 = 0; e5 < n4; e5++) a2.setUint8(6 + e5, i4[e5]);
                const c2 = new Uint8Array(a2.buffer);
                return c2.set(new Uint8Array(e4), o4), c2.buffer;
              }(i3.data, eM.METADATA, e3), n3.enqueue(i3);
            }(s2, { sender: e2, chunk: r3, controller: o3 }) : o3.enqueue(r3);
          } });
          r2.readable.pipeThrough(o2).pipeTo(r2.writable);
        } else if (lw()) {
          if ("undefined" == typeof RTCRtpScriptTransform) return void lD.warning("browser not support RTCRtpScriptTransform");
          const t3 = $k(), r2 = new MessageChannel();
          await new np((e3) => t3.onmessage = (t4) => {
            "registered" === t4.data && e3(void 0);
          });
          const o2 = new RTCRtpScriptTransform(t3, { name: "tx", port: r2.port2 }, [r2.port2]);
          e2.transform = o2, await new np((e3) => t3.onmessage = (t4) => {
            "started" === t4.data && e3(void 0);
          }), r2.port1.onmessage = (t4) => {
            var r3;
            t4.data.transformed && e2.track && (null === (r3 = e2.track) || void 0 === r3 ? void 0 : r3.id) !== i2.track.id && (lD.debug("audio track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
          }, i2.worker = t3;
        }
        function n2() {
          if (e2.track) {
            if (this.id !== e2.track.id) return;
            e2.track.removeEventListener("ended", n2);
          }
          const t3 = iM.get(e2);
          if (t3) {
            iM.delete(e2);
            try {
              var i3, r2;
              null === (i3 = t3.controller) || void 0 === i3 || i3.terminate(), null === (r2 = t3.worker) || void 0 === r2 || r2.terminate();
            } catch (e3) {
              lD.warning(e3 && e3.message);
            }
          }
        }
        iM.set(e2, i2), e2.track.addEventListener("ended", n2);
      }
      const rM = 127, oM = 1e-10, sM = 139 / 13, aM = /* @__PURE__ */ new Map();
      function cM(e2, t2, i2) {
        const n2 = "".concat(e2, "-").concat(t2, "-").concat(i2);
        let r2 = 0;
        if (aM.has(n2)) r2 = aM.get(n2);
        else {
          const o2 = 0.5;
          r2 = Math.log(function(e3, t3) {
            const i3 = e3 - t3;
            t3 < i3 && (t3 = i3);
            let n3 = 1;
            for (let i4 = e3, r3 = 1; i4 > t3; i4--, r3++) n3 = n3 * i4 / r3;
            return n3;
          }(t2, e2)) + e2 * Math.log(o2) + (t2 - e2) * Math.log(1 - o2) - Math.log(i2) + i2 * e2, aM.set(n2, r2);
        }
        return r2 < oM && (r2 = oM), r2;
      }
      function dM(e2, t2, i2) {
        const n2 = t2.length, r2 = e2.length / n2;
        let o2 = false;
        for (let s2 = 0, a2 = 0; s2 < n2; s2++) {
          let n3 = 0;
          for (let t3 = a2 + r2; a2 < t3; a2++) e2[a2] > i2 && n3++;
          t2[s2] !== n3 && (t2[s2] = n3, o2 = true);
        }
        return o2;
      }
      window.cache = aM;
      let lM = 0;
      class uM {
        constructor(e2) {
          dP(this, "id", void 0), dP(this, "immediates", []), dP(this, "lastNonSilence", -1), dP(this, "immediateSpeechActivityScore", oM), dP(this, "lastLevelChangedTime", Date.now()), dP(this, "levels", []), dP(this, "longs", []), dP(this, "longSpeechActivityScore", oM), dP(this, "mediums", []), dP(this, "mediumSpeechActivityScore", oM), dP(this, "minLevel", 0), dP(this, "nextMinLevel", 0), dP(this, "nextMinLevelWindowLength", 0), dP(this, "energyScore", 0), this.id = e2 || "".concat(lM++), this.immediates.length = 50, this.mediums.length = 10, this.longs.length = 1, this.levels.length = this.immediates.length;
        }
        computeImmediates() {
          const e2 = this.immediates, t2 = this.levels, i2 = this.minLevel + sM;
          let n2 = false;
          for (let r2 = 0; r2 < e2.length; ++r2) {
            let o2 = t2[r2];
            o2 < i2 && (o2 = 0);
            const s2 = Math.floor(o2 / sM);
            e2[r2] !== s2 && (e2[r2] = s2, n2 = true);
          }
          return n2;
        }
        computeLongs() {
          return dM(this.mediums, this.longs, 4);
        }
        computeMediums() {
          return dM(this.immediates, this.mediums, 7);
        }
        evaluateImmediateSpeechActivityScore() {
          this.immediateSpeechActivityScore = cM(this.immediates[0], 13, 0.78);
        }
        evaluateLongSpeechActivityScore(e2) {
          this.longSpeechActivityScore = cM(this.longs[0], 10, 47), this.longSpeechActivityScore > oM && (this.lastNonSilence = e2);
        }
        evaluateMediumSpeechActivityScore() {
          this.mediumSpeechActivityScore = cM(this.mediums[0], 5, 24);
        }
        evaluateSpeechActivityScores(e2) {
          this.computeImmediates() && (this.evaluateImmediateSpeechActivityScore(), this.computeMediums() && (this.evaluateMediumSpeechActivityScore(), this.computeLongs() && this.evaluateLongSpeechActivityScore(e2)));
        }
        getLastLevelChangedTime() {
          return this.lastLevelChangedTime;
        }
        getLevels() {
          var e2;
          return "[".concat(fr(e2 = [...this.levels]).call(e2).join(), "]");
        }
        getSpeechActivityScore(e2) {
          switch (e2) {
            case 0:
              return this.immediateSpeechActivityScore;
            case 1:
              return this.mediumSpeechActivityScore;
            case 2:
              return this.longSpeechActivityScore;
            default:
              throw new Error("interval " + e2);
          }
        }
        levelChanged(e2, t2) {
          if (this.lastLevelChangedTime <= t2) {
            this.lastLevelChangedTime = t2;
            let i2 = e2;
            return e2 < 0 && (i2 = 0), e2 > rM && (i2 = rM), this.levels.unshift(i2), this.levels.length > this.immediates.length && this.levels.pop(), this.updateMinLevel(i2), i2 >= this.minLevel + sM ? i2 : i2 / 2;
          }
          return -1;
        }
        levelTimedOut() {
          this.levelChanged(0, this.lastLevelChangedTime);
        }
        updateMinLevel(e2) {
          if (0 !== e2) {
            if (0 === this.minLevel || this.minLevel > e2) return this.minLevel = e2, this.nextMinLevel = 0, void (this.nextMinLevelWindowLength = 0);
            if (0 === this.nextMinLevel) return this.nextMinLevel = e2, void (this.nextMinLevelWindowLength = 1);
            if (this.nextMinLevel > e2 && (this.nextMinLevel = e2), this.nextMinLevelWindowLength++, this.nextMinLevelWindowLength >= 750) {
              let e3 = Math.sqrt(this.minLevel * this.nextMinLevel);
              e3 < 0 ? e3 = 0 : e3 > rM && (e3 = rM), this.minLevel = e3, this.nextMinLevel = 0, this.nextMinLevelWindowLength = 0;
            }
          }
        }
      }
      class hM {
        constructor(e2) {
          dP(this, "algorithm", void 0), this.algorithm = e2;
        }
        execute() {
          let e2 = !this.algorithm;
          if (!e2) try {
            const t2 = this.algorithm.runInDecisionMaker(this);
            t2 <= 0 ? e2 = true : setTimeout(this.execute.bind(this), t2);
          } catch (t2) {
            e2 = true;
          }
          e2 && this.algorithm && this.algorithm.decisionMakerExited(this);
        }
      }
      class pM {
        constructor(e2, t2, i2) {
          dP(this, "isDominant", void 0), dP(this, "energyRanking", void 0), dP(this, "energyScore", void 0), this.isDominant = e2, this.energyRanking = t2, this.energyScore = i2;
        }
      }
      class _M extends Zw {
        constructor(e2) {
          super(), dP(this, "dominantId", null), dP(this, "lastDecisionTime", 0), dP(this, "lastLevelChangedTime", 0), dP(this, "lastLevelIdleTime", 0), dP(this, "relativeSpeechActivities", []), dP(this, "speakers", /* @__PURE__ */ new Map()), dP(this, "enableSilence", false), dP(this, "timeoutToSilenceInterval", 0), dP(this, "decisionMaker", null), dP(this, "loudest", []), dP(this, "numLoudestToTrack", 3), dP(this, "energyExpireTimeMs", 250), dP(this, "energyAlphaPct", 50), this.timeoutToSilenceInterval = e2, this.enableSilence = e2 > 0, this.relativeSpeechActivities.length = 3;
        }
        setLoudestConfig() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3, t2 = arguments.length > 1 ? arguments[1] : void 0, i2 = arguments.length > 2 ? arguments[2] : void 0;
          this.numLoudestToTrack = e2, null != t2 && (this.energyExpireTimeMs = t2), null != i2 && (this.energyAlphaPct = i2), this.loudest.length > e2 && this.loudest.splice(e2);
        }
        getDominantSpeaker() {
          return this.dominantId;
        }
        isAmongLoudest(e2) {
          return this.loudest.some((t2) => t2.id === e2);
        }
        levelChanged(e2, t2) {
          const i2 = Date.now(), n2 = this.getOrCreateSpeaker(e2);
          this.lastLevelChangedTime < i2 && (this.lastLevelChangedTime = i2, this.maybeStartDecisionMaker());
          const r2 = n2.levelChanged(t2, i2);
          return this.updateLoudestList(n2, r2, i2);
        }
        runInDecisionMaker(e2) {
          return this.decisionMaker !== e2 || this.lastDecisionTime > 0 && this.lastDecisionTime - this.lastLevelChangedTime >= 15e3 ? -1 : this._runInDecisionMaker();
        }
        decisionMakerExited(e2) {
          this.decisionMaker === e2 && (this.decisionMaker = null);
        }
        destroy() {
          this.decisionMaker = null, this.loudest.length = 0, this.speakers.clear(), this.removeAllListeners();
        }
        addSpeakers(e2) {
          e2.forEach((e3) => {
            this.speakers.has(e3.id) || this.speakers.set(e3.id, e3);
          });
        }
        removeSpeakers(e2) {
          e2.forEach((e3) => {
            this.speakers.delete(e3.id);
          });
        }
        getOrCreateSpeaker(e2) {
          let t2 = this.speakers.get(e2);
          return t2 || (t2 = new uM(e2), this.speakers.set(e2, t2), this.maybeStartDecisionMaker()), t2;
        }
        updateLoudestList(e2, t2, i2) {
          const n2 = e2.id === this.dominantId;
          if (t2 < 0) {
            let t3 = 0;
            for (; t3 < this.loudest.length && this.loudest[t3] !== e2; ) ++t3;
            return new pM(n2, t3, e2.energyScore);
          }
          if (e2.energyScore = Math.floor((this.energyAlphaPct * t2 + (100 - this.energyAlphaPct) * e2.energyScore + 50) / 100), 0 === this.numLoudestToTrack) return new pM(n2, 0, e2.energyScore);
          const r2 = i2 - this.energyExpireTimeMs;
          let o2 = 0;
          for (; o2 < this.loudest.length; ) {
            const t3 = this.loudest[o2];
            if (t3.getLastLevelChangedTime() < r2 && this.loudest.length >= this.numLoudestToTrack) this.loudest.splice(o2, 1);
            else if (t3.id !== e2.id) ++o2;
            else if (this.loudest.splice(o2, 1), this.loudest.length < this.numLoudestToTrack) break;
          }
          let s2 = 0;
          for (; s2 < this.loudest.length && !(this.loudest[s2].energyScore < e2.energyScore); ) ++s2;
          return s2 < this.numLoudestToTrack && (this.loudest.splice(s2, 0, e2), this.loudest.length > this.numLoudestToTrack && this.loudest.splice(this.numLoudestToTrack, 1)), new pM(n2, s2, e2.energyScore);
        }
        maybeStartDecisionMaker() {
          !this.decisionMaker && this.speakers.size > 0 && (this.decisionMaker = new hM(this), this.decisionMaker.execute());
        }
        makeDecision(e2) {
          let t2 = null, i2 = null;
          const n2 = this.speakers.size;
          let r2 = null;
          if (0 === n2) r2 = null;
          else if (1 === n2) {
            var o2;
            const t3 = hp(o2 = this.speakers).call(o2).next().value;
            this.enableSilence && t3 && (r2 = t3.id, t3.evaluateSpeechActivityScores(e2), e2 - t3.lastNonSilence > this.timeoutToSilenceInterval && (r2 = null));
          } else {
            let t3 = null == this.dominantId ? null : this.speakers.get(this.dominantId);
            if (null == t3) {
              const e3 = this.speakers.entries().next();
              e3.value && (r2 = e3.value[0], t3 = e3.value[1]);
            } else r2 = t3.id;
            null != t3 && t3.evaluateSpeechActivityScores(e2);
            const i3 = this.relativeSpeechActivities;
            let n3 = 2;
            for (const o3 of this.speakers.entries()) {
              const [s2, a2] = o3;
              if (a2 === t3) continue;
              a2.evaluateSpeechActivityScores(e2);
              for (let e3 = 0; e3 < i3.length; ++e3) {
                const n4 = null == t3 ? oM : t3.getSpeechActivityScore(e3);
                i3[e3] = Math.log(a2.getSpeechActivityScore(e3) / n4);
              }
              const c2 = i3[0], d2 = i3[1], l2 = i3[2];
              c2 > 3 && d2 > 2 && l2 > 0 && d2 > n3 && (n3 = d2, r2 = s2);
            }
            this.enableSilence && null != t3 && r2 === t3.id && e2 - t3.lastNonSilence > this.timeoutToSilenceInterval && (r2 = null);
          }
          null == r2 && !this.enableSilence || r2 === this.dominantId || (t2 = this.dominantId, this.dominantId = r2, i2 = this.dominantId), null == i2 && !this.enableSilence || i2 === t2 || this.emit("ActiveSpeakerChanged", i2);
        }
        _runInDecisionMaker() {
          const e2 = Date.now(), t2 = 300 - (e2 - this.lastLevelIdleTime);
          let i2 = 0;
          t2 <= 0 ? (0 !== this.lastLevelIdleTime && this.timeoutIdleLevels(e2), this.lastLevelIdleTime = e2) : i2 = t2;
          let n2 = 300 - (e2 - this.lastDecisionTime);
          return n2 <= 0 && (this.lastDecisionTime = e2, this.makeDecision(e2), n2 = 300 - (Date.now() - e2)), n2 > 0 && i2 > n2 && (i2 = n2), i2;
        }
        timeoutIdleLevels(e2) {
          const t2 = [];
          for (const n2 of hp(i2 = this.speakers).call(i2)) {
            var i2;
            const r2 = e2 - n2.getLastLevelChangedTime();
            36e5 < r2 && (null == this.dominantId || n2.id !== this.dominantId) ? t2.push(n2.id) : 300 < r2 && n2.levelTimedOut();
          }
          t2.forEach((e3) => this.speakers.delete(e3));
        }
      }
      const EM = /* @__PURE__ */ new Map();
      let mM = null, fM = null, TM = [];
      const SM = 1e3 / 15, gM = /* @__PURE__ */ new Map(), RM = /* @__PURE__ */ new Map();
      class vM {
        get samples() {
          return this.actives + this.inactives;
        }
        get activeRate() {
          return this.actives / this.samples;
        }
        constructor(e2, t2) {
          dP(this, "id", void 0), dP(this, "track", void 0), dP(this, "score", 0), dP(this, "active", true), dP(this, "muted", false), dP(this, "timer", 0), dP(this, "actives", 0), dP(this, "inactives", 0), this.id = e2, this.track = t2, this.setActive(gM.size < 3);
        }
        autoCheckActive() {
          this.autoSetActive(), this.autoAdjustActive(), this.resetTimer(), this.actives = 0, this.inactives = 0;
        }
        autoSetActive() {
          const e2 = this.active;
          this.active = this.activeRate >= 0.8;
          const { actives: t2, inactives: i2 } = function() {
            const e3 = [], t3 = [];
            return Array.from(hp(gM).call(gM)).forEach((i3) => {
              i3.active ? e3.push(i3) : t3.push(i3);
            }), { actives: e3, inactives: t3 };
          }();
          if (t2.length > 3) {
            let e3;
            t2.forEach((t3) => {
              (!e3 || e3.score > t3.score) && (e3 = t3);
            }), e3 && e3.setActive(false);
          }
          if (t2.length < 3 && i2.length > 0) {
            let t3;
            i2.forEach((e3) => {
              (!t3 || t3.score < e3.score) && e3.id !== this.id && (t3 = e3);
            }), t3 && e2 && !this.active && (t3.samples > 40 && t3.activeRate - this.activeRate > 0.4 ? t3.setActive(true) : this.active = true);
          }
          this.setMuted(!this.active);
        }
        setActive(e2) {
          this.active = e2, this.resetTimer(), this.setMuted(!e2);
        }
        autoAdjustActive() {
          this.active ? this.autoSwitchToInactive() : this.autoSwitchToActive();
        }
        autoSwitchToActive() {
          const e2 = function(e3) {
            let t2;
            return Array.from(hp(gM).call(gM)).forEach((i2) => {
              !i2.active || i2.id === e3 || i2.samples < 40 || (!t2 || i2.score < t2.score) && (t2 = i2);
            }), t2;
          }(this.id);
          e2 && this.activeRate - e2.activeRate > 0.4 && (e2.setActive(false), this.setActive(true));
        }
        autoSwitchToInactive() {
          const e2 = function(e3) {
            let t2;
            return Array.from(hp(gM).call(gM)).forEach((i2) => {
              i2.active || i2.id === e3 || i2.samples < 40 || (!t2 || i2.score > t2.score) && (t2 = i2);
            }), t2;
          }(this.id);
          e2 && e2.activeRate - this.activeRate > 0.4 && (e2.setActive(true), this.setActive(false));
        }
        addSample(e2) {
          e2 ? this.actives += 1 : this.inactives += 1, this.samples > SM && this.autoCheckActive();
        }
        setMuted(e2) {
          this.track && (this.track.enabled = !e2, this.muted = e2);
        }
        resetTimer() {
          this.clearTimer(), this.timer = window.setTimeout(() => {
            if (0 !== this.samples) return this.samples < 50 ? this.resetTimer() : void this.autoCheckActive();
          }, 1e3);
        }
        clearTimer() {
          this.timer && (clearTimeout(this.timer), this.timer = 0);
        }
      }
      let CM;
      function IM(e2) {
        const t2 = gM.get(e2);
        t2 && (gM.delete(e2), t2.clearTimer());
      }
      const yM = /* @__PURE__ */ new Map(), AM = /* @__PURE__ */ new Map();
      async function bM(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (!RD().supportWebRTCEncodedTransform) return void lD.warning("browser not support audio encoded transform");
        if (yM.has(e2)) return;
        const i2 = { track: e2.track };
        if (dw()) {
          if (!e2.createEncodedStreams) return void lD.warning("browser not support createEncodedStreams() API");
          mw(ew.CHROME, 87, 116) || (t2.enableTopn = false);
          let r2 = null;
          try {
            r2 = e2.createEncodedStreams();
          } catch (e3) {
            return void lD.error("create audio-encoded-streams error", e3 && e3.message);
          }
          const o2 = new TransformStream({ transform(r3, o3) {
            i2.controller || (i2.controller = o3), e2.track && e2.track.id !== i2.track.id && (lD.debug("audio track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2)), t2.enableTopn ? function(e3, t3, i3) {
              var n3;
              const r4 = tM(new DataView(t3.data));
              if (!r4) return i3.enqueue(t3);
              const o4 = e3.track.id;
              AM.set(o4, e3.track);
              const s2 = null === (n3 = r4.tlv.find((e4) => e4.tag === eM.AUDIO_LEVEL)) || void 0 === n3 ? void 0 : n3.value;
              let a2 = 0;
              "number" == typeof s2 && (a2 = 127 - s2);
              const c2 = Math.round(Math.pow(10, a2 / 60) - 1), { selected: d2, speaker: l2 } = function(e4, t4) {
                let i4 = EM.get(e4);
                if (i4 || (i4 = function(e5) {
                  const t5 = new uM();
                  return EM.set(e5, t5), mM || (mM = new _M(MN("TOPN_SILENCE_THRESHOLD") || 500), mM.on("ActiveSpeakerChanged", (e6) => {
                    null != e6 && (fM = e6);
                  })), mM.addSpeakers([t5]), t5;
                }(e4)), EM.size <= 3) return { selected: true, speaker: i4 };
                if (!mM) throw new Error("no active speaker detector");
                return mM.levelChanged(i4.id, t4), TM = mM.loudest.map((e5) => e5.id), fM && !kn(TM).call(TM, fM) && TM.length >= 3 && TM.pop(), { selected: kn(TM).call(TM, i4.id) || i4.id === fM, speaker: i4 };
              }(e3, c2), u2 = function(e4, t4, i4) {
                const n4 = gM.get(e4) || new vM(e4, t4);
                return n4.score = i4, gM.set(e4, n4), function(e5) {
                  if (RM.set(e5, true), !CM) return void (CM = Date.now());
                  const t5 = Date.now();
                  t5 - CM > 1e3 && (RM.get(e5) ? RM.set(e5, false) : (IM(e5), RM.delete(e5)), CM = t5);
                }(e4), n4;
              }(o4, e3.track, l2.energyScore);
              u2.addSample(d2), u2.active && (t3.data = r4.frame.buffer, i3.enqueue(t3));
            }(e2, r3, o3) : t2.enableMetadata ? function(e3, t3, i3) {
              const n3 = tM(new DataView(e3.data));
              if (!n3) return t3.enqueue(e3);
              const r4 = n3.tlv.find((e4) => e4.tag === eM.METADATA);
              r4 && i3 && r4.value instanceof Uint8Array && i3(r4.value), e3.data = n3.frame.buffer, t3.enqueue(e3);
            }(r3, o3, t2.onMetadata) : o3.enqueue(r3);
          } });
          r2.readable.pipeThrough(o2).pipeTo(r2.writable);
        } else if (lw()) {
          if ("undefined" == typeof RTCRtpScriptTransform) return void lD.warning("browser not support RTCRtpScriptTransform");
          const t3 = $k(), r2 = new MessageChannel();
          await new np((e3) => t3.onmessage = (t4) => {
            "registered" === t4.data && e3(void 0);
          });
          const o2 = new RTCRtpScriptTransform(t3, { name: "rx", port: r2.port2 }, [r2.port2]);
          e2.transform = o2, await new np((e3) => t3.onmessage = (t4) => {
            "started" === t4.data && e3(void 0);
          }), r2.port1.onmessage = (t4) => {
            var r3;
            t4.data.transformed && e2.track && (null === (r3 = e2.track) || void 0 === r3 ? void 0 : r3.id) !== i2.track.id && (lD.debug("audio track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
          }, i2.worker = t3;
        }
        function n2() {
          e2.track.removeEventListener("ended", n2), function(e3) {
            const t3 = yM.get(e3);
            if (t3) {
              !function(e4) {
                const t4 = EM.get(e4);
                t4 && (EM.delete(e4), mM && (mM.removeSpeakers([t4]), 0 === EM.size && (mM.destroy(), mM = null)));
              }(e3), IM(e3.track.id), yM.delete(e3);
              try {
                var i3, n3;
                null === (i3 = t3.controller) || void 0 === i3 || i3.terminate(), null === (n3 = t3.worker) || void 0 === n3 || n3.terminate();
              } catch (e4) {
                lD.warning(e4 && e4.message);
              }
            }
          }(e2);
        }
        yM.set(e2, i2), e2.track.addEventListener("ended", n2);
      }
      function wM(e2, t2, i2) {
        let n2 = new Uint8Array(e2, t2, i2), r2 = [], o2 = 0;
        for (; r2.length < i2; ) o2 + 3 < i2 && 0 === n2[o2] && 0 === n2[o2 + 1] && 3 === n2[o2 + 2] && (0 === n2[o2 + 3] || 1 === n2[o2 + 3] || 2 === n2[o2 + 3] || 3 === n2[o2 + 3]) ? (r2.push(n2[o2], n2[o2 + 1], n2[o2 + 3]), o2 += 4) : (r2.push(n2[o2]), o2++);
        return new Uint8Array(r2);
      }
      const OM = /* @__PURE__ */ new Map();
      async function NM(e2, t2) {
        if (!RD().supportWebRTCEncodedTransform) return void lD.warning("browser not support video encoded transform");
        if (OM.has(e2)) return;
        if (!e2.track) return;
        const i2 = { track: e2.track };
        if (dw()) {
          if (!e2.createEncodedStreams) return void lD.warning("browser not support createEncodedStreams() API");
          let r2 = null;
          try {
            r2 = e2.createEncodedStreams();
          } catch (e3) {
            return void lD.error("create video-encoded-streams error", e3 && e3.message);
          }
          const o2 = [];
          t2.on("sei-to-send", (e3) => {
            o2.push(e3);
          });
          const s2 = new TransformStream({ transform(t3, r3) {
            i2.controller || (i2.controller = r3), e2.track && e2.track.id !== i2.track.id && (lD.debug("video track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
            const s3 = o2.shift();
            s3 && (t3.data = function(e3, t4) {
              const i3 = function(e4) {
                const t5 = e4.length;
                let i4 = [], n4 = 0;
                for (; n4 < t5; ) n4 + 2 < t5 && 0 === e4[n4] && 0 === e4[n4 + 1] && (0 === e4[n4 + 2] || 1 === e4[n4 + 2] || 2 === e4[n4 + 2] || 3 === e4[n4 + 2]) ? (i4.push(e4[n4], e4[n4 + 1], 3, e4[n4 + 2]), n4 += 3) : (i4.push(e4[n4]), n4++);
                return new Uint8Array(i4);
              }(t4), n3 = i3.length, r4 = Math.floor(n3 / 255), o3 = n3 % 255, s4 = new Uint8Array(6 + r4 + 1 + n3 + e3.byteLength);
              s4[0] = 0, s4[1] = 0, s4[2] = 0, s4[3] = 1, s4[4] = 6, s4[5] = 101;
              let a2 = 0;
              for (; a2 < r4; ) s4[6 + a2] = 255, a2++;
              return s4[6 + a2] = o3, a2++, s4.set(i3, 6 + a2), s4.set(new Uint8Array(e3), 6 + a2 + n3), s4.buffer;
            }(t3.data, s3)), r3.enqueue(t3);
          } });
          r2.readable.pipeThrough(s2).pipeTo(r2.writable);
        } else {
          if (!lw()) return;
          {
            if ("undefined" == typeof RTCRtpScriptTransform) return void lD.warning("browser not support RTCRtpScriptTransform");
            const r2 = $k(), o2 = new MessageChannel();
            await new np((e3) => r2.onmessage = (t3) => {
              "registered" === t3.data && e3(void 0);
            });
            const s2 = new RTCRtpScriptTransform(r2, { name: "tx", port: o2.port2 }, [o2.port2]);
            e2.transform = s2, await new np((e3) => r2.onmessage = (t3) => {
              "started" === t3.data && e3(void 0);
            }), t2.on("sei-to-send", (e3) => {
              o2.port1.postMessage({ sei: e3 });
            }), o2.port1.onmessage = (t3) => {
              var r3;
              t3.data.transformed && e2.track && (null === (r3 = e2.track) || void 0 === r3 ? void 0 : r3.id) !== i2.track.id && (lD.debug("video track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
            }, i2.worker = r2;
          }
        }
        function n2() {
          if (e2.track) {
            if (this.id !== e2.track.id) return;
            e2.track.removeEventListener("ended", n2);
          }
          const t3 = OM.get(e2);
          if (t3) {
            OM.delete(e2);
            try {
              var i3, r2;
              null === (i3 = t3.controller) || void 0 === i3 || i3.terminate(), null === (r2 = t3.worker) || void 0 === r2 || r2.terminate();
            } catch (e3) {
              lD.warning(e3 && e3.message);
            }
          }
        }
        OM.set(e2, i2), e2.track.addEventListener("ended", n2);
      }
      const DM = /* @__PURE__ */ new Map();
      async function PM(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        if (!RD().supportWebRTCEncodedTransform) return void lD.warning("browser not support video encoded transform");
        if (!e2.track) return;
        if (DM.has(e2)) {
          const i3 = DM.get(e2);
          return void (i3 && (i3.onSei = t2.onSei));
        }
        const i2 = { track: e2.track, onSei: t2.onSei };
        if (dw()) {
          if (!e2.createEncodedStreams) return void lD.warning("browser not support createEncodedStreams() API");
          let t3 = null;
          try {
            t3 = e2.createEncodedStreams();
          } catch (e3) {
            return void lD.error("create video-encoded-streams error", e3 && e3.message);
          }
          const r2 = new TransformStream({ transform(t4, r3) {
            i2.controller || (i2.controller = r3), e2.track && e2.track.id !== i2.track.id && (lD.debug("video track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2));
            const o2 = function(e3) {
              const t5 = new DataView(e3.data);
              let i3 = 0;
              for (; i3 + 4 < e3.data.byteLength; ) {
                if (0 === t5.getUint8(i3 + 0) && 0 === t5.getUint8(i3 + 1) && 0 === t5.getUint8(i3 + 2) && 1 === t5.getUint8(i3 + 3) && 6 === t5.getUint8(i3 + 4)) {
                  let n3 = i3 + 6, r4 = 0, o3 = 0;
                  for (; 255 === (o3 = t5.getUint8(n3++)); ) r4 += 255;
                  r4 += o3;
                  const s2 = wM(e3.data, n3, r4);
                  return new Uint8Array(s2);
                }
                i3++;
              }
              return null;
            }(t4);
            o2 && i2.onSei && i2.onSei(o2), r3.enqueue(t4);
          } });
          t3.readable.pipeThrough(r2).pipeTo(t3.writable);
        } else if (lw()) {
          if ("undefined" == typeof RTCRtpScriptTransform) return void lD.warning("browser not support RTCRtpScriptTransform");
          const t3 = $k(), r2 = new MessageChannel();
          await new np((e3) => t3.onmessage = (t4) => {
            "registered" === t4.data && e3(void 0);
          });
          const o2 = new RTCRtpScriptTransform(t3, { name: "rx", port: r2.port2 }, [r2.port2]);
          e2.transform = o2, await new np((e3) => t3.onmessage = (t4) => {
            "started" === t4.data && e3(void 0);
          }), r2.port1.onmessage = (t4) => {
            var r3;
            t4.data.transformed && e2.track && (null === (r3 = e2.track) || void 0 === r3 ? void 0 : r3.id) !== i2.track.id ? (lD.debug("video track changed: ".concat(i2.track.id, " => ").concat(e2.track.id)), i2.track.removeEventListener("ended", n2), i2.track = e2.track, i2.track.addEventListener("ended", n2)) : t4.data.sei && i2.onSei && i2.onSei(t4.data.sei);
          }, i2.worker = t3;
        }
        function n2() {
          if (e2.track) {
            if (this.id !== e2.track.id) return;
            e2.track.removeEventListener("ended", n2);
          }
          !function(e3) {
            const t3 = DM.get(e3);
            if (t3) {
              DM.delete(e3);
              try {
                var i3, n3;
                null === (i3 = t3.controller) || void 0 === i3 || i3.terminate(), null === (n3 = t3.worker) || void 0 === n3 || n3.terminate();
              } catch (e4) {
                lD.warning(e4 && e4.message);
              }
            }
          }(e2);
        }
        DM.set(e2, i2), e2.track.addEventListener("ended", n2);
      }
      !function() {
        const e2 = rw();
        gD.getDisplayMedia = !(!navigator.mediaDevices || !navigator.mediaDevices.getDisplayMedia), gD.getStreamFromExtension = e2.name === ew.CHROME && Number(e2.version) > 34, gD.supportUnifiedPlan = function() {
          if (!window.RTCRtpTransceiver) return false;
          if (!("currentDirection" in RTCRtpTransceiver.prototype)) return false;
          const e3 = new RTCPeerConnection();
          let t2 = false;
          try {
            e3.addTransceiver("audio"), t2 = true;
          } catch (e4) {
          }
          return e3.close(), t2;
        }(), gD.supportMinBitrate = e2.name === ew.CHROME || e2.name === ew.EDGE, gD.supportSetRtpSenderParameters = function() {
          const e3 = rw();
          return !!(window.RTCRtpSender && window.RTCRtpSender.prototype.setParameters && window.RTCRtpSender.prototype.getParameters) && (!!Nw() || !(!lw() && !cw()) || e3.name === ew.FIREFOX && Number(e3.version) >= 64);
        }(), e2.name === ew.SAFARI && (Number(e2.version) >= 14 ? gD.supportDualStream = true : gD.supportDualStream = false), gD.webAudioMediaStreamDest = function() {
          const e3 = rw();
          return !(e3.name === ew.SAFARI && Number(e3.version) < 12);
        }(), gD.supportReplaceTrack = !!window.RTCRtpSender && "function" == typeof RTCRtpSender.prototype.replaceTrack, gD.supportWebGL = "undefined" != typeof WebGLRenderingContext, gD.supportRequestFrame = !!window.CanvasCaptureMediaStreamTrack, Nw() || (gD.webAudioWithAEC = true), gD.supportShareAudio = function() {
          const e3 = rw();
          return (e3.os === $b.WIN_10 || e3.os === $b.WIN_81 || e3.os === $b.WIN_7 || e3.os === $b.LINUX || e3.os === $b.MAC_OS || e3.os === $b.CHROMIUM_OS) && e3.name === ew.CHROME && Number(e3.version) >= 74;
        }(), gD.supportDataChannel = !!(_w(76) || function(e3) {
          const t2 = rw();
          return !(t2.name !== ew.FIREFOX || !t2.osVersion) && Number(t2.version) >= e3;
        }(68) || Tw(14)), gD.supportPCSetConfiguration = function() {
          const e3 = window.RTCPeerConnection;
          return !hw() && !!e3 && e3.prototype.setConfiguration instanceof Function;
        }(), gD.supportWebRTCEncodedTransform = function() {
          const e3 = rw();
          return "Chrome" === e3.name && Number(e3.version) >= 87 || "Safari" === e3.name && Number(e3.version) >= 15;
        }(), gD.supportWebRTCInsertableStream = function() {
          const e3 = rw();
          return (e3.name === ew.CHROME || e3.name === ew.EDGE) && Number(e3.version) >= 94 && "MediaStreamTrackGenerator" in window && "MediaStreamTrackProcessor" in window;
        }(), gD.supportRequestVideoFrameCallback = "requestVideoFrameCallback" in HTMLVideoElement.prototype, gD.supportWebCrypto = "undefined" != typeof window && void 0 !== window.crypto && void 0 !== window.crypto.subtle, gO(() => {
          gD.supportDualStreamEncoding = function() {
            const e3 = rw();
            return !!MN("DISABLE_WEBAUDIO") || ("Safari" === e3.name && Number(e3.version) >= 14 || !!("Chrome" === e3.name && /Windows/i.test(e3.os || "") && Number(e3.version) >= 100 && MN("CHROME_DUAL_STREAM_USE_ENCODING")));
          }(), lD.debug("browser ua: ", navigator.userAgent), lD.info("browser info: ", e2), lD.info("browser compatibility: ", gD);
        });
      }();
      const LM = ["CHINA", "GLOBAL"];
      const kM = [[0, 1, 2, 3, 4, 5, 5], [0, 2, 2, 3, 4, 5, 5], [0, 3, 3, 3, 4, 5, 5], [0, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 5, 5, 5]], MM = [], UM = [];
      function xM(e2, t2) {
        return !!t2 && MM.some((i2) => i2.uid === e2 && i2.channelName === t2);
      }
      function VM() {
        return UM.length > 0;
      }
      var FM = Vv.forEach, BM = Hn("forEach") ? [].forEach : function(e2) {
        return FM(this, e2, arguments.length > 1 ? arguments[1] : void 0);
      };
      Ni({ target: "Array", proto: true, forced: [].forEach !== BM }, { forEach: BM });
      var jM = $i("Array", "forEach"), GM = mn, WM = et, HM = l, KM = jM, YM = Array.prototype, qM = { DOMTokenList: true, NodeList: true }, zM = function(e2) {
        var t2 = e2.forEach;
        return e2 === YM || HM(YM, e2) && t2 === YM.forEach || WM(qM, GM(e2)) ? KM : t2;
      }, JM = i(zM), XM = Qe, QM = po;
      Ni({ target: "Object", stat: true, forced: n(function() {
        QM(1);
      }) }, { keys: function(e2) {
        return QM(XM(e2));
      } });
      var ZM = i($.Object.keys), $M = i(nr), eU = i(mr), tU = Ni, iU = sr, nU = Zc, rU = Z, oU = Fi, sU = Hi, aU = X, cU = _E, dU = _t, lU = ad, uU = ZR("slice"), hU = dU("species"), pU = Array, _U = Math.max;
      tU({ target: "Array", proto: true, forced: !uU }, { slice: function(e2, t2) {
        var i2, n2, r2, o2 = aU(this), s2 = sU(o2), a2 = oU(e2, s2), c2 = oU(void 0 === t2 ? s2 : t2, s2);
        if (iU(o2) && (i2 = o2.constructor, (nU(i2) && (i2 === pU || iU(i2.prototype)) || rU(i2) && null === (i2 = i2[hU])) && (i2 = void 0), i2 === pU || void 0 === i2)) return lU(o2, a2, c2);
        for (n2 = new (void 0 === i2 ? pU : i2)(_U(c2 - a2, 0)), r2 = 0; a2 < c2; a2++, r2++) a2 in o2 && cU(n2, r2, o2[a2]);
        return n2.length = r2, n2;
      } });
      var EU = $i("Array", "slice"), mU = l, fU = EU, TU = Array.prototype, SU = function(e2) {
        var t2 = e2.slice;
        return e2 === TU || mU(TU, e2) && t2 === TU.slice ? fU : t2;
      }, gU = i(SU);
      function RU(e2, t2, i2, n2, r2) {
        var o2, s2, a2, c2 = {};
        return JM(o2 = ZM(n2)).call(o2, function(e3) {
          c2[e3] = n2[e3];
        }), c2.enumerable = !!c2.enumerable, c2.configurable = !!c2.configurable, ("value" in c2 || c2.initializer) && (c2.writable = true), c2 = $M(s2 = eU(a2 = gU(i2).call(i2)).call(a2)).call(s2, function(i3, n3) {
          return n3(e2, t2, i3) || i3;
        }, c2), r2 && void 0 !== c2.initializer && (c2.value = c2.initializer ? c2.initializer.call(r2) : void 0, c2.initializer = void 0), void 0 === c2.initializer && (BR(e2, t2, c2), c2 = null), c2;
      }
      let vU = function(e2) {
        return e2[e2.ACCESS_POINT = 101] = "ACCESS_POINT", e2[e2.UNILBS = 201] = "UNILBS", e2[e2.STRING_UID_ALLOCATOR = 901] = "STRING_UID_ALLOCATOR", e2;
      }({}), CU = function(e2) {
        return e2[e2.IIIEGAL_APPID = 1] = "IIIEGAL_APPID", e2[e2.IIIEGAL_UID = 2] = "IIIEGAL_UID", e2[e2.INTERNAL_ERROR = 3] = "INTERNAL_ERROR", e2;
      }({}), IU = function(e2) {
        return e2[e2.INVALID_VENDOR_KEY = 5] = "INVALID_VENDOR_KEY", e2[e2.INVALID_CHANNEL_NAME = 7] = "INVALID_CHANNEL_NAME", e2[e2.INTERNAL_ERROR = 8] = "INTERNAL_ERROR", e2[e2.NO_AUTHORIZED = 9] = "NO_AUTHORIZED", e2[e2.DYNAMIC_KEY_TIMEOUT = 10] = "DYNAMIC_KEY_TIMEOUT", e2[e2.NO_ACTIVE_STATUS = 11] = "NO_ACTIVE_STATUS", e2[e2.DYNAMIC_KEY_EXPIRED = 13] = "DYNAMIC_KEY_EXPIRED", e2[e2.STATIC_USE_DYNAMIC_KEY = 14] = "STATIC_USE_DYNAMIC_KEY", e2[e2.DYNAMIC_USE_STATIC_KEY = 15] = "DYNAMIC_USE_STATIC_KEY", e2[e2.USER_OVERLOAD = 16] = "USER_OVERLOAD", e2[e2.FORBIDDEN_REGION = 18] = "FORBIDDEN_REGION", e2[e2.CANNOT_MEET_AREA_DEMAND = 19] = "CANNOT_MEET_AREA_DEMAND", e2;
      }({}), yU = function(e2) {
        return e2[e2.NO_FLAG_SET = 100] = "NO_FLAG_SET", e2[e2.FLAG_SET_BUT_EMPTY = 101] = "FLAG_SET_BUT_EMPTY", e2[e2.INVALID_FALG_SET = 102] = "INVALID_FALG_SET", e2[e2.FLAG_SET_BUT_NO_RE = 103] = "FLAG_SET_BUT_NO_RE", e2[e2.INVALID_SERVICE_ID = 104] = "INVALID_SERVICE_ID", e2[e2.NO_SERVICE_AVAILABLE = 200] = "NO_SERVICE_AVAILABLE", e2[e2.NO_SERVICE_AVAILABLE_P2P = 201] = "NO_SERVICE_AVAILABLE_P2P", e2[e2.NO_SERVICE_AVAILABLE_VOICE = 202] = "NO_SERVICE_AVAILABLE_VOICE", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC = 203] = "NO_SERVICE_AVAILABLE_WEBRTC", e2[e2.NO_SERVICE_AVAILABLE_CDS = 204] = "NO_SERVICE_AVAILABLE_CDS", e2[e2.NO_SERVICE_AVAILABLE_CDN = 205] = "NO_SERVICE_AVAILABLE_CDN", e2[e2.NO_SERVICE_AVAILABLE_TDS = 206] = "NO_SERVICE_AVAILABLE_TDS", e2[e2.NO_SERVICE_AVAILABLE_REPORT = 207] = "NO_SERVICE_AVAILABLE_REPORT", e2[e2.NO_SERVICE_AVAILABLE_APP_CENTER = 208] = "NO_SERVICE_AVAILABLE_APP_CENTER", e2[e2.NO_SERVICE_AVAILABLE_ENV0 = 209] = "NO_SERVICE_AVAILABLE_ENV0", e2[e2.NO_SERVICE_AVAILABLE_VOET = 210] = "NO_SERVICE_AVAILABLE_VOET", e2[e2.NO_SERVICE_AVAILABLE_STRING_UID = 211] = "NO_SERVICE_AVAILABLE_STRING_UID", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS = 212] = "NO_SERVICE_AVAILABLE_WEBRTC_UNILBS", e2[e2.NO_SERVICE_AVAILABLE_UNILBS_FLV = 213] = "NO_SERVICE_AVAILABLE_UNILBS_FLV", e2;
      }({}), AU = function(e2) {
        return e2[e2.K_TIMESTAMP_EXPIRED = 2] = "K_TIMESTAMP_EXPIRED", e2[e2.K_CHANNEL_PERMISSION_INVALID = 3] = "K_CHANNEL_PERMISSION_INVALID", e2[e2.K_CERTIFICATE_INVALID = 4] = "K_CERTIFICATE_INVALID", e2[e2.K_CHANNEL_NAME_EMPTY = 5] = "K_CHANNEL_NAME_EMPTY", e2[e2.K_CHANNEL_NOT_FOUND = 6] = "K_CHANNEL_NOT_FOUND", e2[e2.K_TICKET_INVALID = 7] = "K_TICKET_INVALID", e2[e2.K_CHANNEL_CONFLICTED = 8] = "K_CHANNEL_CONFLICTED", e2[e2.K_SERVICE_NOT_READY = 9] = "K_SERVICE_NOT_READY", e2[e2.K_SERVICE_TOO_HEAVY = 10] = "K_SERVICE_TOO_HEAVY", e2[e2.K_UID_BANNED = 14] = "K_UID_BANNED", e2[e2.K_IP_BANNED = 15] = "K_IP_BANNED", e2[e2.K_CHANNEL_BANNED = 16] = "K_CHANNEL_BANNED", e2[e2.DATASTREAM2_NOT_AVAILABLE = 27] = "DATASTREAM2_NOT_AVAILABLE", e2[e2.K_AUTO_REBALANCE = 28] = "K_AUTO_REBALANCE", e2[e2.WARN_NO_AVAILABLE_CHANNEL = 103] = "WARN_NO_AVAILABLE_CHANNEL", e2[e2.WARN_LOOKUP_CHANNEL_TIMEOUT = 104] = "WARN_LOOKUP_CHANNEL_TIMEOUT", e2[e2.WARN_LOOKUP_CHANNEL_REJECTED = 105] = "WARN_LOOKUP_CHANNEL_REJECTED", e2[e2.WARN_OPEN_CHANNEL_TIMEOUT = 106] = "WARN_OPEN_CHANNEL_TIMEOUT", e2[e2.WARN_OPEN_CHANNEL_REJECTED = 107] = "WARN_OPEN_CHANNEL_REJECTED", e2[e2.WARN_REQUEST_DEFERRED = 108] = "WARN_REQUEST_DEFERRED", e2[e2.ERR_DYNAMIC_KEY_TIMEOUT = 109] = "ERR_DYNAMIC_KEY_TIMEOUT", e2[e2.ERR_NO_AUTHORIZED = 110] = "ERR_NO_AUTHORIZED", e2[e2.ERR_VOM_SERVICE_UNAVAILABLE = 111] = "ERR_VOM_SERVICE_UNAVAILABLE", e2[e2.ERR_NO_CHANNEL_AVAILABLE_CODE = 112] = "ERR_NO_CHANNEL_AVAILABLE_CODE", e2[e2.ERR_MASTER_VOCS_UNAVAILABLE = 114] = "ERR_MASTER_VOCS_UNAVAILABLE", e2[e2.ERR_INTERNAL_ERROR = 115] = "ERR_INTERNAL_ERROR", e2[e2.ERR_NO_ACTIVE_STATUS = 116] = "ERR_NO_ACTIVE_STATUS", e2[e2.ERR_INVALID_UID = 117] = "ERR_INVALID_UID", e2[e2.ERR_DYNAMIC_KEY_EXPIRED = 118] = "ERR_DYNAMIC_KEY_EXPIRED", e2[e2.ERR_STATIC_USE_DYANMIC_KE = 119] = "ERR_STATIC_USE_DYANMIC_KE", e2[e2.ERR_DYNAMIC_USE_STATIC_KE = 120] = "ERR_DYNAMIC_USE_STATIC_KE", e2[e2.ERR_NO_VOCS_AVAILABLE = 2e3] = "ERR_NO_VOCS_AVAILABLE", e2[e2.ERR_NO_VOS_AVAILABLE = 2001] = "ERR_NO_VOS_AVAILABLE", e2[e2.ERR_JOIN_CHANNEL_TIMEOUT = 2002] = "ERR_JOIN_CHANNEL_TIMEOUT", e2[e2.ERR_REPEAT_JOIN_CHANNEL = 2003] = "ERR_REPEAT_JOIN_CHANNEL", e2[e2.ERR_JOIN_BY_MULTI_IP = 2004] = "ERR_JOIN_BY_MULTI_IP", e2[e2.ERR_NOT_JOINED = 2011] = "ERR_NOT_JOINED", e2[e2.ERR_REPEAT_JOIN_REQUEST = 2012] = "ERR_REPEAT_JOIN_REQUEST", e2[e2.ERR_INVALID_VENDOR_KEY = 2013] = "ERR_INVALID_VENDOR_KEY", e2[e2.ERR_INVALID_CHANNEL_NAME = 2014] = "ERR_INVALID_CHANNEL_NAME", e2[e2.ERR_INVALID_STRINGUID = 2015] = "ERR_INVALID_STRINGUID", e2[e2.ERR_TOO_MANY_USERS = 2016] = "ERR_TOO_MANY_USERS", e2[e2.ERR_SET_CLIENT_ROLE_TIMEOUT = 2017] = "ERR_SET_CLIENT_ROLE_TIMEOUT", e2[e2.ERR_SET_CLIENT_ROLE_NO_PERMISSION = 2018] = "ERR_SET_CLIENT_ROLE_NO_PERMISSION", e2[e2.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE = 2019] = "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", e2[e2.ERR_PUBLISH_REQUEST_INVALID = 2020] = "ERR_PUBLISH_REQUEST_INVALID", e2[e2.ERR_SUBSCRIBE_REQUEST_INVALID = 2021] = "ERR_SUBSCRIBE_REQUEST_INVALID", e2[e2.ERR_NOT_SUPPORTED_MESSAGE = 2022] = "ERR_NOT_SUPPORTED_MESSAGE", e2[e2.ERR_ILLEAGAL_PLUGIN = 2023] = "ERR_ILLEAGAL_PLUGIN", e2[e2.ERR_REJOIN_TOKEN_INVALID = 2024] = "ERR_REJOIN_TOKEN_INVALID", e2[e2.ERR_REJOIN_USER_NOT_JOINED = 2025] = "ERR_REJOIN_USER_NOT_JOINED", e2[e2.ERR_INVALID_OPTIONAL_INFO = 2027] = "ERR_INVALID_OPTIONAL_INFO", e2[e2.ILLEGAL_AES_PASSWORD = 2028] = "ILLEGAL_AES_PASSWORD", e2[e2.ILLEGAL_CLIENT_ROLE_LEVEL = 2029] = "ILLEGAL_CLIENT_ROLE_LEVEL", e2[e2.ERR_TOO_MANY_BROADCASTERS = 2031] = "ERR_TOO_MANY_BROADCASTERS", e2[e2.ERR_TOO_MANY_SUBSCRIBERS = 2032] = "ERR_TOO_MANY_SUBSCRIBERS", e2[e2.ERR_LICENSE_MISSING = 32769] = "ERR_LICENSE_MISSING", e2[e2.ERR_LICENSE_EXPIRED = 32771] = "ERR_LICENSE_EXPIRED", e2[e2.ERR_LICENSE_MINUTES_EXCEEDED = 32773] = "ERR_LICENSE_MINUTES_EXCEEDED", e2[e2.ERR_LICENSE_PERIOD_INVALID = 32774] = "ERR_LICENSE_PERIOD_INVALID", e2[e2.ERR_LICENSE_MULTIPLE_SDK_SERVICE = 32778] = "ERR_LICENSE_MULTIPLE_SDK_SERVICE", e2[e2.ERR_LICENSE_ILLEGAL = 32783] = "ERR_LICENSE_ILLEGAL", e2[e2.ERR_TEST_RECOVER = 9e3] = "ERR_TEST_RECOVER", e2[e2.ERR_TEST_TRYNEXT = 9001] = "ERR_TEST_TRYNEXT", e2[e2.ERR_TEST_RETRY = 9002] = "ERR_TEST_RETRY", e2;
      }({}), bU = function(e2) {
        return e2.CONNECTING = "connecting", e2.CONNECTED = "connected", e2.RECONNECTING = "reconnecting", e2.CLOSED = "closed", e2;
      }({}), wU = function(e2) {
        return e2.WS_CONNECTED = "ws_connected", e2.WS_RECONNECTING = "ws_reconnecting", e2.WS_CLOSED = "ws_closed", e2.WS_RECONNECT_CREATE_CONNECTION = "ws_reconnect_create_connection", e2.ON_BINARY_DATA = "on_binary_data", e2.REQUEST_RECOVER = "request_recover", e2.REQUEST_JOIN_INFO = "request_join_info", e2.REQUEST_REJOIN_INFO = "req_rejoin_info", e2.IS_P2P_DISCONNECTED = "is_p2p_dis", e2.DISCONNECT_P2P = "dis_p2p", e2.ABORT_P2P_EXECUTION = "abort_p2p_execution", e2.NEED_RENEW_SESSION = "need-sid", e2.REPORT_JOIN_GATEWAY = "report_join_gateway", e2.REQUEST_TIMEOUT = "request_timeout", e2.REQUEST_SUCCESS = "request_success", e2.JOIN_RESPONSE = "join_response", e2.PRE_CONNECT_PC = "pre_connect_pc", e2.P2P_CONNECTION = "p2p_connection", e2.P2P_REMOTE_CANDIDATE_UPDATE = "p2p_remote_candidate_update", e2.P2P_SUBSCRIBE = "p2p_subscribe", e2.P2P_UNSUBSCRIBE = "p2p_unsubscribe", e2.P2P_EXCHANGE_SDP = "p2p_exchange_sdp", e2.P2P_ON_ADD_VIDEO_STREAM = "p2p_on_add_video_stream", e2.P2P_ON_ADD_AUDIO_STREAM = "p2p_on_add_audio_stream", e2.RECOVER_NOTIFICATION = "recover_notification", e2;
      }({}), OU = function(e2) {
        return e2.PING = "ping", e2.PING_BACK = "ping_back", e2.JOIN = "join_v3", e2.REJOIN = "rejoin_v3", e2.LEAVE = "leave", e2.SET_CLIENT_ROLE = "set_client_role", e2.PUBLISH = "publish", e2.PUBLISH_DATASTREAM = "publish_datastream", e2.UNPUBLISH = "unpublish", e2.UNPUBLISH_DATASTREAM = "unpublish_datastream", e2.SUBSCRIBE = "subscribe", e2.PRE_SUBSCRIBE = "pre_subscribe", e2.SUBSCRIBE_DATASTREAM = "subscribe_datastream", e2.SUBSCRIBE_STREAMS = "subscribe_streams", e2.UNSUBSCRIBE = "unsubscribe", e2.UNSUBSCRIBE_DATASTREAM = "unsubscribe_datastream", e2.UNSUBSCRIBE_STREAMS = "unsubscribe_streams", e2.SUBSCRIBE_CHANGE = "subscribe_change", e2.TRAFFIC_STATS = "traffic_stats", e2.RENEW_TOKEN = "renew_token", e2.SWITCH_VIDEO_STREAM = "switch_video_stream", e2.DEFAULT_VIDEO_STREAM = "default_video_stream", e2.SET_FALLBACK_OPTION = "set_fallback_option", e2.GATEWAY_INFO = "gateway_info", e2.CONTROL = "control", e2.SEND_METADATA = "send_metadata", e2.DATA_STREAM = "data_stream", e2.PICK_SVC_LAYER = "pick_svc_layer", e2.RESTART_ICE = "restart_ice", e2.CONNECT_PC = "connect_pc", e2.SET_VIDEO_PROFILE = "set_video_profile", e2.SET_PARAMETER = "set_parameter", e2.SET_RTM2_FLAG = "set_rtm2_flag", e2;
      }({}), NU = function(e2) {
        return e2.WRTC_STATS = "wrtc_stats", e2.WS_INFLATE_DATA_LENGTH = "ws_inflate_data_length", e2.DENOISER_STATS = "denoiser_stats", e2.EXTENSION_USAGE_STATS = "extension_usage_stats", e2;
      }({}), DU = function(e2) {
        return e2.ON_USER_ONLINE = "on_user_online", e2.ON_USER_OFFLINE = "on_user_offline", e2.ON_STREAM_FALLBACK_UPDATE = "on_stream_fallback_update", e2.ON_PUBLISH_STREAM = "on_publish_stream", e2.ON_UPLINK_STATS = "on_uplink_stats", e2.ON_P2P_LOST = "on_p2p_lost", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "on_token_privilege_will_expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "on_token_privilege_did_expire", e2.ON_USER_BANNED = "on_user_banned", e2.ON_USER_LICENSE_BANNED = "on_user_license_banned", e2.ON_NOTIFICATION = "on_notification", e2.ON_CRYPT_ERROR = "on_crypt_error", e2.MUTE_AUDIO = "mute_audio", e2.MUTE_VIDEO = "mute_video", e2.UNMUTE_AUDIO = "unmute_audio", e2.UNMUTE_VIDEO = "unmute_video", e2.ON_P2P_OK = "on_p2p_ok", e2.RECEIVE_METADATA = "receive_metadata", e2.ON_DATA_STREAM = "on_data_stream", e2.ON_RTP_CAPABILITY_CHANGE = "on_rtp_capability_change", e2.ON_REMOTE_DATASTREAM_UPDATE = "on_remote_datastream_update", e2.ON_REMOTE_FULL_DATASTREAM_INFO = "on_remote_full_datastream_info", e2.ENABLE_LOCAL_VIDEO = "enable_local_video", e2.DISABLE_LOCAL_VIDEO = "disable_local_video", e2.ENABLE_LOCAL_AUDIO = "enable_local_audio", e2.DISABLE_LOCAL_AUDIO = "disable_local_audio", e2.ON_PUBLISHED_USER_LIST = "on_published_user_list", e2;
      }({}), PU = function(e2) {
        return e2.SEND_ONLY = "SEND_ONLY", e2.RECEIVE_ONLY = "RECEIVE_ONLY", e2;
      }({}), LU = function(e2) {
        return e2.CONNECTED = "websocket:connected", e2.RECONNECTING = "websocket:reconnecting", e2.WILL_RECONNECT = "websocket:will_reconnect", e2.CLOSED = "websocket:closed", e2.FAILED = "websocket:failed", e2.ON_MESSAGE = "websocket:on_message", e2.REQUEST_NEW_URLS = "websocket:request_new_urls", e2.RECONNECT_CREATE_CONNECTION = "websocket:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "websocket:on_token_privilege_did_expire", e2;
      }({});
      function kU(e2) {
        if ("string" != typeof e2 || !/^[a-zA-Z0-9 \!\#\$\%\&\(\)\+\-\:\;\<\=\.\>\?\@\[\]\^\_\{\}\|\~\,]{1,64}$/.test(e2)) throw lD.error("Invalid Channel Name ".concat(e2)), new SD(Uw.INVALID_PARAMS, "The length must be within 64 bytes. The supported characters: a-z,A-Z,0-9,space,!, #, $, %, &, (, ), +, -, :, ;, <, =, ., >, ?, @, [, ], ^, _,  {, }, |, ~, ,");
      }
      function MU(e2) {
        if (!(t2 = e2, "number" == typeof t2 && Math.floor(t2) === t2 && 0 <= t2 && t2 <= 4294967295 || Kw(e2, 1, 255))) throw new SD(Uw.INVALID_PARAMS, "[String uid] Length of the string: [1,255]. ASCII characters only. [Number uid] The value range is [0,10000]");
        var t2;
        "string" == typeof e2 && lD.warn("You input a string as the user ID, to ensure better end-user experience, Agora highly suggests not using a string as the user ID.");
      }
      let UU = function(e2) {
        return e2.TRANSCODE = "mix_streaming", e2.RAW = "raw_streaming", e2;
      }({});
      const xU = { alpha: 1, height: 640, width: 360, x: 0, y: 0, zOrder: 0, audioChannel: 0 }, VU = { x: 0, y: 0, width: 160, height: 160, zOrder: 255, alpha: 1 };
      function FU(e2, t2) {
        Gw(e2.url, "".concat(t2, ".url"), 1, 1e3, false), Hw(e2.x) || Bw(e2.x, "".concat(t2, ".x"), 0, 1e4), Hw(e2.y) || Bw(e2.y, "".concat(t2, ".y"), 0, 1e4), Hw(e2.width) || Bw(e2.width, "".concat(t2, ".width"), 0, 1e4), Hw(e2.height) || Bw(e2.height, "".concat(t2, ".height"), 0, 1e4), Hw(e2.zOrder) || Bw(e2.zOrder, "".concat(t2, ".zOrder"), 0, 255), Hw(e2.alpha) || Bw(e2.alpha, "".concat(t2, ".alpha"), 0, 1, false);
      }
      const BU = { audioBitrate: 48, audioChannels: 1, audioSampleRate: 48e3, backgroundColor: 0, height: 360, lowLatency: false, videoBitrate: 400, videoCodecProfile: 100, videoCodecType: 1, videoFrameRate: 15, videoGop: 30, width: 640, images: [], userConfigs: [], userConfigExtraInfo: "" };
      let jU = function(e2) {
        return e2.WARNING = "@live_uap-warning", e2.ERROR = "@line_uap-error", e2.PUBLISH_STREAM_STATUS = "@live_uap-publish-status", e2.WORKER_STATUS = "@live_uap-worker-status", e2.REQUEST_NEW_ADDRESS = "@live_uap-request-address", e2;
      }({}), GU = function(e2) {
        return e2.REQUEST_WORKER_MANAGER_LIST = "@live_req_worker_manager", e2;
      }({}), WU = function(e2) {
        return e2[e2.LIVE_STREAM_RESPONSE_SUCCEED = 200] = "LIVE_STREAM_RESPONSE_SUCCEED", e2[e2.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM = 454] = "LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM", e2[e2.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR = 450] = "LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_BAD_STREAM = 451] = "LIVE_STREAM_RESPONSE_BAD_STREAM", e2[e2.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR = 400] = "LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST = 404] = "LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST", e2[e2.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED = 456] = "LIVE_STREAM_RESPONSE_NOT_AUTHORIZED", e2[e2.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE = 457] = "LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE", e2[e2.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN = 429] = "LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN", e2[e2.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH = 452] = "LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH", e2[e2.LIVE_STREAM_RESPONSE_NOT_SUPPORTED = 453] = "LIVE_STREAM_RESPONSE_NOT_SUPPORTED", e2[e2.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM = 455] = "LIVE_STREAM_RESPONSE_MAX_STREAM_NUM", e2[e2.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR = 500] = "LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WORKER_LOST = 501] = "LIVE_STREAM_RESPONSE_WORKER_LOST", e2[e2.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT = 502] = "LIVE_STREAM_RESPONSE_RESOURCE_LIMIT", e2[e2.LIVE_STREAM_RESPONSE_WORKER_QUIT = 503] = "LIVE_STREAM_RESPONSE_WORKER_QUIT", e2[e2.ERROR_FAIL_SEND_MESSAGE = 504] = "ERROR_FAIL_SEND_MESSAGE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE = 30] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT = 31] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH = 32] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH", e2[e2.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN = 33] = "PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN", e2;
      }({});
      function HU(e2) {
        if (!e2.channelName) throw new SD(Uw.INVALID_PARAMS, "invalid channelName in info");
        if ("number" != typeof e2.uid) throw new SD(Uw.INVALID_PARAMS, "invalid uid in info, uid must be a number");
        return e2.token && Gw(e2.token, "info.token", 1, 2047), MU(e2.uid), kU(e2.channelName), true;
      }
      let KU = function(e2) {
        return e2[e2.SetSdkProfile = 0] = "SetSdkProfile", e2[e2.SetSourceChannel = 1] = "SetSourceChannel", e2[e2.SetSourceUserId = 2] = "SetSourceUserId", e2[e2.SetDestChannel = 3] = "SetDestChannel", e2[e2.StartPacketTransfer = 4] = "StartPacketTransfer", e2[e2.StopPacketTransfer = 5] = "StopPacketTransfer", e2[e2.UpdateDestChannel = 6] = "UpdateDestChannel", e2[e2.Reconnect = 7] = "Reconnect", e2[e2.SetVideoProfile = 8] = "SetVideoProfile", e2;
      }({}), YU = function(e2) {
        return e2.NETWORK_DISCONNECTED = "NETWORK_DISCONNECTED", e2.NETWORK_CONNECTED = "NETWORK_CONNECTED", e2.PACKET_JOINED_SRC_CHANNEL = "PACKET_JOINED_SRC_CHANNEL", e2.PACKET_JOINED_DEST_CHANNEL = "PACKET_JOINED_DEST_CHANNEL", e2.PACKET_SENT_TO_DEST_CHANNEL = "PACKET_SENT_TO_DEST_CHANNEL", e2.PACKET_RECEIVED_VIDEO_FROM_SRC = "PACKET_RECEIVED_VIDEO_FROM_SRC", e2.PACKET_RECEIVED_AUDIO_FROM_SRC = "PACKET_RECEIVED_AUDIO_FROM_SRC", e2.PACKET_UPDATE_DEST_CHANNEL = "PACKET_UPDATE_DEST_CHANNEL", e2.PACKET_UPDATE_DEST_CHANNEL_REFUSED = "PACKET_UPDATE_DEST_CHANNEL_REFUSED", e2.PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE = "PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE", e2;
      }({}), qU = function(e2) {
        return e2.RELAY_STATE_IDLE = "RELAY_STATE_IDLE", e2.RELAY_STATE_CONNECTING = "RELAY_STATE_CONNECTING", e2.RELAY_STATE_RUNNING = "RELAY_STATE_RUNNING", e2.RELAY_STATE_FAILURE = "RELAY_STATE_FAILURE", e2;
      }({}), zU = function(e2) {
        return e2.RELAY_OK = "RELAY_OK", e2.SERVER_CONNECTION_LOST = "SERVER_CONNECTION_LOST", e2.SRC_TOKEN_EXPIRED = "SRC_TOKEN_EXPIRED", e2.DEST_TOKEN_EXPIRED = "DEST_TOKEN_EXPIRED", e2;
      }({}), JU = function(e2) {
        return e2.High = "high", e2.Low = "low", e2.Audio = "audio", e2.Screen = "screen", e2.ScreenLow = "screen_low", e2;
      }({}), XU = function(e2) {
        return e2.DISCONNECT = "disconnect", e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGE = "stream-type-change", e2.IS_P2P_DISCONNECTED = "is-p2p-dis", e2.DISCONNECT_P2P = "dis-p2p", e2.REQUEST_NEW_GATEWAY_LIST = "req-gate-url", e2.NEED_RENEW_SESSION = "need-sid", e2.REQUEST_P2P_CONNECTION_PARAMS = "request-p2p-connection-params", e2.JOIN_RESPONSE = "join-response", e2.RESET_CONNECTION_EVENTS = "reset-connection-events", e2.PRE_CONNECT_PC = "pre-connect_pc", e2.UPDATE_GATEWAY_CONFIG = "update-gateway-config", e2;
      }({}), QU = function(e2) {
        return e2.P2P_DISCONNECTED = "P2P_DISCONNECTED", e2.A_ROUND_WS_FAILED = "A_ROUND_WS_FAILED", e2.TIMEOUT = "TIMEOUT", e2.UNKNOWN_REASON = "UNKNOWN_REASON", e2;
      }({}), ZU = function(e2) {
        return e2[e2.Nothing = 0] = "Nothing", e2[e2.Audio = 1] = "Audio", e2[e2.LwoVideo = 2] = "LwoVideo", e2[e2.Video = 4] = "Video", e2[e2.Data = 8] = "Data", e2[e2.DataStream0 = 256] = "DataStream0", e2[e2.DataStream1 = 512] = "DataStream1", e2[e2.DataStream2 = 1024] = "DataStream2", e2[e2.DataStream3 = 2048] = "DataStream3", e2[e2.DataStream4 = 4096] = "DataStream4", e2[e2.DataStream5 = 8192] = "DataStream5", e2[e2.DataStream6 = 16384] = "DataStream6", e2[e2.DataStream7 = 32768] = "DataStream7", e2;
      }({}), $U = function(e2) {
        return e2.CHINA = "CHINA", e2.ASIA = "ASIA", e2.NORTH_AMERICA = "NORTH_AMERICA", e2.EUROPE = "EUROPE", e2.JAPAN = "JAPAN", e2.INDIA = "INDIA", e2.KOREA = "KOREA", e2.HKMC = "HKMC", e2.US = "US", e2.OCEANIA = "OCEANIA", e2.SOUTH_AMERICA = "SOUTH_AMERICA", e2.AFRICA = "AFRICA", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL", e2.EXTENSIONS = "EXTENSIONS", e2;
      }({});
      const ex = [$U.AFRICA, $U.ASIA, $U.CHINA, $U.EUROPE, $U.GLOBAL, $U.INDIA, $U.JAPAN, $U.NORTH_AMERICA, $U.OCEANIA, $U.OVERSEA, $U.SOUTH_AMERICA];
      let tx = function(e2) {
        return e2.CHINA = "CN", e2.ASIA = "AS", e2.NORTH_AMERICA = "NA", e2.EUROPE = "EU", e2.JAPAN = "JP", e2.INDIA = "IN", e2.KOREA = "KR", e2.HKMC = "HK", e2.US = "US", e2.OCEANIA = "OC", e2.SOUTH_AMERICA = "SA", e2.AFRICA = "AF", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL", e2.EXTENSIONS = "GLOBAL", e2;
      }({});
      const ix = { CHINA: {}, ASIA: { CODE: tx.ASIA, WEBCS_DOMAIN: ["ap-web-1-asia.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-asia.agora.io"], PROXY_CS: ["proxy-ap-web-asia.agora.io"], CDS_AP: ["cds-ap-web-asia.agora.io", "cds-ap-web-asia2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-asia.agora.io", "sua-ap-web-asia2.agora.io"], UAP_AP: ["uap-ap-web-asia.agora.io", "uap-ap-web-asia2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-asia.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-asia.agora.io"], LOG_UPLOAD_SERVER: ["logservice-asia.agora.io"], PROXY_SERVER_TYPE3: ["southeast-asia.webrtc-cloud-proxy.sd-rtn.com"] }, NORTH_AMERICA: { CODE: tx.NORTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-north-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-north-america.agora.io"], PROXY_CS: ["proxy-ap-web-america.agora.io"], CDS_AP: ["cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], UAP_AP: ["uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-north-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-north-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-north-america.agora.io"], PROXY_SERVER_TYPE3: ["east-usa.webrtc-cloud-proxy.sd-rtn.com"] }, EUROPE: { CODE: tx.EUROPE, WEBCS_DOMAIN: ["ap-web-1-europe.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-europe.agora.io"], PROXY_CS: ["proxy-ap-web-europe.agora.io"], CDS_AP: ["cds-ap-web-europe.agora.io", "cds-ap-web-europe2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-europe.agora.io", "sua-ap-web-europe.agora.io"], UAP_AP: ["uap-ap-web-europe.agora.io", "uap-ap-web-europe2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-europe.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-europe.agora.io"], LOG_UPLOAD_SERVER: ["logservice-europe.agora.io"], PROXY_SERVER_TYPE3: ["europe.webrtc-cloud-proxy.sd-rtn.com"] }, JAPAN: { CODE: tx.JAPAN, WEBCS_DOMAIN: ["ap-web-1-japan.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-japan.agora.io"], PROXY_CS: ["proxy-ap-web-japan.agora.io"], CDS_AP: ["cds-ap-web-japan.agora.io", "cds-ap-web-japan2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-japan.agora.io", "sua-ap-web-japan2.agora.io"], UAP_AP: ["uap-ap-web-japan.agora.io", "uap-ap-web-japan2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-japan.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-japan.agora.io"], LOG_UPLOAD_SERVER: ["logservice-japan.agora.io"], PROXY_SERVER_TYPE3: ["japan.webrtc-cloud-proxy.sd-rtn.com"] }, INDIA: { CODE: tx.INDIA, WEBCS_DOMAIN: ["ap-web-1-india.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-india.agora.io"], PROXY_CS: ["proxy-ap-web-india.agora.io"], CDS_AP: ["cds-ap-web-india.agora.io", "cds-ap-web-india2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-india.agora.io", "sua-ap-web-india2.agora.io"], UAP_AP: ["uap-ap-web-india.agora.io", "uap-ap-web-india2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-india.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-india.agora.io"], LOG_UPLOAD_SERVER: ["logservice-india.agora.io"], PROXY_SERVER_TYPE3: ["india.webrtc-cloud-proxy.sd-rtn.com"] }, KOREA: { CODE: tx.KOREA, WEBCS_DOMAIN: ["ap-web-1-korea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-korea.agora.io"], PROXY_CS: ["proxy-ap-web-korea.agora.io"], CDS_AP: ["cds-ap-web-korea.agora.io", "cds-ap-web-korea2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-korea.agora.io", "sua-ap-web-korea2.agora.io"], UAP_AP: ["uap-ap-web-korea.agora.io", "uap-ap-web-korea2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-korea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-korea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-korea.agora.io"], PROXY_SERVER_TYPE3: ["korea.webrtc-cloud-proxy.sd-rtn.com"] }, HKMC: { CODE: tx.HKMC, WEBCS_DOMAIN: ["ap-web-1-hkmc.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-hkmc.agora.io"], PROXY_CS: ["proxy-ap-web-hkmc.agora.io"], CDS_AP: ["cds-ap-web-hkmc.agora.io", "cds-ap-web-hkmc2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-hkmc.agora.io", "sua-ap-web-hkmc2.agora.io"], UAP_AP: ["uap-ap-web-hkmc.agora.io", "uap-ap-web-hkmc2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-hkmc.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-hkmc.agora.io"], LOG_UPLOAD_SERVER: ["logservice-hkmc.agora.io"], PROXY_SERVER_TYPE3: ["hkmc.webrtc-cloud-proxy.sd-rtn.com"] }, US: { CODE: tx.US, WEBCS_DOMAIN: ["ap-web-1-us.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-us.agora.io"], PROXY_CS: ["proxy-ap-web-us.agora.io"], CDS_AP: ["cds-ap-web-us.agora.io", "cds-ap-web-us2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-us.agora.io", "sua-ap-web-us2.agora.io"], UAP_AP: ["uap-ap-web-us.agora.io", "uap-ap-web-us2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-us.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-us.agora.io"], LOG_UPLOAD_SERVER: ["logservice-us.agora.io"], PROXY_SERVER_TYPE3: ["us.webrtc-cloud-proxy.sd-rtn.com"] }, OVERSEA: { CODE: tx.OVERSEA, WEBCS_DOMAIN: ["ap-web-1-oversea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oversea.agora.io"], PROXY_CS: ["proxy-ap-web-oversea.agora.io"], CDS_AP: ["cds-ap-web-oversea.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oversea.agora.io"], UAP_AP: ["uap-ap-web-oversea.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oversea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oversea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oversea.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.agora.io"] }, GLOBAL: { CODE: tx.GLOBAL, WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-ap-web-3.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-ap-web-3.agora.io"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-ap-web-3.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2.agora.io"], LOG_UPLOAD_SERVER: ["logservice.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com"] }, OCEANIA: { CODE: tx.OCEANIA, WEBCS_DOMAIN: ["ap-web-1-oceania.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oceania.agora.io"], PROXY_CS: ["proxy-ap-web-oceania.agora.io"], CDS_AP: ["cds-ap-web-oceania.agora.io", "cds-ap-web-oceania2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oceania.agora.io", "sua-ap-web-oceania2.agora.io"], UAP_AP: ["uap-ap-web-oceania.agora.io", "uap-ap-web-oceania2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oceania.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oceania.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oceania.agora.io"], PROXY_SERVER_TYPE3: ["oceania.webrtc-cloud-proxy.sd-rtn.com"] }, SOUTH_AMERICA: { CODE: tx.SOUTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-south-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-south-america.agora.io"], PROXY_CS: ["proxy-ap-web-south-america.agora.io"], CDS_AP: ["cds-ap-web-south-america.agora.io", "cds-ap-web-south-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-south-america.agora.io", "sua-ap-web-south-america2.agora.io"], UAP_AP: ["uap-ap-web-south-america.agora.io", "uap-ap-web-south-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-south-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-south-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-america.agora.io"], PROXY_SERVER_TYPE3: ["south-america.webrtc-cloud-proxy.sd-rtn.com"] }, AFRICA: { CODE: tx.AFRICA, WEBCS_DOMAIN: ["ap-web-1-africa.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-africa.agora.io"], PROXY_CS: ["proxy-ap-web-africa.agora.io"], CDS_AP: ["cds-ap-web-africa.agora.io", "cds-ap-web-africa2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-africa.agora.io", "sua-ap-web-africa2.agora.io"], UAP_AP: ["uap-ap-web-africa.agora.io", "uap-ap-web-africa2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-africa.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-africa.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-africa.agora.io"], PROXY_SERVER_TYPE3: ["africa.webrtc-cloud-proxy.sd-rtn.com"] }, EXTENSIONS: {} };
      AN && (ix.CHINA = { CODE: tx.CHINA, WEBCS_DOMAIN: ["webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["proxy-web.ap.sd-rtn.com"], CDS_AP: ["cds-web-2.ap.sd-rtn.com", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-web-2.ap.sd-rtn.com", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-web-2.ap.sd-rtn.com", "uap-web-4.ap.sd-rtn.com"], EVENT_REPORT_DOMAIN: ["web-3.statscollector.sd-rtn.com"], EVENT_REPORT_BACKUP_DOMAIN: ["web-4.statscollector.sd-rtn.com"], LOG_UPLOAD_SERVER: ["logservice-china.agora.io"], PROXY_SERVER_TYPE3: ["east-cn.webrtc-cloud-proxy.sd-rtn.com"] });
      let nx = function(e2) {
        return e2.UPDATE_BITRATE_LIMIT = "update_bitrate_limit", e2.UPDATE_CLIENT_ROLE_OPTIONS = "update_client_role_options", e2;
      }({});
      function rx(e2) {
        return !!e2 && (!(!e2.uplink || !e2.id) && (void 0 !== e2.uplink.max_bitrate && void 0 !== e2.uplink.min_bitrate));
      }
      class ox extends Zw {
        constructor(e2, t2) {
          super(), vy(this, "onICEConnectionStateChange", void 0), vy(this, "onConnectionStateChange", void 0), vy(this, "onDTLSTransportStateChange", void 0), vy(this, "onDTLSTransportError", void 0), vy(this, "onICETransportStateChange", void 0), vy(this, "onFirstAudioReceived", void 0), vy(this, "onFirstVideoReceived", void 0), vy(this, "onFirstAudioDecoded", void 0), vy(this, "onFirstVideoDecoded", void 0), vy(this, "onFirstVideoDecodedTimeout", void 0), vy(this, "onSelectedLocalCandidateChanged", void 0), vy(this, "onSelectedRemoteCandidateChanged", void 0), vy(this, "onICECandidateError", void 0), vy(this, "getLocalVideoStats", void 0);
        }
      }
      class sx extends ox {
        constructor(e2, t2) {
          super(e2, t2), vy(this, "establishPromise", void 0);
        }
      }
      let ax = function(e2) {
        return e2.VIDEO = "video", e2.AUDIO = "audio", e2;
      }({}), cx = function(e2) {
        return e2.UDP_RELAY = "udp_relay", e2.UDP_TCP_RELAY = "udp_tcp_relay", e2.TCP_RELAY = "tcp_relay", e2.RELAY = "relay", e2;
      }({}), dx = function(e2) {
        return e2[e2.FIRST_CONNECTION = 0] = "FIRST_CONNECTION", e2[e2.UDP_TCP_RESTART = 1] = "UDP_TCP_RESTART", e2[e2.RELAY_RESTART = 2] = "RELAY_RESTART", e2[e2.TCP_RESTART = 3] = "TCP_RESTART", e2[e2.OLD_FIRST_CONNECTION = 10] = "OLD_FIRST_CONNECTION", e2[e2.OLD_RESTART = 11] = "OLD_RESTART", e2[e2.DISCONNECTED_OR_FAILED = 20] = "DISCONNECTED_OR_FAILED", e2;
      }({});
      const lx = ["disconnected", "failed"];
      let ux = function(e2) {
        return e2.LocalVideoTrack = "videoTrack", e2.LocalAudioTrack = "audioTrack", e2.LocalVideoLowTrack = "videoLowTrack", e2;
      }({}), hx = function(e2) {
        return e2.New = "new", e2.Connected = "connected", e2.Reconnecting = "reconnecting", e2.Disconnected = "disconnected", e2;
      }({}), px = function(e2) {
        return e2.AudioMetadata = "audioMetadata", e2.StateChange = "stateChange", e2.IceConnectionStateChange = "iceConnectionStateChange", e2.RequestMuteLocal = "requestMuteLocal", e2.RequestUnmuteLocal = "requestUnmuteLocal", e2.RequestRePublish = "requestRePublish", e2.RequestRePublishDataChannel = "requestRePublishDataChannel", e2.RequestReSubscribe = "requestReSubscribe", e2.RequestUploadStats = "requestUploadStats", e2.RequestUpload = "requestUpload", e2.MediaReconnectStart = "MediaReconnectStart", e2.MediaReconnectEnd = "MediaReconnectEnd", e2.NeedSignalRTT = "NeedSignalRTT", e2.RequestRestartICE = "RequestRestartIce", e2.PeerConnectionStateChange = "PeerConnectionStateChange", e2.RequestReconnect = "RequestReconnect", e2.RequestReconnectPC = "RequestReconnectPC", e2.RequestUnpublishForReconnectPC = "RequestUnpublishForReconnectPC", e2.P2PLost = "P2PLost", e2.UpdateVideoEncoder = "UpdateVideoEncoder", e2.ConnectionTypeChange = "ConnectionTypeChange", e2.RequestLowStreamParameter = "RequestLowStreamParameter", e2.QueryClientConnectionState = "QueryClientConnectionState", e2.LocalCandidate = "LocalCandidate", e2.RequestP2PMuteLocal = "requestP2PMuteLocal", e2.RequestP2PUnPublish = "RequestP2PUnPublish", e2.RequestP2PUnmuteRemote = "RequestP2PUnmuteRemote", e2.RequestP2PMuteRemote = "RequestP2PMuteRemote", e2.RequestP2PRestartICE = "RequestP2PRestartICE", e2;
      }({}), _x = function(e2) {
        return e2.CONNECTING = "CONNECTING", e2.RECONNECTING = "RECONNECTING", e2.CONNECTED = "CONNECTED", e2.CLOSED = "CLOSED", e2;
      }({}), Ex = function(e2) {
        return e2[e2.CONNECT_AP = 0] = "CONNECT_AP", e2[e2.AP_CONNECTED = 1] = "AP_CONNECTED", e2[e2.CONNECT_WORKER_MANAGER = 2] = "CONNECT_WORKER_MANAGER", e2[e2.WORKER_MANAGER_CONNECTED = 3] = "WORKER_MANAGER_CONNECTED", e2[e2.GET_WORKER_MANAGER_RESPONSE = 4] = "GET_WORKER_MANAGER_RESPONSE", e2[e2.CONNECT_WORKER = 5] = "CONNECT_WORKER", e2[e2.WORKER_CONNECTED = 6] = "WORKER_CONNECTED", e2[e2.CLOSED = 7] = "CLOSED", e2;
      }({}), mx = function(e2) {
        return e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.STATE_CHANGE = "state-change", e2.INSPECT_RESULT = "inspect-result", e2.CLIENT_LOCAL_VIDEO_TRACK = "client-local-video-track", e2.REQUEST_NEW_WORKER_URL = "request-new-worker-url", e2;
      }({}), fx = function(e2) {
        return e2.CONNECTED = "transmitter:connected", e2.RECONNECTING = "transmitter:reconnecting", e2.WILL_RECONNECT = "transmitter:will_reconnect", e2.CLOSED = "transmitter:closed", e2.FAILED = "transmitter:failed", e2.ON_MESSAGE = "transmitter:on_message", e2.REQUEST_NEW_URLS = "transmitter:request_new_urls", e2.RECONNECT_CREATE_CONNECTION = "transmitter:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "transmitter:on_token_privilege_did_expire", e2.TO_CONNECT_DATACHANNEL = "transmitter:to_connect_datachannel", e2.FAILBACK = "transmitter:failback", e2.PRE_CONNECT_PC = "transmitter:pre_connect_pc", e2;
      }({}), Tx = function(e2) {
        return e2.CAMERA_CHANGED = "camera-changed", e2.MICROPHONE_CHANGED = "microphone-changed", e2.PLAYBACK_DEVICE_CHANGED = "playback-device-changed", e2.AUDIO_AUTOPLAY_FAILED = "audio-autoplay-failed", e2.AUTOPLAY_FAILED = "autoplay-failed", e2.AUDIO_CONTEXT_STATE_CHANGED = "audio-context-state-changed", e2.SECURITY_POLICY_VIOLATION = "security-policy-violation", e2;
      }({}), Sx = function(e2) {
        return e2.CONNECTING = "CONNECTING", e2.RECONNECTING = "RECONNECTING", e2.CONNECTED = "CONNECTED", e2.CLOSED = "CLOSED", e2;
      }({}), gx = function(e2) {
        return e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.STATE_CHANGE = "state-change", e2.INSPECT_RESULT = "inspect-result", e2.CLIENT_LOCAL_VIDEO_TRACK = "client-local-video-track", e2.REQUEST_NEW_WORKER_URL = "request-new-worker-url", e2;
      }({}), Rx = function(e2) {
        return e2[e2.CONNECT_AP = 0] = "CONNECT_AP", e2[e2.AP_CONNECTED = 1] = "AP_CONNECTED", e2[e2.CONNECT_WORKER_MANAGER = 2] = "CONNECT_WORKER_MANAGER", e2[e2.WORKER_MANAGER_CONNECTED = 3] = "WORKER_MANAGER_CONNECTED", e2[e2.GET_WORKER_MANAGER_RESPONSE = 4] = "GET_WORKER_MANAGER_RESPONSE", e2[e2.CONNECT_WORKER = 5] = "CONNECT_WORKER", e2[e2.WORKER_CONNECTED = 6] = "WORKER_CONNECTED", e2[e2.CLOSED = 7] = "CLOSED", e2;
      }({}), vx = function(e2) {
        return e2.CALL = "call", e2.CANDIDATE = "candidate", e2.PUBLISH = "publish", e2.UNPUBLISH = "unpublish", e2.CONTROL = "control", e2.RESTART_ICE = "restart_ice", e2.ACK = "ack", e2.RESPONSE = "response", e2.JOIN = "join", e2.CHECK = "check", e2;
      }({}), Cx = function(e2) {
        return e2.ABORT = "abort", e2;
      }({}), Ix = function(e2) {
        return e2.MUTE_LOCAL_AUDIO = "mute_local_audio", e2.MUTE_LOCAL_VIDEO = "mute_local_video", e2.UNMUTE_LOCAL_AUDIO = "unmute_local_audio", e2.UNMUTE_LOCAL_VIDEO = "unmute_local_video", e2;
      }({}), yx = function(e2) {
        return e2.P2P_TOKEN_TIMEOUT = "p2p_token_timeout", e2.P2P_TOKEN_CHANGED = "p2p_token_changed", e2;
      }({});
      const Ax = { [vU.ACCESS_POINT]: { [yU.NO_FLAG_SET]: { desc: "flag is zero", retry: false }, [yU.FLAG_SET_BUT_EMPTY]: { desc: "flag is empty", retry: false }, [yU.INVALID_FALG_SET]: { desc: "invalid flag", retry: false }, [yU.FLAG_SET_BUT_NO_RE]: { desc: "flag set unilbs but no request", retry: false }, [yU.INVALID_SERVICE_ID]: { desc: "invalid service id", retry: false }, [yU.NO_SERVICE_AVAILABLE]: { desc: "no service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_P2P]: { desc: "no unilbs p2p service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_VOICE]: { desc: "no unilbs voice service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_WEBRTC]: { desc: "no unilbs webrtc service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_CDS]: { desc: "no cds service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_CDN]: { desc: "no cdn dispatcher service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_TDS]: { desc: "no tds service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_REPORT]: { desc: "no unilbs report service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_APP_CENTER]: { desc: "no app center service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_ENV0]: { desc: "no unilbs sig env0 service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_VOET]: { desc: "no unilbs voet service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_STRING_UID]: { desc: "no string uid service available", retry: true }, [yU.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS]: { desc: "no webrtc unilbs service available", retry: true } }, [vU.UNILBS]: { [IU.INVALID_VENDOR_KEY]: { desc: "invalid vendor key, can not find appid", retry: false }, [IU.INVALID_CHANNEL_NAME]: { desc: "invalid channel name", retry: false }, [IU.INTERNAL_ERROR]: { desc: "unilbs internal error", retry: false }, [IU.NO_AUTHORIZED]: { desc: "invalid token, authorized failed", retry: false }, [IU.DYNAMIC_KEY_TIMEOUT]: { desc: "dynamic key or token timeout", retry: false }, [IU.NO_ACTIVE_STATUS]: { desc: "no active status", retry: false }, [IU.DYNAMIC_KEY_EXPIRED]: { desc: "dynamic key expired", retry: false }, [IU.STATIC_USE_DYNAMIC_KEY]: { desc: "static use dynamic key", retry: false }, [IU.DYNAMIC_USE_STATIC_KEY]: { desc: "dynamic use static key", retry: false }, [IU.USER_OVERLOAD]: { desc: "amount of users over load", retry: false }, [IU.FORBIDDEN_REGION]: { desc: "the request is forbidden in this area", retry: false }, [IU.CANNOT_MEET_AREA_DEMAND]: { desc: "unable to allocate services in this area", retry: false } }, [vU.STRING_UID_ALLOCATOR]: { [CU.IIIEGAL_APPID]: { desc: "invalid appid", retry: false }, [CU.IIIEGAL_UID]: { desc: "invalid string uid", retry: false }, [CU.INTERNAL_ERROR]: { desc: "string uid allocator internal error", retry: true } } };
      function bx(e2) {
        const t2 = Ax[Math.floor(e2 / 1e4)];
        if (!t2) return { desc: "unknown error", retry: false };
        const i2 = t2[e2 % 1e4];
        if (!i2) {
          if (Math.floor(e2 / 1e4) === vU.ACCESS_POINT) {
            const t3 = e2 % 1e4;
            if ("1" === t3.toString()[0]) return { desc: e2.toString(), retry: false };
            if ("2" === t3.toString()[0]) return { desc: e2.toString(), retry: true };
          }
          return { desc: "unknown error", retry: false };
        }
        return i2;
      }
      const wx = { [AU.K_TIMESTAMP_EXPIRED]: { desc: "K_TIMESTAMP_EXPIRED", action: "failed" }, [AU.K_CHANNEL_PERMISSION_INVALID]: { desc: "K_CHANNEL_PERMISSION_INVALID", action: "failed" }, [AU.K_CERTIFICATE_INVALID]: { desc: "K_CERTIFICATE_INVALID", action: "failed" }, [AU.K_CHANNEL_NAME_EMPTY]: { desc: "K_CHANNEL_NAME_EMPTY", action: "failed" }, [AU.K_CHANNEL_NOT_FOUND]: { desc: "K_CHANNEL_NOT_FOUND", action: "failed" }, [AU.K_TICKET_INVALID]: { desc: "K_TICKET_INVALID", action: "failed" }, [AU.K_CHANNEL_CONFLICTED]: { desc: "K_CHANNEL_CONFLICTED", action: "failed" }, [AU.K_SERVICE_NOT_READY]: { desc: "K_SERVICE_NOT_READY", action: "tryNext" }, [AU.K_SERVICE_TOO_HEAVY]: { desc: "K_SERVICE_TOO_HEAVY", action: "tryNext" }, [AU.K_UID_BANNED]: { desc: "K_UID_BANNED", action: "failed" }, [AU.K_IP_BANNED]: { desc: "K_IP_BANNED", action: "failed" }, [AU.DATASTREAM2_NOT_AVAILABLE]: { desc: "DATASTREAM2_NOT_AVAILABLE", action: "quit" }, [AU.K_AUTO_REBALANCE]: { desc: "k_AUTO_REBALANCE", action: "recover" }, [AU.ERR_INVALID_VENDOR_KEY]: { desc: "ERR_INVALID_VENDOR_KEY", action: "failed" }, [AU.ERR_INVALID_CHANNEL_NAME]: { desc: "ERR_INVALID_CHANNEL_NAME", action: "failed" }, [AU.WARN_NO_AVAILABLE_CHANNEL]: { desc: "WARN_NO_AVAILABLE_CHANNEL", action: "failed" }, [AU.WARN_LOOKUP_CHANNEL_TIMEOUT]: { desc: "WARN_LOOKUP_CHANNEL_TIMEOUT", action: "tryNext" }, [AU.WARN_LOOKUP_CHANNEL_REJECTED]: { desc: "WARN_LOOKUP_CHANNEL_REJECTED", action: "failed" }, [AU.WARN_OPEN_CHANNEL_TIMEOUT]: { desc: "WARN_OPEN_CHANNEL_TIMEOUT", action: "tryNext" }, [AU.WARN_OPEN_CHANNEL_REJECTED]: { desc: "WARN_OPEN_CHANNEL_REJECTED", action: "failed" }, [AU.WARN_REQUEST_DEFERRED]: { desc: "WARN_REQUEST_DEFERRED", action: "failed" }, [AU.ERR_DYNAMIC_KEY_TIMEOUT]: { desc: "ERR_DYNAMIC_KEY_TIMEOUT", action: "failed" }, [AU.ERR_NO_AUTHORIZED]: { desc: "ERR_NO_AUTHORIZED", action: "failed" }, [AU.ERR_VOM_SERVICE_UNAVAILABLE]: { desc: "ERR_VOM_SERVICE_UNAVAILABLE", action: "tryNext" }, [AU.ERR_NO_CHANNEL_AVAILABLE_CODE]: { desc: "ERR_NO_CHANNEL_AVAILABLE_CODE", action: "failed" }, [AU.ERR_MASTER_VOCS_UNAVAILABLE]: { desc: "ERR_MASTER_VOCS_UNAVAILABLE", action: "tryNext" }, [AU.ERR_INTERNAL_ERROR]: { desc: "ERR_INTERNAL_ERROR", action: "tryNext" }, [AU.ERR_NO_ACTIVE_STATUS]: { desc: "ERR_NO_ACTIVE_STATUS", action: "failed" }, [AU.ERR_INVALID_UID]: { desc: "ERR_INVALID_UID", action: "failed" }, [AU.ERR_DYNAMIC_KEY_EXPIRED]: { desc: "ERR_DYNAMIC_KEY_EXPIRED", action: "failed" }, [AU.ERR_STATIC_USE_DYANMIC_KE]: { desc: "ERR_STATIC_USE_DYANMIC_KE", action: "failed" }, [AU.ERR_DYNAMIC_USE_STATIC_KE]: { desc: "ERR_DYNAMIC_USE_STATIC_KE", action: "failed" }, [AU.ERR_NO_VOCS_AVAILABLE]: { desc: "ERR_NO_VOCS_AVAILABLE", action: "tryNext" }, [AU.ERR_NO_VOS_AVAILABLE]: { desc: "ERR_NO_VOS_AVAILABLE", action: "tryNext" }, [AU.ERR_JOIN_CHANNEL_TIMEOUT]: { desc: "ERR_JOIN_CHANNEL_TIMEOUT", action: "tryNext" }, [AU.ERR_JOIN_BY_MULTI_IP]: { desc: "ERR_JOIN_BY_MULTI_IP", action: "recover" }, [AU.ERR_NOT_JOINED]: { desc: "ERR_NOT_JOINED", action: "failed" }, [AU.ERR_REPEAT_JOIN_REQUEST]: { desc: "ERR_REPEAT_JOIN_REQUEST", action: "quit" }, [AU.ERR_REPEAT_JOIN_CHANNEL]: { desc: "ERR_REPEAT_JOIN_CHANNEL", action: "quit" }, [AU.ERR_INVALID_STRINGUID]: { desc: "ERR_INVALID_STRINGUID", action: "failed" }, [AU.ERR_TOO_MANY_USERS]: { desc: "ERR_TOO_MANY_USERS", action: "tryNext" }, [AU.ERR_SET_CLIENT_ROLE_TIMEOUT]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [AU.ERR_SET_CLIENT_ROLE_NO_PERMISSION]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [AU.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE]: { desc: "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", action: "success" }, [AU.ERR_PUBLISH_REQUEST_INVALID]: { desc: "ERR_PUBLISH_REQUEST_INVALID", action: "failed" }, [AU.ERR_SUBSCRIBE_REQUEST_INVALID]: { desc: "ERR_SUBSCRIBE_REQUEST_INVALID", action: "failed" }, [AU.ERR_NOT_SUPPORTED_MESSAGE]: { desc: "ERR_NOT_SUPPORTED_MESSAGE", action: "failed" }, [AU.ERR_ILLEAGAL_PLUGIN]: { desc: "ERR_ILLEAGAL_PLUGIN", action: "failed" }, [AU.ILLEGAL_CLIENT_ROLE_LEVEL]: { desc: "ILLEGAL_CLIENT_ROLE_LEVEL", action: "failed" }, [AU.ERR_REJOIN_TOKEN_INVALID]: { desc: "ERR_REJOIN_TOKEN_INVALID", action: "failed" }, [AU.ERR_REJOIN_USER_NOT_JOINED]: { desc: "ERR_REJOIN_NOT_JOINED", action: "failed" }, [AU.ERR_INVALID_OPTIONAL_INFO]: { desc: "ERR_INVALID_OPTIONAL_INFO", action: "quit" }, [AU.ERR_TEST_RECOVER]: { desc: "ERR_TEST_RECOVER", action: "recover" }, [AU.ERR_TEST_TRYNEXT]: { desc: "ERR_TEST_TRYNEXT", action: "recover" }, [AU.ERR_TEST_RETRY]: { desc: "ERR_TEST_RETRY", action: "recover" }, [AU.ILLEGAL_AES_PASSWORD]: { desc: "ERR_TEST_RETRY", action: "failed" }, [AU.ERR_TOO_MANY_BROADCASTERS]: { desc: "ERR_TOO_MANY_BROADCASTERS", action: "failed" }, [AU.ERR_TOO_MANY_SUBSCRIBERS]: { desc: "ERR_TOO_MANY_SUBSCRIBERS", action: "failed" }, [AU.ERR_LICENSE_ILLEGAL]: { desc: "ERR_LICENSE_ILLEGAL", action: "quit" }, [AU.ERR_LICENSE_MISSING]: { desc: "ERR_LICENSE_MISSING", action: "quit" }, [AU.ERR_LICENSE_EXPIRED]: { desc: "ERR_LICENSE_EXPIRED", action: "quit" }, [AU.ERR_LICENSE_MINUTES_EXCEEDED]: { desc: "ERR_LICENSE_MINUTES_EXCEEDED", action: "quit" }, [AU.ERR_LICENSE_PERIOD_INVALID]: { desc: "ERR_LICENSE_PERIOD_INVALID", action: "quit" }, [AU.ERR_LICENSE_MULTIPLE_SDK_SERVICE]: { desc: "ERR_LICENSE_MULTIPLE_SDK_SERVICE", action: "quit" } };
      function Ox(e2) {
        const t2 = wx[e2];
        return t2 || { desc: "UNKNOWN_ERROR_".concat(e2), action: "failed" };
      }
      function Nx(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Dx(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Nx(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Nx(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function Px(e2, t2) {
        if ("string" == typeof e2) return e2;
        const { proxy: i2, host: n2, port: r2 } = e2;
        if (t2) {
          const e3 = MN("JOIN_GATEWAY_FALLBACK_PORT") || 443;
          return 443 === e3 ? "wss://".concat(n2, "/ws/?p=").concat(Number(r2) + 150) : "wss://".concat(n2, ":").concat(e3, "/ws/?p=").concat(Number(r2) + 150);
        }
        return i2 ? "wss://".concat(i2, "/ws/?h=").concat(n2, "&p=").concat(r2) : "wss://".concat(n2, ":").concat(r2);
      }
      const Lx = /wss:\/\/(.+)\/ws\/\?h=(.+)&p=([0-9]+)\/?/, kx = /wss:\/\/(.+)\/ws\/\?p=([0-9]+)\/?/, Mx = /wss:\/\/(.+):([0-9]+)\/?/, Ux = /wss:\/\/(.[^\/]+)\/?/;
      let xx = 0;
      class Vx {
        constructor(e2, t2) {
          vy(this, "id", 0), vy(this, "store", void 0), vy(this, "recordIndex", void 0), vy(this, "websockets", []), vy(this, "try443PortDuration", 2e3), vy(this, "forceCloseWSDuration", 5e3), vy(this, "try443PortTimeout", null), vy(this, "forceCloseTimeout", null), vy(this, "isTry443PortFailed", false), vy(this, "isNormalPortFailed", false), vy(this, "useDoubleDomain", false), vy(this, "useProxy", false), vy(this, "startTime", Date.now()), this.id = ++xx, this.try443PortDuration = MN("JOIN_GATEWAY_TRY_443PORT_DURATION") || 2e3, this.forceCloseWSDuration = e2 || 5e3, this.store = t2;
        }
        closeAllWebsockets() {
          this.websockets.forEach((e2) => {
            e2.onopen = null, e2.onclose = null, e2.onmessage = null, e2.close();
          }), this.websockets.length = 0;
        }
        clearTimeout() {
          this.forceCloseTimeout && clearTimeout(this.forceCloseTimeout), this.try443PortTimeout && clearTimeout(this.try443PortTimeout), this.forceCloseTimeout = null, this.try443PortTimeout = null;
        }
        logger() {
          var e2;
          const t2 = Date.now() - this.startTime;
          for (var i2 = arguments.length, n2 = new Array(i2), r2 = 0; r2 < i2; r2++) n2[r2] = arguments[r2];
          lD.debug("[choose-best-ws ".concat(null === (e2 = this.store) || void 0 === e2 ? void 0 : e2.clientId, " ").concat(this.id, "] ").concat(t2, "ms:"), ...n2);
        }
        createWebSocket(e2, t2, i2) {
          this.logger("createWebSocket:", e2, { isTry443Port: t2, hasTimeoutDetection: i2 });
          const n2 = MN("GATEWAY_DOMAINS"), r2 = Date.now(), o2 = [], s2 = n2.find((t3) => {
            var i3;
            return kn(i3 = e2.host).call(i3, t3);
          });
          s2 || (this.useDoubleDomain = false);
          const a2 = [];
          if (this.useDoubleDomain) n2.forEach((i3) => {
            a2.push(Px(Dx(Dx({}, e2), {}, { host: e2.host.replace(s2, i3) }), t2));
          });
          else {
            const i3 = Dx({}, e2);
            if (t2 && s2) {
              const e3 = n2.find((e4) => e4 !== s2);
              e3 && (i3.host = i3.host.replace(s2, e3));
            }
            a2.push(Px(i3, t2));
          }
          try {
            a2.forEach((e3) => {
              const t3 = new WebSocket(e3);
              t3.binaryType = "arraybuffer", o2.push(t3), this.logger("ws is connecting:", t3.url);
            });
          } catch (n3) {
            if (this.logger("ws create failed"), o2.forEach((e3) => e3.close()), o2.length = 0, this.useDoubleDomain) return this.useDoubleDomain = false, this.createWebSocket(e2, t2, i2);
            if (!t2 && 443 !== Number(e2.port)) return this.createWebSocket(e2, true, i2);
            throw new SD(Uw.WS_ERR, "init websocket failed! Error: ".concat(n3.toString()));
          }
          const c2 = Jb();
          this.store && this.store.recordJoinChannelService({ urls: o2.map((e3) => e3.url), service: "gateway" }, this.recordIndex), o2.forEach((e3) => {
            e3.onopen = () => {
              this.logger("onopen: ws ".concat(e3.url, " open cost ").concat(Date.now() - r2, "ms")), this.websockets.forEach((t3) => {
                t3 !== e3 && (t3.onopen = null, t3.onclose = null, t3.onmessage = null, t3.close(), this.logger("close backup websocket: ".concat(t3.url)));
              }), this.websockets.length = 0, c2.resolve(e3);
            }, e3.onclose = (i3) => {
              this.logger("onclose: ws ".concat(e3.url, " closed cost ").concat(Date.now() - r2, "ms state: ").concat(e3.readyState));
              const n3 = o2.every((e4) => e4.readyState === WebSocket.CLOSED || e4.readyState === WebSocket.CLOSING);
              this.logger("".concat(t2 ? "443" : "47xx", " websocket closed, all failed: ").concat(n3)), n3 && (t2 || this.isTry443PortFailed || this.useProxy) ? (this.logger("onclose: all websocket is closed, ".concat(i3.reason)), c2.reject({ code: i3.code, reason: QU.A_ROUND_WS_FAILED })) : !t2 && n3 && !this.isNormalPortFailed && this.try443PortTimeout && (this.logger("all 47xx websocket is closed, try 443 port"), this.clearTimeout(), l2()), t2 ? this.isTry443PortFailed = n3 : this.isNormalPortFailed = n3;
            }, e3.onmessage = (t3) => this.logger("".concat(e3.url, " onmessage: ").concat(t3.data));
          }), this.websockets.push(...o2);
          const d2 = () => {
            this.websockets.forEach((e3) => e3.readyState !== WebSocket.OPEN && e3.close());
          }, l2 = () => {
            if (c2.isResolved) return d2();
            rw().os === $b.MAC_OS && hw() && d2(), this.createWebSocket(e2, true, true).then((e3) => {
              c2.resolve(e3);
            }).catch((e3) => {
              this.isNormalPortFailed && c2.reject(e3), this.logger("try 443 port to create ws failed");
            }), this.forceCloseTimeout = window.setTimeout(() => {
              this.logger("5s timeout close un-opens, isWebsocket created: ", c2.isResolved), this.forceCloseTimeout = null, d2();
            }, this.forceCloseWSDuration);
          };
          return i2 || (() => {
            if (t2 || this.useProxy) return this.logger("add 5s timeout at ".concat(t2 ? "try-443" : "proxy", " condition")), this.forceCloseTimeout = window.setTimeout(() => {
              this.forceCloseTimeout = null, d2();
            }, this.forceCloseWSDuration);
            this.try443PortTimeout = window.setTimeout(() => {
              this.logger("2s timeout, isWebsocket created: ", c2.isResolved), this.try443PortTimeout = null, l2();
            }, this.try443PortDuration);
          })(), c2.promise;
        }
        chooseBestWebsocket(e2, t2, i2, n2) {
          return this.useDoubleDomain = !!t2, "string" == typeof e2 && (e2 = function(e3) {
            let t3, i3, n3;
            return [, t3, i3, n3] = e3.match(Lx) || [], t3 || ([, i3, n3] = e3.match(kx) || []), i3 && n3 || ([, i3, n3] = e3.match(Mx) || []), i3 && n3 || ([, i3] = e3.match(Ux) || []), i3 || lD.warning("un-destructible url: ", e3), { proxy: t3, host: i3, port: n3 || "443" };
          }(e2)), this.recordIndex = n2, this.useProxy = !!e2.proxy, i2 && this.useProxy && (lD.warn("cannot use 443 only when use proxy"), i2 = false), this.createWebSocket(e2, !!i2, false).finally(() => this.clearTimeout());
        }
      }
      function Fx(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      class Bx extends Zw {
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get reconnectMode() {
          return this._reconnectMode;
        }
        set reconnectMode(e2) {
          var t2;
          kn(t2 = ["tryNext", "recover"]).call(t2, e2) && this.resetReconnectCount(e2), this._reconnectMode = e2;
        }
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this._state = e2, "reconnecting" === this._state ? this.emit(LU.RECONNECTING, this.reconnectReason) : "connected" === this._state ? this.emit(LU.CONNECTED) : "closed" === this._state ? this.emit(LU.CLOSED) : "failed" === this._state && this.emit(LU.FAILED));
        }
        resetReconnectCount(e2) {
          lD.debug("websocket reset reconnect count, reason: " + e2), this.reconnectCount = 0;
        }
        constructor(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], o2 = arguments.length > 5 ? arguments[5] : void 0;
          super(), vy(this, "connectionID", 0), vy(this, "currentURLIndex", 0), vy(this, "urls", []), vy(this, "_reconnectMode", "tryNext"), vy(this, "reconnectReason", void 0), vy(this, "_initMutex", void 0), vy(this, "name", void 0), vy(this, "_state", "closed"), vy(this, "reconnectInterrupter", void 0), vy(this, "websocket", void 0), vy(this, "retryConfig", void 0), vy(this, "reconnectCount", 0), vy(this, "forceCloseTimeout", 5e3), vy(this, "onlineReconnectListener", void 0), vy(this, "useCompress", void 0), vy(this, "tryDoubleDomain", false), vy(this, "use443PortOnly", false), vy(this, "wsInflateLength", 0), vy(this, "wsDeflateLength", 0), vy(this, "closeEstablishingWs", () => {
          }), vy(this, "store", void 0), vy(this, "joinGatewayRecordIndex", void 0), this.store = o2, this.name = e2, this.retryConfig = function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var i3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Fx(Object(i3), true).forEach(function(t4) {
                vy(e3, t4, i3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i3)) : Fx(Object(i3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i3, t4));
              });
            }
            return e3;
          }({}, t2), this.useCompress = i2, this.tryDoubleDomain = n2, this.use443PortOnly = r2, this._initMutex = new KO("websocket", o2 ? o2.clientId : void 0);
          const { timeout: s2, timeoutFactor: a2 } = t2, c2 = Math.max(300, Math.floor(3 * s2 / 5)), d2 = Math.max(1.2, Math.floor(8 * a2) / 10);
          uO.ONLINE && (this.retryConfig.timeout = c2, this.retryConfig.timeoutFactor = d2), fO.on(hO.NETWORK_STATE_CHANGE, (e3, t3) => {
            e3 !== t3 && (this.resetReconnectCount("network state change: ".concat(t3, " -> ").concat(e3)), e3 === uO.ONLINE ? (this.retryConfig.timeout = c2, this.retryConfig.timeoutFactor = d2) : (this.retryConfig.timeout = s2, this.retryConfig.timeoutFactor = a2));
          });
        }
        getConnection() {
          return this.websocket || void 0;
        }
        async init(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
          const i2 = await this._initMutex.lock();
          this._reconnectMode = "tryNext", this.forceCloseTimeout = t2, this.urls = e2, this.state = "connecting";
          try {
            const e3 = Jb(), t3 = this.urls[this.currentURLIndex];
            MN("ENABLE_PREALLOC_PC") && this.emit(fx.PRE_CONNECT_PC), this.createWebSocketConnection(t3).then(e3.resolve).catch(e3.reject), this.once(LU.CLOSED, () => {
              e3.reject(new xw(Uw.WS_DISCONNECT));
            }), this.once(LU.CONNECTED, e3.resolve), await e3.promise;
          } catch (e3) {
          } finally {
            i2();
          }
        }
        close(e2, t2) {
          if (this.currentURLIndex = 0, this.resetReconnectCount("close"), this.reconnectInterrupter && this.reconnectInterrupter(), this.websocket) {
            this.websocket.onclose = null, this.websocket.onopen = null, this.websocket.onmessage = null;
            const e3 = this.websocket;
            t2 ? setTimeout(() => e3.close(), 500) : e3.close(), this.websocket = void 0;
          }
          this.state = e2 ? "failed" : "closed", this.closeEstablishingWs && this.closeEstablishingWs();
        }
        reconnect(e2, t2) {
          if (!this.websocket) return void lD.warning("[".concat(this.name, "] can not reconnect, no websocket"));
          void 0 !== e2 && (this.reconnectMode = e2), lD.debug("[".concat(this.name, "] reconnect is triggered initiative")), "number" == typeof this.joinGatewayRecordIndex && this.store && this.store.recordJoinChannelService({ status: "error", errors: [new Error(t2)] }, this.joinGatewayRecordIndex);
          const i2 = this.websocket.onclose;
          this.websocket.onclose = null, this.websocket.close(), i2 && i2.bind(this.websocket)({ code: 9999, reason: t2 });
        }
        sendMessage(e2) {
          let t2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) throw new xw(Uw.WS_ABORT, "websocket is not ready");
          try {
            t2 || (e2 = JSON.stringify(e2)), this.websocket.send(e2);
          } catch (e3) {
            throw new xw(Uw.WS_ERR, "send websocket message error" + e3.toString());
          }
        }
        setWsInflateData(e2) {
          this.wsDeflateLength = this.wsDeflateLength + e2.originLength, this.wsInflateLength = this.wsInflateLength + e2.compressedLength;
        }
        getWsInflateData() {
          const e2 = this.wsInflateLength, t2 = this.wsDeflateLength;
          return this.clearWsInflateData(), { wsInflateLength: e2, wsDeflateLength: t2 };
        }
        clearWsInflateData() {
          this.wsInflateLength = 0, this.wsDeflateLength = 0;
        }
        async createWebSocketConnection(e2) {
          var t2;
          const i2 = Jb();
          this.connectionID += 1, this.joinGatewayRecordIndex = void 0;
          const n2 = (e3) => {
            var t3;
            null === (t3 = this.store) || void 0 === t3 || t3.signalChannelOpen(), lD.debug("[".concat(this.name, "] websocket opened:"), e3), this.reconnectMode = "retry", this.state = "connected", this.resetReconnectCount("opened"), i2.resolve();
          }, r2 = async (e3) => {
            var t3;
            if (lD.debug("[".concat(this.name, "] websocket close ").concat(null === (t3 = this.websocket) || void 0 === t3 ? void 0 : t3.url, ", code: ").concat(e3.code, ", reason: ").concat(e3.reason, ", current mode: ").concat(this.reconnectMode)), this.reconnectCount >= this.retryConfig.maxRetryCount) i2.reject(new xw(Uw.WS_DISCONNECT, "websocket close: ".concat(e3.code))), this.close();
            else {
              "connected" === this.state && (this.reconnectReason = e3.reason, this.state = "reconnecting");
              const t4 = EO(this, LU.WILL_RECONNECT, this.reconnectMode, e3.reason) || this.reconnectMode, n3 = await this.reconnectWithAction(t4);
              if ("closed" === this.state) return void lD.debug("[".concat(this.connectionID, "] ws is closed, no need to reconnect"));
              if (!n3) return i2.reject(new xw(Uw.WS_DISCONNECT, "websocket reconnect failed: ".concat(e3.code))), this.close(true);
              i2.resolve();
            }
          }, o2 = (e3) => {
            this.emit(LU.ON_MESSAGE, e3);
          }, s2 = (e3) => {
            lD.warn("[".concat(this.connectionID, "] ws open error ").concat(e3));
          };
          this.websocket && (this.websocket.onclose = null, this.websocket.close()), MN("GATEWAY_WSS_ADDRESS") && this.name.startsWith("gateway") && (e2 = MN("GATEWAY_WSS_ADDRESS")), lD.debug("[".concat(this.name, "] start connect, url:"), e2);
          const a2 = null === (t2 = this.store) || void 0 === t2 ? void 0 : t2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "gateway" });
          try {
            var c2;
            const t3 = await this.chooseBestWebsocketConnection(e2);
            this.websocket = t3, n2 && n2(this.websocket.url), this.websocket.onclose = r2, this.websocket.onmessage = o2, this.websocket.onerror = s2, null === (c2 = this.store) || void 0 === c2 || c2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a2), this.joinGatewayRecordIndex = a2;
          } catch (e3) {
            const t3 = "closed" === this.state, n3 = e3 instanceof xw, o3 = n3 && e3.code === Uw.WS_ABORT, s3 = n3 && e3.code === Uw.WS_ERR, c3 = n3 ? e3.message : e3 && (e3.reason || e3.toString());
            lD.warning("[choose-best-ws] chooseBestWebsocket error: ".concat(c3)), this.store && this.store.recordJoinChannelService({ endTs: Date.now(), status: o3 ? "aborted" : "error", errors: [e3] }, a2), t3 || s3 ? (i2.reject(t3 ? new xw(Uw.WS_DISCONNECT, "websocket is closed: ".concat(c3)) : new xw(Uw.WS_ERR, "init websocket failed: ".concat(c3))), s3 && lD.error("[".concat(this.name, "] init websocket failed: ").concat(c3))) : r2 && r2(e3);
          }
          return i2.promise;
        }
        async reconnectWithAction(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.reconnectCount >= this.retryConfig.maxRetryCount) return false;
          if (0 === this.urls.length) return false;
          if ("closed" === this.state) return false;
          lD.warning("[choose-best-ws] action: =>", e2), this.onlineReconnectListener || fO.isOnline || !fO.onlineWaiter || (this.onlineReconnectListener = fO.onlineWaiter.then(() => {
            this.onlineReconnectListener = void 0;
          }));
          let i2 = true;
          if (this.reconnectInterrupter = () => i2 = false, t2) {
            const t3 = zO(this.reconnectCount, this.retryConfig);
            lD.debug("[".concat(this.name, "] wait ").concat(t3, "ms to reconnect websocket, mode: ").concat(e2)), await np.race([PO(t3), this.onlineReconnectListener || new np(() => {
            })]);
          }
          if ("closed" === this._state || !i2) return false;
          this.reconnectCount += 1;
          const n2 = async (e3, t3) => {
            this.emit(LU.RECONNECT_CREATE_CONNECTION, t3), await this.createWebSocketConnection(e3);
          };
          try {
            if ("retry" === e2) await n2(this.urls[this.currentURLIndex], e2);
            else if ("tryNext" === e2) {
              if (this.currentURLIndex += 1, this.currentURLIndex >= this.urls.length) return this.reconnectWithAction("recover", false);
              lD.debug("[".concat(this.name, "] websocket url length: ").concat(this.urls.length, " current index: ").concat(this.currentURLIndex)), await n2(this.urls[this.currentURLIndex], e2);
            } else "recover" === e2 && (lD.debug("[".concat(this.name, "] request new urls")), this.resetReconnectCount("recover mode"), this.urls = await pO(this, LU.REQUEST_NEW_URLS), this.currentURLIndex = 0, await n2(this.urls[this.currentURLIndex], e2));
          } catch (i3) {
            var r2;
            lD.error("[".concat(this.name, "] reconnect failed ").concat(i3 && i3.toString()));
            const n3 = null == i3 || null === (r2 = i3.data) || void 0 === r2 ? void 0 : r2.desc;
            return Array.isArray(n3) && kn(n3).call(n3, "dynamic key expired") ? (this.emit(LU.ON_TOKEN_PRIVILEGE_DID_EXPIRE), false) : this.reconnectWithAction(e2, t2);
          }
          return true;
        }
      }
      class jx extends Bx {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 && void 0 !== arguments[3] && arguments[3], arguments.length > 4 && void 0 !== arguments[4] && arguments[4], arguments.length > 5 ? arguments[5] : void 0);
        }
        async chooseBestWebsocketConnection(e2, t2) {
          const i2 = Jb(), n2 = function(e3, t3) {
            return new Vx(e3, t3);
          }(this.forceCloseTimeout, this.store);
          this.closeEstablishingWs = () => {
            lD.debug("[choose-best-ws] close establishing websockets"), n2.closeAllWebsockets(), i2.reject(new xw(Uw.WS_ABORT, "choose best websocket aborted"));
          };
          const r2 = MN("GATEWAY_DOMAINS");
          return lD.debug("[choose-best-ws] currentDomain: ", e2, ", domains: ", r2, "total: ".concat(this.urls.length), "current: ".concat(this.currentURLIndex + 1)), n2.chooseBestWebsocket(e2, this.tryDoubleDomain, this.use443PortOnly, t2).then(i2.resolve).catch(i2.reject), i2.promise.finally(() => {
            this.closeEstablishingWs = void 0;
          });
        }
      }
      class Gx extends Bx {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 && void 0 !== arguments[3] && arguments[3], arguments.length > 4 && void 0 !== arguments[4] && arguments[4], arguments.length > 5 ? arguments[5] : void 0);
        }
        async chooseBestWebsocketConnection(e2, t2) {
          return new np((i2, n2) => {
            let r2 = false;
            const o2 = [];
            this.closeEstablishingWs = () => {
              lD.debug("[choose-best-ws] close establishing websockets"), o2.forEach((e3) => {
                e3.onclose = null, e3.onopen = null, e3.onmessage = null, e3.close();
              }), n2(new xw(Uw.WS_ABORT, "choose best websocket aborted"));
            };
            const s2 = MN("GATEWAY_DOMAINS");
            let a2;
            const c2 = e2.indexOf("?h="), d2 = s2.find((t3) => -1 !== c2 ? kn(e2).call(e2, t3, c2) : kn(e2).call(e2, t3));
            lD.debug("[choose-best-ws] currentDomain: ", d2, ", domains: ", s2);
            let l2 = !this.tryDoubleDomain || !d2;
            if (!l2 && d2) {
              var u2;
              const h3 = Date.now();
              try {
                s2.forEach((t3) => {
                  const i3 = -1 === c2 ? e2.replace(d2, t3) : e2.substr(0, c2) + e2.substr(c2).replace(d2, t3), n3 = new WebSocket(i3);
                  n3.binaryType = "arraybuffer", o2.push(n3), lD.debug("[choose-best-ws] ws is connecting:", n3.url);
                });
              } catch (e3) {
                for (lD.debug("[choose-best-ws] ws create failed, fallback to single url"), o2.forEach((e4) => e4.close()); o2.length; ) o2.pop();
                l2 = true;
              }
              null === (u2 = this.store) || void 0 === u2 || u2.recordJoinChannelService({ urls: o2.map((e3) => e3.url), service: "gateway" }, t2), o2.forEach((e3) => {
                e3.onopen = () => {
                  if (r2) return;
                  const t3 = Date.now() - h3;
                  lD.debug("[choose-best-ws] ws open cost ".concat(t3, "ms")), o2.filter((t4) => t4 !== e3).forEach((e4) => {
                    lD.debug("[choose-best-ws]close backup websocket: ".concat(e4.url)), e4.close();
                  }), r2 = true, i2(e3);
                }, e3.onclose = (e4) => {
                  if (a2 = e4, r2) return;
                  o2.find((e5) => !(e5.readyState === WebSocket.CLOSED || e5.readyState === WebSocket.CLOSING)) || (lD.debug("[choose-best-ws] all websocket is closed"), r2 = true, n2(a2));
                }, e3.onmessage = (t3) => {
                  lD.debug("[choose-best-ws]".concat(e3.url, " onmessage: ").concat(t3.data));
                };
              }), PO(this.forceCloseTimeout).then(() => {
                o2.forEach((e3) => {
                  e3.readyState !== WebSocket.OPEN && e3.close();
                });
              });
            }
            if (l2) {
              var h2;
              let r3;
              lD.debug("[choose-best-ws] use single url: ", e2), null === (h2 = this.store) || void 0 === h2 || h2.recordJoinChannelService({ urls: [e2], service: "gateway" }, t2);
              try {
                r3 = new WebSocket(e2), o2.push(r3), r3.binaryType = "arraybuffer";
              } catch (e3) {
                const t3 = new xw(Uw.WS_ERR, "init websocket failed! Error: ".concat(e3.toString()));
                return lD.error("[".concat(this.name, "]").concat(t3)), void n2(t3);
              }
              r3.onopen = () => {
                i2(r3);
              }, r3.onclose = (e3) => {
                n2(e3);
              }, r3.onmessage = (e3) => {
                lD.debug("[choose-best-ws]".concat(r3.url, " onmessage: ").concat(e3.data));
              }, PO(this.forceCloseTimeout).then(() => {
                r3 && r3.readyState !== WebSocket.OPEN && r3.close();
              });
            }
          }).then((e3) => (this.closeEstablishingWs = void 0, e3)).catch((e3) => {
            throw this.closeEstablishingWs = void 0, e3;
          });
        }
      }
      class Wx extends Zw {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === bU.CONNECTED ? this.emit(wU.WS_CONNECTED) : e2 === bU.RECONNECTING ? this.emit(wU.WS_RECONNECTING, this._websocketReconnectReason) : e2 === bU.CLOSED && this.emit(wU.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), vy(this, "_disconnectedReason", void 0), vy(this, "_websocketReconnectReason", void 0), vy(this, "_connectionState", bU.CLOSED), vy(this, "reconnectToken", void 0), vy(this, "websocket", void 0), vy(this, "openConnectionTime", void 0), vy(this, "clientId", void 0), vy(this, "lastMsgTime", Date.now()), vy(this, "uploadCache", []), vy(this, "uploadCacheInterval", void 0), vy(this, "rttRolling", new QO(5)), vy(this, "pingpongTimer", void 0), vy(this, "wsInflateDataTimer", void 0), vy(this, "pingpongTimeoutCount", 0), vy(this, "joinResponse", void 0), vy(this, "multiIpOption", void 0), vy(this, "initError", void 0), vy(this, "spec", void 0), vy(this, "store", void 0), vy(this, "onWebsocketMessage", (e3) => {
            if (e3.data instanceof ArrayBuffer) return void this.emit(wU.ON_BINARY_DATA, e3.data);
            const t3 = JSON.parse(e3.data);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type")) {
              if (this.emit(t3._type, t3._message), t3._type === DU.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === DU.ON_USER_BANNED) switch (t3._message.error_code) {
                case 14:
                  this.close(oO.UID_BANNED);
                  break;
                case 15:
                  this.close(oO.IP_BANNED);
                  break;
                case 16:
                  this.close(oO.CHANNEL_BANNED);
              }
              if (t3._type === DU.ON_USER_LICENSE_BANNED) switch (t3._message.error_code) {
                case AU.ERR_LICENSE_MISSING:
                  this.close(oO.LICENSE_MISSING);
                  break;
                case AU.ERR_LICENSE_EXPIRED:
                  this.close(oO.LICENSE_EXPIRED);
                  break;
                case AU.ERR_LICENSE_MINUTES_EXCEEDED:
                  this.close(oO.LICENSE_MINUTES_EXCEEDED);
                  break;
                case AU.ERR_LICENSE_PERIOD_INVALID:
                  this.close(oO.LICENSE_PERIOD_INVALID);
                  break;
                case AU.ERR_LICENSE_MULTIPLE_SDK_SERVICE:
                  this.close(oO.LICENSE_MULTIPLE_SDK_SERVICE);
                  break;
                case AU.ERR_LICENSE_ILLEGAL:
                  this.close(oO.LICENSE_ILLEGAL);
                  break;
                default:
                  this.close();
              }
            }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new jx("gateway-".concat(this.clientId), this.spec.retryConfig, true, MN("JOIN_GATEWAY_USE_DUAL_DOMAIN"), MN("JOIN_GATEWAY_USE_443PORT_ONLY"), t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === bU.CONNECTED && this.reconnect("retry", lO.OFFLINE);
          });
        }
        async request(e2, t2, i2, n2) {
          const r2 = LO(6, ""), o2 = { _id: r2, _type: e2, _message: t2 }, s2 = this.websocket.connectionID, a2 = () => new np((t3, i3) => {
            if (this.connectionState === bU.CONNECTED) return t3();
            const n3 = () => {
              this.off(wU.WS_CLOSED, r3), t3();
            }, r3 = () => {
              this.off(wU.WS_CONNECTED, n3), i3(new SD(Uw.WS_ABORT));
            };
            this.once(wU.WS_CONNECTED, n3), this.once(wU.WS_CLOSED, r3), e2 !== OU.PUBLISH && e2 !== OU.PUBLISH_DATASTREAM && e2 !== OU.SUBSCRIBE && e2 !== OU.SUBSCRIBE_DATASTREAM && e2 !== OU.UNSUBSCRIBE && e2 !== OU.UNSUBSCRIBE_DATASTREAM && e2 !== OU.UNPUBLISH && e2 !== OU.UNPUBLISH_DATASTREAM && e2 !== OU.CONTROL && e2 !== OU.RESTART_ICE || this.once(wU.DISCONNECT_P2P, () => {
              i3(new SD(Uw.DISCONNECT_P2P));
            }), e2 !== OU.PUBLISH && e2 !== OU.RESTART_ICE || this.once(wU.ABORT_P2P_EXECUTION, () => {
              i3(new SD(Uw.DISCONNECT_P2P));
            });
          });
          if (this.connectionState !== bU.CONNECTING && this.connectionState !== bU.RECONNECTING || e2 === OU.JOIN || e2 === OU.REJOIN || await a2(), this.websocket.sendMessage(o2, true), n2) return;
          const c2 = new np((i3, n3) => {
            let o3 = false;
            const a3 = (n4, r3) => {
              o3 = true, i3({ isSuccess: "success" === n4, message: r3 || {} }), this.off(wU.WS_CLOSED, c3), this.off(wU.WS_RECONNECTING, c3), this.emit(wU.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(r2), a3);
            const c3 = () => {
              n3(new SD(Uw.WS_ABORT, "type: ".concat(e2))), this.off(wU.WS_CLOSED, c3), this.off(wU.WS_RECONNECTING, c3), this.off("res-@".concat(r2), a3);
            };
            this.once(wU.WS_CLOSED, c3), this.once(wU.WS_RECONNECTING, c3), PO(MN("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== s2 || o3 || (lD.warning("[".concat(this.clientId, "] ws request timeout, type: ").concat(e2)), this.emit(wU.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (n3) {
            if (this.connectionState === bU.CLOSED || e2 === OU.LEAVE) throw new SD(Uw.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? n3.throw() : e2 === OU.JOIN || e2 === OU.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess) return d2.message;
          const l2 = Number(d2.message.error_code || d2.message.code), u2 = Ox(l2), h2 = new SD(Uw.UNEXPECTED_RESPONSE, "".concat(u2.desc, ": ").concat(d2.message.error_str), { code: l2, data: d2.message, desc: u2.desc });
          return "success" === u2.action ? d2.message : (lD.warning("[".concat(this.clientId, "] [").concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(l2, ", message: ").concat(u2.desc, ", action: ").concat(u2.action)), l2 === AU.ERR_TOO_MANY_BROADCASTERS ? e2 === OU.JOIN || e2 === OU.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === u2.action ? h2.throw() : "quit" === u2.action ? (this.initError = h2, this.close(), h2.throw()) : (l2 === AU.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, lD.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", lO.MULTI_IP)) : this.reconnect(u2.action, lO.SERVER_ERROR), e2 === OU.JOIN || e2 === OU.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new np((i2) => {
            const n2 = (r2) => {
              (!t2 || t2(r2)) && (this.off(e2, n2), i2(r2));
            };
            this.on(e2, n2);
          });
        }
        uploadWRTCStats(e2) {
          if (!this.store.sessionId) return void lD.warn("[".concat(this.clientId, "] no session id when upload wrtc stats"));
          const t2 = { lts: Date.now(), sid: this.store.sessionId, uid: this.store.intUid, stats: e2 };
          this.upload(NU.WRTC_STATS, t2);
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = MN("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== bU.CONNECTED) return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, MN("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        init(e2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new np((t2, i2) => {
            this.once(wU.WS_CONNECTED, () => t2(this.joinResponse)), this.once(wU.WS_CLOSED, (e3) => i2(this.initError || new SD(Uw.WS_ABORT, e3))), this.connectionState = bU.CONNECTING, this.websocket.init(e2).catch(i2), this.wsInflateDataTimer && window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = window.setInterval(() => {
              this.handleWsInflateData();
            }, 2e4);
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.wsInflateDataTimer && (this.handleWsInflateData(), window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._disconnectedReason = e2 || oO.LEAVE, this.connectionState = bU.CLOSED, lD.debug("[".concat(this.clientId, "] ") + "will close websocket in signal"), this.websocket.close();
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(wU.ABORT_P2P_EXECUTION);
            const e2 = await pO(this, wU.REQUEST_JOIN_INFO), t2 = await this.request(OU.JOIN, e2);
            if (!t2) return this.emit(wU.REPORT_JOIN_GATEWAY, QU.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(wU.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = bU.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        async rejoin() {
          if (!this.reconnectToken) throw new SD(Uw.UNEXPECTED_ERROR, "can not rejoin, no rejoin token");
          const e2 = mO(this, wU.REQUEST_REJOIN_INFO);
          e2.token = this.reconnectToken;
          const t2 = await this.request(OU.REJOIN, e2);
          return !!t2 && (this.connectionState = bU.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), t2.peers && t2.peers.forEach((e3) => {
            this.emit(DU.ON_USER_ONLINE, { uid: e3.uid }), e3.audio && this.emit(DU.ON_ADD_AUDIO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, audio: true, ssrcId: e3.audio_ssrc }), e3.video && this.emit(DU.ON_ADD_VIDEO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, video: true, ssrcId: e3.video_ssrc }), e3.audio_mute ? this.emit(DU.MUTE_AUDIO, { uid: e3.uid }) : this.emit(DU.UNMUTE_AUDIO, { uid: e3.uid }), e3.video_mute ? this.emit(DU.MUTE_VIDEO, { uid: e3.uid }) : this.emit(DU.UNMUTE_VIDEO, { uid: e3.uid }), e3.audio_enable_local ? this.emit(DU.ENABLE_LOCAL_AUDIO, { uid: e3.uid }) : this.emit(DU.DISABLE_LOCAL_AUDIO, { uid: e3.uid }), e3.video_enable_local ? this.emit(DU.ENABLE_LOCAL_VIDEO, { uid: e3.uid }) : this.emit(DU.DISABLE_LOCAL_VIDEO, { uid: e3.uid }), e3.audio || e3.video || this.emit(DU.ON_REMOVE_STREAM, { uid: e3.uid, uint_id: e3.uint_id });
          }), true);
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleNotification(e2) {
          lD.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = Ox(e2.code);
          if (28 === e2.code && "detail" in e2 && (lD.info("[".concat(this.clientId, "] receive recover notification: "), e2.detail), this.emit(wU.RECOVER_NOTIFICATION, e2.detail)), "success" !== t2.action) {
            if ("failed" !== t2.action) return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(oO.UID_BANNED), void this.close()) : void this.reconnect(t2.action, lO.SERVER_ERROR);
            lD.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state) return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = MN("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (lD.warning("[".concat(this.clientId, "] PING-PONG Timeout. Last Socket Message: ").concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > MN("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", lO.TIMEOUT) : this.request(OU.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), MN("REPORT_STATS") && this.send(OU.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleWsInflateData() {
          const { wsInflateLength: e2, wsDeflateLength: t2 } = this.websocket.getWsInflateData();
          0 !== e2 && 0 !== t2 && this.upload(NU.WS_INFLATE_DATA_LENGTH, { ws_deflate_length: t2, ws_inflate_length: e2 });
        }
        handleWebsocketEvents() {
          this.websocket.on(LU.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(wU.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(LU.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(LU.CLOSED, () => {
            this.connectionState = bU.CLOSED;
          }), this.websocket.on(LU.FAILED, () => {
            this._disconnectedReason = oO.NETWORK_ERROR, this.connectionState = bU.CLOSED;
          }), this.websocket.on(LU.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === bU.CONNECTED ? this.connectionState = bU.RECONNECTING : this.connectionState = bU.CONNECTING;
          }), this.websocket.on(LU.WILL_RECONNECT, (e2, t2, i2) => {
            const n2 = mO(this, wU.IS_P2P_DISCONNECTED), r2 = n2 || "retry" !== e2;
            n2 && "retry" === e2 && (lD.debug("".concat(this.clientId, " reconnect mode is retry, but p2p lost, change to tryNext")), e2 = "tryNext", t2 = QU.P2P_DISCONNECTED), r2 && (lD.debug("".concat(this.clientId, " will renewSession, reconnect mode: ").concat(e2)), this.emit(wU.REPORT_JOIN_GATEWAY, t2 || QU.UNKNOWN_REASON, this.url || ""), this.reconnectToken = void 0, this.emit(wU.DISCONNECT_P2P)), i2(e2);
          }), this.websocket.on(LU.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.reconnectToken ? this.rejoin().catch((e2) => {
              lD.warning("[".concat(this.clientId, "] rejoin failed ").concat(e2)), this.reconnect("tryNext", lO.SERVER_ERROR);
            }) : this.join().catch((e2) => {
              if (this.emit(wU.REPORT_JOIN_GATEWAY, e2, this.url || ""), e2 instanceof SD) {
                if (e2.code === Uw.UNEXPECTED_RESPONSE && e2.data.code === AU.ERR_NO_AUTHORIZED) return this.initError = new SD(Uw.TOKEN_EXPIRE, "dynamic key expired"), void this.close(oO.TOKEN_EXPIRE);
                lD.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", lO.SERVER_ERROR) : (this.initError = e2, this.close());
              }
            });
          }), this.websocket.on(LU.REQUEST_NEW_URLS, (e2, t2) => {
            pO(this, wU.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(LU.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(DU.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          }), this.websocket.on(fx.PRE_CONNECT_PC, () => {
            this.emit(wU.PRE_CONNECT_PC);
          });
        }
      }
      let Hx = function(e2) {
        return e2.NATIVE_RTC = "native_rtc", e2.NATIVE_RTM = "native_rtm", e2.WEB_RTC = "web_rtc", e2.WEB_RTM = "web_rtm", e2;
      }({}), Kx = function(e2) {
        return e2[e2.CHOOSE_SERVER = 11] = "CHOOSE_SERVER", e2[e2.CLOUD_PROXY = 18] = "CLOUD_PROXY", e2[e2.CLOUD_PROXY_5 = 20] = "CLOUD_PROXY_5", e2[e2.CLOUD_PROXY_FALLBACK = 26] = "CLOUD_PROXY_FALLBACK", e2;
      }({});
      function Yx(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function qx(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Yx(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Yx(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function zx(e2) {
        return e2.match(/^[\.\:\d]+$/) ? "".concat(e2.replace(/[^\d]/g, "-"), ".").concat(MN("TURN_DOMAIN")) : (lD.debug("Cannot recognized as ip address: ".concat(e2, ", use as host")), e2);
      }
      function Jx(e2, t2) {
        e2.addresses || (e2.addresses = []);
        const i2 = function(e3, t3) {
          if (MN("CONNECT_GATEWAY_WITHOUT_DOMAIN")) return e3.map((e4) => {
            let { ip: t4, port: i4 } = e4;
            return { address: "".concat(t4, ":").concat(i4) };
          });
          const i3 = MN("GATEWAY_DOMAINS");
          let n3 = i3[1] && kn(t3).call(t3, i3[1]) ? 1 : 0;
          return e3.map((e4) => {
            let { domain_prefix: t4, port: r3, ip: o3 } = e4;
            if (t4) return { address: "".concat(t4, ".").concat(i3[n3++ % i3.length], ":").concat(r3) };
            const s3 = /^[\.\:\d]+$/.test(o3), a2 = s3 ? "".concat(o3.replace(/[^\d]/g, "-"), ".").concat(i3[n3++ % i3.length], ":").concat(r3) : "".concat(o3, ":").concat(r3);
            return s3 || lD.debug("Cannot recognized as ip address: ".concat(o3, ", use as host")), { ip: o3, port: r3, address: a2 };
          });
        }(e2.addresses, t2), n2 = Array.isArray(e2.detail) && e2.detail[18];
        if (n2 && "string" == typeof n2) {
          const e3 = n2.split(";");
          for (let t3 = 0; t3 < e3.length; t3++) {
            var r2;
            const n3 = eS(r2 = e3[t3]).call(r2);
            i2[t3] && n3 && (i2[t3].ip6 = n3);
          }
        }
        const o2 = e2.detail && e2.detail.candidate;
        let s2;
        if (o2) {
          const [e3, t3] = o2.split(":");
          e3 && t3 && (s2 = { port: Number(t3), ip: e3, address: "".concat(e3, ":").concat(t3) });
        }
        return { gatewayAddrs: i2, apGatewayAddress: s2, uid: e2.uid, cid: e2.cid, cert: e2.cert, vid: e2.detail && e2.detail[8], uni_lbs_ip: e2.detail && e2.detail[1], res: e2, csIp: e2.detail && e2.detail[502] };
      }
      function Xx(e2) {
        return "number" == typeof e2 ? e2 : e2.exact || e2.ideal || e2.max || e2.min || 0;
      }
      function Qx(e2) {
        const t2 = e2._encoderConfig;
        if (!t2) return {};
        const i2 = { resolution: t2.width && t2.height ? "".concat(Xx(t2.width), "x").concat(Xx(t2.height)) : void 0, maxVideoBW: t2.bitrateMax, minVideoBW: t2.bitrateMin };
        return "number" == typeof t2.frameRate ? (i2.maxFrameRate = t2.frameRate, i2.minFrameRate = t2.frameRate) : t2.frameRate && (i2.maxFrameRate = t2.frameRate.max || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.min, i2.minFrameRate = t2.frameRate.min || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.max), i2;
      }
      function Zx(e2) {
        return e2 >= 0 && e2 < 0.17 ? 1 : e2 >= 0.17 && e2 < 0.36 ? 2 : e2 >= 0.36 && e2 < 0.59 ? 3 : e2 >= 0.59 && e2 <= 1 ? 4 : e2 > 1 ? 5 : 0;
      }
      function $x(e2, t2) {
        let i2, n2, r2;
        switch (t2) {
          case Kx.CHOOSE_SERVER:
            n2 = 4096, r2 = "choose server";
            break;
          case Kx.CLOUD_PROXY:
            n2 = 1048576, r2 = "proxy";
            break;
          case Kx.CLOUD_PROXY_5:
            n2 = 4194304, r2 = "proxy5";
            break;
          case Kx.CLOUD_PROXY_FALLBACK:
            n2 = 4194310, r2 = "proxy fallback";
            break;
          default:
            throw new SD(Uw.UNEXPECTED_ERROR, "multi unlibs response transformer get unknown service id", { csIp: e2.detail && e2.detail[502], retry: false });
        }
        if (e2.response_body.forEach((t3) => {
          t3.buffer && t3.buffer.flag === n2 && (i2 = { code: t3.buffer.code, addresses: (t3.buffer.edges_services || []).map((e3) => qx(qx({}, e3), {}, { ticket: t3.buffer.cert })), server_ts: e2.enter_ts, uid: t3.buffer.uid, cid: t3.buffer.cid, cname: t3.buffer.cname, detail: qx(qx({}, t3.buffer.detail), e2.detail), flag: t3.buffer.flag, opid: e2.opid, cert: t3.buffer.cert });
        }), !i2) throw new SD(Uw.MULTI_UNILBS_RESPONSE_ERROR, "cannot parse response ".concat(r2, " from multi unilbs response"), { csIp: e2.detail && e2.detail[502] });
        return i2;
      }
      async function eV(e2, t2) {
        return await np.all(e2.addresses.map(async (e3) => ({ address: zx(e3.ip), tcpport: e3.port, udpport: e3.port, username: t2 && MN("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? t2.toString() : wN.username, password: t2 && MN("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? await Qw(t2.toString()) : wN.password })));
      }
      function tV(e2, t2) {
        const i2 = t2.getMediaStreamTrack(true).getSettings(), n2 = t2.videoHeight || i2.height, r2 = t2.videoWidth || i2.width;
        return n2 && r2 ? Math.max(Math.min(n2, r2) / Math.min(Xx(e2.height), Xx(e2.width)), 1) : (lD.warning("can't get ori-track's height, default scale down 4 times for low stream"), 4);
      }
      function iV(e2) {
        let { candidateType: t2, relayProtocol: i2, type: n2, address: r2, port: o2, protocol: s2 } = e2;
        const a2 = { candidateType: t2, relayProtocol: i2, protocol: s2 };
        if ("local-candidate" !== n2) {
          const e3 = r2.split(".");
          e3.length >= 4 && (e3[1] = "*", e3[2] = "*"), a2.address = e3.join("."), a2.port = o2;
        }
        return a2;
      }
      function nV() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : MN("SVC_MODE");
        if (MN("ENABLE_SVC")) return function(e3) {
          return e3 in EN;
        }(e2) ? e2 : EN.L1T3;
      }
      const rV = { [ax.VIDEO]: [{ key: "abs-send-time", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" }, { key: "video-orientation", extensionName: "urn:3gpp:video-orientation" }, { key: "draft-holmer-rmcat-transport-wide-cc-extensions-01", extensionName: "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" }, { key: "playout-delay", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/playout-delay" }, { key: "video-content-type", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/video-content-type" }, { key: "color-space", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/color-space" }, { key: "video-timing", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/video-timing" }], [ax.AUDIO]: [{ key: "ssrc-audio-level", extensionName: "urn:ietf:params:rtp-hdrext:ssrc-audio-level" }, { key: "draft-holmer-rmcat-transport-wide-cc-extensions-01", extensionName: "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" }, { key: "abs-send-time", extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" }] };
      function oV(e2, t2, i2) {
        t2.forEach((t3) => {
          var n2;
          const r2 = rV[e2].find((e3) => {
            var i3;
            let { key: n3 } = e3;
            return kn(i3 = t3.extensionName).call(i3, n3);
          });
          if (!r2) return;
          const o2 = i2.find((e3) => {
            let { extensionName: t4 } = e3;
            return kn(t4).call(t4, r2.key);
          });
          o2 && kn(n2 = o2.extensionName).call(n2, "gdpr_forbidden") && (t3.extensionName = o2.extensionName);
        });
      }
      function sV(e2, t2) {
        t2.forEach((t3) => {
          var i2;
          const n2 = rV[e2].find((e3) => {
            var i3;
            let { key: n3 } = e3;
            return kn(i3 = t3.extensionName).call(i3, n3);
          });
          kn(i2 = t3.extensionName).call(i2, "gdpr_forbidden") && n2 && (t3.extensionName = n2.extensionName);
        });
      }
      function aV(e2) {
        return "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e2 || kn(e2).call(e2, "abs-send-time");
      }
      function cV(e2) {
        return "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e2 || kn(e2).call(e2, "draft-holmer-rmcat-transport-wide-cc-extensions-01");
      }
      function dV(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function lV(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? dV(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : dV(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function uV(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = arguments.length > 3 ? arguments[3] : void 0;
        const { filterRTX: r2, filterVideoFec: o2, filterAudioFec: s2, filterAudioCodec: a2, filterVideoCodec: c2 } = t2, { useXR: d2 } = i2;
        let l2 = [], u2 = [], h2 = [], p2 = [], _2 = false, E2 = false;
        if (WN(e2).mediaDescriptions.forEach((e3) => {
          n2 && n2 !== e3.attributes.direction || ("video" !== e3.media.mediaType || _2 || (u2 = e3.attributes.payloads, p2 = e3.attributes.extmaps, _2 = true), "audio" !== e3.media.mediaType || E2 || (l2 = e3.attributes.payloads, h2 = e3.attributes.extmaps, E2 = true));
        }), !p2 || 0 === u2.length) throw new Error("Cannot get video capabilities from SDP.");
        if (!h2 || 0 === l2.length) throw new Error("Cannot get audio capabilities from SDP.");
        if (u2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate)), d2 && e3.rtcpFeedbacks.push({ type: "rrtr" });
        }), l2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate)), d2 && e3.rtcpFeedbacks.push({ type: "rrtr" });
        }), r2 && (l2 = l2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        }), u2 = u2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        })), o2 && (u2 = u2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), s2 && (l2 = l2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), a2 && (null == a2 ? void 0 : a2.length) > 0 && (l2 = l2.filter((e3) => {
          var t3;
          return kn(a2).call(a2, (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
        })), c2 && (null == c2 ? void 0 : c2.length) > 0) {
          const e3 = u2.filter((e4) => {
            var t3;
            return kn(c2).call(c2, (null === (t3 = e4.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
          });
          u2 = e3.concat(r2 ? [] : OV(e3, u2));
        }
        const m2 = MN("UNSUPPORTED_VIDEO_CODEC");
        return m2 && m2.length > 0 && (u2 = u2.filter((e3) => !(e3.rtpMap && kn(m2).call(m2, e3.rtpMap.encodingName.toLowerCase())))), { audioCodecs: l2, videoCodecs: u2, audioExtensions: h2, videoExtensions: p2 };
      }
      function hV(e2) {
        const t2 = WN(e2);
        let i2, n2;
        for (const e3 of t2.mediaDescriptions) {
          if (!i2) {
            const t3 = e3.attributes.iceUfrag, n3 = e3.attributes.icePwd;
            if (!t3 || !n3) throw new Error("Cannot get iceUfrag or icePwd from SDP.");
            i2 = { iceUfrag: t3, icePwd: n3 };
          }
          if (!n2) {
            const t3 = e3.attributes.fingerprints;
            t3.length > 0 && (n2 = { fingerprints: t3 });
          }
        }
        if (!n2 && t2.attributes.fingerprints.length > 0 && (n2 = { fingerprints: t2.attributes.fingerprints }), !n2 || !i2) throw new Error("Cannot get iceParameters or dtlsParameters from SDP.");
        return { iceParameters: i2, dtlsParameters: n2 };
      }
      function pV(e2, t2) {
        const i2 = [], n2 = e2.attributes.ssrcGroups.filter((e3) => "FID" === e3.semantic), r2 = e2.attributes.ssrcGroups.find((e3) => "SIM" === e3.semantic), o2 = e2.attributes.ssrcs;
        if (r2) r2.ssrcIds.forEach((e3) => {
          var r3;
          const o3 = null === (r3 = n2.find((t3) => t3.ssrcIds[0] === e3)) || void 0 === r3 ? void 0 : r3.ssrcIds[1];
          i2.push({ ssrcId: e3, rtx: t2 ? o3 : void 0 });
        });
        else if (n2.length > 0) {
          const e3 = n2[0].ssrcIds[0], r3 = n2[0].ssrcIds[1];
          i2.push({ ssrcId: e3, rtx: t2 ? r3 : void 0 });
        } else {
          if (0 === o2.length) throw new Error("No ssrcs found on local media description.");
          i2.push({ ssrcId: o2[0].ssrcId });
        }
        return i2;
      }
      function _V(e2, t2, i2) {
        const { cname: n2 } = e2;
        let r2 = [];
        t2 && (r2 = EV(t2)), 0 === r2.length && (r2 = e2.iceParameters.candidates.map((e3) => ({ foundation: e3.foundation, componentId: "1", transport: e3.protocol, priority: e3.priority.toString(), connectionAddress: e3.ip, port: e3.port.toString(), type: e3.type, extension: {} })), lD.debug("Using candidates from gateway."));
        const o2 = { fingerprints: e2.dtlsParameters.fingerprints.map((e3) => ({ hashFunction: e3.algorithm, fingerprint: e3.fingerprint })) }, s2 = { iceUfrag: e2.iceParameters.iceUfrag, icePwd: e2.iceParameters.icePwd };
        let a2;
        switch (e2.dtlsParameters.role) {
          case "server":
            a2 = "passive";
            break;
          case "client":
            a2 = "active";
            break;
          case "auto":
            a2 = "actpass";
        }
        const c2 = AV(e2.rtpCapabilities), d2 = [];
        return Array.isArray(i2) && i2.length > 0 && i2.forEach((e3) => {
          d2.push({ kind: ax.VIDEO, ssrcId: e3.v, rtx: e3.v_rtx, mslabel: "".concat(e3.v, "_").concat(e3.a) }, { kind: ax.AUDIO, ssrcId: e3.a, mslabel: "".concat(e3.v, "_").concat(e3.a) });
        }), { dtlsParameters: o2, iceParameters: s2, candidates: r2, rtpCapabilities: c2, setup: a2, cname: n2, preSSRCs: d2 };
      }
      function EV(e2) {
        let t2 = [];
        return e2.ip && "number" == typeof e2.port && (t2 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: e2.ip, port: e2.port.toString(), type: "host", extension: {} }], lD.debug("Using remote candidate from AP ".concat(e2.ip, ":").concat(e2.port)), e2.ip6 && (t2.push({ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: e2.ip6, port: e2.port.toString(), type: "host", extension: {} }), lD.debug("Using IPV6 remote candidate from AP ".concat(e2.ip6, ":").concat(e2.port)))), t2;
      }
      function mV(e2, t2, i2) {
        const n2 = [], r2 = [];
        return e2.forEach((e3) => {
          let { ssrcId: o2, rtx: s2 } = e3;
          const a2 = LO(8, "track-"), c2 = { ssrcId: o2, attributes: lV({ label: a2, mslabel: i2 = i2 || LO(10, ""), msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
          if (n2.push(c2), void 0 !== s2) {
            const e4 = { ssrcId: s2, attributes: lV({ label: a2, mslabel: i2, msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
            n2.push(e4), r2.push({ semantic: "FID", ssrcIds: [o2, s2] });
          }
        }), e2.length > 1 && r2.push({ semantic: "SIM", ssrcIds: e2.map((e3) => {
          let { ssrcId: t3 } = e3;
          return t3;
        }) }), { ssrcs: n2, ssrcGroups: r2 };
      }
      function fV(e2, t2) {
        t2 instanceof GL && e2.attributes.payloads.forEach((e3) => {
          var i2;
          const n2 = null === (i2 = e3.rtpMap) || void 0 === i2 ? void 0 : i2.encodingName.toLowerCase();
          if (!n2 || -1 === ["opus", "pcmu", "pcma", "g722"].indexOf(n2)) return;
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.minptime = "10", e3.fmtp.parameters.useinbandfec = "1";
          const r2 = t2._encoderConfig;
          r2 && "pcmu" !== n2 && "pcma" !== n2 && "g722" !== n2 && (r2.bitrate && !hw() && (e3.fmtp.parameters.maxaveragebitrate = "".concat(Math.floor(1e3 * r2.bitrate))), r2.sampleRate && (e3.fmtp.parameters.maxplaybackrate = "".concat(r2.sampleRate), e3.fmtp.parameters["sprop-maxcapturerate"] = "".concat(r2.sampleRate)), r2.stereo && (e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1"));
        });
      }
      function TV(e2) {
        const t2 = e2.attributes.unrecognized.findIndex((e3) => "x-google-flag" === e3.attField && "conference" === e3.attValue);
        -1 !== t2 && e2.attributes.unrecognized.splice(t2, 1);
      }
      function SV(e2, t2) {
        var i2;
        if (!(t2 instanceof Dk && t2._encoderConfig && -1 === t2._hints.indexOf(BD.SCREEN_TRACK))) return;
        const n2 = t2._encoderConfig;
        RD().supportMinBitrate && n2.bitrateMin && e2.attributes.payloads.forEach((e3) => {
          var t3, i3;
          kn(t3 = ["h264", "h265", "vp8", "vp9", "av1"]).call(t3, (null === (i3 = e3.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-min-bitrate"] = "".concat(n2.bitrateMin));
        }), RD().supportMinBitrate && !kn(i2 = t2._hints).call(i2, BD.LOW_STREAM) && n2.bitrateMax && e2.attributes.payloads.forEach((e3) => {
          var t3, i3;
          kn(t3 = ["h264", "h265", "vp8", "vp9", "av1"]).call(t3, (null === (i3 = e3.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-start-bitrate"] = "".concat(MN("X_GOOGLE_START_BITRATE") || Math.floor(n2.bitrateMax)));
        });
      }
      function gV(e2) {
        if ("video" !== e2.media.mediaType) return;
        const t2 = rw();
        if (t2.name !== ew.SAFARI && t2.os !== $b.IOS) return;
        const i2 = e2.attributes.extmaps.findIndex((e3) => /video-orientation/g.test(e3.extensionName));
        -1 !== i2 && e2.attributes.extmaps.splice(i2, 1);
      }
      function RV(e2, t2, i2) {
        if (!t2) return;
        let n2, r2;
        if ("video" === e2.media.mediaType ? (n2 = i2.videoExtensions, r2 = i2.videoCodecs) : (n2 = i2.audioExtensions, r2 = i2.audioCodecs), true === t2.twcc) {
          const t3 = n2.find((e3) => cV(e3.extensionName));
          if (t3) {
            const i3 = t3.extensionName;
            e2.attributes.extmaps.find((e3) => cV(e3.extensionName)) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: i3 });
            const n3 = function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "transport-cc" === e5.type)));
            }(r2, e2.attributes.payloads);
            n3.forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "transport-cc" === e4.type) || e3.rtcpFeedbacks.push({ type: "transport-cc" });
            });
          }
        } else if (false === t2.twcc) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => cV(e3.extensionName));
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "transport-cc" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
        if (true === t2.remb) {
          const t3 = n2.find((e3) => aV(e3.extensionName));
          if (t3) {
            const i3 = t3.extensionName;
            e2.attributes.extmaps.find((e3) => e3.extensionName === i3) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: i3 });
            const n3 = function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "goog-remb" === e5.type)));
            }(r2, e2.attributes.payloads);
            n3.forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "goog-remb" === e4.type) || e3.rtcpFeedbacks.push({ type: "goog-remb" });
            });
          }
        } else if (false === t2.remb) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => aV(e3.extensionName));
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "goog-remb" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
      }
      function vV(e2, t2, i2) {
        if (hw()) return;
        if ("video" !== e2.media.mediaType) return;
        if (!(t2 instanceof Dk)) return;
        if ("vp9" !== i2 && "vp8" !== i2) return;
        if ("vp8" === i2 && !MN("SIMULCAST")) return;
        if ("vp9" === i2 && MN("ENABLE_SVC")) return;
        if (void 0 === t2._scalabilityMode || t2._scalabilityMode.numSpatialLayers <= 1) return;
        const n2 = "vp8" === i2 ? 2 : t2._scalabilityMode.numSpatialLayers, r2 = e2.attributes.ssrcs[0], o2 = e2.attributes.ssrcGroups.find((e3) => "FID" === e3.semantic && e3.ssrcIds[0] === r2.ssrcId), s2 = { semantic: "SIM", ssrcIds: [r2.ssrcId] };
        for (let t3 = 1; t3 < n2; t3++) e2.attributes.ssrcs.push({ ssrcId: r2.ssrcId + t3, attributes: RO(r2.attributes) }), s2.ssrcIds.push(r2.ssrcId + t3), o2 && (e2.attributes.ssrcs.push({ ssrcId: o2.ssrcIds[1] + t3, attributes: RO(r2.attributes) }), e2.attributes.ssrcGroups.push({ semantic: "FID", ssrcIds: [r2.ssrcId + t3, o2.ssrcIds[1] + t3] }));
        e2.attributes.ssrcGroups.unshift(s2);
      }
      async function CV() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const i2 = new RTCPeerConnection();
        i2.addTransceiver("video", { direction: "sendonly" }), i2.addTransceiver("audio", { direction: "sendonly" }), i2.addTransceiver("video", { direction: "recvonly" }), i2.addTransceiver("audio", { direction: "recvonly" });
        const n2 = (await i2.createOffer()).sdp, { send: r2, recv: o2, sendrecv: s2 } = function() {
          let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i3 = arguments.length > 2 ? arguments[2] : void 0;
          const n3 = uV(i3, e3, t3, "sendonly"), r3 = uV(i3, e3, t3, "recvonly"), o3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, s3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, a2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
          if (yV(n3, r3, "videoExtensions", o3, s3, a2), yV(n3, r3, "videoCodecs", o3, s3, a2), yV(n3, r3, "audioExtensions", o3, s3, a2), yV(n3, r3, "audioCodecs", o3, s3, a2), MN("RAISE_H264_BASELINE_PRIORITY")) {
            const e4 = [], t4 = [];
            a2.videoCodecs.forEach((i4, n4) => {
              var r4;
              if ("h264" === (null === (r4 = i4.rtpMap) || void 0 === r4 ? void 0 : r4.encodingName.toLocaleLowerCase())) {
                var o4, s4;
                const r5 = a2.videoCodecs[n4 + 1], c2 = r5 && kV(i4, r5), d2 = null === (o4 = i4.fmtp) || void 0 === o4 ? void 0 : o4.parameters["profile-level-id"], l2 = null === (s4 = i4.fmtp) || void 0 === s4 ? void 0 : s4.parameters["packetization-mode"];
                !d2 || d2 !== MN("FIRST_H264_PROFILE_LEVEL_ID") || MN("FIRST_PACKETIZATION_MODE") && l2 !== MN("FIRST_PACKETIZATION_MODE") ? c2 ? t4.push([i4, r5]) : t4.push([i4]) : c2 ? e4.push([i4, r5]) : e4.push([i4]);
              }
            }), e4.length > 0 && t4.length > 0 && (lD.debug("raising H264 baseline profile priority"), a2.videoCodecs.forEach((i4, n4) => {
              var r4;
              if ("h264" === (null === (r4 = i4.rtpMap) || void 0 === r4 ? void 0 : r4.encodingName.toLocaleLowerCase())) {
                const r5 = kV(i4, a2.videoCodecs[n4 + 1]), o4 = e4.shift() || t4.shift() || [];
                o4.length > 0 && (r5 ? a2.videoCodecs.splice(n4, 2, ...o4) : a2.videoCodecs.splice(n4, 1, ...o4));
              }
            }), s3.videoCodecs = s3.videoCodecs.filter((e5) => {
              var t5, i4;
              return !("h264" === (null === (t5 = e5.rtpMap) || void 0 === t5 ? void 0 : t5.encodingName.toLocaleLowerCase()) && (null === (i4 = e5.fmtp) || void 0 === i4 ? void 0 : i4.parameters["profile-level-id"]) !== MN("FIRST_H264_PROFILE_LEVEL_ID"));
            }), MN("FILTER_SEND_H264_BASELINE") && (o3.videoCodecs = o3.videoCodecs.filter((e5) => {
              var t5, i4;
              return !("h264" === (null === (t5 = e5.rtpMap) || void 0 === t5 ? void 0 : t5.encodingName.toLocaleLowerCase()) && (null === (i4 = e5.fmtp) || void 0 === i4 ? void 0 : i4.parameters["profile-level-id"]) !== MN("FIRST_H264_PROFILE_LEVEL_ID"));
            })));
          }
          return { send: o3, recv: s3, sendrecv: a2 };
        }(e2, t2, n2);
        try {
          i2.close();
        } catch (e3) {
        }
        return { send: r2, recv: o2, sendrecv: s2 };
      }
      function IV() {
        const e2 = { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, t2 = uV(arguments.length > 2 ? arguments[2] : void 0, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, "recvonly"), i2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, n2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, r2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
        if (yV(e2, t2, "videoExtensions", i2, n2, r2), yV(e2, t2, "videoCodecs", i2, n2, r2), yV(e2, t2, "audioExtensions", i2, n2, r2), yV(e2, t2, "audioCodecs", i2, n2, r2), MN("RAISE_H264_BASELINE_PRIORITY")) {
          const e3 = r2.videoCodecs.findIndex((e4) => e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase() && e4.fmtp && "42001f" === e4.fmtp.parameters["profile-level-id"]);
          if (-1 !== e3) {
            const t3 = r2.videoCodecs.findIndex((e4) => e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase());
            if (t3 < e3) {
              lD.debug("raising H264 baseline profile priority");
              const i3 = r2.videoCodecs[e3];
              r2.videoCodecs.splice(e3, 1), r2.videoCodecs.splice(t3, 0, i3);
            }
            -1 !== t3 && (n2.videoCodecs = n2.videoCodecs.filter((e4) => !(e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase() && e4.fmtp && "42001f" !== e4.fmtp.parameters["profile-level-id"])));
          }
        }
        return { send: i2, recv: n2, sendrecv: r2 };
      }
      function yV(e2, t2, i2, n2, r2, o2) {
        if ("videoExtensions" === i2 || "audioExtensions" === i2) {
          const s2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.entry === t3.entry && e3.extensionName === t3.extensionName) return s2.push(i3), true;
            }) ? o2[i2].push(e3) : n2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === s2.indexOf(t3) && r2[i2].push(e3);
          });
        }
        if ("videoCodecs" === i2 || "audioCodecs" === i2) {
          const s2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.payloadType === t3.payloadType && JSON.stringify(e3) === JSON.stringify(t3)) return s2.push(i3), true;
            }) ? o2[i2].push(e3) : n2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === s2.indexOf(t3) && r2[i2].push(e3);
          });
        }
      }
      function AV(e2) {
        const { send: t2, recv: i2, sendrecv: n2 } = e2;
        if (!n2) {
          if (!t2 || !i2) throw new Error("cannot merge rtp capabilities because one of send or recv is empty!");
          return { send: t2, recv: i2 };
        }
        let r2, o2;
        return t2 ? (r2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, r2.audioCodecs = [...t2.audioCodecs, ...n2.audioCodecs], r2.videoCodecs = [...t2.videoCodecs, ...n2.videoCodecs], r2.audioExtensions = [...t2.audioExtensions, ...n2.audioExtensions], r2.videoExtensions = [...t2.videoExtensions, ...n2.videoExtensions]) : r2 = n2, i2 ? (o2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, o2.audioCodecs = [...i2.audioCodecs, ...n2.audioCodecs], o2.videoCodecs = [...i2.videoCodecs, ...n2.videoCodecs], o2.audioExtensions = [...i2.audioExtensions, ...n2.audioExtensions], o2.videoExtensions = [...i2.videoExtensions, ...n2.videoExtensions]) : o2 = n2, { send: r2, recv: o2 };
      }
      function bV(e2) {
        if ("audio" !== e2.media.mediaType) return;
        e2.attributes.payloads.filter((e3) => {
          var t2;
          return "opus" === (null === (t2 = e3.rtpMap) || void 0 === t2 ? void 0 : t2.encodingName.toLowerCase());
        }).forEach((e3) => {
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1";
        });
      }
      function wV(e2, t2, i2, n2) {
        let r2 = [];
        if (e2 === ax.VIDEO) {
          if (MN("H264_PROFILE_LEVEL_ID") && "h264" === n2 && (r2 = t2.videoCodecs.filter((e3) => {
            var t3;
            return kn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, n2) && e3 && e3.fmtp && e3.fmtp.parameters["profile-level-id"] === MN("H264_PROFILE_LEVEL_ID");
          })), !Array.isArray(r2) || 0 === r2.length) {
            let e3 = [];
            const o2 = [], s2 = [], a2 = [];
            if (i2.videoCodecs.forEach((t3) => {
              const i3 = t3.rtpMap && t3.rtpMap.encodingName.toLowerCase() || "";
              kn(i3).call(i3, n2) ? e3.push(t3) : kn(i3).call(i3, "vp9") ? o2.push(t3) : kn(i3).call(i3, "vp8") ? s2.push(t3) : kn(i3).call(i3, "h264") && a2.push(t3);
            }), 0 === e3.length) {
              let t3 = "";
              0 !== o2.length ? (e3 = o2, t3 = "vp9") : 0 !== s2.length ? (e3 = s2, t3 = "vp8") : 0 !== a2.length && (e3 = a2, t3 = "h264"), lD.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to default payloads: ").concat(t3));
            }
            0 !== e3.length && (r2 = t2.videoCodecs.filter((t3) => e3.some((e4) => e4.payloadType === t3.payloadType)));
          }
          if (0 === r2.length && (lD.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to default payloads: ").concat(t2.videoCodecs[0].rtpMap && t2.videoCodecs[0].rtpMap.encodingName)), r2 = t2.videoCodecs), MN("USE_PUB_RTX") || MN("USE_SUB_RTX")) {
            const e3 = OV(r2, t2.videoCodecs);
            r2 = [...r2, ...e3];
          }
        } else r2 = t2.audioCodecs.filter((e3) => {
          var t3;
          return kn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, n2);
        }), 0 === r2.length && (lD.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to opus")), r2 = t2.audioCodecs.filter((e3) => {
          var t3;
          return kn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, "opus");
        }));
        return r2;
      }
      function OV(e2, t2) {
        const i2 = e2.map((e3) => e3.payloadType.toString());
        return t2.filter((e3) => e3.rtpMap && "rtx" === e3.rtpMap.encodingName && e3.fmtp && e3.fmtp.parameters.apt && kn(i2).call(i2, e3.fmtp && e3.fmtp.parameters.apt));
      }
      async function NV(e2, t2, i2) {
        const n2 = t2.toString(), r2 = PV(n2, "offer", "remote", "exchangeSDP");
        await e2.setRemoteDescription({ type: "offer", sdp: n2 });
        const o2 = await e2.createAnswer();
        if (!o2.sdp) throw new Error("cannot get answer sdp");
        let s2 = o2.sdp;
        s2 = DV(s2, i2 || {}), null == r2 || r2(s2 || ""), await e2.setLocalDescription({ type: "answer", sdp: s2 });
      }
      function DV(e2, t2, i2) {
        const n2 = WN(e2), { useXR: r2 } = t2;
        return n2.mediaDescriptions.forEach((e3) => {
          var t3;
          e3.attributes.mid && (Array.isArray(i2) && !kn(i2).call(i2, e3.attributes.mid) || ("audio" === e3.media.mediaType && bV(e3), r2 && kn(t3 = ["audio", "video"]).call(t3, e3.media.mediaType) && e3.attributes.payloads.forEach((e4) => {
            -1 === e4.rtcpFeedbacks.findIndex((e5) => "rrtr" === e5.type) && e4.rtcpFeedbacks.push({ type: "rrtr" });
          })));
        }), HN(n2);
      }
      function PV(e2, t2, i2, n2) {
        if (MN("SDP_LOGGING")) return lD.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(n2, "\n"), e2), "offer" === t2 ? (e3) => {
          PV(e3, "answer", "local" === i2 ? "remote" : "local", n2);
        } : void 0;
      }
      function LV(e2) {
        const t2 = MN("COMPATIBLE_SDP_EXTENSION");
        return !!(Array.isArray(t2) && t2.length > 0) && t2.some((t3) => kn(e2).call(e2, t3));
      }
      function kV(e2, t2) {
        try {
          var i2;
          return (null === (i2 = e2.fmtp) || void 0 === i2 ? void 0 : i2.parameters.apt) === t2.payloadType.toString();
        } catch (e3) {
          return false;
        }
      }
      function MV(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function UV(e2, t2) {
        return typeof MN(e2) === t2 ? MN(e2) : void 0;
      }
      function xV() {
        try {
          const e2 = MN("EXPERIMENTS") || {};
          return "string" == typeof e2 || Array.isArray(e2) ? {} : function(e3) {
            for (var t2 = 1; t2 < arguments.length; t2++) {
              var i2 = null != arguments[t2] ? arguments[t2] : {};
              t2 % 2 ? MV(Object(i2), true).forEach(function(t3) {
                vy(e3, t3, i2[t3]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i2)) : MV(Object(i2)).forEach(function(t3) {
                Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(i2, t3));
              });
            }
            return e3;
          }({}, e2);
        } catch (e2) {
          return lD.debug("handle gateway attributes failed: ", e2), {};
        }
      }
      const VV = {};
      function FV(e2) {
        (!(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]) && lD.debug("install service ".concat(e2.name)), VV[e2.name] = e2;
      }
      function BV(e2) {
        const t2 = VV[e2];
        if (!t2) throw new xw(Uw.INVALID_OPERATION, "".concat(e2, " not found, please use AgoraRTC.use(").concat(e2, "Service) to load it first"));
        return t2;
      }
      function jV(e2, t2) {
        return BV("DataStream").create(e2, t2);
      }
      function GV(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function WV(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? GV(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : GV(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const HV = /* @__PURE__ */ new Map();
      class KV extends Zw {
        get state() {
          return this._state;
        }
        set state(e2) {
          if (e2 === this._state) return;
          const t2 = this._state;
          this._state = e2, "DISCONNECTED" === e2 && this._disconnectedReason ? this.emit(XU.CONNECTION_STATE_CHANGE, e2, t2, this._disconnectedReason) : this.emit(XU.CONNECTION_STATE_CHANGE, e2, t2);
        }
        get joinGatewayStartTime() {
          return this._joinGatewayStartTime;
        }
        set joinGatewayStartTime(e2) {
          lD.debug("[".concat(this.store.clientId, "] set joinGatewayStartTime at ").concat(e2)), this._joinGatewayStartTime = e2;
        }
        constructor(e2, t2) {
          var i2, n2, r2;
          super(), vy(this, "store", void 0), vy(this, "joinInfo", void 0), vy(this, "key", void 0), vy(this, "ntpOffset", 0), vy(this, "signal", void 0), vy(this, "role", void 0), vy(this, "inChannelInfo", { joinAt: null, duration: 0 }), vy(this, "spec", void 0), vy(this, "_state", "DISCONNECTED"), vy(this, "_statsCollector", void 0), vy(this, "_disconnectedReason", void 0), vy(this, "isSignalRecover", false), vy(this, "hasChangeBGPAddress", false), vy(this, "trafficStatsInterval", void 0), vy(this, "networkQualityInterval", void 0), vy(this, "_joinGatewayStartTime", 0), vy(this, "_signalTimeout", false), vy(this, "_clientRoleOptions", void 0), vy(this, "_isProactiveJoin", false), this.store = e2, this.spec = t2, this.signal = this.store.useP2P ? (i2 = { spec: WV(WV({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), store: e2 }, null === (n2 = (r2 = BV("P2PChannel")).createSubmodule) || void 0 === n2 ? void 0 : n2.call(r2, i2)) : new Wx(WV(WV({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2), this._statsCollector = t2.statsCollector, this.role = t2.role || "audience", this._clientRoleOptions = t2.clientRoleOptions, this.handleSignalEvents();
        }
        async join(e2, t2, i2) {
          this.store.joinGatewayStart(), "disabled" !== e2.cloudProxyServer && (this.hasChangeBGPAddress = true);
          const n2 = Date.now();
          let r2 = HV.get(e2.cname);
          if (r2 || (r2 = /* @__PURE__ */ new Map(), HV.set(e2.cname, r2)), this._isProactiveJoin = true, r2.has(e2.uid)) {
            const t3 = new SD(Uw.UID_CONFLICT);
            throw TD.joinGateway(e2.sid, { lts: n2, succ: false, ec: t3.code, addr: null, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!e2.proxyServer, signalChannel: "0", preload: e2.preload }), t3;
          }
          r2.set(e2.uid, true), this.joinInfo = e2, this.key = t2;
          let o2 = 0;
          this.joinGatewayStartTime = n2;
          const s2 = e2.proxyServer;
          try {
            lD.debug("[".concat(this.store.clientId, "] use websocket join uid ").concat(o2));
            const t3 = e2.gatewayAddrs.map((t4) => {
              let { address: i3 } = t4;
              const [n3, r3] = i3.split(":"), o3 = { host: n3, port: r3 };
              return e2.proxyServer && (o3.proxy = e2.proxyServer), o3;
            });
            o2 = (await this.signal.init(t3)).uid, lD.debug("[".concat(this.store.clientId, "] websocket join uid ").concat(o2, " cost ").concat(Date.now() - this.joinGatewayStartTime));
          } catch (t3) {
            var a2;
            throw lD.error("[".concat(this.store.clientId, "] User join failed"), t3.toString()), TD.joinGateway(e2.sid, { lts: n2, succ: false, ec: (null === (a2 = t3.data) || void 0 === a2 ? void 0 : a2.desc) || t3.code, errorMsg: t3.message, addr: this.signal.url, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!s2, signalChannel: "0", preload: e2.preload }), r2.delete(e2.uid), this.signal.close(), t3;
          }
          return this.state = "CONNECTED", this.inChannelInfo.joinAt = Date.now(), lD.debug("[".concat(this.store.clientId, "] Connected to gateway server")), this.trafficStatsInterval = window.setInterval(() => {
            this.updateTrafficStats().catch((e3) => {
              lD.warning("[".concat(this.store.clientId, "] get traffic stats error"), e3.toString());
            });
          }, 3e3), this.networkQualityInterval = window.setInterval(() => {
            navigator && void 0 !== navigator.onLine && !navigator.onLine ? this.emit(XU.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 }) : this._signalTimeout ? this.emit(XU.NETWORK_QUALITY, { downlinkNetworkQuality: 5, uplinkNetworkQuality: 5 }) : "CONNECTED" === this.state && this._statsCollector.trafficStats ? this.emit(XU.NETWORK_QUALITY, { uplinkNetworkQuality: Zx(this._statsCollector.trafficStats.B_unq), downlinkNetworkQuality: Zx(this._statsCollector.trafficStats.B_dnq) }) : this.emit(XU.NETWORK_QUALITY, { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 });
          }, 2e3), this.store.joinGatewayEnd(), o2;
        }
        async leave() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = arguments.length > 1 ? arguments[1] : void 0;
          if ("DISCONNECTED" !== this.state) {
            t2 !== oO.FALLBACK && (this.state = "DISCONNECTING");
            try {
              e2 || this.signal.connectionState !== bU.CONNECTED || await function(e3, t3) {
                return t3 === 1 / 0 ? e3 : np.race([e3, DO(t3)]);
              }(this.signal.request(OU.LEAVE, void 0, true), 3e3);
            } catch (e3) {
              lD.warning("[".concat(this.store.clientId, "] leave request failed, ignore"), e3);
            }
            this.signal.close(t2), t2 !== oO.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }
        }
        async publish(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
          const n2 = { state: "offer", p2p_id: this.store.p2pId, ortc: t2, mode: this.spec.mode, extend: MN("PUB_EXTEND"), twcc: !!MN("PUBLISH_TWCC"), rtx: !!MN("USE_PUB_RTX") };
          try {
            return (await this.signal.request(OU.PUBLISH, n2, true))._message;
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === AU.ERR_PUBLISH_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] receive publish error code, retry"), n3.toString()), await this.tryUnpubBeforeRepub(e2, t2), this.publish(e2, t2, false);
            throw n3;
          }
        }
        async publishDataChannel(e2, t2, i2) {
          var n2;
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
          const r2 = { stream_id: t2.streamId, ordered: t2.ordered ? 1 : 0, max_retrans_times: null !== (n2 = t2.maxRetransmits) && void 0 !== n2 ? n2 : 10, channel_id: t2.channelId, metadata: t2.metadata };
          try {
            await this.signal.request(OU.PUBLISH_DATASTREAM, r2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === AU.ERR_PUBLISH_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] receive publish datachannels error code, retry"), n3.toString()), await this.tryUnpubDataChannelBeforeRepub(e2, t2), this.publishDataChannel(e2, t2, false);
            throw n3;
          }
        }
        async unpublish(e2, t2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await this.signal.request(OU.UNPUBLISH, { stream_id: t2, ortc: e2 }, true);
          } catch (e3) {
            lD.warning("[".concat(this.store.clientId, "] unpublish warning: "), e3);
          }
        }
        async unpublishDataChannel(e2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await np.all(e2.map((e3) => this.signal.request(OU.UNPUBLISH_DATASTREAM, { channel_id: e3 }, true)));
          } catch (e3) {
            lD.warning("unpublish datachannels warning: ", e3);
          }
        }
        async presubscribe(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not presubscribe when connection state is ".concat(this.state));
          const n2 = { stream_id: e2, stream_type: t2, mode: this.spec.mode, codec: this.spec.codec, p2p_id: this.store.p2pId, twcc: !!MN("SUBSCRIBE_TWCC"), rtx: !!MN("USE_SUB_RTX") || void 0, extend: MN("SUB_EXTEND"), svc: Array.isArray(MN("SVC")) && 0 !== MN("SVC").length ? MN("SVC") : void 0 };
          try {
            return await this.signal.request(OU.PRE_SUBSCRIBE, n2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === AU.ERR_SUBSCRIBE_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] pre-subscribe error, retry"), n3.toString()), this.presubscribe(e2, t2, false);
            throw n3;
          }
        }
        async subscribe(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not subscribe when connection state is ".concat(this.state));
          const n2 = { stream_id: e2, stream_type: t2.stream_type, mode: this.spec.mode, codec: this.spec.codec, p2p_id: this.store.p2pId, twcc: !!MN("SUBSCRIBE_TWCC"), rtx: !!MN("USE_SUB_RTX"), extend: MN("SUB_EXTEND"), ssrcId: t2.ssrcId, svc: Array.isArray(MN("SVC")) && 0 !== MN("SVC").length ? MN("SVC") : void 0 };
          try {
            return (await this.signal.request(OU.SUBSCRIBE, n2, true))._message;
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === AU.ERR_SUBSCRIBE_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] receiver subscribe error code, retry"), n3.toString()), await this.tryUnsubBeforeResub(e2, t2), await this.subscribe(e2, t2, false);
            throw n3;
          }
        }
        async subscribeDataChannel(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not subscribe datachannel when connection state is ".concat(this.state));
          const n2 = { uid: e2, stream_id: t2.id, channel_id: t2.datachannelId };
          try {
            return void await this.signal.request(OU.SUBSCRIBE_DATASTREAM, n2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === AU.ERR_SUBSCRIBE_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] receiver subscribe datachannel error code, retry"), n3.toString()), await this.tryUnsubDataChannelBeforeResub(e2, t2), await this.subscribeDataChannel(e2, t2, false);
            throw n3;
          }
        }
        async subscribeAll(e2, t2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not massSubscribe when connection state is ".concat(this.state));
          const i2 = { p2p_id: this.store.p2pId, users: e2, dtx: false, rtx: !!MN("USE_SUB_RTX"), twcc: !!MN("SUBSCRIBE_TWCC"), svc: Array.isArray(MN("SVC")) && 0 !== MN("SVC").length ? MN("SVC") : void 0 };
          try {
            return await this.signal.request(OU.SUBSCRIBE_STREAMS, i2, true);
          } catch (i3) {
            if (t2 && i3.data && i3.data.code === AU.ERR_SUBSCRIBE_REQUEST_INVALID) return lD.warning("[".concat(this.store.clientId, "] receiver massSubscribe error code, retry"), i3.toString()), await this.tryMassUnsubBeforeResub(e2), await this.subscribeAll(e2, false);
            throw i3;
          }
        }
        async setVideoProfile(e2) {
          const t2 = function(e3) {
            if (!(e3.bitrateMax && e3.bitrateMin && e3.frameRate && e3.height && e3.width)) return;
            let t3 = e3.frameRate, i2 = e3.width, n2 = e3.height, r2 = true;
            return "number" != typeof t3 && (t3 = t3.exact || t3.ideal || t3.max || t3.min || 0, t3 || (r2 = false)), "number" != typeof i2 && (i2 = i2.exact || i2.ideal || i2.max || i2.min || 0, i2 || (r2 = false)), "number" != typeof n2 && (n2 = n2.exact || n2.ideal || n2.max || n2.min || 0, t3 || (r2 = false)), r2 ? { stream_type: 0, width: i2, height: n2, fps: t3, start_bps: 1e3 * e3.bitrateMax, min_bps: 1e3 * e3.bitrateMin, target_bps: 1e3 * e3.bitrateMax } : void 0;
          }(e2);
          if (t2) return this.signal.request(OU.SET_VIDEO_PROFILE, t2);
          lD.debug("[".concat(this.store.clientId, "] encoder config is not complete, do not report to gateway"));
        }
        async unsubscribe(e2, t2) {
          try {
            await this.signal.request(OU.UNSUBSCRIBE, { p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 }, true);
          } catch (e3) {
            lD.warning("[".concat(this.store.clientId, "] unsubscribe warning: "), e3);
          }
        }
        async unsubscribeDataChannel(e2, t2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state) throw new SD(Uw.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await np.all(e2.map((e3) => this.signal.request(OU.UNSUBSCRIBE_DATASTREAM, { stream_id: e3, uid: t2 }, true)));
          } catch (e3) {
            lD.warning("unsubscribeDataChannel warning: ", e3);
          }
        }
        async massUnsubscribe(e2) {
          try {
            await this.signal.request(OU.UNSUBSCRIBE_STREAMS, e2, true);
          } catch (e3) {
            lD.warning("[".concat(this.store.clientId, "] massUnsubscribeAll warning: "), e3);
          }
        }
        async reconnectPC(e2) {
          const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } = e2;
          return { gatewayEstablishParams: await this.signal.request(OU.CONNECT_PC, { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } }, true), gatewayAddress: this.getCurrentGatewayAddress() };
        }
        getGatewayInfo() {
          return this.signal.request(OU.GATEWAY_INFO);
        }
        async renewToken(e2) {
          await this.signal.request(OU.RENEW_TOKEN, e2), this.key = e2.token;
        }
        updateClientRole(e2, t2) {
          t2 && (this._clientRoleOptions = Object.assign({}, t2)), MN("CLIENT_ROLE_OPTIONS") && (lD.debug("[".concat(this.store.clientId, "] Set roleOptions for ").concat(JSON.stringify(MN("CLIENT_ROLE_OPTIONS")), " instead of ").concat(JSON.stringify(this._clientRoleOptions), " ")), this._clientRoleOptions = Object.assign({}, MN("CLIENT_ROLE_OPTIONS"))), this.role = e2;
        }
        async setClientRole(e2, t2) {
          if (t2 && (this._clientRoleOptions = Object.assign({}, t2)), MN("CLIENT_ROLE_OPTIONS") && (this._clientRoleOptions = Object.assign({}, MN("CLIENT_ROLE_OPTIONS")), lD.debug("[".concat(this.store.clientId, "] Set roleOptions for ").concat(JSON.stringify(MN("CLIENT_ROLE_OPTIONS")), " instead of ").concat(JSON.stringify(this._clientRoleOptions), " "))), "CONNECTED" !== this.state) return void (this.role = e2);
          let i2, n2 = 0;
          "audience" === e2 ? this._clientRoleOptions && this._clientRoleOptions.delay ? (i2 = this._clientRoleOptions.delay, n2 = 1) : n2 = this._clientRoleOptions && this._clientRoleOptions.level ? this._clientRoleOptions.level : 2 : n2 = 0, await this.signal.request(OU.SET_CLIENT_ROLE, { role: e2, level: n2, delay: i2, client_ts: Date.now() }), this.role = e2;
        }
        async setRemoteVideoStreamType(e2, t2) {
          await this.signal.request(OU.SWITCH_VIDEO_STREAM, { stream_id: e2, stream_type: t2 });
        }
        async setDefaultRemoteVideoStreamType(e2) {
          await this.signal.request(OU.DEFAULT_VIDEO_STREAM, { stream_type: e2 });
        }
        async setStreamFallbackOption(e2, t2) {
          await this.signal.request(OU.SET_FALLBACK_OPTION, { stream_id: e2, fallback_type: t2 });
        }
        async pickSVCLayer(e2, t2) {
          await this.signal.request(OU.PICK_SVC_LAYER, { stream_id: e2, spatial_layer: t2.spatialLayer, temporal_layer: t2.temporalLayer });
        }
        async setRTM2Flag(e2) {
          await this.signal.request(OU.SET_RTM2_FLAG, { rtm2_flag: e2 });
        }
        async sendExtensionMessage(e2, t2, i2) {
          if (this.store.useP2P) return this.signal.sendExtensionMessage(e2, t2, i2);
        }
        getInChannelInfo() {
          return this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt), WV({}, this.inChannelInfo);
        }
        async getGatewayVersion() {
          return (await this.signal.request(OU.GATEWAY_INFO)).version;
        }
        reset() {
          if (this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt, this.inChannelInfo.joinAt = null), this.trafficStatsInterval && (window.clearInterval(this.trafficStatsInterval), this.trafficStatsInterval = void 0), this.joinInfo) {
            const e2 = HV.get(this.joinInfo.cname);
            e2 && e2.delete(this.joinInfo.uid);
          }
          this.joinInfo = void 0, this.key = void 0, this.networkQualityInterval && (window.clearInterval(this.networkQualityInterval), this.networkQualityInterval = void 0);
        }
        updateTurnConfigFromSignal() {
          if (!this.joinInfo) return;
          const e2 = function(e3) {
            let t2;
            return t2 = e3.startsWith("dc") ? e3.match(/(dc\:\/\/)?([^:]+):(\d+)/) : e3.match(/(wss\:\/\/)?([^:]+):(\d+)/), t2 ? { username: wN.username, password: wN.password, turnServerURL: t2[2], tcpport: parseInt(t2[3]) + 30, udpport: parseInt(t2[3]) + 30, forceturn: false } : null;
          }(("disabled" === this.joinInfo.cloudProxyServer ? this.signal.url : this.joinInfo.gatewayAddrs[this.signal.currentURLIndex].address) || "");
          this.joinInfo.turnServer.serversFromGateway = [], e2 && "off" !== this.joinInfo.turnServer.mode && "disabled" === this.joinInfo.cloudProxyServer && this.joinInfo.turnServer.serversFromGateway.push(WV(WV({}, wN), {}, { turnServerURL: e2.turnServerURL, tcpport: e2.tcpport, udpport: e2.udpport, username: this.joinInfo.uid.toString(), password: this.joinInfo.token }));
        }
        async updateTrafficStats() {
          if ("CONNECTED" !== this.state) return;
          const e2 = await this.signal.request(OU.TRAFFIC_STATS, void 0, true);
          e2.timestamp = Date.now(), null != e2.ntp_offset && (this.ntpOffset = e2.ntp_offset), e2.peer_delay.forEach((e3) => {
            const t2 = this._statsCollector.trafficStats && this._statsCollector.trafficStats.peer_delay.find((t3) => t3.peer_uid === e3.peer_uid);
            t2 && t2.B_st !== e3.B_st && gO(() => {
              this.emit(XU.STREAM_TYPE_CHANGE, e3.peer_uid, e3.B_st);
            });
          }), this._statsCollector.updateTrafficStats(e2);
        }
        getJoinMessage(e2) {
          if (!this.joinInfo || !this.key) throw new SD(Uw.UNEXPECTED_ERROR, "can not generate join message, no join info");
          const t2 = Object.assign({}, this.joinInfo.apResponse);
          let i2 = MN("REPORT_APP_SCENARIO");
          if ("string" != typeof i2) try {
            i2 = JSON.stringify(i2);
          } catch (e3) {
            i2 = void 0;
          }
          var n2;
          i2 && i2.length > 128 && (i2 = void 0), this.store.hasStartJoinChannel = true, this.store.isABTestSuccess || this.emit(XU.UPDATE_GATEWAY_CONFIG), n2 = this.store.clientId, kn(UM).call(UM, n2) || UM.push(n2);
          const r2 = !(hw() || Ew(87) || CD()) && ("boolean" == typeof MN("ENABLE_PRE_SUB") && MN("ENABLE_PRE_SUB")), o2 = !CD() && UV("ENABLE_PREALLOC_PC", "boolean"), s2 = xV(), a2 = WV({ license: this.joinInfo.license, p2p_id: this.store.p2pId, session_id: this.joinInfo.sid, app_id: this.joinInfo.appId, channel_key: this.key, channel_name: this.joinInfo.cname, sdk_version: yN, browser: navigator.userAgent, process_id: MN("PROCESS_ID"), mode: this.store.useP2P ? "p2p" : this.spec.mode, codec: this.spec.codec, role: this.role, has_changed_gateway: this.hasChangeBGPAddress, ap_response: t2, extend: MN("JOIN_EXTEND"), details: { 6: this.joinInfo.stringUid, cservice_map: "proxy3" === this.joinInfo.cloudProxyServer ? "1" : "proxy5" === this.joinInfo.cloudProxyServer ? "2" : void 0 }, features: { rejoin: true }, optionalInfo: this.joinInfo.optionalInfo, appScenario: i2, attributes: { userAttributes: WV({ enableEncodedTransform: !!MN("ENABLE_AUDIO_METADATA") && _w(87) || !!MN("ENABLE_AUDIO_TOPN") && mw(ew.CHROME, 87, 116) || void 0, enableAudioMetadata: !!MN("ENABLE_AUDIO_METADATA") && _w(87), topnSmoothLevel: MN("TOPN_SMOOTH_LEVEL"), topnNewSpeakerDelay: MN("TOPN_NEW_SPEAKER_DELAY"), topnSwitchHoldMs: MN("TOPN_SWITCH_HOLD_MS"), topnAudioGain: MN("TOPN_AUDIO_GAIN"), enablePublishedUserList: MN("ENABLE_PUBLISHED_USER_LIST"), maxSubscription: MN("MAX_SUBSCRIPTION"), subscribeAudioFilterTopN: UV("SUBSCRIBE_AUDIO_FILTER_TOPN", "number"), enablePublishAudioFilter: UV("ENABLE_PUBLISH_AUDIO_FILTER", "boolean"), enableUserLicenseCheck: UV("ENABLE_USER_LICENSE_CHECK", "boolean"), enableRTX: true === MN("USE_PUB_RTX") || true === MN("USE_SUB_RTX") || void 0, disableFEC: MN("DISABLE_FEC"), enableNTPReport: !!MN("ENABLE_NTP_REPORT") || void 0, enableInstantVideo: !!MN("ENABLE_INSTANT_VIDEO") || void 0, enableFulllinkAvSync: !!MN("ENABLE_FULL_LINK_AV_SYNC") || void 0, enableDataStream2: UV("ENABLE_DATASTREAM_2", "boolean"), enableAutFeedback: !!MN("ENABLE_AUT_FEEDBACK") || void 0, rtm2Flag: "number" == typeof this.joinInfo.rtmFlag ? this.joinInfo.rtmFlag : void 0, enableUserAutoRebalanceCheck: !!MN("ENABLE_USER_AUTO_REBALANCE_CHECK"), enableXR: UV("USE_XR", "boolean"), enableLossbasedBwe: UV("ENABLE_LOSSBASED_BWE", "boolean"), enableAutCC: !!MN("ENABLE_AUT_CC") || void 0, enableCCFallback: UV("ENABLE_CC_FALLBACK", "boolean"), enablePreallocPC: o2, preSubNum: r2 ? UV("PRE_SUB_NUM", "number") : void 0, enablePubTWCC: UV("PUBLISH_TWCC", "boolean"), enableSubTWCC: UV("SUBSCRIBE_TWCC", "boolean"), enablePubRTX: UV("USE_PUB_RTX", "boolean"), enableSubRTX: UV("USE_SUB_RTX", "boolean"), enableSubSVC: MN("ENABLE_SVC") ? MN("ENABLE_SVC_DEFAULT_CODECS") : Array.isArray(MN("SVC")) && 0 !== MN("SVC").length ? MN("SVC") : void 0, enableSvcExtended: MN("ENABLE_SVC") && Array.isArray(MN("SVC_EXTENDED")) && 0 !== MN("SVC_EXTENDED").length ? MN("SVC_EXTENDED") : void 0 }, s2) }, join_ts: this.joinGatewayStartTime }, e2);
          return this.joinInfo.stringUid && (a2.string_uid = this.joinInfo.stringUid), this.joinInfo.aesmode && this.joinInfo.aespassword && (a2.aes_mode = this.joinInfo.aesmode, MN("ENCRYPT_AES") ? (a2.aes_secret = this.joinInfo.aespassword, a2.aes_encrypt = true) : a2.aes_secret = this.joinInfo.aespassword, this.joinInfo.aessalt && (a2.aes_salt = this.joinInfo.aessalt)), t2.addresses[this.signal.websocket.currentURLIndex] && (a2.ap_response.ticket = t2.addresses[this.signal.websocket.currentURLIndex].ticket, delete t2.addresses), void 0 !== this.joinInfo.defaultVideoStream && (a2.default_video_stream = this.joinInfo.defaultVideoStream), a2;
        }
        getRejoinMessage() {
          if (!this.joinInfo) throw new SD(Uw.UNEXPECTED_ERROR, "can not generate rejoin message, no join info");
          return { session_id: this.joinInfo.sid, channel_name: this.joinInfo.cname, cid: this.joinInfo.cid, uid: this.joinInfo.uid, vid: Number(this.joinInfo.vid) };
        }
        handleSignalEvents() {
          this.signal.on(wU.WS_RECONNECT_CREATE_CONNECTION, (e2) => {
            this.joinGatewayStartTime = Date.now();
          }), this.signal.on(wU.WS_RECONNECTING, (e2) => {
            this.joinInfo && TD.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: e2 || lO.NETWORK_ERROR }), this.joinInfo && (this.state = "RECONNECTING", TD.sessionInit(this.joinInfo.sid, { lts: (/* @__PURE__ */ new Date()).getTime(), extend: this.isSignalRecover ? { recover: true } : { rejoin: true }, cname: this.joinInfo.cname, appid: this.joinInfo.appId, mode: this.spec.mode, stringUid: this.joinInfo.stringUid, channelProfile: "live" === this.spec.mode ? 1 : 0, channelMode: 0, lsid: this.joinInfo.sid, clientRole: "audience" === this.role ? 2 : 1, buildFormat: 1 }), this.isSignalRecover = false, this.joinGatewayStartTime = Date.now());
          }), this.signal.on(wU.WS_CLOSED, (e2) => {
            let t2;
            switch (e2) {
              case oO.LEAVE:
                t2 = lO.LEAVE;
                break;
              case oO.UID_BANNED:
              case oO.IP_BANNED:
              case oO.CHANNEL_BANNED:
              case oO.SERVER_ERROR:
                t2 = lO.SERVER_ERROR;
                break;
              case oO.FALLBACK:
                t2 = lO.FALLBACK;
                break;
              case oO.LICENSE_MISSING:
              case oO.LICENSE_EXPIRED:
              case oO.LICENSE_MINUTES_EXCEEDED:
              case oO.LICENSE_PERIOD_INVALID:
              case oO.LICENSE_MULTIPLE_SDK_SERVICE:
              case oO.LICENSE_ILLEGAL:
              case oO.TOKEN_EXPIRE:
                t2 = e2;
                break;
              default:
                t2 = lO.NETWORK_ERROR;
            }
            lD.debug("[".concat(this.store.clientId, "] [signal] websocket closed, reason: ").concat(t2 || "undefined -> " + lO.NETWORK_ERROR)), this.joinInfo && TD.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: e2 === oO.LEAVE ? 1 : -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: t2 }), this._disconnectedReason = e2, e2 !== oO.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }), this.signal.on(wU.WS_CONNECTED, () => {
            if (this.updateTurnConfigFromSignal(), this.state = "CONNECTED", this.joinInfo) {
              if ("audience" === this.role) {
                const e2 = MN("CLIENT_ROLE_OPTIONS") || this._clientRoleOptions;
                e2 && (e2.level || e2.delay) && (lD.debug("[".concat(this.store.clientId, "] patch to send set client role, role: ").concat(this.role, ", mode: ").concat(this.spec.mode, ", level: ").concat(e2.level, ", delay: ").concat(e2.delay)), this.setClientRole(this.role, e2));
              }
              if (TD.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: true, ec: null, vid: this.joinInfo.vid, addr: this.signal.url, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: "0", preload: this.joinInfo.preload, isABTestSuccess: this.store.isABTestSuccess }), this._isProactiveJoin = false, this.joinInfo.useLocalAccessPoint && 1 === this.joinInfo.setLocalAPVersion) {
                const e2 = this.signal.url && this.signal.url.match(/wss\:\/\/([^:]+):(\d+)/);
                if (!e2) return void lD.error("[".concat(this.store.clientId, "] set local access point after joined failed: ").concat(e2));
                kN("EVENT_REPORT_DOMAIN", e2[1]), kN("EVENT_REPORT_BACKUP_DOMAIN", e2[1]), kN("LOG_UPLOAD_SERVER", "".concat(e2[1], ":6444"));
              }
            }
          }), this.signal.on(DU.ON_UPLINK_STATS, (e2) => {
            this._statsCollector.updateUplinkStats(e2);
          }), this.signal.on(wU.REQUEST_RECOVER, (e2, t2, i2) => {
            if (!this.joinInfo) return i2(new SD(Uw.UNEXPECTED_ERROR, "gateway: can not recover, no join info"));
            e2 && (this.joinInfo.multiIP = e2, this.hasChangeBGPAddress = true), this.isSignalRecover = true, pO(this, XU.REQUEST_NEW_GATEWAY_LIST).then(t2).catch(i2);
          }), this.signal.on(wU.REQUEST_JOIN_INFO, async (e2, t2, i2) => {
            var n2;
            if (this.updateTurnConfigFromSignal(), this.store.useP2P) return void e2(this.getJoinMessage({ ortc: {} }));
            const { iceParameters: r2, dtlsParameters: o2, rtpCapabilities: s2 } = await pO(this, XU.REQUEST_P2P_CONNECTION_PARAMS, { turnServer: null === (n2 = this.joinInfo) || void 0 === n2 ? void 0 : n2.turnServer });
            try {
              e2(this.getJoinMessage({ ortc: { iceParameters: r2, dtlsParameters: o2, rtpCapabilities: s2, version: "2" } }));
            } catch (e3) {
              t2(e3);
            }
          }), this.signal.on(wU.REQUEST_REJOIN_INFO, (e2) => {
            e2(this.getRejoinMessage());
          }), this.signal.on(wU.REPORT_JOIN_GATEWAY, (e2, t2) => {
            if (!this.joinInfo) return;
            let i2, n2 = "";
            var r2;
            e2 instanceof SD ? (i2 = (null === (r2 = e2.data) || void 0 === r2 ? void 0 : r2.desc) || e2.code, n2 = e2.message) : i2 = e2;
            TD.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: false, ec: i2, errorMsg: n2, addr: t2, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: "0", preload: this.joinInfo.preload });
          }), this.signal.on(wU.IS_P2P_DISCONNECTED, (e2) => {
            e2(mO(this, XU.IS_P2P_DISCONNECTED));
          }), this.signal.on(wU.DISCONNECT_P2P, () => {
            this.emit(XU.DISCONNECT_P2P);
          }), this.signal.on(wU.REQUEST_SUCCESS, () => {
            this._signalTimeout = false;
          }), this.signal.on(wU.REQUEST_TIMEOUT, () => {
            this._signalTimeout = true;
          }), this.signal.on(wU.JOIN_RESPONSE, (e2) => {
            const t2 = this.getCurrentGatewayAddress();
            this.emit(XU.JOIN_RESPONSE, e2, t2);
          }), this.signal.on(wU.PRE_CONNECT_PC, async () => {
            if (this.joinInfo) {
              this.updateTurnConfigFromSignal();
              const e2 = this.getCurrentGatewayAddress(), t2 = MN("FINGERPRINT") || this.joinInfo.apResponse.addresses[this.signal.currentURLIndex].fingerprint;
              if (e2 && t2) {
                const i2 = EV(e2);
                this.emit(XU.PRE_CONNECT_PC, { candidates: i2, fingerprint: t2 });
              }
            }
          }), this.signal.on(wU.RECOVER_NOTIFICATION, (e2) => {
            this.joinInfo && "string" == typeof MN("AP_REQUEST_DETAIL") && (this.joinInfo.apRequestDetail = "".concat(MN("AP_REQUEST_DETAIL"), ";").concat(e2));
          });
        }
        async tryUnsubBeforeResub(e2, t2) {
          try {
            await this.signal.request(OU.UNSUBSCRIBE, { p2p_id: this.store.p2pId, stream_id: e2, ortc: [t2] }, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] tryUnsubBeforeResub warning"), e3), e3;
          }
        }
        async tryUnsubDataChannelBeforeResub(e2, t2) {
          try {
            await this.signal.request(OU.UNSUBSCRIBE, { stream_id: t2.id }, true);
          } catch (e3) {
            throw lD.warning("unsubscribe datachannel warning", e3), e3;
          }
        }
        async tryUnpubBeforeRepub(e2, t2) {
          try {
            await this.signal.request(OU.UNPUBLISH, { stream_id: e2, ortc: t2 }, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] tryUnpubBeforeRepub warning: "), e3), e3;
          }
        }
        async tryUnpubDataChannelBeforeRepub(e2, t2) {
          try {
            await this.signal.request(OU.UNPUBLISH_DATASTREAM, { channnel_id: t2.channelId }, true);
          } catch (e3) {
            throw lD.warning("unpublish datastream warning: ", e3), e3;
          }
        }
        async tryMassUnsubBeforeResub(e2) {
          const t2 = { users: e2.map((e3) => ({ stream_id: e3.stream_id, stream_type: e3.stream_type })) };
          try {
            await this.signal.request(OU.UNSUBSCRIBE_STREAMS, t2, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] tryMassUnsubBeforeResub warning"), e3), e3;
          }
        }
        async muteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === JU.Audio) ? "mute_local_audio" : "mute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(OU.CONTROL, i2, true, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] gateway muteLocal warning: "), e3), e3;
          }
        }
        async unmuteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === JU.Audio) ? "unmute_local_audio" : "unmute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(OU.CONTROL, i2, true, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] gateway unmuteLocal warning: "), e3), e3;
          }
        }
        async muteRemote(e2, t2) {
          const i2 = { action: e2 === ax.AUDIO ? "mute_remote_audio" : "mute_remote_video", p2p_id: this.store.p2pId, stream_id: t2 };
          try {
            await this.signal.request(OU.CONTROL, i2, true, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] gateway muteRemote warning: "), e3), e3;
          }
        }
        async unmuteRemote(e2, t2) {
          const i2 = { action: e2 === ax.AUDIO ? "unmute_remote_audio" : "unmute_remote_video", p2p_id: this.store.p2pId, stream_id: t2 };
          try {
            await this.signal.request(OU.CONTROL, i2, true, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] gateway unmuteRemote warning: "), e3), e3;
          }
        }
        uploadWRTCStats(e2) {
          this.signal.uploadWRTCStats(e2);
        }
        upload(e2, t2) {
          this.signal.upload(e2, t2);
        }
        getSignalRTT() {
          return this.signal.rtt;
        }
        async restartICE(e2) {
          const t2 = { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: e2 };
          try {
            return await this.signal.request(OU.RESTART_ICE, t2, true);
          } catch (e3) {
            throw lD.warning("[".concat(this.store.clientId, "] P2PChannel.restartICE warning: "), e3), e3;
          }
        }
        reconnect(e2, t2) {
          "CONNECTED" === this.state && this.signal.reconnect(e2 || void 0, t2 || lO.P2P_FAILED);
        }
        getCurrentGatewayAddress() {
          var e2, t2;
          if (!MN("GATEWAY_WSS_ADDRESS")) return MN("USE_CANDIDATE_FROM_AP_DETAIL") && null !== (e2 = this.joinInfo) && void 0 !== e2 && e2.apGatewayAddress ? (lD.debug("[".concat(this.store.clientId, "] use candidate from ap detail, ").concat(JSON.stringify(this.joinInfo.apGatewayAddress))), this.joinInfo.apGatewayAddress) : null !== (t2 = this.joinInfo) && void 0 !== t2 && t2.gatewayAddrs ? this.joinInfo.gatewayAddrs[this.signal.currentURLIndex] : void 0;
        }
        async setPublishAudioFilterEnabled(e2) {
          await this.signal.request(OU.SET_PARAMETER, { enablePublishAudioFilter: e2 });
        }
      }
      let YV = 0, qV = 0;
      function zV(e2, t2, i2, n2) {
        return new np((r2, o2) => {
          t2.timeout = t2.timeout || MN("HTTP_CONNECT_TIMEOUT"), t2.responseType = t2.responseType || "json", t2.data && !i2 ? (t2.data = JSON.stringify(t2.data), YV += OO(t2.data)) : i2 && (t2.data.size ? YV += t2.data.size : t2.data instanceof FormData ? YV += NO(t2.data) : YV += OO(JSON.stringify(t2.data))), t2.headers = t2.headers || {}, t2.headers["Content-Type"] = t2.headers["Content-Type"] || "application/json", t2.method = "POST", t2.url = e2, qb.request(t2).then((e3) => {
            "string" == typeof e3.data ? qV += OO(e3.data) : e3.data instanceof ArrayBuffer || e3.data instanceof Uint8Array ? qV += e3.data.byteLength : qV += OO(JSON.stringify(e3.data)), n2 && r2({ data: e3.data, headers: e3.headers }), r2(e3.data);
          }).catch((e3) => {
            qb.isCancel(e3) ? o2(new SD(Uw.OPERATION_ABORTED, "cancel token canceled")) : "ECONNABORTED" === e3.code ? o2(new SD(Uw.NETWORK_TIMEOUT, e3.message)) : e3.response ? o2(new SD(Uw.NETWORK_RESPONSE_ERROR, e3.response.status)) : o2(new SD(Uw.NETWORK_ERROR, e3.message));
          });
        });
      }
      !function() {
        var e2;
        function i2(e3) {
          var t2 = 0;
          return function() {
            return t2 < e3.length ? { done: false, value: e3[t2++] } : { done: true };
          };
        }
        var n2 = "function" == typeof Object.defineProperties ? Object.defineProperty : function(e3, t2, i3) {
          return e3 == Array.prototype || e3 == Object.prototype || (e3[t2] = i3.value), e3;
        };
        var r2, o2 = function(e3) {
          e3 = ["object" == typeof globalThis && globalThis, e3, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof t && t];
          for (var i3 = 0; i3 < e3.length; ++i3) {
            var n3 = e3[i3];
            if (n3 && n3.Math == Math) return n3;
          }
          throw Error("Cannot find global object");
        }(this);
        function s2(e3, t2) {
          if (t2) e: {
            var i3 = o2;
            e3 = e3.split(".");
            for (var r3 = 0; r3 < e3.length - 1; r3++) {
              var s3 = e3[r3];
              if (!(s3 in i3)) break e;
              i3 = i3[s3];
            }
            (t2 = t2(r3 = i3[e3 = e3[e3.length - 1]])) != r3 && null != t2 && n2(i3, e3, { configurable: true, writable: true, value: t2 });
          }
        }
        function a2(e3) {
          return (e3 = { next: e3 })[Symbol.iterator] = function() {
            return this;
          }, e3;
        }
        function c2(e3) {
          var t2 = "undefined" != typeof Symbol && Symbol.iterator && e3[Symbol.iterator];
          return t2 ? t2.call(e3) : { next: i2(e3) };
        }
        if (s2("Symbol", function(e3) {
          function t2(e4, t3) {
            this.A = e4, n2(this, "description", { configurable: true, writable: true, value: t3 });
          }
          if (e3) return e3;
          t2.prototype.toString = function() {
            return this.A;
          };
          var i3 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", r3 = 0;
          return function e4(n3) {
            if (this instanceof e4) throw new TypeError("Symbol is not a constructor");
            return new t2(i3 + (n3 || "") + "_" + r3++, n3);
          };
        }), s2("Symbol.iterator", function(e3) {
          if (e3) return e3;
          e3 = Symbol("Symbol.iterator");
          for (var t2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), r3 = 0; r3 < t2.length; r3++) {
            var s3 = o2[t2[r3]];
            "function" == typeof s3 && "function" != typeof s3.prototype[e3] && n2(s3.prototype, e3, { configurable: true, writable: true, value: function() {
              return a2(i2(this));
            } });
          }
          return e3;
        }), "function" == typeof Object.setPrototypeOf) r2 = Object.setPrototypeOf;
        else {
          var d2;
          e: {
            var l2 = {};
            try {
              l2.__proto__ = { a: true }, d2 = l2.a;
              break e;
            } catch (e3) {
            }
            d2 = false;
          }
          r2 = d2 ? function(e3, t2) {
            if (e3.__proto__ = t2, e3.__proto__ !== t2) throw new TypeError(e3 + " is not extensible");
            return e3;
          } : null;
        }
        var u2 = r2;
        function h2() {
          this.m = false, this.j = null, this.v = void 0, this.h = 1, this.u = this.C = 0, this.l = null;
        }
        function p2(e3) {
          if (e3.m) throw new TypeError("Generator is already running");
          e3.m = true;
        }
        function _2(e3, t2) {
          return e3.h = 3, { value: t2 };
        }
        function E2(e3) {
          this.g = new h2(), this.G = e3;
        }
        function m2(e3, t2, i3, n3) {
          try {
            var r3 = t2.call(e3.g.j, i3);
            if (!(r3 instanceof Object)) throw new TypeError("Iterator result " + r3 + " is not an object");
            if (!r3.done) return e3.g.m = false, r3;
            var o3 = r3.value;
          } catch (t3) {
            return e3.g.j = null, e3.g.s(t3), f2(e3);
          }
          return e3.g.j = null, n3.call(e3.g, o3), f2(e3);
        }
        function f2(e3) {
          for (; e3.g.h; ) try {
            var t2 = e3.G(e3.g);
            if (t2) return e3.g.m = false, { value: t2.value, done: false };
          } catch (t3) {
            e3.g.v = void 0, e3.g.s(t3);
          }
          if (e3.g.m = false, e3.g.l) {
            if (t2 = e3.g.l, e3.g.l = null, t2.F) throw t2.D;
            return { value: t2.return, done: true };
          }
          return { value: void 0, done: true };
        }
        function T2(e3) {
          this.next = function(t2) {
            return e3.o(t2);
          }, this.throw = function(t2) {
            return e3.s(t2);
          }, this.return = function(t2) {
            return function(e4, t3) {
              p2(e4.g);
              var i3 = e4.g.j;
              return i3 ? m2(e4, "return" in i3 ? i3.return : function(e5) {
                return { value: e5, done: true };
              }, t3, e4.g.return) : (e4.g.return(t3), f2(e4));
            }(e3, t2);
          }, this[Symbol.iterator] = function() {
            return this;
          };
        }
        function S2(e3, t2) {
          return t2 = new T2(new E2(t2)), u2 && e3.prototype && u2(t2, e3.prototype), t2;
        }
        if (h2.prototype.o = function(e3) {
          this.v = e3;
        }, h2.prototype.s = function(e3) {
          this.l = { D: e3, F: true }, this.h = this.C || this.u;
        }, h2.prototype.return = function(e3) {
          this.l = { return: e3 }, this.h = this.u;
        }, E2.prototype.o = function(e3) {
          return p2(this.g), this.g.j ? m2(this, this.g.j.next, e3, this.g.o) : (this.g.o(e3), f2(this));
        }, E2.prototype.s = function(e3) {
          return p2(this.g), this.g.j ? m2(this, this.g.j.throw, e3, this.g.o) : (this.g.s(e3), f2(this));
        }, s2("Array.prototype.entries", function(e3) {
          return e3 || function() {
            return function(e4, t2) {
              e4 instanceof String && (e4 += "");
              var i3 = 0, n3 = false, r3 = { next: function() {
                if (!n3 && i3 < e4.length) {
                  var r4 = i3++;
                  return { value: t2(r4, e4[r4]), done: false };
                }
                return n3 = true, { done: true, value: void 0 };
              } };
              return r3[Symbol.iterator] = function() {
                return r3;
              }, r3;
            }(this, function(e4, t2) {
              return [e4, t2];
            });
          };
        }), "undefined" != typeof Blob && ("undefined" == typeof FormData || !FormData.prototype.keys)) {
          var g2 = function(e3, t2) {
            for (var i3 = 0; i3 < e3.length; i3++) t2(e3[i3]);
          }, R2 = function(e3) {
            return e3.replace(/\r?\n|\r/g, "\r\n");
          }, v2 = function(e3, t2, i3) {
            return t2 instanceof Blob ? (i3 = void 0 !== i3 ? String(i3 + "") : "string" == typeof t2.name ? t2.name : "blob", t2.name === i3 && "[object Blob]" !== Object.prototype.toString.call(t2) || (t2 = new File([t2], i3)), [String(e3), t2]) : [String(e3), String(t2)];
          }, C2 = function(e3, t2) {
            if (e3.length < t2) throw new TypeError(t2 + " argument required, but only " + e3.length + " present.");
          }, I2 = "object" == typeof globalThis ? globalThis : "object" == typeof window ? window : "object" == typeof self ? self : this, y2 = I2.FormData, A2 = I2.XMLHttpRequest && I2.XMLHttpRequest.prototype.send, b2 = I2.Request && I2.fetch, w2 = I2.navigator && I2.navigator.sendBeacon, O2 = I2.Element && I2.Element.prototype, N2 = I2.Symbol && Symbol.toStringTag;
          N2 && (Blob.prototype[N2] || (Blob.prototype[N2] = "Blob"), "File" in I2 && !File.prototype[N2] && (File.prototype[N2] = "File"));
          try {
            new File([], "");
          } catch (e3) {
            I2.File = function(e4, t2, i3) {
              return e4 = new Blob(e4, i3 || {}), Object.defineProperties(e4, { name: { value: t2 }, lastModified: { value: +(i3 && void 0 !== i3.lastModified ? new Date(i3.lastModified) : /* @__PURE__ */ new Date()) }, toString: { value: function() {
                return "[object File]";
              } } }), N2 && Object.defineProperty(e4, N2, { value: "File" }), e4;
            };
          }
          var D2 = function(e3) {
            return e3.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
          }, P2 = function(e3) {
            this.i = [];
            var t2 = this;
            e3 && g2(e3.elements, function(e4) {
              if (e4.name && !e4.disabled && "submit" !== e4.type && "button" !== e4.type && !e4.matches("form fieldset[disabled] *")) if ("file" === e4.type) {
                var i3 = e4.files && e4.files.length ? e4.files : [new File([], "", { type: "application/octet-stream" })];
                g2(i3, function(i4) {
                  t2.append(e4.name, i4);
                });
              } else "select-multiple" === e4.type || "select-one" === e4.type ? g2(e4.options, function(i4) {
                !i4.disabled && i4.selected && t2.append(e4.name, i4.value);
              }) : "checkbox" === e4.type || "radio" === e4.type ? e4.checked && t2.append(e4.name, e4.value) : (i3 = "textarea" === e4.type ? R2(e4.value) : e4.value, t2.append(e4.name, i3));
            });
          };
          if ((e2 = P2.prototype).append = function(e3, t2, i3) {
            C2(arguments, 2), this.i.push(v2(e3, t2, i3));
          }, e2.delete = function(e3) {
            C2(arguments, 1);
            var t2 = [];
            e3 = String(e3), g2(this.i, function(i3) {
              i3[0] !== e3 && t2.push(i3);
            }), this.i = t2;
          }, e2.entries = function e3() {
            var t2, i3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = 0), 3 != e4.h) return t2 < i3.i.length ? e4 = _2(e4, i3.i[t2]) : (e4.h = 0, e4 = void 0), e4;
              t2++, e4.h = 2;
            });
          }, e2.forEach = function(e3, t2) {
            C2(arguments, 1);
            for (var i3 = c2(this), n3 = i3.next(); !n3.done; n3 = i3.next()) {
              var r3 = c2(n3.value);
              n3 = r3.next().value, r3 = r3.next().value, e3.call(t2, r3, n3, this);
            }
          }, e2.get = function(e3) {
            C2(arguments, 1);
            var t2 = this.i;
            e3 = String(e3);
            for (var i3 = 0; i3 < t2.length; i3++) if (t2[i3][0] === e3) return t2[i3][1];
            return null;
          }, e2.getAll = function(e3) {
            C2(arguments, 1);
            var t2 = [];
            return e3 = String(e3), g2(this.i, function(i3) {
              i3[0] === e3 && t2.push(i3[1]);
            }), t2;
          }, e2.has = function(e3) {
            C2(arguments, 1), e3 = String(e3);
            for (var t2 = 0; t2 < this.i.length; t2++) if (this.i[t2][0] === e3) return true;
            return false;
          }, e2.keys = function e3() {
            var t2, i3, n3, r3, o3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(o3), i3 = t2.next()), 3 != e4.h) return i3.done ? void (e4.h = 0) : (n3 = i3.value, r3 = c2(n3), _2(e4, r3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, e2.set = function(e3, t2, i3) {
            C2(arguments, 2), e3 = String(e3);
            var n3 = [], r3 = v2(e3, t2, i3), o3 = true;
            g2(this.i, function(t3) {
              t3[0] === e3 ? o3 && (o3 = !n3.push(r3)) : n3.push(t3);
            }), o3 && n3.push(r3), this.i = n3;
          }, e2.values = function e3() {
            var t2, i3, n3, r3, o3 = this;
            return S2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(o3), i3 = t2.next()), 3 != e4.h) return i3.done ? void (e4.h = 0) : (n3 = i3.value, (r3 = c2(n3)).next(), _2(e4, r3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, P2.prototype._asNative = function() {
            for (var e3 = new y2(), t2 = c2(this), i3 = t2.next(); !i3.done; i3 = t2.next()) {
              var n3 = c2(i3.value);
              i3 = n3.next().value, n3 = n3.next().value, e3.append(i3, n3);
            }
            return e3;
          }, P2.prototype._blob = function() {
            var e3 = "----formdata-polyfill-" + Math.random(), t2 = [], i3 = "--" + e3 + '\r\nContent-Disposition: form-data; name="';
            return this.forEach(function(e4, n3) {
              return "string" == typeof e4 ? t2.push(i3 + D2(R2(n3)) + '"\r\n\r\n' + R2(e4) + "\r\n") : t2.push(i3 + D2(R2(n3)) + '"; filename="' + D2(e4.name) + '"\r\nContent-Type: ' + (e4.type || "application/octet-stream") + "\r\n\r\n", e4, "\r\n");
            }), t2.push("--" + e3 + "--"), new Blob(t2, { type: "multipart/form-data; boundary=" + e3 });
          }, P2.prototype[Symbol.iterator] = function() {
            return this.entries();
          }, P2.prototype.toString = function() {
            return "[object FormData]";
          }, O2 && !O2.matches && (O2.matches = O2.matchesSelector || O2.mozMatchesSelector || O2.msMatchesSelector || O2.oMatchesSelector || O2.webkitMatchesSelector || function(e3) {
            for (var t2 = (e3 = (this.document || this.ownerDocument).querySelectorAll(e3)).length; 0 <= --t2 && e3.item(t2) !== this; ) ;
            return -1 < t2;
          }), N2 && (P2.prototype[N2] = "FormData"), A2) {
            var L2 = I2.XMLHttpRequest.prototype.setRequestHeader;
            I2.XMLHttpRequest.prototype.setRequestHeader = function(e3, t2) {
              L2.call(this, e3, t2), "content-type" === e3.toLowerCase() && (this.B = true);
            }, I2.XMLHttpRequest.prototype.send = function(e3) {
              e3 instanceof P2 ? (e3 = e3._blob(), this.B || this.setRequestHeader("Content-Type", e3.type), A2.call(this, e3)) : A2.call(this, e3);
            };
          }
          b2 && (I2.fetch = function(e3, t2) {
            return t2 && t2.body && t2.body instanceof P2 && (t2.body = t2.body._blob()), b2.call(this, e3, t2);
          }), w2 && (I2.navigator.sendBeacon = function(e3, t2) {
            return t2 instanceof P2 && (t2 = t2._asNative()), w2.call(this, e3, t2);
          }), I2.FormData = P2;
        }
      }();
      const JV = () => {
        const e2 = MN("AREAS");
        0 === e2.length && e2.push($U.GLOBAL);
        return rr(e2).call(e2, (e3, t2, i2) => {
          const n2 = XV(t2);
          return n2 ? 0 === i2 ? n2 : "".concat(e3, ",").concat(n2) : e3;
        }, "");
      }, XV = (e2) => e2 === $U.OVERSEA ? "".concat(tx.ASIA, ",").concat(tx.EUROPE, ",").concat(tx.AFRICA, ",").concat(tx.NORTH_AMERICA, ",").concat(tx.SOUTH_AMERICA, ",").concat(tx.OCEANIA) : tx[e2], QV = { GLOBAL: { ASIA: [$U.CHINA, $U.JAPAN, $U.INDIA, $U.KOREA, $U.HKMC], EUROPE: [], NORTH_AMERICA: [$U.US], SOUTH_AMERICA: [], OCEANIA: [], AFRICA: [] } }, ZV = Object.keys(QV[$U.GLOBAL]), $V = [$U.CHINA, $U.NORTH_AMERICA, $U.EUROPE, $U.ASIA, $U.JAPAN, $U.INDIA, $U.OCEANIA, $U.SOUTH_AMERICA, $U.AFRICA, $U.KOREA, $U.HKMC, $U.US], eF = function(e2, t2) {
        let i2 = [];
        if (kn(e2).call(e2, $U.GLOBAL)) {
          const o2 = [$U.GLOBAL, $U.OVERSEA], s2 = Object.keys(ix);
          if (t2 === $U.GLOBAL) throw new SD(Uw.INVALID_PARAMS, "GLOBAL is an invalid excludedArea value");
          if (t2 === $U.CHINA) i2 = [$U.OVERSEA];
          else if (r2 = t2, kn(ZV).call(ZV, r2)) {
            const e3 = (n2 = t2, QV[$U.GLOBAL][n2] || []), r3 = [...o2, t2, ...e3];
            i2 = s2.filter((e4) => !kn(r3).call(r3, e4));
          } else if (function(e3) {
            let t3 = false;
            return ZV.forEach((i3) => {
              var n3;
              kn(n3 = QV[$U.GLOBAL][i3]).call(n3, e3) && (t3 = true);
            }), t3;
          }(t2)) {
            const e3 = function(e4) {
              let t3;
              return ZV.forEach((i3) => {
                var n4;
                kn(n4 = QV[$U.GLOBAL][i3]).call(n4, e4) && (t3 = i3);
              }), t3;
            }(t2), n3 = [...o2, e3, t2];
            i2 = s2.filter((e4) => !kn(n3).call(n3, e4));
          } else i2 = e2;
          i2 = function(e3) {
            const t3 = [];
            return $V.forEach((i3) => {
              kn(e3).call(e3, i3) && t3.push(i3);
            }), t3.concat(e3.filter((e4) => !kn($V).call($V, e4)));
          }(i2);
        } else i2 = e2;
        var n2, r2;
        return i2;
      };
      function tF(e2) {
        var t2, i2;
        if (!e2 && kn(t2 = MN("AREAS")).call(t2, $U.EXTENSIONS)) return lD.debug("update area from ap : reset"), void iF(LM, true);
        if (!kn(i2 = MN("AREAS")).call(i2, $U.GLOBAL) || !e2) return;
        let n2 = ix.EXTENSIONS;
        n2 && (n2 = { CODE: XV($U.EXTENSIONS), WEBCS_DOMAIN: ["ap-web-1-".concat(e2, ".agora.io")], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-".concat(e2, ".ap.sd-rtn.com")], PROXY_CS: ["proxy-ap-web-".concat(e2, ".agora.io")], CDS_AP: ["cds-ap-web-1-".concat(e2, ".agora.io"), "cds-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], ACCOUNT_REGISTER: ["sua-ap-web-1-".concat(e2, ".agora.io"), "sua-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], UAP_AP: ["uap-ap-web-1-".concat(e2, ".agora.io"), "uap-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], EVENT_REPORT_DOMAIN: ["statscollector-1-".concat(e2, ".agora.io")], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-".concat(e2, ".agora.io")], LOG_UPLOAD_SERVER: ["logservice-".concat(e2, ".agora.io")], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy-".concat(e2, ".agora.io")] }, lD.debug("update area from ap success: ".concat(e2, ",config is "), n2), kN("AREAS", [$U.EXTENSIONS], true), Object.keys(n2).map((e3) => {
          if ("LOG_UPLOAD_SERVER" === e3 || "EVENT_REPORT_DOMAIN" === e3 || "EVENT_REPORT_BACKUP_DOMAIN" === e3 || "PROXY_SERVER_TYPE3" === e3) {
            kN(e3, n2[e3][0]);
          } else kN(e3, n2[e3]);
        }));
      }
      function iF(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        const i2 = TD.reportApiInvoke(null, { name: tO.SET_AREA, options: e2, tag: iO.TRACER });
        try {
          let n2 = [];
          if ("string" == typeof e2 && (n2 = [e2]), Array.isArray(e2) && (e2.forEach((e3) => {
            if (!kn(ex).call(ex, e3)) throw new SD(Uw.INVALID_PARAMS, "invalid area code");
          }), n2 = e2), "[object Object]" === Object.prototype.toString.call(e2)) {
            const { areaCode: t3, excludedArea: i3 } = e2;
            if (!t3) throw new SD(Uw.INVALID_PARAMS, "area code is needed");
            let r3 = t3;
            "string" == typeof t3 && (r3 = [t3]), n2 = i3 ? eF(r3, i3) : r3;
          }
          if (!t2) {
            if (xN.AREAS) {
              const e3 = new SD(Uw.PROHIBITED_OPERATION, "setArea is prohibited because of config-distribute");
              return i2.onError(e3), void lD.warning("setArea is prohibited because of config-distribute");
            }
            if (kn(n2).call(n2, $U.GLOBAL) && MN("AREAS") === $U.EXTENSIONS) {
              const e3 = new SD(Uw.PROHIBITED_OPERATION, "setArea is prohibited because of ap extensions");
              return i2.onError(e3), void lD.warning("setArea is prohibited because of ap extensions");
            }
          }
          kN("AREAS", n2, t2);
          const r2 = ((e3) => {
            const t3 = { CODE: "", WEBCS_DOMAIN: [], WEBCS_DOMAIN_BACKUP_LIST: [], PROXY_CS: [], CDS_AP: [], ACCOUNT_REGISTER: [], UAP_AP: [], EVENT_REPORT_DOMAIN: [], EVENT_REPORT_BACKUP_DOMAIN: [], LOG_UPLOAD_SERVER: [], PROXY_SERVER_TYPE3: [] };
            return e3.map((e4) => {
              const i3 = ix[e4], n3 = Object.keys(i3);
              n3 && n3.map((e5) => {
                "CODE" !== e5 && (t3[e5] = t3[e5].concat(i3[e5]));
              });
            }), t3;
          })(n2);
          Object.keys(r2).map((e3) => {
            if ("LOG_UPLOAD_SERVER" === e3 || "EVENT_REPORT_DOMAIN" === e3 || "EVENT_REPORT_BACKUP_DOMAIN" === e3 || "PROXY_SERVER_TYPE3" === e3) {
              kN(e3, r2[e3][0]);
            } else kN(e3, r2[e3]);
          }), lD.debug("set area success:", n2.join(","));
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        i2.onSuccess();
      }
      function nF(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function rF(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? nF(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : nF(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let oF = 1;
      function sF(e2, t2, i2, n2, r2) {
        oF += 1;
        const o2 = { sid: i2.sid, command: "convergeAllocateEdge", uid: "666", appId: i2.appId, ts: Math.floor(Date.now() / 1e3), seq: oF, requestId: oF, version: yN, cname: i2.cname }, s2 = { service_name: t2, json_body: JSON.stringify(o2) };
        let a2, c2, d2 = e2[0];
        return JO(async () => {
          a2 = Date.now();
          const e3 = await zV(d2, { data: s2, cancelToken: n2, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" } });
          if (c2 = Date.now() - a2, 0 !== e3.code) {
            const t3 = new SD(Uw.UNEXPECTED_RESPONSE, "live streaming ap error, code" + e3.code, { retry: true, responseTime: c2 });
            throw lD.error(t3.toString()), t3;
          }
          const i3 = JSON.parse(e3.json_body);
          if (200 !== i3.code) {
            const e4 = new SD(Uw.UNEXPECTED_RESPONSE, "live streaming app center error, code: ".concat(i3.code, ", reason: ").concat(i3.reason), { code: i3.code, responseTime: c2 });
            throw lD.error(e4.toString()), e4;
          }
          if (!i3.servers || 0 === i3.servers.length) {
            const e4 = new SD(Uw.UNEXPECTED_RESPONSE, "live streaming app center empty server", { code: i3.code, responseTime: c2 });
            throw lD.error(e4.toString()), e4;
          }
          const r3 = function(e4, t3) {
            return { addressList: e4.servers.map((e5) => "wss://".concat(e5.address.replace(/\./g, "-"), ".").concat(MN("WORKER_DOMAIN"), ":").concat(e5.wss, "?serviceName=").concat(encodeURIComponent(t3))), workerToken: e4.workerToken, vid: e4.vid };
          }(i3, t2);
          return MN("LIVE_STREAMING_ADDRESS") && (r3.addressList = MN("LIVE_STREAMING_ADDRESS") instanceof Array ? MN("LIVE_STREAMING_ADDRESS") : [MN("LIVE_STREAMING_ADDRESS")]), rF(rF({}, r3), {}, { responseTime: c2 });
        }, (n3, r3) => (TD.apworkerEvent(i2.sid, { success: true, sc: 200, serviceName: t2, responseDetail: JSON.stringify(n3.addressList), firstSuccess: 0 === r3, responseTime: c2, serverIp: e2[r3 % e2.length] }), false), (n3, r3) => (TD.apworkerEvent(i2.sid, { success: false, sc: n3.data && n3.data.code || 200, serviceName: t2, responseTime: c2, serverIp: e2[r3 % e2.length] }), !!(n3.code !== Uw.OPERATION_ABORTED && n3.code !== Uw.UNEXPECTED_RESPONSE || n3.data && n3.data.retry) && (d2 = e2[(r3 + 1) % e2.length], true)), r2);
      }
      let aF = 1;
      function cF(e2, t2, i2, n2) {
        let { url: r2, areaCode: o2 } = e2;
        const { clientId: s2, sid: a2 } = t2, c2 = Date.now();
        let d2;
        const l2 = t2.role, [u2, h2] = pF(t2, o2, [Kx.CHOOSE_SERVER]);
        let p2 = fO.networkState;
        return JO(async () => {
          p2 && fO.networkState === uO.OFFLINE && fO.onlineWaiter && await np.race([fO.onlineWaiter, PO(n2 && n2.maxRetryTimeout || qO.maxRetryTimeout)]), p2 = fO.networkState;
          const { data: e3, headers: o3 } = await zV(r2, { data: u2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          d2 = "1" === o3.http3 ? 1 : -1, TD.reportResourceTiming(r2, a2), lF(e3, r2, t2, c2, [Kx.CHOOSE_SERVER], d2);
          const s3 = $x(e3, Kx.CHOOSE_SERVER);
          return uF(s3), Jx(s3, r2);
        }, (e3) => (e3 && TD.joinChooseServer(a2, { role: l2, lts: c2, succ: true, csAddr: r2, opid: h2, serverList: e3.gatewayAddrs.map((e4) => e4.address), ec: null, cid: e3.cid.toString(), uid: e3.uid.toString(), csIp: e3.csIp, unilbsServerIds: [Kx.CHOOSE_SERVER].toString(), isHttp3: d2, corssRegionTagReq: t2.apRequestDetail, corssRegionTagRes: e3.res.detail && e3.res.detail[38] }), false), (e3) => e3.code !== Uw.OPERATION_ABORTED && (e3.code === Uw.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (TD.joinChooseServer(a2, { role: l2, lts: c2, succ: false, csAddr: r2, serverList: null, opid: h2, ec: e3.code, csIp: e3.data && e3.data.csIp, unilbsServerIds: [Kx.CHOOSE_SERVER].toString(), extend: JSON.stringify({ networkState: p2 }), isHttp3: d2, corssRegionTagReq: t2.apRequestDetail }), lD.warning("[".concat(s2 || "sid-".concat(a2.slice(0, 6)), "] Choose server network error, retry"), e3), true)), n2);
      }
      function dF(e2, t2, i2, n2) {
        let r2, { url: o2, areaCode: s2, serviceIds: a2 } = e2;
        const c2 = Date.now(), d2 = t2.role, [l2, u2] = pF(t2, s2, a2);
        let h2;
        return JO(async () => {
          h2 && fO.networkState === uO.OFFLINE && fO.onlineWaiter && await np.race([fO.onlineWaiter, PO(n2 && n2.maxRetryTimeout || qO.maxRetryTimeout)]), h2 = fO.networkState;
          const { data: e3, headers: s3 } = await zV(o2, { data: l2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          r2 = "1" === s3.http3 ? 1 : -1, TD.reportResourceTiming(o2, t2.sid), lF(e3, o2, t2, c2, a2, r2);
          const d3 = $x(e3, Kx.CHOOSE_SERVER), u3 = $x(e3, "proxy5" === t2.cloudProxyServer ? Kx.CLOUD_PROXY_5 : "proxy3" === t2.cloudProxyServer || "proxy4" === t2.cloudProxyServer ? Kx.CLOUD_PROXY : Kx.CLOUD_PROXY_FALLBACK);
          return uF(d3), { gatewayInfo: Jx(d3, o2), proxyInfo: u3, url: o2 };
        }, (e3) => (e3.gatewayInfo && TD.joinChooseServer(t2.sid, { role: d2, lts: c2, succ: true, csAddr: o2, serverList: e3.gatewayInfo.gatewayAddrs.map((e4) => e4.address), ec: null, opid: u2, cid: e3.gatewayInfo.cid.toString(), uid: e3.gatewayInfo.uid.toString(), csIp: e3.gatewayInfo.csIp, unilbsServerIds: a2.toString(), isHttp3: r2, corssRegionTagReq: t2.apRequestDetail, corssRegionTagRes: e3.gatewayInfo.res.detail && e3.gatewayInfo.res.detail[38] }), e3.proxyInfo && TD.joinWebProxyAP(t2.sid, { lts: c2, sucess: 1, apServerAddr: o2, turnServerAddrList: e3.proxyInfo.addresses.map((e4) => e4.ip).join(","), errorCode: null, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString() }), false), (e3) => e3.code !== Uw.OPERATION_ABORTED && (e3.code === Uw.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (TD.joinWebProxyAP(t2.sid, { lts: c2, sucess: 0, apServerAddr: o2, turnServerAddrList: null, errorCode: e3.code, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString(), extend: JSON.stringify({ networkState: h2 }) }), lD.warning("[".concat(t2.clientId, "] multi unilbs network error, retry"), e3), true)), n2);
      }
      const lF = (e2, t2, i2, n2, r2, o2) => {
        const { sid: s2, clientId: a2, cloudProxyServer: c2 } = i2, d2 = [], l2 = (a3) => {
          4096 === a3.flag ? TD.joinChooseServer(s2, { role: i2.role, lts: n2, succ: false, csAddr: t2, opid: e2.opid, serverList: null, ec: a3.error.message, csIp: a3.error.data && a3.error.data.csIp, unilbsServerIds: r2.toString(), isHttp3: o2, corssRegionTagReq: i2.apRequestDetail }) : 1048576 !== a3.flag && 4194304 !== a3.flag && 4194310 !== a3.flag || TD.joinWebProxyAP(s2, { lts: n2, sucess: 0, apServerAddr: t2, turnServerAddrList: null, errorCode: a3.error.code, eventType: c2, unilbsServerIds: r2.toString() });
        };
        if (e2.response_body.forEach((t3) => {
          const i3 = t3.buffer.code;
          if (23 === t3.uri && 0 === i3 && !t3.buffer.edges_services) if (4194310 === t3.buffer.flag) lD.warning("no edge services in ap response of proxy fallback, will not set proxy in iceServers"), t3.buffer.edges_services = [];
          else {
            const i4 = { error: new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, "no edge services in ap response", { retry: true, csIp: e2.detail[502] }), flag: t3.buffer.flag };
            d2.push(i4), l2(i4);
          }
          if (0 !== i3) {
            const n3 = bx(i3), r3 = { error: new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, n3.desc, { desc: n3.desc, retry: n3.retry, csIp: e2.detail[502] }), flag: t3.buffer.flag };
            4194310 === t3.buffer.flag ? lD.warning(r3.error.toString()) : d2.push(r3), l2(r3);
          }
        }), d2.length) throw lD.warning("[".concat(a2 || "sid-".concat(s2.slice(0, 6)), "] multi unilbs ").concat(t2, " failed, ").concat(d2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message, ", retry: ").concat(e3.error.data.retry)).join(" | "))), new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, d2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message)).join(" | "), { retry: !!d2.find((e3) => e3.error.data.retry), csIp: e2.detail[502], desc: [...new Set(d2.map((e3) => {
          var t3;
          return null == e3 || null === (t3 = e3.error) || void 0 === t3 || null === (t3 = t3.data) || void 0 === t3 ? void 0 : t3.desc;
        }).filter((e3) => !!e3))] });
      }, uF = (e2) => {
        var t2, i2, n2, r2;
        if (e2.addresses && 0 === e2.addresses.length && 0 === e2.code) throw new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, "void gateway address", { retry: true, csIp: e2.detail && e2.detail[502] });
        MN("AP_AREA") && (null !== (n2 = e2.detail) && void 0 !== n2 && n2[23] && "string" == typeof (null === (r2 = e2.detail) || void 0 === r2 ? void 0 : r2[23]) ? tF(e2.detail[23].toLowerCase()) : tF());
        if (null !== (t2 = e2.detail) && void 0 !== t2 && t2[19] && "string" == typeof (null === (i2 = e2.detail) || void 0 === i2 ? void 0 : i2[19])) {
          const t3 = e2.detail[19], i3 = null == t3 ? void 0 : t3.split(";");
          for (let t4 = 0; t4 < i3.length; t4++) {
            var o2;
            const n3 = eS(o2 = i3[t4]).call(o2);
            e2.addresses[t4] && i3 && (e2.addresses[t4].fingerprint = n3);
          }
        }
        if (MN("GATEWAY_ADDRESS") && MN("GATEWAY_ADDRESS").length > 0) {
          lD.debug("assign gateway address to", MN("GATEWAY_ADDRESS"));
          const t3 = MN("GATEWAY_ADDRESS").map((t4) => {
            var i3, n3;
            const r3 = null !== (i3 = null === (n3 = e2.addresses.find((e3) => e3.ip === t4.ip && e3.port === t4.port)) || void 0 === n3 ? void 0 : n3.fingerprint) && void 0 !== i3 ? i3 : "";
            return { ip: t4.ip, port: t4.port, ticket: e2.addresses[0] && e2.addresses[0].ticket, fingerprint: r3 };
          });
          e2.addresses = t3;
        }
      }, hF = (e2, t2) => {
        if (e2.response_body && e2.response_body.length) {
          const t3 = e2.response_body[0];
          if (0 !== t3.buffer.code) {
            const e3 = bx(t3.buffer.code);
            throw new SD(Uw.UPDATE_TICKET_FAILED, "[".concat(t3.buffer.code, "]: ").concat(e3.desc), { retry: e3.retry });
          }
          return t3.buffer.ticket;
        }
        throw lD.debug("update ticket request received ap response without response body:", t2), new SD(Uw.UPDATE_TICKET_FAILED, "cannot find response body from ap response", { retry: false });
      }, pF = (e2, t2, i2) => {
        const n2 = Math.floor(Math.random() * 10 ** 12), r2 = "host" === e2.role ? "1" : "audience" === e2.role ? "2" : void 0, o2 = { appid: e2.appId, client_ts: Date.now(), opid: n2, sid: e2.sid, request_bodies: [{ uri: 22, buffer: { cname: e2.cname, detail: rF(rF(rF({ 6: e2.stringUid, 11: t2, 12: MN("USE_NEW_TOKEN") ? "1" : void 0 }, r2 ? { 17: r2 } : {}), {}, { 22: t2 }, e2.apRequestDetail ? { 33: e2.apRequestDetail } : {}), e2.apRTM ? { 26: "RTM2" } : {}), key: e2.token, service_ids: i2, uid: e2.uid || 0 } }] };
        o2.request_bodies.forEach((t3) => {
          e2.multiIP && e2.multiIP.gateway_ip && (t3.buffer.detail[5] = JSON.stringify({ vocs_ip: [e2.multiIP.uni_lbs_ip], vos_ip: [e2.multiIP.gateway_ip] }));
        });
        const s2 = new FormData();
        return s2.append("request", JSON.stringify(o2)), [s2, n2];
      }, _F = (e2, t2) => {
        const i2 = Math.floor(Math.random() * 10 ** 12), n2 = { appid: e2.appId, client_ts: Date.now(), opid: i2, sid: e2.sid, request_bodies: [{ uri: 28, buffer: { cname: e2.cname, detail: { 1: "", 6: e2.stringUid, 12: "1" }, token: e2.token, service_ids: t2, uid: e2.uid || 0, edges_services: e2.apResponse.addresses.map((e3) => ({ ip: e3.ip, port: e3.port })) } }] }, r2 = new FormData();
        return r2.append("request", JSON.stringify(n2)), [r2, i2];
      };
      let EF = 0;
      function mF(e2) {
        return np.all(e2.map((e3) => e3.then((e4) => {
          throw e4;
        }, (e4) => e4))).then((e3) => {
          throw e3;
        }, (e3) => e3);
      }
      const fF = async (e2) => {
        let { fragementLength: t2, referenceList: i2, asyncMapHandler: n2, allFailedhandler: r2, promisesCollector: o2 } = e2, s2 = 0;
        const a2 = t2;
        let c2, d2 = 0;
        const l2 = async () => {
          const e3 = (() => {
            const e4 = s2 * a2, t3 = e4 + a2;
            return i2.slice(e4, t3).map(n2);
          })();
          o2 && o2.push(...e3);
          try {
            c2 = await mF(e3);
          } catch (e4) {
            if (d2 += a2, s2++, !(d2 >= i2.length)) return void await l2();
            r2(e4);
          }
          e3.forEach((e4) => e4.cancel());
        };
        return await l2(), c2;
      }, TF = async (e2) => {
        let { referenceList: t2, asyncMapHandler: i2, closeFn: n2 } = e2;
        const r2 = t2.length;
        let o2 = 0;
        const s2 = async () => {
          const e3 = i2(t2.shift());
          try {
            return await e3;
          } catch (e4) {
            if (o2++, o2 >= r2 || null != n2 && n2(e4)) throw e4;
            return s2();
          }
        };
        return s2();
      };
      async function SF(e2, t2, i2, n2) {
        const r2 = async function(e3, t3, i3, n3) {
          let r3 = null;
          const o2 = [], s2 = async () => {
            const r4 = MN("WEBCS_DOMAIN").slice(0, MN("AJAX_REQUEST_CONCURRENT")).map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: JV() })), s3 = n3.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: r4.map((e4) => e4.url) }), a3 = await fF({ fragementLength: MN("FRAGEMENT_LENGTH"), referenceList: r4, asyncMapHandler: (n4) => (lD.debug("[".concat(e3.clientId, "] Connect to choose_server:"), n4.url), cF(n4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw n3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, s3), e4[0];
            }, promisesCollector: o2 });
            return n3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, s3), a3;
          }, a2 = async () => {
            if (await PO(1e3), null !== r3) return r3;
            const s3 = MN("WEBCS_DOMAIN_BACKUP_LIST").map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: JV() })), a3 = n3.recordJoinChannelService({ endTs: void 0, startTs: Date.now(), status: "pending", service: "chooseServer", urls: s3.map((e4) => e4.url) }), c2 = await fF({ fragementLength: MN("FRAGEMENT_LENGTH"), referenceList: s3, asyncMapHandler: (n4) => (lD.debug("[".concat(e3.clientId, "] Connect to backup choose_server:"), n4.url), cF(n4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw n3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, a3), e4[0];
            }, promisesCollector: o2 });
            return n3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a3), c2;
          };
          try {
            return r3 = await mF([s2(), a2()]), o2.length && o2.forEach((e4) => e4.cancel && "function" == typeof e4.cancel && e4.cancel()), r3;
          } catch (e4) {
            throw e4[0];
          }
        }(e2, t2, i2, n2);
        return { gatewayInfo: await r2 };
      }
      async function gF(e2, t2, i2, n2, r2) {
        const o2 = e2.cloudProxyServer;
        if ("disabled" === o2) {
          if (!n2) return;
          if (e2.useLocalAccessPoint) return await SF(e2, t2, i2, r2);
          if (MN("JOIN_WITH_FALLBACK_MEDIA_PROXY")) {
            const { gatewayInfo: n3, proxyInfo: o3 } = await yF(e2, t2, i2, r2);
            if (e2.turnServer && "auto" !== e2.turnServer.mode) return { gatewayInfo: n3 };
            const a3 = o3.map((e3) => ({ turnServerURL: e3.address, tcpport: e3.tcpport || wN.tcpport, udpport: e3.udpport || wN.udpport, username: e3.username || wN.username, password: e3.password || wN.password, forceturn: false, security: true }));
            if (r2.useP2P) {
              var s2;
              const t3 = null !== (s2 = e2.uid) && void 0 !== s2 ? s2 : n3.uid, i3 = "glb:".concat(t3.toString()), r3 = await Qw(i3), c3 = o3.map((e3) => ({ turnServerURL: e3.address, tcpport: e3.tcpport || wN.tcpport, udpport: e3.udpport || wN.udpport, username: i3, password: r3, forceturn: false, security: true }));
              a3.push(...c3);
            }
            return e2.turnServer = { mode: "manual", servers: a3 }, { gatewayInfo: n3 };
          }
          return await SF(e2, t2, i2, r2);
        }
        const { proxyInfo: a2, gatewayInfo: c2 } = await yF(e2, t2, i2, r2), d2 = { gatewayInfo: c2 }, l2 = a2.map((e3) => ({ turnServerURL: e3.address, tcpport: "proxy3" === o2 ? void 0 : e3.tcpport ? e3.tcpport : wN.tcpport, udpport: "proxy4" === o2 ? void 0 : e3.udpport ? e3.udpport : wN.udpport, username: e3.username || wN.username, password: e3.password || wN.password, forceturn: "proxy4" !== o2, security: "proxy5" === o2 }));
        if (r2.useP2P) {
          var u2;
          const t3 = null !== (u2 = e2.uid) && void 0 !== u2 ? u2 : c2.uid, i3 = "glb:".concat(t3.toString()), n3 = await Qw(i3), r3 = a2.map((e3) => ({ turnServerURL: e3.address, tcpport: "proxy3" === o2 ? void 0 : e3.tcpport || wN.tcpport, udpport: "proxy4" === o2 ? void 0 : e3.udpport || wN.udpport, username: i3, password: n3, forceturn: "proxy4" !== o2, security: "proxy5" === o2 }));
          l2.push(...r3);
        }
        return e2.turnServer = { mode: "manual", servers: l2 }, lD.debug("[".concat(e2.clientId, "] set proxy server: ").concat(e2.proxyServer, ", mode: ").concat(o2)), d2;
      }
      async function RF(e2, t2, i2, n2, r2) {
        const o2 = MN("ACCOUNT_REGISTER").slice(0, MN("AJAX_REQUEST_CONCURRENT"));
        let s2 = [];
        s2 = t2.proxyServer ? o2.map((e3) => "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1")) : o2.map((e3) => "https://".concat(e3, "/api/v1"));
        const a2 = null == r2 ? void 0 : r2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "stringUID", urls: s2 });
        try {
          const o3 = await async function(e3, t3, i3, n3, r3) {
            const o4 = Date.now(), s3 = { sid: i3.sid, opid: 10, appid: i3.appId, string_uid: t3 };
            let a3 = e3[0];
            const c2 = await JO(() => zV(a3 + "".concat(-1 === a3.indexOf("?") ? "?" : "&", "action=stringuid"), { data: s3, cancelToken: n3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 72 } }), (i4, n4) => {
              if (0 === i4.code) {
                if (i4.uid <= 0 || i4.uid >= Math.pow(2, 32)) throw lD.error("Invalid Uint Uid ".concat(t3, " => ").concat(i4.uid), i4), TD.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: Uw.INVALID_UINT_UID_FROM_STRING_UID, extend: s3 }), new SD(Uw.INVALID_UINT_UID_FROM_STRING_UID);
                return TD.reqUserAccount(s3.sid, { lts: o4, success: true, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: null, extend: s3 }), false;
              }
              const r4 = bx(i4.code);
              return r4.retry && (a3 = e3[(n4 + 1) % e3.length]), TD.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: i4.uid, errorCode: r4.desc, extend: s3 }), r4.retry;
            }, (t4, i4) => t4.code !== Uw.OPERATION_ABORTED && (TD.reqUserAccount(s3.sid, { lts: o4, success: false, serverAddr: a3, stringUid: s3.string_uid, uid: null, errorCode: t4.code, extend: s3 }), a3 = e3[(i4 + 1) % e3.length], true), r3);
            if (0 !== c2.code) {
              const e4 = bx(c2.code);
              throw new SD(Uw.UNEXPECTED_RESPONSE, e4.desc);
            }
            return c2;
          }(s2, e2, t2, i2, n2);
          return null == r2 || r2.recordJoinChannelService({ status: "success", endTs: Date.now() }, a2), o3.uid;
        } catch (e3) {
          throw null == r2 || r2.recordJoinChannelService({ status: "error", endTs: Date.now(), errors: [e3] }, a2), e3;
        }
      }
      async function vF(e2, t2, i2) {
        const n2 = MN("ACCOUNT_REGISTER");
        let r2 = [];
        r2 = t2.proxyServer ? n2.map((e3) => "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1")) : n2.map((e3) => "https://".concat(e3, "/api/v1"));
        try {
          const n3 = await TF({ referenceList: r2, asyncMapHandler: (n4) => async function(e3, t3, i3, n5) {
            const r3 = Date.now(), o2 = { sid: i3.sid, opid: 10, appid: i3.appId, string_uid: t3 };
            try {
              const t4 = await zV(e3 + "".concat(-1 === e3.indexOf("?") ? "?" : "&", "action=stringuid"), { data: o2, cancelToken: n5, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 72 } });
              if (0 !== t4.code) {
                const e4 = bx(t4.code);
                throw new SD(Uw.UNEXPECTED_RESPONSE, "preload sua error:".concat(e4.desc), e4);
              }
              if (t4.uid <= 0 || t4.uid >= Math.pow(2, 32)) throw new SD(Uw.INVALID_UINT_UID_FROM_STRING_UID);
              return { requestTime: r3, url: e3, req: o2, uid: t4.uid, elapse: Date.now() - r3 };
            } catch (e4) {
              throw e4;
            }
          }(n4, e2, t2, i2), closeFn: (e3) => e3.code === Uw.OPERATION_ABORTED || e3.code === Uw.UNEXPECTED_RESPONSE && !e3.data.retry });
          return n3;
        } catch (e3) {
          throw e3;
        }
      }
      async function CF(e2, t2, i2) {
        const n2 = MN("CDS_AP").slice(0, MN("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1") : "https://".concat(t3, "/api/v1?action=config")), r2 = n2.map((n3) => function(e3, t3, i3, n4) {
          const r3 = rw(), o3 = { flag: 64, cipher_method: 0, features: rF(rF(rF(rF(rF({ install_id: IN(), device: r3.name, system: r3.os, system_general: navigator.userAgent, vendor: t3.appId, version: yN, cname: t3.cname, session_id: t3.sid, proxyServer: t3.proxyServer, sdk_type: Hx.WEB_RTC, browser_name: r3.name, browser_version: r3.version, user_agent: navigator.userAgent, channel_name: t3.cname }, t3.stringUid && { string_uid: t3.stringUid }), t3.uid && { uid: t3.uid + "" }), r3.os && { os_name: r3.os }), r3.osVersion && { os_version: r3.osVersion }), {}, { detail: "" }) };
          return JO(() => zV(e3, { data: o3, timeout: 1e3, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 54 } }), void 0, (e4) => e4.code !== Uw.OPERATION_ABORTED, n4);
        }(n3, e2, t2, i2));
        let o2 = null, s2 = null, a2 = {};
        try {
          o2 = await mF(r2);
        } catch (e3) {
          if (e3.code === Uw.OPERATION_ABORTED) throw e3;
          s2 = e3;
        }
        r2.forEach((e3) => e3.cancel());
        if (TD.reportApiInvoke(e2.sid, { name: tO.REQUEST_CONFIG_DISTRIBUTE, options: { error: s2, res: o2 } }).onSuccess(), o2 && o2.test_tags) try {
          a2 = function(e3) {
            if (!e3.test_tags) return {};
            const t3 = e3.test_tags, i3 = Object.keys(t3), n3 = {};
            return i3.forEach((e4) => {
              var i4;
              const r3 = eS(i4 = e4.slice(4)).call(i4), o3 = JSON.parse(t3[e4]), s3 = o3[1];
              n3[r3] = { tag: o3[0] || "", value: s3 };
            }), n3;
          }(o2);
        } catch (e3) {
        }
        return a2;
      }
      async function IF(e2, t2) {
        const i2 = MN("WEBCS_DOMAIN").concat(MN("WEBCS_DOMAIN_BACKUP_LIST")).map((e3) => ({ url: "https://".concat(e3, "/api/v2/transpond/webrtc?v=2"), areaCode: JV(), serviceIds: [Kx.CHOOSE_SERVER, Kx.CLOUD_PROXY_FALLBACK] }));
        try {
          const n2 = await TF({ referenceList: i2, asyncMapHandler: (i3) => async function(e3, t3, i4) {
            let n3, { url: r2, areaCode: o2, serviceIds: s2 } = e3;
            const a2 = Date.now(), [c2, d2] = pF(t3, o2, s2);
            let l2 = fO.networkState;
            try {
              l2 && fO.networkState === uO.OFFLINE && fO.onlineWaiter && await np.race([fO.onlineWaiter, PO(qO.maxRetryTimeout)]), l2 = fO.networkState;
              const { data: e4, headers: t4 } = await zV(r2, { data: c2, cancelToken: i4, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
              n3 = "1" === t4.http3 ? 1 : -1;
              const o3 = (e5) => {
                const t5 = [];
                if (e5.response_body.forEach((i5) => {
                  const n4 = i5.buffer.code;
                  if (23 === i5.uri && 0 === n4 && !i5.buffer.edges_services) if (4194310 === i5.buffer.flag) i5.buffer.edges_services = [];
                  else {
                    const n5 = { error: new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, "no edge services in ap response", { retry: true, csIp: e5.detail[502] }), flag: i5.buffer.flag };
                    t5.push(n5);
                  }
                  if (0 !== n4) {
                    const r3 = bx(n4), o4 = { error: new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, r3.desc, { desc: r3.desc, retry: r3.retry, csIp: e5.detail[502] }), flag: i5.buffer.flag };
                    4194310 === i5.buffer.flag ? lD.warning(o4.error.toString()) : t5.push(o4);
                  }
                }), t5.length) throw new SD(Uw.CAN_NOT_GET_GATEWAY_SERVER, t5.map((e6) => "flag: ".concat(e6.flag, ", message: ").concat(e6.error.message)).join(" | "), { retry: !!t5.find((e6) => e6.error.data.retry), csIp: e5.detail[502], desc: [...new Set(t5.map((e6) => {
                  var t6;
                  return null == e6 || null === (t6 = e6.error) || void 0 === t6 || null === (t6 = t6.data) || void 0 === t6 ? void 0 : t6.desc;
                }).filter((e6) => !!e6))] });
              };
              o3(e4);
              const s3 = $x(e4, Kx.CHOOSE_SERVER), u2 = $x(e4, Kx.CLOUD_PROXY_FALLBACK);
              return uF(s3), { gatewayInfo: Jx(s3, r2), proxyInfo: u2, opid: d2, requestTime: a2, url: r2, isHttp3: n3, elapse: Date.now() - a2 };
            } catch (e4) {
              throw e4;
            }
          }(i3, e2, t2), closeFn: (e3) => e3.code === Uw.OPERATION_ABORTED || e3.code === Uw.CAN_NOT_GET_GATEWAY_SERVER && !e3.data.retry });
          return n2;
        } catch (e3) {
          throw e3;
        }
      }
      async function yF(e2, t2, i2, n2) {
        const r2 = MN("PROXY_SERVER_TYPE3"), o2 = (e3, t3, i3) => {
          let n3 = i3 || r2;
          return Array.isArray(n3) && (n3 = t3 % 2 == 0 ? r2[1] : r2[0]), "https://".concat(n3, "/ap/?url=").concat(e3);
        };
        let s2 = null;
        const a2 = [], c2 = async () => {
          const r3 = MN("WEBCS_DOMAIN").slice(0, MN("AJAX_REQUEST_CONCURRENT")).map((t3, i3) => {
            let n3;
            return n3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: n3, areaCode: JV(), serviceIds: [Kx.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? Kx.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? Kx.CLOUD_PROXY : Kx.CLOUD_PROXY_FALLBACK] };
          }), s3 = n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: r3.map((e3) => e3.url) }), c3 = await fF({ fragementLength: MN("FRAGEMENT_LENGTH"), referenceList: r3, asyncMapHandler: (n3) => (lD.debug("[".concat(e2.clientId, "] Connect to choose_server:"), n3.url), dF(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw n2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, s3), e3[0];
          }, promisesCollector: a2 });
          return n2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, s3), c3;
        }, d2 = async () => {
          if (await PO(1e3), null !== s2) return s2;
          const r3 = MN("WEBCS_DOMAIN_BACKUP_LIST").map((t3, i3) => {
            let n3;
            return n3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : o2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: n3, areaCode: JV(), serviceIds: [Kx.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? Kx.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? Kx.CLOUD_PROXY : Kx.CLOUD_PROXY_FALLBACK] };
          }), c3 = n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: r3.map((e3) => e3.url) }), d3 = await fF({ fragementLength: MN("FRAGEMENT_LENGTH"), referenceList: r3, asyncMapHandler: (n3) => (lD.debug("[".concat(e2.clientId, "] Connect to backup choose_server:"), n3.url), dF(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw n2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, c3), e3[0];
          }, promisesCollector: a2 });
          return n2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, c3), d3;
        };
        let l2, u2, h2;
        try {
          ({ gatewayInfo: l2, proxyInfo: u2, url: h2 } = await mF([c2(), d2()]));
        } catch (e3) {
          throw e3[0];
        }
        if (a2.length && a2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), !l2 || !u2) throw new SD(Uw.UNEXPECTED_ERROR, "missing gateway or proxy response").print();
        if (e2.apUrl = h2, "disabled" !== e2.cloudProxyServer && Array.isArray(r2) && h2) {
          const t3 = /^https?:\/\/(.+?)(\/.*)?$/.exec(h2)[1];
          kn(r2).call(r2, t3) && (e2.proxyServer = t3, lD.setProxyServer(t3), TD.setProxyServer(t3));
        }
        return s2 = { gatewayInfo: l2, proxyInfo: await eV(u2, l2.uid) }, s2;
      }
      async function AF(e2, t2, i2) {
        const n2 = MN("UAP_AP").slice(0, MN("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1?action=uap") : "https://".concat(t3, "/api/v1?action=uap")), r2 = n2.map((n3) => function(e3, t3, i3, n4) {
          const r3 = { command: "convergeAllocateEdge", sid: t3.sid, appId: t3.appId, token: t3.token, ts: Date.now(), version: yN, cname: t3.cname, uid: t3.uid.toString(), requestId: aF, seq: aF };
          aF += 1;
          const o2 = { service_name: "tele_channel", json_body: JSON.stringify(r3) };
          return JO(async () => {
            const t4 = await zV(e3, { data: o2, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 61 } });
            if (0 !== t4.code) {
              const e4 = new SD(Uw.UNEXPECTED_RESPONSE, "cross channel ap error, code" + t4.code, { retry: true });
              throw lD.error(e4.toString()), e4;
            }
            const n5 = JSON.parse(t4.json_body);
            if (200 !== n5.code) {
              const e4 = new SD(Uw.UNEXPECTED_RESPONSE, "cross channel app center error, code: ".concat(n5.code, ", reason: ").concat(n5.reason));
              throw lD.error(e4.toString()), e4;
            }
            if (!n5.servers || 0 === n5.servers.length) {
              const e4 = new SD(Uw.UNEXPECTED_RESPONSE, "cross channel app center empty server");
              throw lD.error(e4.toString()), e4;
            }
            return { vid: n5.vid, workerToken: n5.workerToken, addressList: (MN("CHANNEL_MEDIA_RELAY_SERVERS") || n5.servers).map((e4) => "wss://".concat(e4.address.replace(/\./g, "-"), ".").concat(MN("WORKER_DOMAIN"), ":").concat(e4.wss)) };
          }, void 0, (e4) => !!(e4.code !== Uw.OPERATION_ABORTED && e4.code !== Uw.UNEXPECTED_RESPONSE || e4.data && e4.data.retry), n4);
        }(n3, e2, t2, i2));
        try {
          const e3 = await mF(r2);
          return r2.forEach((e4) => e4.cancel()), e3;
        } catch (e3) {
          throw e3[0];
        }
      }
      async function bF(e2, t2, i2) {
        let n2 = null;
        const r2 = [], o2 = async (o3) => {
          const s2 = MN(o3 ? "WEBCS_DOMAIN_BACKUP_LIST" : "WEBCS_DOMAIN").map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t3, "/api/v2/transpond/webrtc?v=2"));
          return o3 && (await PO(1e3), null !== n2) ? n2 : await fF({ fragementLength: MN("FRAGEMENT_LENGTH"), referenceList: s2, asyncMapHandler: (n3) => (lD.debug("[".concat(e2.clientId, "] update ticket, Connect to ").concat(o3 ? "backup" : "", " choose_server:"), n3), function(e3, t3, i3, n4) {
            const [r3] = _F(t3, [Kx.CHOOSE_SERVER]);
            let o4 = fO.networkState;
            return JO(async () => {
              o4 && fO.networkState === uO.OFFLINE && fO.onlineWaiter && await np.race([fO.onlineWaiter, PO(n4 && n4.maxRetryTimeout || qO.maxRetryTimeout)]), o4 = fO.networkState;
              const t4 = await zV(e3, { data: r3, cancelToken: i3, headers: { "Content-Type": "multipart/form-data;" } }, true);
              return hF(t4, e3);
            }, () => false, (e4) => e4.code !== Uw.OPERATION_ABORTED && (e4.code === Uw.UPDATE_TICKET_FAILED ? e4.data.retry : (lD.warning("[".concat(t3.clientId, "] update ticket network error, retry"), e4), true)), n4);
          }(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw e3[0];
          }, promisesCollector: r2 });
        };
        try {
          return n2 = await mF([o2(false), o2(true)]), r2.length && r2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), n2;
        } catch (e3) {
          throw e3[0];
        }
      }
      function wF(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function OF(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? wF(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : wF(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class NF extends Zw {
        get isSuccess() {
          return !!this.configs;
        }
        constructor(e2, t2) {
          super(), vy(this, "configs", void 0), vy(this, "store", void 0), vy(this, "joinInfo", void 0), vy(this, "cancelToken", void 0), vy(this, "retryConfig", { timeout: 3e3, timeoutFactor: 1.5, maxRetryCount: 1, maxRetryTimeout: 1e4 }), vy(this, "interval", void 0), vy(this, "mutex", void 0), vy(this, "mutableParamsRead", false), vy(this, "configCache", {}), vy(this, "limit_bitrate", void 0), this.mutex = new KO("config-distribute", e2), this.store = t2;
        }
        startGetConfigDistribute(e2, t2) {
          this.joinInfo = e2, this.cancelToken = t2, this.interval && this.stopGetConfigDistribute(), MN("ENABLE_CONFIG_DISTRIBUTE") && (this.updateConfigDistribute(), this.interval = window.setInterval(() => {
            this.updateConfigDistribute();
          }, MN("CONFIG_DISTRIBUTE_INTERVAL")));
        }
        stopGetConfigDistribute() {
          this.interval && clearInterval(this.interval), this.interval = void 0, this.joinInfo = void 0, this.cancelToken = void 0, this.configs = void 0, this.limit_bitrate = void 0;
        }
        async awaitConfigDistributeComplete() {
          if (!this.mutex.isLocked) return;
          (await this.mutex.lock())();
        }
        async updateConfigDistribute() {
          if (!this.mutableParamsRead) {
            this.mutableParamsRead = true;
            TD.reportApiInvoke(null, { options: void 0, name: tO.LOAD_CONFIG_FROM_LOCALSTORAGE, tag: iO.TRACER }).onSuccess(JSON.stringify(xN));
          }
          if (!this.joinInfo || !this.cancelToken || !this.retryConfig) return void lD.debug("[config-distribute] get config distribute interrupted have no joininfo");
          let e2;
          const t2 = await this.mutex.lock();
          try {
            e2 = await CF(this.joinInfo, this.cancelToken, this.retryConfig), lD.debug("[config-distribute] get config distribute", JSON.stringify(e2));
            const t3 = function(e3) {
              var t4;
              const i2 = qS(t4 = Object.keys(e3).filter((e4) => /^webrtc_ng_global_parameter/.test(e4))).call(t4);
              for (let t5 = 0; t5 < i2.length; t5++) for (let n3 = i2.length - 1; n3 > t5; n3--) {
                const t6 = i2[n3], r3 = e3[t6].value;
                if ("number" == typeof r3.__priority) {
                  const o2 = r3.__priority, s2 = i2[n3 - 1], a2 = e3[s2].value;
                  if ("number" == typeof a2.__priority) {
                    if (!(o2 > a2.__priority)) continue;
                    {
                      const e4 = t6;
                      i2[n3] = i2[n3 - 1], i2[n3 - 1] = e4;
                    }
                  } else {
                    const e4 = t6;
                    i2[n3] = i2[n3 - 1], i2[n3 - 1] = e4;
                  }
                }
              }
              const n2 = Date.now();
              let r2 = {};
              return i2.forEach((t5) => {
                const i3 = e3[t5].value.__expires;
                i3 && i3 <= n2 || (r2[t5] = e3[t5]);
              }), r2;
            }(e2);
            this.cacheGlobalParameterConfig(t3), this.store.hasStartJoinChannel || (this.store.isABTestSuccess = true), this.configs = t3;
          } catch (e3) {
            const t3 = new SD(Uw.NETWORK_RESPONSE_ERROR, e3);
            lD.warning("[config-distribute] ".concat(t3.toString()));
          } finally {
            t2();
          }
        }
        getBitrateLimit() {
          return this.limit_bitrate || void 0;
        }
        handleBitrateLimit(e2) {
          rx(e2) && (this.limit_bitrate ? this.limit_bitrate && this.limit_bitrate.id !== e2.id && this.emit(nx.UPDATE_BITRATE_LIMIT, e2) : this.emit(nx.UPDATE_BITRATE_LIMIT, e2));
        }
        getLowStreamConfigDistribute() {
          return this.limit_bitrate && OF({}, this.limit_bitrate.low_stream_uplink);
        }
        handleABTestConfigDistribute(e2) {
          try {
            const t2 = {}, i2 = Object.keys(e2), n2 = [];
            i2.forEach((i3) => {
              const r2 = e2[i3].value;
              t2[i3] = r2;
              const o2 = r2.__id;
              if (o2 && this.configCache[i3] && this.configCache[i3].__id === o2) return;
              const s2 = r2.__type, a2 = e2[i3].value, c2 = e2[i3].tag;
              let d2 = 0;
              s2 ? s2 === UN.REALTIME && (d2 = 1) : Object.keys(a2).some((e3) => Object.prototype.hasOwnProperty.call(PN, e3) || !VM() && Object.prototype.hasOwnProperty.call(ON, e3) ? (d2 = 1, true) : void 0), n2.push({ tag: c2, isApplied: d2, feature: i3, params: JSON.stringify(r2) });
            }), n2.forEach((e3) => {
              let { tag: t3, feature: i3, params: n3, isApplied: r2 } = e3;
              this.store.sessionId && TD.abTest(this.store.sessionId, { intSucc: 1, isApplied: r2, tag: t3, feature: i3, params: n3, cid: this.store.cid, uid: this.store.intUid });
            }), this.configCache = t2;
          } catch (e3) {
            lD.debug("handleABTestConfigDistribute error", e3);
          }
        }
        cacheGlobalParameterConfig(e2) {
          const t2 = function(e3) {
            const t3 = {};
            return Object.keys(e3).forEach((i3) => {
              const n2 = e3[i3].value, r2 = n2.__expires, o2 = n2.__type;
              Object.keys(n2).forEach((e4) => {
                "__id" === e4 || "__type" === e4 || "__priority" === e4 || "__expires" === e4 || Object.prototype.hasOwnProperty.call(t3, e4) || (t3[e4] = OF(OF({ value: n2[e4] }, r2 && { expires: r2 }), o2 && { type: o2 }));
              });
            }), t3;
          }(e2);
          try {
            var i2;
            const n2 = null === (i2 = t2.LIMIT_BITRATE) || void 0 === i2 ? void 0 : i2.value;
            delete t2.LIMIT_BITRATE, n2 && rx(n2) && this.handleBitrateLimit(n2), this.limit_bitrate = n2, this.handleGlobalParameterConfig(t2), this.handleABTestConfigDistribute(e2), function(e3) {
              try {
                const t3 = Date.now();
                Object.keys(e3).forEach((i3) => {
                  const { value: n3, type: r3, expires: o3 } = e3[i3];
                  o3 && o3 <= t3 || ((r3 === UN.REALTIME || Object.prototype.hasOwnProperty.call(PN, i3)) && (xN[i3] = n3, LN[i3] = n3, lD.debug("Update realtime parameters from config distribute", i3, n3)), r3 || VM() || !Object.prototype.hasOwnProperty.call(ON, i3) || (xN[i3] = n3, LN[i3] = n3, lD.debug("Update gateway parameters from config distribute", i3, n3)));
                });
              } catch (t3) {
                lD.error("Error update config immediately: ".concat(e3), t3.message);
              }
            }(t2);
            const r2 = JSON.stringify(t2), o2 = window.btoa(r2);
            window.localStorage.setItem("websdk_ng_global_parameter", o2), lD.debug("Caching global parameters ".concat(r2));
          } catch (e3) {
            lD.error("Error caching global parameters:", e3.message);
          }
        }
        handleGlobalParameterConfig(e2) {
          try {
            const t2 = Date.now();
            Object.keys(e2).forEach((i2) => {
              if ("CLIENT_ROLE_OPTIONS" === i2) {
                if (Object.prototype.hasOwnProperty.call(LN, i2)) {
                  const { value: n2, expires: r2 } = e2[i2];
                  if (r2 && r2 <= t2) return;
                  (function(e3, t3) {
                    try {
                      return "object" == typeof e3 && "object" == typeof t3 && JSON.stringify(e3) === JSON.stringify(t3);
                    } catch (e4) {
                      return false;
                    }
                  })(LN[i2], n2) || (xN[i2] = n2, LN[i2] = n2, this.emit(nx.UPDATE_CLIENT_ROLE_OPTIONS, n2), lD.debug("Updating client role options: ".concat(JSON.stringify(n2))));
                }
              }
            });
          } catch (e3) {
            lD.error("Error handling global parameter config:", e3.message);
          }
        }
      }
      class DF extends Zw {
        constructor() {
          super(...arguments), vy(this, "resultStorage", /* @__PURE__ */ new Map());
        }
        setLocalAudioStats(e2, t2, i2) {
          this.record("AUDIO_INPUT_LEVEL_TOO_LOW", e2, this.checkAudioInputLevel(i2, t2)), this.record("SEND_AUDIO_BITRATE_TOO_LOW", e2, this.checkSendAudioBitrate(i2, t2));
        }
        setLocalVideoStats(e2, t2, i2) {
          this.record("SEND_VIDEO_BITRATE_TOO_LOW", e2, this.checkSendVideoBitrate(i2, t2)), this.record("FRAMERATE_INPUT_TOO_LOW", e2, this.checkFramerateInput(i2, t2)), this.record("FRAMERATE_SENT_TOO_LOW", e2, this.checkFramerateSent(i2));
        }
        setRemoteAudioStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("AUDIO_OUTPUT_LEVEL_TOO_LOW", i2, this.checkAudioOutputLevel(t2));
        }
        setRemoteVideoStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("RECV_VIDEO_DECODE_FAILED", i2, this.checkVideoDecode(t2));
        }
        record(e2, t2, i2) {
          if (MN("STATS_UPDATE_INTERVAL") > 500) return;
          this.resultStorage.has(e2) || this.resultStorage.set(e2, { result: [], isPrevNormal: true });
          const n2 = this.resultStorage.get(e2);
          if (n2 && (n2.result.push(i2), n2.result.length >= 5)) {
            var r2;
            const i3 = kn(r2 = n2.result).call(r2, true);
            n2.isPrevNormal && !i3 && this.emit("exception", PF[e2], e2, t2), !n2.isPrevNormal && i3 && this.emit("exception", PF[e2] + 2e3, e2 + "_RECOVER", t2), n2.isPrevNormal = i3, n2.result = [];
          }
        }
        checkAudioOutputLevel(e2) {
          return !(e2.receiveBitrate > 0 && 0 === e2.receiveLevel);
        }
        checkAudioInputLevel(e2, t2) {
          return t2 instanceof KL && !t2.isActive || (!!t2.muted || 0 !== e2.sendVolumeLevel);
        }
        checkFramerateInput(e2, t2) {
          let i2 = null;
          t2._encoderConfig && t2._encoderConfig.frameRate && (i2 = Xx(t2._encoderConfig.frameRate));
          const n2 = e2.captureFrameRate;
          return !i2 || !n2 || !(i2 > 10 && n2 < 5 || i2 < 10 && i2 >= 5 && n2 <= 1);
        }
        checkFramerateSent(e2) {
          return !(e2.captureFrameRate && e2.sendFrameRate && e2.captureFrameRate > 5 && e2.sendFrameRate <= 1);
        }
        checkSendVideoBitrate(e2, t2) {
          return !!t2.muted || 0 !== e2.sendBitrate;
        }
        checkSendAudioBitrate(e2, t2) {
          return t2 instanceof KL && !t2.isActive || (!!t2.muted || 0 !== e2.sendBitrate);
        }
        checkVideoDecode(e2) {
          return 0 === e2.receiveBitrate || 0 !== e2.decodeFrameRate;
        }
      }
      const PF = { FRAMERATE_INPUT_TOO_LOW: 1001, FRAMERATE_SENT_TOO_LOW: 1002, SEND_VIDEO_BITRATE_TOO_LOW: 1003, RECV_VIDEO_DECODE_FAILED: 1005, AUDIO_INPUT_LEVEL_TOO_LOW: 2001, AUDIO_OUTPUT_LEVEL_TOO_LOW: 2002, SEND_AUDIO_BITRATE_TOO_LOW: 2003 };
      const LF = new class {
        markSubscribeStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
        }
        markPublishStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
        }
        measureFromSubscribeStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
        measureFromPublishStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
      }();
      function kF(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function MF(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? kF(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : kF(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class UF {
        constructor(e2) {
          vy(this, "store", void 0), vy(this, "onStatsException", void 0), vy(this, "onUploadPublishDuration", void 0), vy(this, "onStatsChanged", void 0), vy(this, "localStats", /* @__PURE__ */ new Map()), vy(this, "remoteStats", /* @__PURE__ */ new Map()), vy(this, "updateStatsInterval", void 0), vy(this, "trafficStats", void 0), vy(this, "trafficStatsPeerList", []), vy(this, "uplinkStats", void 0), vy(this, "exceptionMonitor", void 0), vy(this, "p2pChannel", void 0), vy(this, "scalabilityMode", EN.L1T1), vy(this, "updateStats", () => {
            this.p2pChannel && (this.updateRemoteStats(this.p2pChannel), this.updateLocalStats(this.p2pChannel));
          }), this.store = e2, this.exceptionMonitor = new DF(), this.exceptionMonitor.on("exception", (e3, t2, i2) => {
            this.onStatsException && this.onStatsException(e3, t2, i2);
          });
        }
        startUpdateStats() {
          this.updateStatsInterval || (this.updateStatsInterval = window.setInterval(this.updateStats, 1e3));
        }
        stopUpdateStats() {
          this.updateStatsInterval && (window.clearInterval(this.updateStatsInterval), this.updateStatsInterval = void 0);
        }
        reset() {
          this.localStats = /* @__PURE__ */ new Map(), this.remoteStats = /* @__PURE__ */ new Map(), this.trafficStats = void 0, this.trafficStatsPeerList = [], this.uplinkStats = void 0;
        }
        getLocalAudioTrackStats() {
          return this.localStats.get(ux.LocalAudioTrack) || MF({}, JD);
        }
        getLocalVideoTrackStats() {
          return this.localStats.get(ux.LocalVideoTrack) || MF({}, XD);
        }
        getRemoteAudioTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats) return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppad + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var n2;
            const r2 = null === (n2 = this.remoteStats.get(e2)) || void 0 === n2 ? void 0 : n2.audioStats;
            r2 && (i2[e2] = t2(e2, r2));
          } else Array.from(this.remoteStats.entries()).forEach((e3) => {
            let [n3, { audioStats: r2 }] = e3;
            r2 && (i2[n3] = t2(n3, r2));
          });
          return i2;
        }
        getRemoteNetworkQualityStats(e2) {
          const t2 = {};
          if (e2) {
            var i2;
            const n2 = null === (i2 = this.remoteStats.get(e2)) || void 0 === i2 ? void 0 : i2.networkStats;
            n2 && (t2[e2] = n2);
          } else Array.from(this.remoteStats.entries()).forEach((e3) => {
            let [i3, { networkStats: n2 }] = e3;
            n2 && (t2[i3] = n2);
          });
          return t2;
        }
        getRemoteVideoTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats) return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppvd + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var n2;
            const r2 = null === (n2 = this.remoteStats.get(e2)) || void 0 === n2 ? void 0 : n2.videoStats;
            r2 && (i2[e2] = t2(e2, r2));
          } else Array.from(this.remoteStats.entries()).forEach((e3) => {
            let [n3, { videoStats: r2 }] = e3;
            r2 && (i2[n3] = t2(n3, r2));
          });
          return i2;
        }
        getRTCStats() {
          let e2 = 0, t2 = 0, i2 = 0, n2 = 0;
          const r2 = this.localStats.get(ux.LocalAudioTrack);
          r2 && (e2 += r2.sendBytes, t2 += r2.sendBitrate);
          const o2 = this.localStats.get(ux.LocalVideoTrack);
          o2 && (e2 += o2.sendBytes, t2 += o2.sendBitrate);
          const s2 = this.localStats.get(ux.LocalVideoLowTrack);
          s2 && (e2 += s2.sendBytes, t2 += s2.sendBitrate), this.remoteStats.forEach((e3) => {
            let { audioStats: t3, videoStats: r3 } = e3;
            t3 && (i2 += t3.receiveBytes, n2 += t3.receiveBitrate), r3 && (i2 += r3.receiveBytes, n2 += r3.receiveBitrate);
          });
          let a2 = 1;
          return this.trafficStats && (a2 += this.trafficStats.peer_delay.length), { Duration: 0, UserCount: a2, SendBitrate: t2, SendBytes: e2, RecvBytes: i2, RecvBitrate: n2, OutgoingAvailableBandwidth: this.uplinkStats ? this.uplinkStats.B_uab / 1e3 : 0, RTT: this.trafficStats ? 2 * this.trafficStats.B_acd : 0 };
        }
        addLocalStats(e2) {
          this.localStats.set(e2, void 0);
        }
        removeLocalStats(e2) {
          e2 ? this.localStats.delete(e2) : this.localStats.clear();
        }
        addRemoteStats(e2) {
          this.remoteStats.set(e2, {});
        }
        removeRemoteStats(e2) {
          e2 ? this.remoteStats.delete(e2) : this.remoteStats.clear();
        }
        addP2PChannel(e2) {
          this.p2pChannel = e2;
        }
        updateTrafficStats(e2) {
          e2.peer_delay = e2.peer_delay.filter((e3) => void 0 !== e3.B_ppad || void 0 !== e3.B_ppvd);
          e2.peer_delay.filter((e3) => -1 === this.trafficStatsPeerList.indexOf(e3.peer_uid)).forEach((e3) => {
            var t2;
            const i2 = null === (t2 = this.p2pChannel) || void 0 === t2 ? void 0 : t2.getRemoteMedia(e3.peer_uid), n2 = null != i2 && i2.videoSSRC ? LF.measureFromSubscribeStart(this.store.clientId, i2.videoSSRC) : 0, r2 = null != i2 && i2.audioSSRC ? LF.measureFromSubscribeStart(this.store.clientId, i2.audioSSRC) : 0;
            void 0 !== e3.B_ppad && void 0 !== e3.B_ppvd && (this.onUploadPublishDuration && this.onUploadPublishDuration(e3.peer_uid, e3.B_ppad, e3.B_ppvd, n2 > r2 ? n2 : r2), this.trafficStatsPeerList.push(e3.peer_uid));
          }), this.trafficStats = e2;
        }
        updateUplinkStats(e2) {
          this.uplinkStats && this.uplinkStats.B_fir !== e2.B_fir && lD.debug("[".concat(this.store.clientId, "]: Period fir changes to ").concat(e2.B_fir)), this.uplinkStats = e2;
        }
        static isRemoteVideoFreeze(e2, t2, i2) {
          if (!e2) return false;
          const n2 = !!i2 && t2.framesDecodeFreezeTime > i2.framesDecodeFreezeTime, r2 = !i2 || t2.framesDecodeCount > i2.framesDecodeCount;
          return n2 || !r2;
        }
        static isRemoteAudioFreeze(e2) {
          return !!e2 && e2._isFreeze();
        }
        isLocalVideoFreeze(e2) {
          return !(!e2.inputFrame || !e2.sentFrame) && (e2.inputFrame.frameRate > 5 && e2.sentFrame.frameRate < 3);
        }
        updateLocalStats(e2) {
          Array.from(this.localStats.entries()).forEach((t2) => {
            let [i2, n2] = t2;
            switch (i2) {
              case ux.LocalVideoTrack:
              case ux.LocalVideoLowTrack: {
                const t3 = n2, o2 = MF({}, XD), s2 = e2.getStats(), a2 = e2.getLocalMedia(i2);
                if (s2) {
                  const i3 = s2.videoSend.find((e3) => e3.ssrc === (null == a2 ? void 0 : a2.ssrcs[0].ssrcId));
                  if (i3) {
                    const n3 = e2.getLocalVideoSize(), r3 = e2.getEncoderConfig(ux.LocalVideoTrack);
                    "H264" !== i3.codec && "H265" !== i3.codec && "VP8" !== i3.codec && "VP9" !== i3.codec && "AV1X" !== i3.codec && "AV1" !== i3.codec || (o2.codecType = i3.codec), o2.sendBytes = i3.bytes, o2.sendBitrate = t3 ? 8 * Math.max(0, o2.sendBytes - t3.sendBytes) : 0, i3.inputFrame ? (o2.captureFrameRate = i3.inputFrame.frameRate, o2.captureResolutionHeight = i3.inputFrame.height, o2.captureResolutionWidth = i3.inputFrame.width) : n3 && (o2.captureResolutionWidth = n3.width, o2.captureResolutionHeight = n3.height), i3.sentFrame ? (o2.sendFrameRate = i3.sentFrame.frameRate, o2.sendResolutionHeight = i3.sentFrame.height, o2.sendResolutionWidth = i3.sentFrame.width) : n3 && (o2.sendResolutionWidth = n3.width, o2.sendResolutionHeight = n3.height), i3.avgEncodeMs && (o2.encodeDelay = i3.avgEncodeMs), r3 && r3.bitrateMax && (o2.targetSendBitrate = 1e3 * r3.bitrateMax), o2.sendPackets = i3.packets, o2.sendPacketsLost = i3.packetsLost, o2.sendJitterMs = i3.jitterMs, o2.sendRttMs = i3.rttMs, o2.totalDuration = t3 ? t3.totalDuration + 1 : 1, o2.totalFreezeTime = t3 ? t3.totalFreezeTime : 0, this.isLocalVideoFreeze(i3) && (o2.totalFreezeTime += 1), i3.scalabilityMode && this.scalabilityMode !== i3.scalabilityMode && (lD.debug("[".concat(this.store.clientId, "]: The scalabilityMode of the video sending stream is ").concat(i3.scalabilityMode)), this.scalabilityMode = i3.scalabilityMode);
                  }
                  this.trafficStats && (o2.currentPacketLossRate = (this.trafficStats.B_pvlr4 || 0) / 100);
                }
                var r2;
                if (this.localStats.set(i2, o2), (null == t3 ? void 0 : t3.sendResolutionWidth) !== o2.sendResolutionWidth || (null == t3 ? void 0 : t3.sendResolutionHeight) !== o2.sendResolutionHeight) null === (r2 = this.onStatsChanged) || void 0 === r2 || r2.call(this, "resolution", { width: o2.sendResolutionWidth, height: o2.sendResolutionHeight });
                o2 && a2 && this.exceptionMonitor.setLocalVideoStats(this.store.uid, a2.track, o2);
                break;
              }
              case ux.LocalAudioTrack: {
                const t3 = n2, r3 = MF({}, JD), o2 = e2.getStats(), s2 = e2.getLocalMedia(i2);
                if (o2) {
                  const i3 = o2.audioSend.find((e3) => e3.ssrc === (null == s2 ? void 0 : s2.ssrcs[0].ssrcId));
                  if (i3) {
                    if ("opus" !== i3.codec && "aac" !== i3.codec && "PCMU" !== i3.codec && "PCMA" !== i3.codec && "G722" !== i3.codec || (r3.codecType = i3.codec), i3.inputLevel) r3.sendVolumeLevel = Math.round(32767 * i3.inputLevel);
                    else {
                      const t4 = e2.getLocalAudioVolume();
                      t4 && (r3.sendVolumeLevel = Math.round(32767 * t4));
                    }
                    r3.sendBytes = i3.bytes, r3.sendPackets = i3.packets, r3.sendPacketsLost = i3.packetsLost, r3.sendJitterMs = i3.jitterMs, r3.sendRttMs = i3.rttMs, r3.sendBitrate = t3 ? 8 * Math.max(0, r3.sendBytes - t3.sendBytes) : 0;
                  }
                }
                this.trafficStats && (r3.currentPacketLossRate = (this.trafficStats.B_palr4 || 0) / 100), this.localStats.set(ux.LocalAudioTrack, r3), r3 && s2 && this.exceptionMonitor.setLocalAudioStats(this.store.uid, s2.track, r3);
                break;
              }
            }
          });
        }
        updateRemoteStats(e2) {
          Array.from(this.remoteStats.entries()).forEach((t2) => {
            var i2, n2;
            let [r2, { videoStats: o2, audioStats: s2, videoPcStats: a2 }] = t2;
            const c2 = s2, d2 = o2, l2 = a2, u2 = MF({}, QD), h2 = MF({}, $D), p2 = MF({}, ZD), { audioTrack: _2, videoTrack: E2, audioSSRC: m2, videoSSRC: f2 } = e2.getRemoteMedia(r2);
            let T2;
            T2 = this.store.useP2P ? e2.getStats(true) : e2.getStats();
            const S2 = null === (i2 = T2) || void 0 === i2 ? void 0 : i2.audioRecv.find((e3) => e3.ssrc === m2), g2 = null === (n2 = T2) || void 0 === n2 ? void 0 : n2.videoRecv.find((e3) => e3.ssrc === f2), R2 = this.trafficStats && this.trafficStats.peer_delay.find((e3) => e3.peer_uid === r2);
            if (S2 && ("opus" !== S2.codec && "aac" !== S2.codec && "PCMU" !== S2.codec && "PCMA" !== S2.codec && "G722" !== S2.codec || (u2.codecType = S2.codec), S2.outputLevel ? u2.receiveLevel = Math.round(32767 * S2.outputLevel) : _2 && (u2.receiveLevel = Math.round(32767 * _2.getVolumeLevel())), u2.receiveBytes = S2.bytes, u2.receivePackets = S2.packets, u2.receivePacketsLost = S2.packetsLost, u2.receivePacketsDiscarded = S2.packetsDiscarded, u2.packetLossRate = u2.receivePacketsLost / (u2.receivePackets + u2.receivePacketsLost), u2.receiveBitrate = c2 ? 8 * Math.max(0, u2.receiveBytes - c2.receiveBytes) : 0, u2.totalDuration = c2 ? c2.totalDuration + 1 : 1, u2.totalFreezeTime = c2 ? c2.totalFreezeTime : 0, u2.freezeRate = u2.totalFreezeTime / u2.totalDuration, u2.receiveDelay = S2.jitterBufferMs, u2.totalDuration > 10 && UF.isRemoteAudioFreeze(_2) && (u2.totalFreezeTime += 1)), g2) {
              var v2;
              "H264" !== g2.codec && "H265" !== g2.codec && "VP8" !== g2.codec && "VP9" !== g2.codec && "AV1X" !== g2.codec && "AV1" !== g2.codec || (h2.codecType = g2.codec), h2.receiveBytes = g2.bytes, h2.receiveBitrate = d2 ? 8 * Math.max(0, h2.receiveBytes - d2.receiveBytes) : 0, h2.decodeFrameRate = g2.decodeFrameRate < 0 ? 0 : g2.decodeFrameRate, h2.renderFrameRate = g2.decodeFrameRate < 0 ? 0 : g2.decodeFrameRate, g2.outputFrame && (h2.renderFrameRate = g2.outputFrame.frameRate), g2.receivedFrame ? (h2.receiveFrameRate = g2.receivedFrame.frameRate, h2.receiveResolutionHeight = g2.receivedFrame.height, h2.receiveResolutionWidth = g2.receivedFrame.width) : E2 && (h2.receiveResolutionHeight = E2._videoHeight || 0, h2.receiveResolutionWidth = E2._videoWidth || 0), void 0 !== g2.framesRateFirefox && (h2.receiveFrameRate = Math.round(g2.framesRateFirefox)), h2.receivePackets = g2.packets, h2.receivePacketsLost = g2.packetsLost, h2.packetLossRate = h2.receivePacketsLost / (h2.receivePackets + h2.receivePacketsLost);
              const t3 = d2 ? d2.totalFreezeTime : 0, i3 = d2 ? d2.totalDuration : 0;
              h2.totalDuration = d2 ? d2.totalDuration + 1 : 1, h2.totalFreezeTime = null !== (v2 = g2.totalFreezesDuration) && void 0 !== v2 ? v2 : t3 || 0, h2.receiveDelay = g2.jitterBufferMs || 0;
              const n3 = !!f2 && e2.getRemoteVideoIsReady(f2);
              void 0 === g2.totalFreezesDuration && E2 && n3 && UF.isRemoteVideoFreeze(E2, g2, l2) && (h2.totalFreezeTime += 1), h2.freezeRate = Math.max(0, Math.min((h2.totalFreezeTime - t3) / (h2.totalDuration - i3), 1));
            }
            R2 && (u2.end2EndDelay = R2.B_ad, h2.end2EndDelay = R2.B_vd, u2.transportDelay = R2.B_ed, h2.transportDelay = R2.B_ed, u2.currentPacketLossRate = R2.B_ealr4 / 100, h2.currentPacketLossRate = R2.B_evlr4 / 100, p2.uplinkNetworkQuality = R2.B_punq ? R2.B_punq : 0, p2.downlinkNetworkQuality = R2.B_pdnq ? R2.B_pdnq : 0), this.remoteStats.set(r2, { audioStats: u2, videoStats: h2, videoPcStats: g2, networkStats: p2 }), _2 && this.exceptionMonitor.setRemoteAudioStats(_2, u2), E2 && this.exceptionMonitor.setRemoteVideoStats(E2, h2);
          });
        }
      }
      class xF {
        constructor() {
          vy(this, "destChannelMediaInfos", /* @__PURE__ */ new Map()), vy(this, "srcChannelMediaInfo", void 0);
        }
        setSrcChannelInfo(e2) {
          HU(e2), this.srcChannelMediaInfo = e2;
        }
        addDestChannelInfo(e2) {
          HU(e2), this.destChannelMediaInfos.set(e2.channelName, e2);
        }
        removeDestChannelInfo(e2) {
          kU(e2), this.destChannelMediaInfos.delete(e2);
        }
        getSrcChannelMediaInfo() {
          return this.srcChannelMediaInfo;
        }
        getDestChannelMediaInfo() {
          return this.destChannelMediaInfos;
        }
      }
      function VF(e2) {
        if (!(e2 instanceof xF)) {
          return new SD(Uw.INVALID_PARAMS, "Config should be instance of [ChannelMediaRelayConfiguration]").throw();
        }
        const t2 = e2.getSrcChannelMediaInfo(), i2 = e2.getDestChannelMediaInfo();
        if (!t2) {
          return new SD(Uw.INVALID_PARAMS, "srcChannelMediaInfo should not be empty").throw();
        }
        if (0 === i2.size) {
          return new SD(Uw.INVALID_PARAMS, "destChannelMediaInfo should not be empty").throw();
        }
      }
      class FF {
        get hasVideo() {
          return this._video_enabled_ && !this._video_muted_ && this._video_added_;
        }
        get hasAudio() {
          return this._audio_enabled_ && !this._audio_muted_ && this._audio_added_;
        }
        get audioTrack() {
          if (this.hasAudio || this._audio_pre_subscribed) return this._audioTrack;
        }
        get videoTrack() {
          if (this.hasVideo || this._video_pre_subscribed) return this._videoTrack;
        }
        get dataChannels() {
          return this._dataChannels;
        }
        constructor(e2, t2) {
          vy(this, "uid", void 0), vy(this, "_uintid", void 0), vy(this, "_trust_in_room_", true), vy(this, "_trust_audio_enabled_state_", true), vy(this, "_trust_video_enabled_state_", true), vy(this, "_trust_audio_mute_state_", true), vy(this, "_trust_video_mute_state_", true), vy(this, "_audio_muted_", false), vy(this, "_video_muted_", false), vy(this, "_audio_enabled_", true), vy(this, "_video_enabled_", true), vy(this, "_audio_added_", false), vy(this, "_video_added_", false), vy(this, "_is_pre_created", false), vy(this, "_video_pre_subscribed", false), vy(this, "_audio_pre_subscribed", false), vy(this, "_trust_video_stream_added_state_", true), vy(this, "_trust_audio_stream_added_state_", true), vy(this, "_audioTrack", void 0), vy(this, "_videoTrack", void 0), vy(this, "_dataChannels", []), vy(this, "_audioSSRC", void 0), vy(this, "_videoSSRC", void 0), vy(this, "_audioOrtc", void 0), vy(this, "_videoOrtc", void 0), vy(this, "_cname", void 0), vy(this, "_rtxSsrcId", void 0), vy(this, "_videoMid", void 0), vy(this, "_audioMid", void 0), this.uid = e2, this._uintid = t2;
        }
      }
      function BF(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function jF(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? BF(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : BF(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const GF = "9", WF = 4e4;
      let HF = class {
        get localCapabilities() {
          return RO(this._localCapabilities);
        }
        get rtpCapabilities() {
          return RO(this._rtpCapabilities);
        }
        get candidates() {
          return RO(this._candidates);
        }
        get iceParameters() {
          return RO(this._iceParameters);
        }
        get dtlsParameters() {
          return RO(this._dtlsParameters);
        }
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          vy(this, "sessionDesc", void 0), vy(this, "_localCapabilities", void 0), vy(this, "_rtpCapabilities", void 0), vy(this, "_candidates", void 0), vy(this, "_originCandidates", void 0), vy(this, "_iceParameters", void 0), vy(this, "_isUseExtmapAllowMixed", void 0), vy(this, "_dtlsParameters", void 0), vy(this, "setup", void 0), vy(this, "currentMidIndex", void 0), vy(this, "cname", void 0), vy(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), this._isUseExtmapAllowMixed = t2, e2 = RO(e2);
          const { iceParameters: i2, dtlsParameters: n2, candidates: r2, rtpCapabilities: o2, setup: s2, localCapabilities: a2, cname: c2 } = e2;
          this._rtpCapabilities = o2, this._candidates = r2, this._originCandidates = RO(r2), this._iceParameters = i2, this._dtlsParameters = n2, this._localCapabilities = a2, this.setup = s2, this.cname = c2, this.sessionDesc = this.updateRemoteRTPCapabilities(o2), this.currentMidIndex = this.sessionDesc.mediaDescriptions.length - 1;
        }
        preloadRemoteMedia(e2) {
          const t2 = this.candidates, i2 = this.dtlsParameters, n2 = this.iceParameters, r2 = this.rtpCapabilities.send;
          let o2 = this.sessionDesc.mediaDescriptions.length - 1;
          for (let s2 = 1; s2 < e2; s2++) {
            const e3 = 2 * s2 + 2e4, a2 = 2 * s2 + WF, { ssrcs: c2, ssrcGroups: d2 } = mV([{ ssrcId: e3 }], this.cname), { ssrcs: l2, ssrcGroups: u2 } = mV([{ ssrcId: a2, rtx: MN("USE_SUB_RTX") ? a2 + 1 : void 0 }], this.cname);
            this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "video", port: GF, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: r2.videoCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n2.iceUfrag, icePwd: n2.icePwd, unrecognized: [], candidates: t2, extmaps: r2.videoExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: l2, ssrcGroups: u2, rtcpFeedbackWildcards: [], payloads: r2.videoCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(++o2) } }), this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "audio", port: GF, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: r2.audioCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n2.iceUfrag, icePwd: n2.icePwd, unrecognized: [], candidates: t2, extmaps: r2.audioExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: c2, ssrcGroups: d2, rtcpFeedbackWildcards: [], payloads: r2.audioCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(++o2) } }), this.currentMidIndex += 2;
          }
          this.updateBundleMids();
        }
        toString() {
          return HN(this.sessionDesc);
        }
        send(e2, t2, i2, n2) {
          const { ssrcs: r2, ssrcGroups: o2 } = mV(t2, this.cname, MN("SYNC_GROUP") ? i2 : void 0), s2 = this.findPreloadMediaDesc(r2);
          if (s2) {
            if (hw() && this.firefoxSsrcMidMap.set(r2[0].ssrcId, s2.attributes.mid), n2 && (n2.twcc || n2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(s2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(s2, n2), { mid: s2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: s2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, r2);
            let i3;
            return -1 === t3 || 1 === t3 && (lw() || function() {
              const e3 = rw();
              return !(e3.name !== ew.CHROME || !e3.osVersion) && Number(e3.version) <= 90;
            }() || MN("ENABLE_ENCODED_TRANSFORM") && dw()) || 0 === t3 && MN("USE_SUB_RTX") || vw() ? (i3 = this.createOrRecycleSendMedia(e2, r2, o2, "sendonly", n2), this.updateBundleMids()) : (i3 = RO(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = r2, i3.attributes.ssrcGroups = o2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, n2)), hw() && this.firefoxSsrcMidMap.set(r2[0].ssrcId, i3.attributes.mid), { mid: i3.attributes.mid, needExchangeSDP: true };
          }
        }
        sendDataChannel() {
          const { mediaDesc: e2, needExchangeSDP: t2 } = this.createOrRecycleDataChannel();
          return this.updateBundleMids(), { mid: e2.attributes.mid, needExchangeSDP: t2 };
        }
        batchSend(e2) {
          const t2 = e2.map((e3) => {
            let { kind: t3, ssrcMsg: i3, mslabel: n3 } = e3;
            return this.send(t3, i3, n3);
          }), i2 = [];
          let n2 = false;
          return t2.forEach((e3) => {
            let { mid: t3, needExchangeSDP: r2 } = e3;
            r2 && (n2 = true), i2.push(t3);
          }), { mids: i2, needExchangeSDP: n2 };
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            "0" === e3.attributes.mid || hw() || vw() ? e3.attributes.ssrcs = [] : (e3.attributes.ssrcs = [], e3.attributes.direction = "inactive", e3.media.port = "0");
          }), this.updateBundleMids();
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2) throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2) throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => kn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => kn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        receive(e2, t2, i2, n2) {
          e2.forEach((e3, r2) => {
            this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2, n2[r2]);
          }), this.updateBundleMids();
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length) throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        updateRemoteRTPCapabilities(e2) {
          const t2 = this.sessionDesc || WN((i2 = this._isUseExtmapAllowMixed, "v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=ice-lite".concat(i2 ? "\na=extmap-allow-mixed" : "", "\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n")));
          var i2;
          this._rtpCapabilities = e2;
          const n2 = this.rtpCapabilities.send, r2 = this.localCapabilities.send;
          for (const e3 of t2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = this._iceParameters.iceUfrag, e3.attributes.icePwd = this._iceParameters.icePwd, e3.attributes.fingerprints = this._dtlsParameters.fingerprints, e3.attributes.candidates = this._candidates, e3.attributes.setup = this.setup, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType) {
              if (0 === n2.videoCodecs.length) {
                const t3 = r2.videoCodecs.filter((e4) => {
                  var t4, i3;
                  return null === (t4 = e4.rtpMap) || void 0 === t4 ? void 0 : kn(i3 = t4.encodingName.toLowerCase()).call(i3, "vp8");
                }) || [r2.videoCodecs[0]];
                e3.media.fmts = t3.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = t3, e3.attributes.extmaps = [];
              } else if (e3.media.fmts = n2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = n2.videoCodecs, e3.attributes.extmaps = n2.videoExtensions, MN("PRELOAD_MEDIA_COUNT") > 0) {
                const { ssrcs: t3, ssrcGroups: i3 } = mV([{ ssrcId: WF, rtx: MN("USE_SUB_RTX") ? 40001 : void 0 }], this.cname);
                e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
              }
            }
            if ("audio" === e3.media.mediaType) {
              if (0 === n2.audioCodecs.length) {
                const t3 = r2.audioCodecs.filter((e4) => {
                  var t4, i3;
                  return null === (t4 = e4.rtpMap) || void 0 === t4 ? void 0 : kn(i3 = t4.encodingName.toLowerCase()).call(i3, "opus");
                }) || [r2.audioCodecs[0]];
                e3.media.fmts = t3.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = t3, e3.attributes.extmaps = [];
              } else if (e3.media.fmts = n2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = n2.audioCodecs, e3.attributes.extmaps = n2.audioExtensions, bV(e3), MN("PRELOAD_MEDIA_COUNT") > 0) {
                const { ssrcs: t3, ssrcGroups: i3 } = mV([{ ssrcId: 2e4 }], this.cname);
                e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
              }
            }
          }
          return this.sessionDesc = t2, this.currentMidIndex = t2.mediaDescriptions.length - 1, this.sessionDesc;
        }
        updateCandidates(e2) {
          const t2 = this._originCandidates.filter((e3) => "udp" === e3.transport), i2 = [];
          if (t2.forEach((e3) => {
            i2.push(jF(jF({}, e3), {}, { foundation: "tcpcandidate", priority: Number(e3.priority) - 1 + "", transport: "tcp", port: Number(e3.port) + 90 + "" }));
          }), 0 !== t2.length) {
            switch (e2) {
              case cx.TCP_RELAY:
                this._candidates = i2;
                break;
              case cx.UDP_TCP_RELAY:
              case cx.RELAY:
                this._candidates = [...t2, ...i2];
                break;
              default:
                this._candidates = t2;
            }
            for (const e3 of this.sessionDesc.mediaDescriptions) e3.attributes.candidates = this.candidates;
          }
        }
        restartICE(e2) {
          e2 = RO(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++) t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        findAvailableMediaIndex(e2, t2) {
          return this.sessionDesc.mediaDescriptions.findIndex((i2) => {
            const n2 = i2.media.mediaType === e2 && "0" !== i2.media.port && ("sendonly" === i2.attributes.direction || "sendrecv" === i2.attributes.direction) && 0 === i2.attributes.ssrcs.length;
            if (hw()) {
              if (n2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== i2.attributes.mid && "1" !== i2.attributes.mid) || !(!e3 || e3 !== i2.attributes.mid);
              }
              return false;
            }
            return n2;
          });
        }
        createOrRecycleDataChannel() {
          for (const e3 of this.sessionDesc.mediaDescriptions) if ("application" === e3.media.mediaType) return { mediaDesc: e3, needExchangeSDP: false };
          this.currentMidIndex += 1;
          const e2 = "".concat(this.currentMidIndex), t2 = { media: { mediaType: "application", port: GF, protos: ["UDP", "DTLS", "SCTP"], fmts: ["webrtc-datachannel"] }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: [], fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: [], ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: [], rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, mid: "".concat(e2), sctpPort: "5000" } };
          return this.sessionDesc.mediaDescriptions.push(t2), { mediaDesc: t2, needExchangeSDP: true };
        }
        createOrRecycleRecvMedia(e2, t2, i2, n2, r2, o2) {
          const s2 = e2._mediaStreamTrack.kind, a2 = this.rtpCapabilities.recv, c2 = wV(s2, a2, this.localCapabilities.send, s2 === ax.VIDEO ? n2 : r2), d2 = s2 === ax.VIDEO ? a2.videoExtensions : a2.audioExtensions;
          this.currentMidIndex += 1;
          const l2 = "".concat(this.currentMidIndex);
          let u2 = { media: { mediaType: s2, port: GF, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: c2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: d2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: c2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(l2) } };
          u2 = this.mungRecvMediaDsec(u2, e2, o2);
          const h2 = this.findFirstClosedMedia(s2);
          if (h2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(h2);
            this.sessionDesc.mediaDescriptions[e3] = u2;
          } else this.sessionDesc.mediaDescriptions.push(u2);
          return u2;
        }
        updateRemoteCodec(e2, t2, i2) {
          const n2 = [...new Set(this._rtpCapabilities.recv.videoCodecs.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").filter((e3) => {
            var t3;
            return kn(t3 = Object.keys(BN)).call(t3, e3);
          }))], r2 = new Set(t2);
          if (n2.every((e3) => r2.has(e3))) return lD.debug("codecs has not changed, no need to updateRemoteCodec, codecs: ".concat(t2)), false;
          const o2 = this._rtpCapabilities.recv.videoCodecs.filter((e3) => t2.some((t3) => {
            var i3;
            return kn(i3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(i3, t3);
          }));
          if (0 === o2.length) return lD.debug("updateRemoteCodec failed, because cannot find matched codec, remoteCapabilities codecs: ".concat(n2, " codecs: ").concat(t2)), false;
          const s2 = [...new Set(o2.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || ""))];
          let a2;
          if (lD.debug("updateRemoteCodec, from ".concat(n2, " to ").concat(s2)), 0 === e2.length) a2 = this.sessionDesc.mediaDescriptions.filter((e3) => "video" === e3.media.mediaType && "recvonly" === e3.attributes.direction);
          else if (a2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && kn(e2).call(e2, t3.attributes.mid) && "recvonly" === t3.attributes.direction), a2.length !== e2.length) return lD.debug("updateRemoteCodec failed, because cannot find mids, mids: ".concat(e2, ", codecs: ").concat(t2)), false;
          if (MN("USE_PUB_RTX") || MN("USE_SUB_RTX")) {
            const e3 = OV(o2, this.rtpCapabilities.recv.videoCodecs);
            o2.push(...e3);
          }
          this._rtpCapabilities.recv.videoCodecs = o2;
          const c2 = this.localCapabilities.send, d2 = this.rtpCapabilities.recv, l2 = wV(ax.VIDEO, d2, c2, i2);
          return a2.forEach((e3) => {
            const t3 = l2.map((e4) => e4.payloadType.toString(10));
            lD.debug("updateRemoteCodec mid: ".concat(e3.attributes.mid, ", from"), e3.attributes.payloads, "to", l2), e3.attributes.payloads = l2, e3.media.fmts = t3;
          }), true;
        }
        createOrRecycleSendMedia(e2, t2, i2, n2, r2) {
          const o2 = this.rtpCapabilities.send, s2 = e2 === ax.VIDEO ? o2.videoCodecs : o2.audioCodecs, a2 = e2 === ax.VIDEO ? o2.videoExtensions : o2.audioExtensions;
          this.currentMidIndex += 1;
          const c2 = "".concat(this.currentMidIndex);
          let d2 = { media: { mediaType: e2, port: GF, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: a2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: s2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: n2, rtcpMux: true, rtcpRsize: true, mid: "".concat(c2) } };
          d2 = this.mungSendMediaDesc(d2, r2);
          const l2 = this.findFirstClosedMedia(e2);
          if (l2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(l2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const n2 = RO(e2);
          return TV(n2), fV(n2, t2), SV(n2, t2), gV(n2), RV(n2, i2, this.localCapabilities.send), n2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = RO(e2);
          return RV(i2, t2, this.localCapabilities.recv), bV(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => hw() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId) === e2[0].ssrcId;
          });
        }
        getSSRC(e2) {
          var t2;
          return null === (t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2)) || void 0 === t2 ? void 0 : t2.attributes.ssrcs;
        }
      };
      function KF(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function YF(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? KF(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : KF(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      var qF = function(e2) {
        return e2[e2.DOWN = 0] = "DOWN", e2[e2.UP = 1] = "UP", e2;
      }(qF || {});
      const zF = /* @__PURE__ */ new Map();
      function JF(e2, t2, i2, n2) {
        let { scale: r2 } = e2;
        if (0 === r2 && n2 === qF.UP || r2 >= t2.length - 1 && n2 === qF.DOWN) return e2;
        let o2 = YF(YF({}, e2), {}, { scale: n2 === qF.DOWN ? ++r2 : --r2 });
        switch (i2) {
          case "maintain-framerate":
            o2 = YF(YF({}, o2), t2[r2].motion);
            break;
          case "maintain-resolution":
            o2 = YF(YF({}, o2), t2[r2].detail);
            break;
          case "balanced":
            o2 = YF(YF({}, o2), t2[r2].balanced);
        }
        return o2;
      }
      function XF(e2, t2) {
        if (t2) {
          const i2 = { overUse: 0, underUse: 0, adaptationList: QF(t2) };
          zF.set(e2, i2);
        } else zF.delete(e2);
      }
      function QF(e2) {
        const t2 = YF({}, e2), { bitrateMax: i2, frameRate: n2, scaleResolutionDownBy: r2, bitrateMin: o2 } = t2, { MIN_FRAME_RATE: s2, MAX_THRESHOLD_FRAMERATE: a2, MAX_SCALE: c2, BITRATE_MIN_THRESHOLD: d2, BITRATE_MAX_THRESHOLD: l2, BWE_SCALE_UP_THRESHOLD: u2, BWE_SCALE_DOWN_THRESHOLD: h2, PERF_SCALE_DOWN_THRESHOLD: p2, PERF_SCALE_UP_THRESHOLD: _2, BALANCE_BITRATE_FACTOR: E2, BALANCE_FRAMERATE_FACTOR: m2, BALANCE_RESOLUTION_FACTOR: f2, MOTION_RESOLUTION_FACTOR: T2, MOTION_BITRATE_FACTOR: S2, DETAIL_FRAMERATE_FACTOR: g2, DETAIL_BITRATE_FACTOR: R2 } = NN, v2 = Math.min(t2.frameRate, a2), C2 = [{ scale: 0, threshold: { bwe_down: Math.round(Math.pow(h2, 1) * i2), bwe_up: i2, fps_down: Math.round(Math.pow(p2, 1) * v2), fps_up: n2 }, balanced: { scaleResolutionDownBy: 1, frameRate: n2, bitrateMax: i2, bitrateMin: o2 }, motion: { scaleResolutionDownBy: 1, frameRate: n2, bitrateMax: i2, bitrateMin: o2 }, detail: { scaleResolutionDownBy: 1, frameRate: n2, bitrateMax: i2, bitrateMin: o2 } }];
        for (let e3 = 1; e3 <= c2; e3++) {
          const t3 = { bwe_up: Math.round(Math.pow(u2, e3) * i2), bwe_down: Math.round(Math.pow(h2, e3 + 1) * i2), fps_up: Math.round(Math.pow(_2, e3) * v2), fps_down: Math.round(Math.pow(p2, e3 + 1) * v2) }, a3 = { scaleResolutionDownBy: r2 / Math.pow(f2, e3), frameRate: Math.max(Math.round(Math.pow(m2, e3) * n2), s2), bitrateMax: Math.max(Math.round(Math.pow(E2, e3) * i2), l2), bitrateMin: Math.max(Math.round(Math.pow(E2, e3) * o2), d2) }, c3 = { scaleResolutionDownBy: r2 / Math.pow(T2, e3), frameRate: n2, bitrateMax: Math.max(Math.round(Math.pow(S2, e3) * i2), l2), bitrateMin: Math.max(Math.round(Math.pow(S2, e3) * o2), d2) }, I2 = { scaleResolutionDownBy: 1, frameRate: Math.max(Math.round(Math.pow(g2, e3) * n2), s2), bitrateMax: Math.max(Math.round(Math.pow(R2, e3) * i2), l2), bitrateMin: Math.max(Math.round(Math.pow(R2, e3) * o2), d2) };
          C2.push({ scale: e3, threshold: t3, balanced: a3, motion: c3, detail: I2 });
        }
        return C2;
      }
      function ZF(e2, t2, i2, n2, r2, o2) {
        const s2 = zF.get(e2) || { overUse: 0, underUse: 0, adaptationList: QF(r2) }, { adaptationList: a2 } = s2;
        zF.set(e2, s2);
        const { OVERUSE_TIMES_THRESHOLD: c2, UNDERUSE_TIMES_THRESHOLD: d2 } = NN, { scale: l2 } = n2;
        let u2, h2;
        return "number" == typeof t2 && t2 > 0 && function(e3, t3, i3, n3) {
          if (t3 >= i3.length) return false;
          let { threshold: { fps_down: r3 } } = i3[t3];
          return MN("FORCE_AG_HIGH_FRAMERATE") && "maintain-framerate" === n3 && (r3 = i3[0].threshold.fps_down), e3 < r3;
        }(t2, l2, a2, o2) && (s2.overUse++, h2 = _N.CPU, s2.overUse > c2) || "number" == typeof i2 && i2 > 0 && function(e3, t3, i3) {
          if (t3 >= i3.length) return false;
          const { threshold: { bwe_down: n3 } } = i3[t3];
          return e3 < n3;
        }(i2, l2, a2) && (s2.overUse++, h2 = _N.BANDWIDTH, s2.overUse > c2) ? (s2.overUse = 0, s2.underUse = 0, u2 = JF(n2, a2, o2, qF.DOWN), [u2, h2]) : ("number" == typeof t2 && t2 > 0 && "number" == typeof i2 && i2 > 0 && function(e3, t3, i3, n3) {
          if (0 === t3) return;
          let { threshold: { fps_up: r3 } } = i3[t3];
          return MN("FORCE_AG_HIGH_FRAMERATE") && "maintain-framerate" === n3 && (r3 = i3[1].threshold.fps_up), e3 > r3;
        }(t2, l2, a2, o2) && function(e3, t3, i3) {
          if (0 === t3) return;
          const { threshold: { bwe_up: n3 } } = i3[t3];
          return e3 > n3;
        }(i2, l2, a2) && (s2.underUse++, s2.underUse > d2 && (s2.overUse = 0, s2.underUse = 0, u2 = JF(n2, a2, o2, qF.UP), 0 === u2.scale && (h2 = _N.NONE))), [u2, h2]);
      }
      function $F(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function eB(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? $F(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : $F(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function tB(e2) {
        var t2;
        return !!MN("ENABLE_AG_ADAPTATION") && (!!(e2 instanceof Pk || kn(t2 = e2._hints).call(t2, BD.CUSTOM_TRACK)) && (!!MN("FORCE_SUPPORT_AG_ADAPTATION") || !!(function(e3) {
          const t3 = rw();
          if (t3.os !== $b.IOS || !t3.osVersion) return false;
          const i2 = t3.osVersion.split(".");
          return Number(i2[0]) >= e3;
        }(14) && Sw(17, 4, true) || Tw(14) && gw(17, 4, true))));
      }
      const iB = /* @__PURE__ */ new Map();
      function nB(e2, t2) {
        const i2 = iB.get(e2);
        if (i2) {
          const { timer: t3 } = i2;
          window.clearTimeout(t3), iB.delete(e2);
        }
        t2.qualityLimitationReason = _N.NONE, XF(e2);
      }
      function rB(e2, t2) {
        var i2;
        let n2;
        switch (t2) {
          case ux.LocalAudioTrack:
            n2 = JU.Audio;
            break;
          case ux.LocalVideoTrack:
            n2 = kn(i2 = e2._hints).call(i2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
            break;
          case ux.LocalVideoLowTrack:
            n2 = JU.Low;
        }
        return n2;
      }
      function oB(e2) {
        const t2 = RD();
        if (e2.some((e3) => e3._bypassWebAudio)) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
        if (!t2.webAudioMediaStreamDest) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks because your browser does not support audio mixing");
      }
      function sB(e2, t2) {
        oB(e2);
        const i2 = t2 || new KL();
        return e2.forEach((e3) => i2.addAudioTrack(e3)), i2;
      }
      const aB = !RD().supportUnifiedPlan || MN("CHROME_FORCE_PLAN_B") && Nw();
      function cB(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        var i2;
        return aB ? (i2 = { spec: t2, store: e2 }, BV("PlanBConnection").create(i2)) : new _B(t2, e2);
      }
      function dB(e2) {
        return e2 && ("disconnected" === e2.iceConnectionState || "checking" === e2.iceConnectionState || "failed" === e2.iceConnectionState);
      }
      function lB(e2) {
        try {
          if (e2.iceServers) return false;
          if (e2.turnServer && "off" !== e2.turnServer.mode) {
            if (sO(e2.turnServer.servers)) return false;
            if (MN("FORCE_TURN_TCP") || e2.turnServer.servers.concat(e2.turnServer.serversFromGateway || []).some((e3) => e3.forceturn)) return true;
          }
          return false;
        } catch (e3) {
          return false;
        }
      }
      var uB;
      function hB(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function pB(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? hB(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : hB(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let _B = (uB = class e2 extends sx {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get dtlsTransportState() {
          var e3, t2;
          return null !== (e3 = null === (t2 = this.peerConnection.getReceivers()[0]) || void 0 === t2 || null === (t2 = t2.transport) || void 0 === t2 ? void 0 : t2.state) && void 0 !== e3 ? e3 : null;
        }
        get localCodecs() {
          return [...new Set(this.localCapabilities && this.localCapabilities.send.videoCodecs.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").filter((e3) => {
            var t2;
            return kn(t2 = Object.keys(BN)).call(t2, e3);
          }))];
        }
        constructor(t2, i2) {
          super(t2, i2), vy(this, "id", LO(5, "connection-")), vy(this, "store", void 0), vy(this, "peerConnection", void 0), vy(this, "forceTurn", false), vy(this, "remoteSDP", void 0), vy(this, "initialOffer", void 0), vy(this, "transportEventReceiver", void 0), vy(this, "statsFilter", void 0), vy(this, "extension", { useXR: MN("USE_XR") }), vy(this, "localCapabilities", void 0), vy(this, "remoteCodecs", void 0), vy(this, "localCandidateCount", 0), vy(this, "allCandidatesReceived", false), vy(this, "isPreallocation", false), vy(this, "preSSRCMap", /* @__PURE__ */ new Map()), vy(this, "dataStreamChannelMap", /* @__PURE__ */ new Map()), vy(this, "establishPromise", void 0), vy(this, "recoveredDataChannelIds", []), vy(this, "currentDataChannelId", 1), vy(this, "supportAV1RtpSpec", false), vy(this, "mutex", void 0), vy(this, "qualityLimitationReason", _N.NONE), this.store = i2, this.forceTurn = lB(t2), this.mutex = new KO("P2PConnection-mutex", i2.clientId), this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2), { optional: [{ googDscp: true }] }), this.statsFilter = vN(this.peerConnection, MN("STATS_UPDATE_INTERVAL"), void 0, hw() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1, this.establishPromise = this.establish();
        }
        getPreMedia(e3) {
          const t2 = this.preSSRCMap.get(e3);
          if (void 0 !== t2) {
            const e4 = this.peerConnection.getTransceivers().find((e5) => e5.mid === t2);
            if (e4) return { transceiver: e4, track: e4.receiver.track, id: t2 };
          }
        }
        async updateRemoteRTPCapabilities(e3, t2) {
          if (this.remoteCodecs = t2, !this.remoteSDP) return void lD.debug("[P2PConnection] cannot updateRemoteRTPCapabilities before remote SDP created, local codecs: ".concat(this.localCodecs, ", codecs: ").concat(t2));
          if (this.remoteSDP.updateRemoteCodec(e3, t2, this.store.codec)) {
            const e4 = await this.peerConnection.createOffer(), t3 = this.logSDPExchange(e4.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(e4);
            const i2 = this.remoteSDP.toString();
            null == t3 || t3(i2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: i2 });
          } else lD.debug("[P2PConnection] updateRemoteRTPCapabilities no need to exchange SDP.");
        }
        async establish() {
          try {
            this.peerConnection.addTransceiver("video", { direction: "recvonly" }), this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
            const i2 = await this.peerConnection.createOffer();
            if (!i2.sdp) throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const n2 = hV(i2.sdp), r2 = await CV({ filterRTX: !MN("USE_PUB_RTX") && !MN("USE_SUB_RTX"), filterVideoFec: MN("FILTER_VIDEO_FEC"), filterAudioFec: MN("FILTER_AUDIO_FEC"), filterVideoCodec: MN("FILTER_VIDEO_CODEC") }, this.extension);
            if (this.localCapabilities = AV(r2), this.initialOffer = i2, MN("ENABLE_SVC") && "av1" == this.store.codec) {
              const t3 = await async function() {
                try {
                  const e4 = new RTCPeerConnection();
                  e4.addTransceiver("video", { direction: "sendonly", sendEncodings: [{ scalabilityMode: EN.L1T3 }] });
                  const t4 = await e4.createOffer();
                  if (!t4.sdp) return void e4.close();
                  const i3 = WN(t4.sdp).mediaDescriptions[0];
                  if (!i3) return;
                  const n3 = i3.attributes.extmaps.find((e5) => "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension" === e5.extensionName);
                  return e4.close(), n3;
                } catch (e4) {
                  return;
                }
              }();
              var e3;
              if (t3) this.supportAV1RtpSpec = true, null === (e3 = r2.send) || void 0 === e3 || e3.videoExtensions.push(t3);
            }
            let o2;
            return i2.sdp && LV(i2.sdp) && (o2 = RO(r2), (t2 = o2).send && (sV(ax.VIDEO, t2.send.videoExtensions), sV(ax.AUDIO, t2.send.audioExtensions)), t2.recv && (sV(ax.VIDEO, t2.recv.videoExtensions), sV(ax.AUDIO, t2.recv.audioExtensions)), t2.sendrecv && (sV(ax.VIDEO, t2.sendrecv.videoExtensions), sV(ax.AUDIO, t2.sendrecv.audioExtensions))), pB(pB({}, n2), {}, { rtpCapabilities: o2 || r2, offerSDP: i2.sdp });
          } catch (e4) {
            throw new xw(Uw.GET_LOCAL_CONNECTION_PARAMS_FAILED, e4.toString());
          }
          var t2;
        }
        async connect(e3) {
          try {
            if (!this.initialOffer) throw new Error("Cannot establish P2PConnection without initial offer.");
            this.initialOffer.sdp && LV(this.initialOffer.sdp) && (t2 = e3.rtpCapabilities, i2 = this.localCapabilities, t2.send && (oV(ax.VIDEO, t2.send.videoExtensions, i2.send.videoExtensions), oV(ax.AUDIO, t2.send.audioExtensions, i2.send.audioExtensions)), t2.recv && (oV(ax.VIDEO, t2.recv.videoExtensions, i2.recv.videoExtensions), oV(ax.AUDIO, t2.recv.audioExtensions, i2.recv.audioExtensions))), this.remoteSDP = new HF(pB(pB({}, e3), {}, { localCapabilities: this.localCapabilities }), this.supportAV1RtpSpec), e3.preallocation && (this.isPreallocation = true), Array.isArray(this.remoteCodecs) && this.remoteCodecs.length > 0 && this.remoteSDP.updateRemoteCodec([], this.remoteCodecs, this.store.codec);
            const n2 = this.remoteSDP.toString(), r2 = DV(this.initialOffer.sdp, this.extension), o2 = this.logSDPExchange(r2 || "", "offer", "local", "connect");
            this.store.descriptionStart(), await this.peerConnection.setLocalDescription({ type: "offer", sdp: r2 }), null == o2 || o2(n2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
            const s2 = this.peerConnection.getTransceivers()[0];
            if (null != s2 && s2.receiver && this.tryBindTransportEvents(s2.receiver), MN("PRELOAD_MEDIA_COUNT") > 0) {
              this.remoteSDP.preloadRemoteMedia(MN("PRELOAD_MEDIA_COUNT"));
              const e4 = this.remoteSDP.toString();
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e4 });
              const t3 = await this.peerConnection.createAnswer();
              await this.peerConnection.setLocalDescription(t3);
            }
            const { preSSRCs: a2 } = e3;
            if (Array.isArray(a2) && a2.length > 0) {
              const { mids: e4 } = this.remoteSDP.batchSend(a2.map((e5) => ({ kind: e5.kind, ssrcMsg: [{ ssrcId: e5.ssrcId, rtx: e5.rtx }], mslabel: e5.mslabel })));
              e4.forEach((e5, t3) => {
                this.preSSRCMap.set(a2[t3].ssrcId, e5);
              }), await NV(this.peerConnection, this.remoteSDP, this.extension), lD.debug("[".concat(this.store.clientId, "] [P2PConnection] pre-batchReceive exchange SDP."));
            }
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
          var t2, i2;
        }
        async updateRemoteConnect(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.updateRemoteConnect before remote SDP created");
            const { rtpCapabilities: t2 } = e3;
            this.remoteSDP.updateRemoteRTPCapabilities(t2), Array.isArray(this.remoteCodecs) && this.remoteCodecs.length > 0 && this.remoteSDP.updateRemoteCodec([], this.remoteCodecs, this.store.codec);
            const { preSSRCs: i2 } = e3;
            if (Array.isArray(i2) && i2.length > 0) {
              const { mids: e4 } = this.remoteSDP.batchSend(i2.map((e5) => Object.assign({}, { kind: e5.kind, ssrcMsg: [{ ssrcId: e5.ssrcId, rtx: e5.rtx }], mslabel: e5.mslabel })));
              e4.forEach((e5, t3) => {
                this.preSSRCMap.set(i2[t3].ssrcId, e5);
              });
            }
            await NV(this.peerConnection, this.remoteSDP, this.extension), lD.debug("[P2PConnection] updateRemoteRTPCapabilities by exchanging SDP.");
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.updateRemoteConnect failed; ".concat(e4.toString()));
          }
        }
        send(e3, t2, i2) {
          var n2 = this;
          return sb(function* () {
            const r2 = yield ab(n2.mutex.lock("From P2PConnection.send"));
            try {
              if (!n2.remoteSDP) throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const r3 = [], o2 = nV();
              e3.forEach((e4) => {
                const t3 = n2.peerConnection.addTransceiver(e4._mediaStreamTrack, pB({ direction: "sendonly" }, "video" === e4.trackMediaType && n2.supportAV1RtpSpec && o2 ? { sendEncodings: [{ scalabilityMode: o2 }] } : {}));
                r3.push(t3), e4._updateRtpTransceiver(t3);
              }), hw() && true === MN("SIMULCAST") && (yield ab(n2.applySimulcastForFirefox(r3, e3)));
              const s2 = yield ab(n2.peerConnection.createOffer()), a2 = n2.remoteSDP.predictReceivingMids(e3.length), c2 = n2.mungSendOfferSDP(s2.sdp, e3, a2), d2 = WN(c2), l2 = a2.map((e4) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e4);
                if (!t3) throw new Error("Cannot extract ssrc from mediaDescription.");
                return pV(t3, MN("USE_PUB_RTX"));
              });
              let u2;
              try {
                u2 = yield l2;
              } catch (r4) {
                u2 = [], n2.remoteSDP.receive(e3, t2, i2, u2);
                const o3 = n2.remoteSDP.toString();
                throw yield ab(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield ab(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: o3 })), yield ab(n2.stopSending(a2, true)), r4;
              }
              n2.remoteSDP.receive(e3, t2, i2, u2);
              const h2 = n2.remoteSDP.toString(), p2 = n2.logSDPExchange(c2, "offer", "local", "send");
              return yield ab(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield ab(n2.applySimulcastEncodings(r3, e3)), yield ab(n2.applySendEncodings(r3, e3)), null == p2 || p2(h2), yield ab(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: h2 })), r3.map((e4, t3) => {
                const i3 = a2[t3];
                return { localSSRC: l2[t3], id: i3, transceiver: e4 };
              });
            } catch (e4) {
              throw e4 instanceof xw ? e4 : new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              r2();
            }
          })();
        }
        async createDataChannels(e3, t2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.createDataChannels before remote SDP created");
            let i2 = this.dataStreamChannelMap.get(e3);
            if (i2 && "open" === i2.readyState) lD.debug("[P2PConnection] Channels are already available and can be reused directly.");
            else {
              const t3 = this.currentDataChannelId < 1023 ? this.currentDataChannelId++ : this.recoveredDataChannelIds.shift();
              if ("number" != typeof t3) throw new Error("create DataChannel error, because cannot get dc id");
              i2 = this.peerConnection.createDataChannel("datastream-channel", { id: t3, negotiated: true, ordered: false, maxRetransmits: MN("DATASTREAM_MAX_RETRANSMITS") }), i2.binaryType = "arraybuffer", this.dataStreamChannelMap.set(e3, i2);
            }
            t2.forEach((e4) => {
              e4._updateOriginDataChannel(i2);
            });
            const { needExchangeSDP: n2 } = this.remoteSDP.sendDataChannel();
            if (n2) {
              const e4 = this.remoteSDP.toString();
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e4 });
              const t3 = await this.peerConnection.createAnswer();
              await this.peerConnection.setLocalDescription(t3), lD.debug("[P2PConnection] createDataChannels by exchanging SDP.");
            } else lD.debug("[P2PConnection] createDataChannels no need to exchange SDP.");
            return;
          } catch (e4) {
            throw e4 instanceof xw ? e4 : new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.createDataChannels failed; ".concat(e4.toString()));
          }
        }
        async stopDataChannels(e3) {
          try {
            const t2 = this.dataStreamChannelMap.get(e3);
            return t2 && (t2.id && this.recoveredDataChannelIds.push(t2.id), t2.close()), void this.dataStreamChannelMap.delete(e3);
          } catch (e4) {
            throw e4 instanceof xw ? e4 : new xw(Uw.DATACHANNEL_FAILED, "P2PConnection.stopDataChannels failed; ".concat(e4.toString()));
          }
        }
        async stopSending(e3, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From P2PConnection.stopSending");
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e3.indexOf(t4.mid));
            if (t3.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t3.map((e4) => {
              var t4;
              nB(this.id + e4.mid, this), e4.direction = "inactive", null === (t4 = e4.stop) || void 0 === t4 || t4.call(e4);
            });
            const i3 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i3.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(i3), this.remoteSDP.stopReceiving(e3);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: r2, needExchangeSDP: o2 } = this.remoteSDP.send(e3, t2, i2, n2);
            o2 && (await NV(this.peerConnection, this.remoteSDP, this.extension), lD.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " by exchanging SDP.")));
            const s2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === r2);
            if (!s2) throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: s2.receiver.track, id: r2, transceiver: s2 };
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async batchReceive(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const { mids: t2, needExchangeSDP: i2 } = this.remoteSDP.batchSend(e3);
            return i2 && (await NV(this.peerConnection, this.remoteSDP, this.extension), lD.debug("[".concat(this.store.clientId, "] [P2PConnection] batchReceive by exchanging SDP."))), t2.map((e4) => {
              const t3 = this.peerConnection.getTransceivers().find((t4) => t4.mid === e4);
              if (!t3) throw new Error("Cannot get transceiver after setLocalDescription.");
              return { track: t3.receiver.track, id: e4, transceiver: t3 };
            });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            e3.forEach((e4) => {
              Array.from(this.preSSRCMap.entries()).some((t3) => {
                let [i3, n3] = t3;
                if (n3 === e4) return this.preSSRCMap.delete(i3), true;
              });
            }), this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async muteRemote(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.muteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.mute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "muteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.muteRemote failed; ".concat(e4.toString()));
          }
        }
        async unmuteRemote(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.unmuteRemote mid=".concat(e3, " before remote SDP created."));
            this.remoteSDP.unmute(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "unmuteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteRemote failed; ".concat(e4.toString()));
          }
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e4) => {
              e4.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e3);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e4, t3) => {
              e4.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e3), Array.isArray(this.remoteCodecs) && this.remoteCodecs.length > 0 && this.remoteSDP.updateRemoteCodec(e3, this.remoteCodecs, this.store.codec);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        restartICE(e3) {
          var t2 = this;
          return sb(function* () {
            const i2 = yield ab(t2.mutex.lock("From P2PConnection.restartICE"));
            try {
              if (!t2.remoteSDP) throw new Error("Cannot restartICE before remoteSDP created.");
              const i3 = RD().supportPCSetConfiguration, n2 = MN("FORCE_TURN_TCP") || t2.forceTurn;
              if (e3 === cx.RELAY && !i3) return;
              if (i3 && !n2) {
                const i4 = e3 === cx.RELAY ? "relay" : "all", n3 = t2.peerConnection.getConfiguration();
                n3.iceTransportPolicy !== i4 && (lD.debug("[".concat(t2.store.clientId, "] restartICE change iceTransportPolicy from [").concat(n3.iceTransportPolicy, "] to [").concat(i4, "]")), n3.iceTransportPolicy = i4, t2.peerConnection.setConfiguration(n3));
              }
              t2.remoteSDP.updateCandidates(e3);
              const r2 = yield ab(t2.peerConnection.createOffer({ iceRestart: true }));
              if (!r2.sdp) throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const o2 = hV(r2.sdp), { remoteIceParameters: s2 } = yield o2.iceParameters;
              t2.remoteSDP.restartICE(s2);
              const a2 = t2.remoteSDP.toString(), c2 = t2.logSDPExchange(r2.sdp || "", "offer", "local", "restartICE");
              t2.store.descriptionStart(), yield ab(t2.peerConnection.setLocalDescription(r2)), null == c2 || c2(a2), yield ab(t2.peerConnection.setRemoteDescription({ type: "answer", sdp: a2 }));
            } catch (e4) {
              lD.warning("[".concat(t2.store.clientId, "] restart ICE failed, abort operation"), e4);
            } finally {
              i2();
            }
          })();
        }
        close() {
          var e3;
          this.peerConnection.getTransceivers().forEach((e4) => {
            nB(this.id + e4.mid, this);
          }), this.preSSRCMap.clear(), this.peerConnection.close(), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.tryUnbindTransportEvents(), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.transportEventReceiver = void 0, this.statsFilter.destroy(), this.dataStreamChannelMap.clear(), this.recoveredDataChannelIds = [], this.currentDataChannelId = 1;
        }
        getStats() {
          return pB(pB({}, this.statsFilter.getStats()), {}, { qualityLimitationReason: this.qualityLimitationReason });
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), n2 = this.mungSendOfferSDP(i2.sdp, [t2], [e3]);
            this.remoteSDP.updateRecvMedia(e3, t2);
            const r2 = this.remoteSDP.toString(), o2 = this.logSDPExchange(n2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: n2 }), null == o2 || o2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e3);
          1 === i2.length && (this.isVP8Simulcast(t2) ? hw() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === t2);
          i2 && await i2.sender.replaceTrack(e3._mediaStreamTrack);
        }
        async getSelectedCandidatePair() {
          const e3 = this.peerConnection.getReceivers();
          if (e3.length > 0 && e3[0].transport && e3[0].transport.iceTransport && e3[0].transport.iceTransport.getSelectedCandidatePair && e3[0].transport.iceTransport.getSelectedCandidatePair()) {
            const t2 = e3[0].transport.iceTransport, { local: i2, remote: n2 } = t2.getSelectedCandidatePair();
            return { local: pB(pB({}, sN), {}, { candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), remote: pB(pB({}, sN), {}, { candidateType: n2.type, protocol: n2.protocol, address: n2.address, port: n2.port }) };
          }
          return this.statsFilter.getSelectedCandidatePair();
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onICEConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidateerror = (e3) => {
            if (e3 && (e3.errorCode || e3.errorText)) {
              var t2;
              const i2 = "code: ".concat(e3.errorCode, ", message: ").concat(e3.errorText), n2 = e3.port ? "local: ".concat(e3.port) : "";
              lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICECandidateError(").concat(i2, "), url: ").concat(e3.url || "", ", host_candidate:").concat(n2)), null === (t2 = this.onICECandidateError) || void 0 === t2 || t2.call(this, i2);
            }
          }, this.peerConnection.onicegatheringstatechange = (e3) => {
            e3 && e3.target && "iceGatheringState" in e3.target && lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] RTCPeerConnection.onicegatheringstatechange(").concat(e3.target.iceGatheringState, ")"));
          }, this.peerConnection.onicecandidate = (e3) => {
            e3.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, MN("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [] };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (sO(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), MN("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), MN("FORCE_TURN_TCP") ? i2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), MN("ENABLE_ENCODED_TRANSFORM") && RD().supportWebRTCEncodedTransform && (i2.encodedInsertableStreams = true), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(zx(e4.turnServerURL), ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && !MN("FORCE_TURN_TCP") && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        tryBindTransportEvents(e3) {
          const t2 = e3.transport;
          if (t2) {
            this.transportEventReceiver = e3, t2.onstatechange = () => {
              var e4;
              null != t2 && t2.state && (null === (e4 = this.onDTLSTransportStateChange) || void 0 === e4 || e4.call(this, t2.state));
            }, t2.onerror = (e4) => {
              var t3;
              null === (t3 = this.onDTLSTransportError) || void 0 === t3 || t3.call(this, "error" in e4 ? e4.error : e4);
            };
            const i2 = t2.iceTransport;
            i2 && (i2.onstatechange = () => {
              const e4 = null == t2 ? void 0 : t2.iceTransport.state;
              var i3;
              e4 && (null === (i3 = this.onICETransportStateChange) || void 0 === i3 || i3.call(this, e4));
            }, i2.getSelectedCandidatePair && (i2.onselectedcandidatepairchange = () => {
              if (i2.getSelectedCandidatePair()) {
                const { local: e4, remote: t3 } = i2.getSelectedCandidatePair();
                lD.info("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] selectedcandidatepairchange: local ").concat(JSON.stringify({ candidateType: e4.type, protocol: e4.protocol }), ", remote ").concat(JSON.stringify({ candidateType: t3.type, protocol: t3.protocol, address: t3.address, port: t3.port }), " )"));
              }
            }));
          }
        }
        tryUnbindTransportEvents() {
          this.transportEventReceiver && this.transportEventReceiver.transport && (this.transportEventReceiver.transport.onstatechange = null, this.transportEventReceiver.transport.onerror = null, this.transportEventReceiver.transport.iceTransport && (this.transportEventReceiver.transport.iceTransport.onstatechange = null));
        }
        async updateRtpSenderEncodings(e3, t2) {
          var i2, n2;
          if (!t2) {
            const i3 = this.peerConnection.getSenders();
            t2 = i3.find((t3) => t3.track === e3._mediaStreamTrack);
          }
          if (!t2) return lD.warn("[".concat(e3.getTrackId(), "] no rtpSender found}"));
          if (this.isVP8Simulcast(e3)) return lD.warn("[updateRtpSenderEncodings] Track is VP8 simulcast, please apply simulcast encodings");
          if (!RD().supportSetRtpSenderParameters) return lD.warn("[updateRtpSenderEncodings] Browser not support set rtp-sender parameters");
          const r2 = {}, o2 = {};
          switch (e3._optimizationMode) {
            case "motion":
              r2.degradationPreference = "maintain-framerate";
              break;
            case "detail":
              r2.degradationPreference = "maintain-resolution";
              break;
            case "balanced":
              r2.degradationPreference = "balanced";
          }
          const s2 = function(e4, t3) {
            return e4.getTransceivers().find((e5) => e5.sender.track === t3 || e5.receiver.track === t3);
          }(this.peerConnection, e3._mediaStreamTrack), a2 = ZP(e3);
          if (tB(e3) && s2 && t2 && a2 && this.getLocalVideoStats && kn(i2 = ["vp8", "vp9"]).call(i2, this.store.codec)) {
            var c2;
            const i3 = r2.degradationPreference || (kn(c2 = e3._hints).call(c2, BD.CUSTOM_TRACK) ? MN("CUSTOM_ADAPTATION_DEFAULT_MODE") : "maintain-framerate");
            !function(e4, t3, i4, n3, r3, o3) {
              if (nB(e4, i4), r3(t3), "balanced" !== n3 && "maintain-framerate" !== n3 && "maintain-resolution" !== n3) return;
              let s3 = -1;
              XF(e4, t3);
              const a3 = window.setInterval(() => {
                const a4 = iB.get(e4);
                if (!MN("ENABLE_AG_ADAPTATION") || !a4) return nB(e4, i4), void r3(t3);
                const c4 = o3();
                if (c4.sendPackets > 0 && c4.OutgoingAvailableBandwidth > 0) {
                  if (-1 === s3) return void (s3 = Date.now());
                  if (Date.now() - s3 < 1e3) return;
                  const o4 = c4.sendFrameRate, d3 = c4.OutgoingAvailableBandwidth, [l3, u3] = ZF(e4, o4, d3, a4.adaptationConfig, t3, n3);
                  u3 && (i4.qualityLimitationReason = u3), l3 && a4.adaptationConfig.scale !== l3.scale && (lD.debug("[".concat(e4, "] applyAdaptation: ").concat(i4.qualityLimitationReason, "\n           sendFps ").concat(o4, ", bwe ").concat(d3, ", switch from ").concat(a4.adaptationConfig.scale, " to ").concat(l3.scale, " ")), a4.adaptationConfig = eB(eB({}, a4.adaptationConfig), l3), r3(l3));
                }
              }, MN("CHECK_LOCAL_STATS_INTERVAL")), c3 = eB({}, t3);
              iB.set(e4, { timer: a3, adaptationConfig: c3, originConfig: t3, adaptationFunc: r3 }), lD.debug("[".concat(e4, "] start adaptation, originConfig: ").concat(JSON.stringify(t3), ", degradationPreference: ").concat(n3));
            }(this.id + s2.mid, a2, this, i3, (e4) => {
              t2 && this.updateAdaptation(t2, e4);
            }, this.getLocalVideoStats.bind(this));
          }
          if (e3._encoderConfig) {
            var d2;
            const { bitrateMax: t3, frameRate: i3, scaleResolutionDownBy: n3 } = e3._encoderConfig;
            t3 && (o2.maxBitrate = 1e3 * t3), (kn(d2 = e3._hints).call(d2, BD.LOW_STREAM) || e3.isUseScaleResolutionDownBy) && (i3 && (o2.maxFramerate = Xx(i3)), n3 && n3 >= 1 && (o2.scaleResolutionDownBy = n3));
          }
          const { maxFramerate: l2 } = MN("ENCODER_CONFIG_LIMIT");
          if (l2 && "number" == typeof l2 && (o2.maxFramerate = o2.maxFramerate ? Math.min(o2.maxFramerate, l2) : l2), MN("DSCP_TYPE") && Nw()) {
            var u2;
            const e4 = MN("DSCP_TYPE");
            kn(u2 = ["very-low", "low", "medium", "high"]).call(u2, e4) && (o2.networkPriority = e4);
          }
          const h2 = t2.getParameters(), p2 = null === (n2 = h2.encodings) || void 0 === n2 ? void 0 : n2[0];
          hw() && !p2 && (r2.encodings = [o2]), p2 && Object.assign(p2, o2), Object.assign(h2, r2), lD.debug("[".concat(e3.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(h2.encodings))), await t2.setParameters(h2), await async function(e4, t3, i3) {
            try {
              var n3;
              if (!RD().supportSetRtpSenderParameters) return;
              if (!/* @__PURE__ */ function(e5) {
                return "vp9" === e5 || "av1" === e5;
              }(e4) || !MN("ENABLE_SVC")) return;
              const r3 = {}, o3 = {}, s3 = t3.getParameters(), a3 = null === (n3 = s3.encodings) || void 0 === n3 ? void 0 : n3[0];
              o3.scalabilityMode = nV(i3), a3 && Object.assign(a3, o3), Object.assign(s3, r3), await t3.setParameters(s3), lD.debug("[updateAdaptation] updateRtpSenderEncodings scalabilityMode success: ".concat(JSON.stringify(s3.encodings)));
            } catch (e5) {
              lD.debug("[updateAdaptation] updateRtpSenderEncodings scalabilityMode failed", e5);
            }
          }(this.store.codec, t2, MN("SVC_MODE"));
        }
        async updateAdaptation(e3, t2) {
          var i2, n2;
          if (!e3) return lD.debug("[updateAdaptation] no rtpSender found");
          if (!RD().supportSetRtpSenderParameters) return lD.debug("[updateAdaptation] Browser not support set rtp-sender parameters");
          const r2 = {}, { bitrateMax: o2, frameRate: s2, scaleResolutionDownBy: a2 } = t2;
          o2 && (r2.maxBitrate = 1e3 * o2), s2 && (r2.maxFramerate = Xx(s2)), a2 && a2 >= 1 && kn(i2 = ["vp8", "vp9"]).call(i2, this.store.codec) && (r2.scaleResolutionDownBy = a2);
          const c2 = e3.getParameters(), d2 = null === (n2 = c2.encodings) || void 0 === n2 ? void 0 : n2[0];
          d2 && Object.assign(d2, r2), Object.assign(c2, {});
          try {
            await e3.setParameters(c2), lD.debug("[updateAdaptation] updateRtpSenderEncodings: ".concat(JSON.stringify(c2.encodings)));
          } catch (t3) {
            !("transport" in e3) || e3.transport && "connected" === e3.transport.state ? "connected" !== this.peerConnectionState ? lD.debug("[updateAdaptation] peerConnection not connected}") : lD.debug("[updateAdaptation] updateRtpSenderEncodings failed", t3) : lD.debug("[updateAdaptation] rtpSender transport not connected}");
          }
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!RD().supportSetRtpSenderParameters) return;
            if (e3.length !== t2.length) return;
            for (let i2 = 0; i2 < e3.length; i2++) {
              const n2 = e3[i2], r2 = t2[i2];
              r2 instanceof Dk && !this.isVP8Simulcast(r2) && await this.updateRtpSenderEncodings(r2, n2.sender);
            }
          } catch (e4) {
            lD.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e3, t2, i2) {
          const n2 = WN(e3);
          return t2.forEach((e4, t3) => {
            const r2 = i2[t3], o2 = n2.mediaDescriptions.find((e5) => e5.attributes.mid === r2);
            o2 && (fV(o2, e4), vV(o2, e4, this.store.codec));
          }), HN(n2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e3);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e3, t2) {
          if (e3.length === t2.length) for (let a2 = 0; a2 < e3.length; a2++) {
            var i2, n2, r2, o2, s2;
            const c2 = e3[a2], d2 = t2[a2];
            if (d2 instanceof Dk && !kn(i2 = d2._hints).call(i2, BD.LOW_STREAM) && null !== (n2 = d2._encoderConfig) && void 0 !== n2 && n2.bitrateMax && (null === (r2 = d2._encoderConfig) || void 0 === r2 ? void 0 : r2.bitrateMax) > 200 && null !== (o2 = d2._scalabilityMode) && void 0 !== o2 && o2.numSpatialLayers && (null === (s2 = d2._scalabilityMode) || void 0 === s2 ? void 0 : s2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
              const e4 = {}, t3 = { high: 1e3 * (d2._encoderConfig.bitrateMax - 50), medium: 5e4 };
              e4.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
              const i3 = c2.sender.getParameters();
              await c2.sender.setParameters(Object.assign(i3, e4));
            }
          }
        }
        async applySimulcastEncodings(e3, t2) {
          if (!hw() && e3.length === t2.length) for (let i2 = 0; i2 < e3.length; i2++) {
            const n2 = t2[i2];
            if (n2 instanceof Dk && this.isVP8Simulcast(n2)) {
              const t3 = e3[i2], r2 = {}, o2 = { high: 1e3 * (n2._encoderConfig.bitrateMax - 50), medium: 5e4 };
              r2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: o2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: o2.medium, scaleResolutionDownBy: 4 }];
              const s2 = t3.sender.getParameters();
              await t3.sender.setParameters(Object.assign(s2, r2));
            }
          }
        }
        isVP8Simulcast(e3) {
          var t2, i2, n2, r2, o2;
          return !!(e3 instanceof Dk && MN("SIMULCAST") && "vp8" === this.store.codec && !kn(t2 = e3._hints).call(t2, BD.LOW_STREAM) && null !== (i2 = e3._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (n2 = e3._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax) > 200 && null !== (r2 = e3._scalabilityMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (o2 = e3._scalabilityMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1);
        }
        logSDPExchange(e3, t2, i2, n2) {
          if (MN("SDP_LOGGING")) return lD.upload("[".concat(this.store.clientId, "] exchanging ").concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(n2, "\n"), e3), "offer" === t2 ? (e4) => {
            this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", n2);
          } : void 0;
        }
        async getRemoteSSRC(e3) {
          if (!this.remoteSDP) return;
          const t2 = this.remoteSDP.getSSRC(e3);
          return t2 && 0 !== t2.length ? t2[0].ssrcId : void 0;
        }
        setConfiguration(t2) {
          if (RD().supportPCSetConfiguration) {
            const i2 = e2.resolvePCConfiguration(t2);
            this.peerConnection.setConfiguration(i2);
          }
        }
      }, RU(uB.prototype, "updateRemoteRTPCapabilities", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "updateRemoteRTPCapabilities"), uB.prototype), RU(uB.prototype, "connect", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "connect"), uB.prototype), RU(uB.prototype, "updateRemoteConnect", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "updateRemoteConnect"), uB.prototype), RU(uB.prototype, "createDataChannels", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "createDataChannels"), uB.prototype), RU(uB.prototype, "receive", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "receive"), uB.prototype), RU(uB.prototype, "batchReceive", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "batchReceive"), uB.prototype), RU(uB.prototype, "stopReceiving", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "stopReceiving"), uB.prototype), RU(uB.prototype, "muteRemote", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "muteRemote"), uB.prototype), RU(uB.prototype, "unmuteRemote", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "unmuteRemote"), uB.prototype), RU(uB.prototype, "muteLocal", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "muteLocal"), uB.prototype), RU(uB.prototype, "unmuteLocal", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "unmuteLocal"), uB.prototype), RU(uB.prototype, "close", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "close"), uB.prototype), RU(uB.prototype, "updateEncoderConfig", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "updateEncoderConfig"), uB.prototype), RU(uB.prototype, "updateSendParameters", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "updateSendParameters"), uB.prototype), RU(uB.prototype, "replaceTrack", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "replaceTrack"), uB.prototype), RU(uB.prototype, "updateAdaptation", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "updateAdaptation"), uB.prototype), RU(uB.prototype, "getRemoteSSRC", [EB], Object.getOwnPropertyDescriptor(uB.prototype, "getRemoteSSRC"), uB.prototype), uB);
      function EB(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2) throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PConnection.".concat(t2));
          try {
            for (var r2 = arguments.length, o2 = new Array(r2), s2 = 0; s2 < r2; s2++) o2[s2] = arguments[s2];
            return await n2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      function mB(e2, t2) {
        let i2 = document.createElement("video"), n2 = document.createElement("canvas");
        i2.setAttribute("style", "display:none"), n2.setAttribute("style", "display:none"), i2.setAttribute("muted", ""), i2.muted = true, i2.setAttribute("autoplay", ""), i2.autoplay = true, i2.setAttribute("playsinline", ""), n2.width = Xx(t2.width), n2.height = Xx(t2.height);
        const r2 = Xx(t2.framerate || 15);
        document.body.append(i2), document.body.append(n2);
        let o2 = e2._mediaStreamTrack;
        i2.srcObject = new MediaStream([o2]), i2.play();
        const s2 = n2.getContext("2d");
        if (!s2) throw new SD(Uw.UNEXPECTED_ERROR, "can not get canvas context");
        const a2 = RD(), c2 = n2.captureStream(a2.supportRequestFrame ? 0 : r2).getVideoTracks()[0];
        c2.canvas || (c2.canvas = n2), n2.startCapture = () => {
          if (!i2) return n2.stopCapture && n2.stopCapture();
          if (i2.paused && i2.play(), i2.videoHeight > 2 && i2.videoWidth > 2) {
            const e3 = i2.videoWidth, t3 = i2.videoHeight / e3, r3 = n2.width * t3;
            Math.abs(r3 - n2.height) >= 2 && (lD.debug("adjust low stream resolution", "".concat(n2.width, "x").concat(n2.height, " -> ").concat(n2.width, "x").concat(r3)), n2.height = r3);
          }
          s2.drawImage(i2, 0, 0, n2.width, n2.height), c2.requestFrame && c2.requestFrame(), o2 !== e2._mediaStreamTrack && (o2 = e2._mediaStreamTrack, i2.srcObject = new MediaStream([o2]));
        }, n2.stopCapture = gP(() => n2.startCapture && n2.startCapture(), r2);
        const d2 = c2.stop;
        return c2.stop = () => {
          d2.call(c2), i2 && (i2.remove(), i2.srcObject = null, i2 = null), n2 && (n2.width = 0, n2.remove(), n2.stopCapture && n2.stopCapture(), n2.startCapture = void 0, n2.stopCapture = void 0, n2 = null), lD.debug("clean low stream renderer");
        }, c2;
      }
      var fB = function(e2) {
        return e2[e2.HEIGHT = 2033] = "HEIGHT", e2[e2.FRAME_RATE = 2034] = "FRAME_RATE", e2[e2.WIDTH = 2035] = "WIDTH", e2;
      }(fB || {}), TB = function(e2) {
        return e2[e2.FRAME_RATE = 2002] = "FRAME_RATE", e2[e2.WIDTH = 2003] = "WIDTH", e2[e2.HEIGHT = 2004] = "HEIGHT", e2[e2.PACKAGE_LOST = 2005] = "PACKAGE_LOST", e2[e2.AVG_ENCODE = 2007] = "AVG_ENCODE", e2[e2.NACKS = 2009] = "NACKS", e2[e2.PLIS = 2010] = "PLIS", e2[e2.FIRS = 2011] = "FIRS", e2[e2.BITRATE = 2012] = "BITRATE", e2[e2.PACKAGE_RATE = 2031] = "PACKAGE_RATE", e2[e2.ADAPTATION = 2032] = "ADAPTATION", e2[e2.ACTUAL_ENCODED = 2060] = "ACTUAL_ENCODED", e2[e2.BANDWIDTH = 2061] = "BANDWIDTH", e2[e2.RETRANSMIT = 2062] = "RETRANSMIT", e2[e2.TARGET_ENCODED = 2064] = "TARGET_ENCODED", e2[e2.TRANSMIT = 2066] = "TRANSMIT", e2[e2.FREEZE = 2082] = "FREEZE", e2[e2.DISABLED = 2095] = "DISABLED", e2[e2.PLAYER_STATUS = 2128] = "PLAYER_STATUS", e2[e2.QP_SUM = 2143] = "QP_SUM", e2[e2.BYTES_RETRANSMIT = 2173] = "BYTES_RETRANSMIT", e2[e2.PACKAGES_RETRANSMIT = 2172] = "PACKAGES_RETRANSMIT", e2[e2.HUGE_FRAME_SENT = 2174] = "HUGE_FRAME_SENT", e2[e2.KEY_FRAMES_ENCODED = 2207] = "KEY_FRAMES_ENCODED", e2;
      }(TB || {}), SB = function(e2) {
        return e2[e2.BITRATE = 2069] = "BITRATE", e2[e2.PACKAGE_LOST = 2070] = "PACKAGE_LOST", e2[e2.PACKAGE_RATE = 2071] = "PACKAGE_RATE", e2[e2.HEIGHT = 2073] = "HEIGHT", e2[e2.FRAME_RATE = 2075] = "FRAME_RATE", e2[e2.WIDTH = 2077] = "WIDTH", e2;
      }(SB || {}), gB = function(e2) {
        return e2[e2.JITTER = -1] = "JITTER", e2[e2.PACKAGE_LOST = 2014] = "PACKAGE_LOST", e2[e2.WIDTH = 2018] = "WIDTH", e2[e2.HEIGHT = 2019] = "HEIGHT", e2[e2.FRAME_RATE = 2020] = "FRAME_RATE", e2[e2.JITTER_BUFFER = 2023] = "JITTER_BUFFER", e2[e2.CURRENT_DELAY = 2024] = "CURRENT_DELAY", e2[e2.NACKS = 2026] = "NACKS", e2[e2.PLIS = 2027] = "PLIS", e2[e2.FIRS = 2028] = "FIRS", e2[e2.BITRATE = 2029] = "BITRATE", e2[e2.PACKAGE_RATE = 2078] = "PACKAGE_RATE", e2[e2.FREEZE = 2084] = "FREEZE", e2[e2.DISABLED = 2101] = "DISABLED", e2[e2.PLAYER_STATUS = 2129] = "PLAYER_STATUS", e2[e2.QP_SUM = 2144] = "QP_SUM", e2[e2.I_FRAME_DELAY = 2149] = "I_FRAME_DELAY", e2[e2.FRAMES_DROPPED = 2181] = "FRAMES_DROPPED", e2[e2.BYTES_RETRANSMIT = 2175] = "BYTES_RETRANSMIT", e2[e2.PACKAGES_RETRANSMIT = 2176] = "PACKAGES_RETRANSMIT", e2[e2.PACKAGES_DISCARDED = 2198] = "PACKAGES_DISCARDED", e2[e2.AVG_DECODE = 2200] = "AVG_DECODE", e2[e2.AVG_PROCESSING_DELAY = 2202] = "AVG_PROCESSING_DELAY", e2[e2.AVG_ASSEMBLY_TIME = 2203] = "AVG_ASSEMBLY_TIME", e2[e2.AVG_INTER_FRAME_DELAY = 2204] = "AVG_INTER_FRAME_DELAY", e2[e2.KEY_FRAMES_DECODED = 2206] = "KEY_FRAMES_DECODED", e2;
      }(gB || {}), RB = function(e2) {
        return e2[e2.FRAME_RATE_DECODE = 2021] = "FRAME_RATE_DECODE", e2[e2.FRAME_RATE_RENDER = 2022] = "FRAME_RATE_RENDER", e2[e2.FRAME_RATE_OUTPUT = 2155] = "FRAME_RATE_OUTPUT", e2[e2.FREEZE_TIME = 2109] = "FREEZE_TIME", e2[e2.FREEZE_TIME_RENDER = 2147] = "FREEZE_TIME_RENDER", e2[e2.FREEZE_DURATION = 2156] = "FREEZE_DURATION", e2;
      }(RB || {}), vB = function(e2) {
        return e2[e2.PCM_LEVEL = 2104] = "PCM_LEVEL", e2;
      }(vB || {}), CB = function(e2) {
        return e2[e2.PACKAGE_LOST = -1] = "PACKAGE_LOST", e2[e2.LEVEL = 2038] = "LEVEL", e2[e2.BITRATE = 2039] = "BITRATE", e2[e2.PACKAGE_RATE = 2040] = "PACKAGE_RATE", e2[e2.AEC_RETURN_LOSS = 2041] = "AEC_RETURN_LOSS", e2[e2.AEC_RETURN_LOSS_ENH = 2042] = "AEC_RETURN_LOSS_ENH", e2[e2.FREEZE = 2081] = "FREEZE", e2[e2.DISABLED = 2096] = "DISABLED", e2[e2.BYTES_RETRANSMIT = 2179] = "BYTES_RETRANSMIT", e2[e2.PACKAGES_RETRANSMIT = 2180] = "PACKAGES_RETRANSMIT", e2;
      }(CB || {}), IB = function(e2) {
        return e2[e2.BITRATE = 2044] = "BITRATE", e2[e2.PACKAGE_LOST = 2045] = "PACKAGE_LOST", e2[e2.PACKAGE_RATE = 2046] = "PACKAGE_RATE", e2[e2.CURRENT_DELAY = 2047] = "CURRENT_DELAY", e2[e2.JITTER_BUFFER = 2054] = "JITTER_BUFFER", e2[e2.JITTER = 2055] = "JITTER", e2[e2.FREEZE = 2083] = "FREEZE", e2[e2.DISABLED = 2102] = "DISABLED", e2[e2.PCM_LEVEL = 2105] = "PCM_LEVEL", e2[e2.PLAYER_STATUS = 2130] = "PLAYER_STATUS", e2[e2.CONCEALED_SAMPLES = 2148] = "CONCEALED_SAMPLES", e2[e2.BYTES_RETRANSMIT = 2178] = "BYTES_RETRANSMIT", e2[e2.PACKAGES_RETRANSMIT = 2177] = "PACKAGES_RETRANSMIT", e2[e2.PACKAGES_DISCARDED = 2199] = "PACKAGES_DISCARDED", e2[e2.AVG_PROCESSING_DELAY = 2201] = "AVG_PROCESSING_DELAY", e2;
      }(IB || {}), yB = function(e2) {
        return e2[e2.FREEZE_TIME = -1] = "FREEZE_TIME", e2[e2.LEVEL = 2043] = "LEVEL", e2;
      }(yB || {}), AB = function(e2) {
        return e2[e2.RTT = 2006] = "RTT", e2[e2.CONN_TYPE = 801] = "CONN_TYPE", e2[e2.STATS_UPDATE_INTERVAL = 2205] = "STATS_UPDATE_INTERVAL", e2;
      }(AB || {}), bB = function(e2) {
        return e2[e2.RTC_PEER_CONNECTION_STATE = 2219] = "RTC_PEER_CONNECTION_STATE", e2;
      }(bB || {});
      const wB = 1e3, OB = Math.max(6, 3);
      function NB(e2, t2, i2) {
        null != i2 && Number.isFinite(i2) && (e2[t2] = Math.round(Math.max(0, i2)));
      }
      function DB(e2) {
        const t2 = { [AB.CONN_TYPE]: 0, [AB.RTT]: e2.rtt, [AB.STATS_UPDATE_INTERVAL]: e2.updateInterval ? Math.round(Math.max(0, e2.updateInterval)) : void 0 };
        switch (e2.selectedCandidatePair.localCandidate.candidateType) {
          case "relay": {
            const i2 = e2.selectedCandidatePair.localCandidate.relayProtocol;
            "udp" === i2 && (t2[AB.CONN_TYPE] = 1), "tcp" === i2 && (t2[AB.CONN_TYPE] = 3), "tls" === i2 && (t2[AB.CONN_TYPE] = 4);
            break;
          }
          case "srflx":
            t2[AB.CONN_TYPE] = 2;
            break;
          case "unknown":
            t2[AB.CONN_TYPE] = 5;
            break;
          default:
            t2[AB.CONN_TYPE] = 0;
        }
        return t2;
      }
      function PB(e2) {
        let t2 = 0;
        switch (e2) {
          case "none":
            t2 = 0;
            break;
          case "cpu":
            t2 = 1;
            break;
          case "bandwidth":
            t2 = 2;
            break;
          case "other":
            t2 = 3;
        }
        return t2;
      }
      class LB extends Zw {
        constructor(e2) {
          super(), vy(this, "store", void 0), vy(this, "uploadWRTCStatsTimer", void 0), vy(this, "uploadOutboundDenoiserStatsTimer", void 0), vy(this, "uploadExtStatsTimer", void 0), vy(this, "uploadExtUsageStatsTimer", void 0), vy(this, "uploadInboundExtStatsTimer", void 0), vy(this, "requestStats", void 0), vy(this, "requestTransportStats", void 0), vy(this, "requestLocalMedia", void 0), vy(this, "requestRemoteMedia", void 0), vy(this, "requestAllTracks", void 0), vy(this, "requestVideoIsReady", void 0), vy(this, "requestUploadStats", void 0), vy(this, "requestUpload", void 0), vy(this, "uploadOutboundStarted", false), vy(this, "uploadInboundStarted", false), vy(this, "uploadTransportStarted", false), vy(this, "uploadBaseStatsStarted", false), vy(this, "uploadExtensionUsageStarted", false), vy(this, "lastRecvStats", void 0), vy(this, "lastSendStats", void 0), vy(this, "lastRefRecvStats", void 0), vy(this, "lastRefSendStats", void 0), vy(this, "lastFullRecvStats", void 0), vy(this, "lastFullSendStats", void 0), vy(this, "needUploadRenderFreezeTime", true), this.store = e2;
        }
        uploadWRTCStats(e2) {
          if (!this.requestStats || !this.requestUploadStats) return;
          const t2 = e2 % 3 == 0, i2 = e2 % 6 == 0;
          let n2, r2;
          if (this.uploadTransportStarted && (n2 = this.requestStats(), this.store.useP2P && (r2 = this.requestStats(true))), !n2 && this.uploadOutboundStarted && (n2 = this.requestStats()), !r2 && this.uploadInboundStarted && (r2 = this.requestStats(true)), n2 || r2) {
            var o2;
            const e3 = {};
            if (this.uploadTransportStarted && n2) {
              const i3 = this.getTransportStats(n2, r2, t2);
              i3 && (e3.misc = [i3]);
            }
            if (this.uploadOutboundStarted && n2) {
              const r3 = this.getOutboundStats(n2, i2 ? this.lastFullSendStats : t2 ? this.lastRefSendStats : this.lastSendStats, t2, i2);
              r3 && (e3.outbound = [r3]);
            }
            if (this.uploadInboundStarted && r2) {
              const n3 = this.getInboundStats(r2, i2 ? this.lastFullRecvStats : t2 ? this.lastRefRecvStats : this.lastRecvStats, t2, i2);
              n3 && (e3.inbound = n3);
            }
            const s2 = null === (o2 = this.requestTransportStats) || void 0 === o2 ? void 0 : o2.call(this).connectState;
            s2 && (Array.isArray(e3.misc) ? e3.misc[0] && e3.misc[0].addition && (e3.misc[0].addition[bB.RTC_PEER_CONNECTION_STATE] = mN[s2]) : e3.misc = [{ addition: { [bB.RTC_PEER_CONNECTION_STATE]: mN[s2] } }]), this.requestUploadStats(e3);
          }
          this.lastRecvStats = r2, this.lastSendStats = n2, i2 && (this.lastFullRecvStats = r2, this.lastFullSendStats = n2), t2 && (this.lastRefRecvStats = r2, this.lastRefSendStats = n2);
        }
        startUploadWRTCStats() {
          if (this.uploadWRTCStatsTimer) return;
          this.uploadBaseStatsStarted = true;
          let e2 = 1;
          this.uploadWRTCStatsTimer = window.setInterval(() => {
            if (!this.uploadTransportStarted && !this.uploadInboundStarted && !this.uploadOutboundStarted) {
              if (this.uploadBaseStatsStarted) {
                var t2, i2;
                const e3 = null === (t2 = this.requestTransportStats) || void 0 === t2 ? void 0 : t2.call(this);
                return void (e3 && (null === (i2 = this.requestUploadStats) || void 0 === i2 || i2.call(this, { misc: [{ addition: { [bB.RTC_PEER_CONNECTION_STATE]: mN[e3.connectState] } }] })));
              }
              return this.stopUploadWRTCStats();
            }
            this.uploadWRTCStats(e2), ++e2 === OB + 1 && (e2 = 1);
          }, wB);
        }
        stopUploadWRTCStats() {
          window.clearInterval(this.uploadWRTCStatsTimer), this.uploadWRTCStatsTimer = void 0, this.lastSendStats && (this.lastSendStats.videoSend = [], this.lastSendStats.audioSend = [], this.lastSendStats = void 0), this.lastRecvStats && (this.lastRecvStats.videoRecv = [], this.lastRecvStats.audioRecv = [], this.lastRecvStats = void 0);
        }
        getTransportStats(e2, t2, i2) {
          if (!this.requestStats) return;
          if (!i2) return null == e2.rtt ? void 0 : { addition: { [AB.RTT]: e2.rtt, [AB.CONN_TYPE]: void 0, [AB.STATS_UPDATE_INTERVAL]: e2.updateInterval || void 0 } };
          const n2 = DB(e2);
          if (this.store.useP2P) {
            if (t2) {
              const e3 = DB(t2);
              n2[AB.CONN_TYPE] += e3[AB.CONN_TYPE] << 3;
            }
            n2[AB.CONN_TYPE] += 110;
          } else n2[AB.CONN_TYPE] += 100;
          return { addition: n2 };
        }
        getOutboundStats(e2, t2, i2, n2) {
          if (!this.requestUploadStats || !this.requestLocalMedia) return;
          const r2 = this.requestLocalMedia();
          if (!r2 || 0 === r2.length) return;
          let o2, s2, a2;
          return r2.forEach((r3) => {
            let [c2, { track: d2, ssrcs: l2 }] = r3;
            switch (c2) {
              case ux.LocalVideoLowTrack:
              case ux.LocalVideoTrack:
                if (c2 === ux.LocalVideoTrack) {
                  const r4 = function(e3, t3, i3, n3, r5, o4) {
                    const s3 = t3.videoSend.find((t4) => t4.ssrc === e3);
                    if (!s3) return;
                    const a4 = {}, { sentFrame: c3, inputFrame: d3 } = s3;
                    if (o4 && (NB(a4, TB.QP_SUM, s3.qpSumPerFrame), d3 && c3)) {
                      const e4 = d3.frameRate, t4 = c3.frameRate;
                      a4[TB.FREEZE] = function(e5, t5) {
                        let i4 = true;
                        return i4 = !(e5 <= 5) && (e5 <= 10 ? t5 < 3 : e5 <= 20 ? t5 < 4 : t5 < 5), i4;
                      }(e4, t4) ? 1 : 0;
                    }
                    if (r5) {
                      switch (c3 && (NB(a4, TB.HEIGHT, c3.height), NB(a4, TB.WIDTH, c3.width), NB(a4, TB.FRAME_RATE, c3.frameRate)), a4[TB.DISABLED] = n3._originMediaStreamTrack && !n3._originMediaStreamTrack.enabled || n3._mediaStreamTrack && !n3._mediaStreamTrack.enabled ? 1 : 0, s3.adaptionChangeReason) {
                        case "none":
                          a4[TB.ADAPTATION] = 0;
                          break;
                        case "cpu":
                          a4[TB.ADAPTATION] = 1;
                          break;
                        case "bandwidth":
                          a4[TB.ADAPTATION] = 2;
                          break;
                        case "other":
                          a4[TB.ADAPTATION] = 3;
                      }
                      let o5 = 0;
                      s3.adaptionChangeReason && (o5 += PB(s3.adaptionChangeReason)), t3.qualityLimitationReason && (o5 += PB(t3.qualityLimitationReason) << 3), a4[TB.ADAPTATION] = o5, a4[TB.PLAYER_STATUS] = sP[n3._player ? n3._player.videoElementStatus : "uninit"], NB(a4, TB.NACKS, s3.nacksCount), NB(a4, TB.PLIS, s3.plisCount), NB(a4, TB.FIRS, s3.firsCount), NB(a4, TB.AVG_ENCODE, s3.avgEncodeMs), NB(a4, TB.HUGE_FRAME_SENT, s3.hugeFramesSent), NB(a4, TB.BYTES_RETRANSMIT, s3.retransmittedBytesSent), NB(a4, TB.PACKAGES_RETRANSMIT, s3.retransmittedPacketsSent), NB(a4, TB.KEY_FRAMES_ENCODED, s3.keyFramesEncoded);
                      const d4 = i3 && i3.videoSend.find((t4) => t4.ssrc === e3);
                      if (d4) {
                        let e4 = r5 ? wB : 6e3;
                        d4.timestamp && s3.timestamp && (e4 = s3.timestamp - d4.timestamp), null != d4.packets && null != s3.packets && NB(a4, TB.PACKAGE_RATE, 1e3 * (s3.packets - d4.packets) / e4), null != s3.packetsLost && null != d4.packetsLost && NB(a4, TB.PACKAGE_LOST, s3.packetsLost - d4.packetsLost), null != d4.bytes && null != s3.bytes && NB(a4, TB.BITRATE, 8 * (s3.bytes - d4.bytes) / e4);
                      }
                    }
                    return a4;
                  }(l2[0].ssrcId, e2, t2, d2, i2, n2), o3 = d2 && function(e3, t3, i3, n3) {
                    const r5 = t3.videoSend.find((t4) => t4.ssrc === e3);
                    if (!r5) return null;
                    const o4 = {};
                    if (n3) {
                      const e4 = r5.inputFrame, t4 = e4 && e4.height || i3.videoHeight || 0, n4 = e4 && e4.width || i3.videoWidth || 0, s3 = e4 && e4.frameRate || 0;
                      NB(o4, fB.HEIGHT, t4), NB(o4, fB.WIDTH, n4), NB(o4, fB.FRAME_RATE, s3);
                    }
                    return o4;
                  }(l2[0].ssrcId, e2, d2, i2), a3 = function(e3, t3) {
                    const i3 = {};
                    return t3 && (NB(i3, TB.RETRANSMIT, e3.bitrate.retransmit), NB(i3, TB.TARGET_ENCODED, e3.bitrate.targetEncoded), NB(i3, TB.ACTUAL_ENCODED, e3.bitrate.actualEncoded), NB(i3, TB.TRANSMIT, e3.bitrate.transmit), NB(i3, TB.BANDWIDTH, e3.sendBandwidth)), i3;
                  }(e2, i2);
                  s2 = Object.assign({}, r4, o3, a3);
                } else a2 = function(e3, t3, i3, n3) {
                  const r4 = t3.videoSend.find((t4) => t4.ssrc === e3);
                  if (!r4) return;
                  const o3 = {};
                  if (n3) {
                    const t4 = r4.sentFrame;
                    if (t4 && (NB(o3, SB.HEIGHT, t4.height), NB(o3, SB.WIDTH, t4.width), NB(o3, SB.FRAME_RATE, t4.frameRate)), i3) {
                      const t5 = i3.videoSend.find((t6) => t6.ssrc === e3);
                      if (t5) {
                        let e4 = 6e3;
                        t5.timestamp && r4.timestamp && (e4 = r4.timestamp - t5.timestamp), null != t5.packets && null != r4.packets && NB(o3, SB.PACKAGE_RATE, 1e3 * (r4.packets - t5.packets) / e4), null != r4.packetsLost && null != t5.packetsLost && NB(o3, SB.PACKAGE_LOST, r4.packetsLost - t5.packetsLost), null != t5.bytes && null != r4.bytes && NB(o3, SB.BITRATE, 8 * (r4.bytes - t5.bytes) / e4);
                      }
                    }
                  }
                  return o3;
                }(l2[0].ssrcId, e2, t2, i2);
                break;
              case ux.LocalAudioTrack:
                o2 = d2 && function(e3, t3, i3, n3, r4) {
                  const o3 = t3.audioSend.find((t4) => t4.ssrc === e3);
                  if (!o3) return;
                  const s3 = {};
                  if (r4) {
                    s3[CB.DISABLED] = n3._originMediaStreamTrack && !n3._originMediaStreamTrack.enabled || n3._mediaStreamTrack && !n3._mediaStreamTrack.enabled ? 1 : 0;
                    const t4 = 100 * n3._source.getAccurateVolumeLevel(), r5 = o3.inputLevel;
                    if (null != r5) {
                      const e4 = Math.ceil(50 * Math.log10(100 * r5 + 1));
                      NB(s3, CB.LEVEL, e4);
                    }
                    NB(s3, vB.PCM_LEVEL, t4), NB(s3, CB.AEC_RETURN_LOSS, o3.aecReturnLoss), NB(s3, CB.AEC_RETURN_LOSS_ENH, o3.aecReturnLossEnhancement), NB(s3, CB.BYTES_RETRANSMIT, o3.retransmittedBytesSent), NB(s3, CB.PACKAGES_RETRANSMIT, o3.retransmittedPacketsSent), s3[CB.FREEZE] = 0;
                    const a3 = i3 && i3.audioSend.find((t5) => t5.ssrc === e3);
                    if (a3) {
                      let e4 = 6e3;
                      a3.timestamp && o3.timestamp && (e4 = o3.timestamp - a3.timestamp), null != a3.bytes && null != o3.bytes && NB(s3, CB.BITRATE, 8 * (o3.bytes - a3.bytes) / e4), null != a3.packets && null != o3.packets && NB(s3, CB.PACKAGE_RATE, 1e3 * (o3.packets - a3.packets) / e4);
                    }
                  }
                  return s3;
                }(l2[0].ssrcId, e2, t2, d2, i2);
            }
          }), { high: s2, low: a2, audio: o2 };
        }
        getInboundStats(e2, t2, i2, n2) {
          if (!this.requestRemoteMedia) return;
          const r2 = this.requestRemoteMedia() || [], o2 = [];
          return r2.forEach((r3) => {
            let [s2, a2] = r3;
            const c2 = { peer: s2.uid };
            if (a2.has(ax.VIDEO) && s2.videoTrack) {
              const r4 = s2._videoSSRC && this.requestVideoIsReady && this.requestVideoIsReady(s2._videoSSRC) || false, o3 = s2.videoTrack ? function(e3, t3, i3, n3, r5, o4, s3, a3) {
                const c3 = t3.videoRecv.find((t4) => t4.ssrc === e3);
                if (!c3) return;
                const d2 = {}, { receivedFrame: l2, outputFrame: u2, decodeFrameRate: h2 } = c3, p2 = i3 && i3.videoRecv.find((t4) => t4.ssrc === e3);
                if (NB(d2, RB.FRAME_RATE_DECODE, h2), c3.framesRateFirefox && NB(d2, gB.FRAME_RATE, c3.framesRateFirefox), l2 && NB(d2, gB.FRAME_RATE, l2.frameRate), NB(d2, gB.FRAMES_DROPPED, c3.framesDroppedCount), NB(d2, gB.BYTES_RETRANSMIT, c3.retransmittedBytesReceived), NB(d2, gB.PACKAGES_RETRANSMIT, c3.retransmittedPacketsReceived), NB(d2, gB.PACKAGES_DISCARDED, c3.packetsDiscarded), NB(d2, gB.AVG_DECODE, c3.avgDecodeMs), NB(d2, gB.AVG_PROCESSING_DELAY, c3.avgProcessingDelayMs), NB(d2, gB.AVG_ASSEMBLY_TIME, c3.avgFramesAssembledFromMultiplePacketsMs), NB(d2, gB.AVG_INTER_FRAME_DELAY, c3.avgInterFrameDelayMs), NB(d2, gB.KEY_FRAMES_DECODED, c3.keyFramesDecoded), p2) {
                  const e4 = t3.timestamp - i3.timestamp || wB * (a3 ? 6 : s3 ? 3 : 1);
                  null != c3.packetsLost && null != p2.packetsLost && NB(d2, gB.PACKAGE_LOST, c3.packetsLost - p2.packetsLost), null != p2.bytes && null != c3.bytes && NB(d2, gB.BITRATE, 8 * (c3.bytes - p2.bytes) / e4), null != p2.packets && null != c3.packets && NB(d2, gB.PACKAGE_RATE, 1e3 * (c3.packets - p2.packets) / e4);
                }
                if (a3 && (NB(d2, gB.QP_SUM, c3.qpSumPerFrame), d2[gB.FREEZE] = r5 && UF.isRemoteVideoFreeze(n3, c3, p2) ? 1 : 0), s3) {
                  var _2;
                  l2 ? (NB(d2, gB.HEIGHT, l2.height), NB(d2, gB.WIDTH, l2.width)) : n3 && (NB(d2, gB.HEIGHT, n3._videoHeight || 0), NB(d2, gB.WIDTH, n3._videoWidth || 0)), u2 && NB(d2, RB.FRAME_RATE_OUTPUT, u2.frameRate);
                  const e4 = null === (_2 = n3._player) || void 0 === _2 ? void 0 : _2.rendFrameRate.toFixed(0);
                  if (e4 && NB(d2, RB.FRAME_RATE_RENDER, +e4), NB(d2, gB.JITTER_BUFFER, c3.jitterBufferMs), NB(d2, gB.CURRENT_DELAY, c3.currentDelayMs), NB(d2, gB.FIRS, c3.firsCount), NB(d2, gB.NACKS, c3.nacksCount), NB(d2, gB.PLIS, c3.plisCount), n3) {
                    d2[gB.DISABLED] = n3._originMediaStreamTrack.enabled && n3._mediaStreamTrack.enabled ? 0 : 1;
                    const e5 = n3._player;
                    if (e5) {
                      const { freezeTimeCounterList: t4, renderFreezeAccTime: i4, videoElementStatus: n4 } = e5;
                      if (t4 && t4.length > 0 && NB(d2, RB.FREEZE_TIME, t4.splice(0, 1)[0]), o4 && "visible" === Jk.visibility && n4 === rP.PLAYING && RD().supportRequestVideoFrameCallback) {
                        const t5 = Math.min(6e3, i4);
                        e5.renderFreezeAccTime = Math.max(0, i4 - t5), NB(d2, RB.FREEZE_TIME_RENDER, t5);
                      }
                      if ("number" == typeof c3.totalFreezesDuration) {
                        const e6 = p2 && p2.totalFreezesDuration ? c3.totalFreezesDuration - p2.totalFreezesDuration : c3.totalFreezesDuration;
                        NB(d2, RB.FREEZE_DURATION, 1e3 * e6);
                      }
                    }
                  }
                  if (d2[gB.PLAYER_STATUS] = sP[n3._player ? n3._player.videoElementStatus : "uninit"], p2 && void 0 !== c3.totalInterFrameDelay && void 0 !== c3.totalSquaredInterFrameDelay && void 0 !== p2.totalInterFrameDelay && void 0 !== p2.totalSquaredInterFrameDelay) {
                    const e5 = c3.totalInterFrameDelay - p2.totalInterFrameDelay, t4 = c3.totalSquaredInterFrameDelay - p2.totalSquaredInterFrameDelay, i4 = c3.framesDecodeCount - p2.framesDecodeCount, n4 = e5 / i4 * 1e3, r6 = Math.round(1e3 * Math.sqrt((t4 - Math.pow(e5, 2) / i4) / i4));
                    !isNaN(r6) && n4 + r6 > Math.max(3 * n4, n4 + 150) && (d2[gB.I_FRAME_DELAY] = r6);
                  }
                }
                return d2;
              }(s2._videoSSRC, e2, t2, s2.videoTrack, true === r4, this.needUploadRenderFreezeTime, i2, n2) : void 0;
              o3 && (c2.video = o3);
            }
            if (a2.has(ax.AUDIO) && s2.audioTrack) {
              const r4 = s2.audioTrack ? function(e3, t3, i3, n3, r5, o3) {
                const s3 = t3.audioRecv.find((t4) => t4.ssrc === e3);
                if (!s3) return;
                const a3 = {}, c3 = i3 && i3.audioRecv.find((t4) => t4.ssrc === e3);
                if (NB(a3, IB.JITTER, s3.jitterMs), NB(a3, IB.BYTES_RETRANSMIT, s3.retransmittedBytesReceived), NB(a3, IB.PACKAGES_RETRANSMIT, s3.retransmittedPacketsReceived), NB(a3, IB.PACKAGES_DISCARDED, s3.packetsDiscarded), NB(a3, IB.AVG_PROCESSING_DELAY, s3.avgProcessingDelayMs), c3) {
                  const e4 = t3.timestamp - i3.timestamp || wB * (o3 ? 6 : r5 ? 3 : 1);
                  null != s3.packets && null != c3.packets && NB(a3, IB.PACKAGE_RATE, 1e3 * (s3.packets - c3.packets) / e4), r5 && null != c3.bytes && null != s3.bytes && NB(a3, IB.BITRATE, 8 * (s3.bytes - c3.bytes) / e4), null != s3.packetsLost && null != c3.packetsLost && NB(a3, IB.PACKAGE_LOST, s3.packetsLost - c3.packetsLost);
                }
                if (o3) {
                  const { receivedFrames: e4, droppedFrames: t4 } = s3;
                  null != e4 && null != t4 && (a3[IB.FREEZE] = 0 === (d2 = e4) || 100 * t4 / d2 > 20 ? 1 : 0);
                }
                var d2;
                if (r5) {
                  const e4 = 100 * n3._source.getAccurateVolumeLevel(), t4 = s3.outputLevel;
                  if (null != t4) {
                    const e5 = Math.ceil(50 * Math.log10(100 * t4 + 1));
                    NB(a3, yB.LEVEL, e5);
                  }
                  if (NB(a3, IB.PCM_LEVEL, e4), n3 && (a3[IB.DISABLED] = n3._originMediaStreamTrack.enabled && n3._mediaStreamTrack.enabled ? 0 : 1), NB(a3, IB.JITTER_BUFFER, s3.jitterBufferMs), NB(a3, IB.CURRENT_DELAY, s3.jitterBufferMs), a3[IB.PLAYER_STATUS] = sP[BP.getPlayerState(n3.getTrackId())], c3) {
                    const e5 = s3.concealedSamples - c3.concealedSamples;
                    e5 > 0 && NB(a3, IB.CONCEALED_SAMPLES, e5);
                  }
                }
                return a3;
              }(s2._audioSSRC, e2, t2, s2.audioTrack, i2, n2) : void 0;
              r4 && (c2.audio = r4);
            }
            (c2.video || c2.audio) && o2.push(c2);
          }), this.needUploadRenderFreezeTime = !this.needUploadRenderFreezeTime, o2;
        }
        startUploadTransportStats() {
          this.uploadTransportStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats();
        }
        stopUploadTransportStats() {
          this.uploadTransportStarted = false;
        }
        startUploadOutboundStats() {
          this.uploadOutboundStarted || (this.uploadOutboundStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats(), this.uploadOutboundDenoiserStatsTimer && window.clearInterval(this.uploadOutboundDenoiserStatsTimer), this.uploadOutboundDenoiserStatsTimer = window.setInterval(() => {
            if (!this.requestAllTracks || !this.requestUpload) return;
            const e2 = (this.requestAllTracks() || []).find((e3) => e3 instanceof WL);
            if (e2 && e2._external.getDenoiserStats) {
              const t2 = e2._external.getDenoiserStats();
              t2 && this.requestUpload(NU.DENOISER_STATS, t2);
            }
          }, 2e3), this.uploadExtStatsTimer && window.clearInterval(this.uploadExtStatsTimer), this.uploadExtStatsTimer = window.setInterval(() => {
            if (!this.requestAllTracks || !this.requestUpload) return;
            this.requestAllTracks().forEach((e2) => {
              e2.getProcessorStats().forEach((e3) => {
                this.requestUpload && this.requestUpload(e3.type, e3.stats);
              });
            });
          }, 2e3));
        }
        stopUploadOutboundStats() {
          this.uploadOutboundStarted && (this.uploadOutboundStarted = false, this.lastSendStats && (this.lastSendStats.videoSend = [], this.lastSendStats.audioSend = [], this.lastSendStats = void 0), this.uploadOutboundDenoiserStatsTimer && window.clearInterval(this.uploadOutboundDenoiserStatsTimer), this.uploadOutboundDenoiserStatsTimer = void 0);
        }
        startUploadInboundStats() {
          this.uploadInboundStarted || (this.uploadInboundStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats(), this.uploadInboundExtStatsTimer && window.clearInterval(this.uploadInboundExtStatsTimer), this.uploadInboundExtStatsTimer = window.setInterval(() => {
            if (!this.requestUpload || !this.requestRemoteMedia) return;
            (this.requestRemoteMedia() || []).forEach((e2) => {
              let [t2, i2] = e2;
              if (i2.has(ax.VIDEO) && t2.videoTrack) {
                t2.videoTrack.getProcessorStats().forEach((e3) => {
                  this.requestUpload && this.requestUpload(e3.type, e3.stats);
                });
              }
              if (i2.has(ax.AUDIO) && t2.audioTrack) {
                t2.audioTrack.getProcessorStats().forEach((e3) => {
                  this.requestUpload && this.requestUpload(e3.type, e3.stats);
                });
              }
            });
          }, 2e3));
        }
        stopUploadInboundStats() {
          this.uploadInboundStarted && (this.uploadInboundStarted = false, this.lastRecvStats && (this.lastRecvStats.videoRecv = [], this.lastRecvStats.audioRecv = [], this.lastRecvStats = void 0));
        }
        startUploadExtensionUsageStats() {
          if (this.uploadExtensionUsageStarted) return;
          this.uploadExtensionUsageStarted = true, this.uploadExtUsageStatsTimer && window.clearInterval(this.uploadExtUsageStatsTimer);
          const e2 = /* @__PURE__ */ new Map();
          this.uploadExtUsageStatsTimer = window.setInterval(async () => {
            const t2 = Date.now(), i2 = { connectionInterval: MN("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3, details: [], lts: t2 };
            let n2 = [];
            const r2 = this.requestAllTracks && this.requestAllTracks() || [];
            for (const e3 of r2) !e3.muted && e3.enabled && (n2 = n2.concat(await e3.getProcessorUsage()));
            const o2 = this.requestRemoteMedia && this.requestRemoteMedia() || [];
            for (const [e3, t3] of o2) t3.has(ax.VIDEO) && e3.videoTrack && (n2 = n2.concat(await e3.videoTrack.getProcessorUsage())), t3.has(ax.AUDIO) && e3.audioTrack && (n2 = n2.concat(await e3.audioTrack.getProcessorUsage()));
            if (0 === n2.length) return;
            i2.details = function(e3, t3) {
              const i3 = {};
              for (const { id: s3, value: a3, level: c2, direction: d2 } of e3) {
                var n3;
                const e4 = null !== (n3 = t3.get(s3)) && void 0 !== n3 ? n3 : 0, l2 = 2 === a3 ? e4 + MN("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3 : e4;
                var r3, o3;
                t3.set(s3, l2), i3[s3] ? (2 === a3 && (i3[s3].value = a3), c2 > i3[s3].level && (i3[s3].level = c2), "remote" === d2 && (i3[s3].remoteUidCount += 1), i3[s3].totalTs = null !== (r3 = t3.get(s3)) && void 0 !== r3 ? r3 : 0) : i3[s3] = { value: a3, level: c2, remoteUidCount: "local" === d2 ? 0 : 1, totalTs: null !== (o3 = t3.get(s3)) && void 0 !== o3 ? o3 : 0 };
              }
              return Object.keys(i3).map((e4) => {
                const { level: t4, value: n4, totalTs: r4 } = i3[e4];
                return { id: e4, level: t4, value: n4, totalTs: r4 };
              });
            }(n2, e2);
            const s2 = Date.now(), a2 = s2 > t2 ? s2 : t2 + 1;
            this.requestUpload && this.requestUpload(NU.EXTENSION_USAGE_STATS, { usageStats: i2, sendTs: a2 });
          }, MN("EXTENSION_USAGE_UPLOAD_INTERVAL"));
        }
        stopUploadExtensionUsageStats() {
          this.uploadExtensionUsageStarted && (this.uploadExtensionUsageStarted = false, this.uploadExtUsageStatsTimer && window.clearInterval(this.uploadExtUsageStatsTimer), this.uploadExtUsageStatsTimer = void 0);
        }
        stopUploadBaseStats() {
          this.uploadBaseStatsStarted = false;
        }
      }
      const kB = MN("ICE_RESTART_INTERVAL");
      let MB = /* @__PURE__ */ new Map(), UB = /* @__PURE__ */ new Map(), xB = [cx.UDP_TCP_RELAY, cx.TCP_RELAY, cx.RELAY], VB = MN("JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE") && RD().supportPCSetConfiguration;
      function FB(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        const i2 = MB.get(e2.id);
        i2 && (window.clearTimeout(i2), MB.delete(e2.id));
        const n2 = UB.get(e2.id);
        t2 && n2 && n2.index === xB.length - 1 && (lD.debug("[".concat(e2.id, "] reset ICE restart policy")), UB.delete(e2.id));
      }
      function BB(e2, t2, i2) {
        if (0 === MB.size && 0 === UB.size && (Array.isArray(MN("RESTART_SEQUENCE")) && MN("RESTART_SEQUENCE").length > 0 && !function(e3, t3) {
          if (e3.length !== t3.length) return false;
          for (let i3 = 0; i3 < e3.length; i3 += 1) {
            const n3 = e3[i3];
            if (e3.filter((e4) => e4 === n3).length !== t3.filter((e4) => e4 === n3).length) return false;
          }
          return true;
        }(xB, MN("RESTART_SEQUENCE")) && (xB = MN("RESTART_SEQUENCE").filter((e3) => {
          var t3;
          if (kn(t3 = Object.values(cx)).call(t3, e3)) return true;
        }), lD.debug("use reconnection policy from config distribution, queues: ".concat(xB.join(" => ")))), VB = MN("JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE") && RD().supportPCSetConfiguration), 0 === xB.length) return void i2();
        let n2, { index: r2 = 0, type: o2 } = UB.get(e2.id) || {};
        if (VB && o2 === cx.RELAY) return void i2();
        let s2 = o2 && r2 >= xB.length - 1;
        if (VB) o2 = cx.RELAY;
        else {
          if (s2) return void i2();
          o2 ? (r2++, o2 = xB[r2]) : (o2 = xB[0], r2 = 0);
        }
        lD.debug("[".concat(e2.id, "] choose ICE restart policy: ").concat(o2, ", index: ").concat(r2)), t2(o2), UB.set(e2.id, { index: r2, type: o2 }), n2 = window.setTimeout(() => BB(e2, t2, i2), kB), MB.set(e2.id, n2);
      }
      var jB;
      function GB(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function WB(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? GB(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : GB(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function HB(e2) {
        var t2, i2, n2, r2 = 2;
        for ("undefined" != typeof Symbol && (i2 = db, n2 = Symbol.iterator); r2--; ) {
          if (i2 && null != (t2 = e2[i2])) return t2.call(e2);
          if (n2 && null != (t2 = e2[n2])) return new KB(t2.call(e2));
          i2 = "@@asyncIterator", n2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function KB(e2) {
        function t2(e3) {
          if (Object(e3) !== e3) return np.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return np.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return KB = function(e3) {
          this.s = e3, this.n = e3.next;
        }, KB.prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? np.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? np.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new KB(e2);
      }
      let YB = (jB = class extends Zw {
        get state() {
          return this._state;
        }
        set state(e2) {
          const t2 = this._state;
          this._state = e2, this.emit(px.StateChange, t2, this._state);
        }
        constructor(e2, t2) {
          super(), vy(this, "isPlanB", void 0), vy(this, "store", void 0), vy(this, "statsUploader", void 0), vy(this, "connection", void 0), vy(this, "localTrackMap", /* @__PURE__ */ new Map()), vy(this, "remoteUserMap", /* @__PURE__ */ new Map()), vy(this, "localDataChannels", []), vy(this, "remoteDataChannelMap", /* @__PURE__ */ new Map()), vy(this, "pendingLocalTracks", []), vy(this, "pendingRemoteTracks", []), vy(this, "pendingLocalDataChannels", []), vy(this, "pendingRemoteDataChannels", []), vy(this, "statsCollector", void 0), vy(this, "shouldForwardP2PCreation", void 0), vy(this, "iceFailedCount", 0), vy(this, "dtlsFailedCount", 0), vy(this, "mutex", void 0), vy(this, "_state", hx.Disconnected), vy(this, "_pcStatsUploadType", MN("NEW_ICE_RESTART") ? dx.FIRST_CONNECTION : dx.OLD_FIRST_CONNECTION), vy(this, "_isStartRestartIce", false), vy(this, "_restartTimer", void 0), vy(this, "_isTryConnecting", false), vy(this, "_iceError", null), vy(this, "_forceTurn", false), vy(this, "_isWaitPcToRePub", false), vy(this, "handleMuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleMuteLocalTrack");
            try {
              if (!this.connection || this.state !== hx.Connected) return void i2(new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel.handleMuteLocalTrack before connection established."));
              const n3 = this.filterTobeMutedTracks(e3);
              if (0 === n3.length) return void t3();
              const r2 = n3.find((e4) => "videoLowTrack" === e4[0]);
              if (r2) {
                r2[1].track._originMediaStreamTrack.stop();
              }
              await this.connection.muteLocal(n3.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const o2 = this.createMuteMessage(n3);
              await _O(this, px.RequestMuteLocal, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleUnmuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleUnmuteLocalTrack");
            try {
              if (!this.connection || this.state !== hx.Connected) return void i2(new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel.handleUnmuteLocalTrack before connection established."));
              const n3 = this.filterTobeUnmutedTracks(e3);
              if (0 === n3.length) return void t3();
              const r2 = n3.find((e4) => "videoLowTrack" === e4[0]);
              if (r2) {
                const t4 = r2[1];
                if (t4.track._originMediaStreamTrack.stop(), !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding) {
                  const i3 = e3._mediaStreamTrack.clone();
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                } else {
                  const i3 = mB(e3, mO(this, px.RequestLowStreamParameter));
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                }
                await new np((e4, i3) => {
                  this.handleReplaceTrack(t4.track, e4, i3, true);
                });
              }
              await this.connection.unmuteLocal(n3.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const o2 = this.createUnmuteMessage(n3);
              await _O(this, px.RequestUnmuteLocal, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleUpdateVideoEncoder", async (e3, t3, i2, n2) => {
            let r2;
            n2 || (r2 = await this.mutex.lock("Locking from P2PChannel.handleUpdateVideoEncoder"));
            try {
              const i3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== hx.Connected) return void t3();
              const { id: n3, track: r3 } = i3;
              await this.connection.updateSendParameters(n3, r3), await this.connection.updateEncoderConfig(n3, r3), this.emit(px.UpdateVideoEncoder, r3), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var o2;
              null === (o2 = r2) || void 0 === o2 || o2();
            }
          }), vy(this, "handleUpdateVideoSendParameters", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleUpdateVideoSendParameters");
            try {
              const i3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== hx.Connected) return void t3();
              const { id: n3, track: r2 } = i3;
              await this.connection.updateSendParameters(n3, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleReplaceMixingTrack", async (e3, t3, i2, n2) => {
            if (!this.connection || this.state !== hx.Connected) return void t3();
            const r2 = sB([e3]);
            let o2;
            lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection will replace audioTrack [").concat(r2.getTrackId(), "]")), "boolean" == typeof n2 && n2 || (o2 = await this.mutex.lock("From P2PChannel.handleReplaceMixingTrack"));
            try {
              await this.replaceTrack(e3, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var s2;
              null === (s2 = o2) || void 0 === s2 || s2();
            }
          }), vy(this, "handleReplaceTrack", async (e3, t3, i2, n2) => {
            let r2;
            lD.debug("[".concat(this.store.clientId, "] P2PChannel handleReplaceTrack for [track-id-").concat(e3.getTrackId(), "]")), "boolean" == typeof n2 && n2 || (r2 = await this.mutex.lock("From P2PChannel.handleReplaceTrack"));
            try {
              var o2;
              const i3 = Array.from(this.localTrackMap.entries()).find((t4) => {
                let [, { track: i4 }] = t4;
                return e3 === i4;
              });
              if (!this.connection || !i3 || this.state !== hx.Connected) return void t3();
              if (await (null === (o2 = this.connection) || void 0 === o2 ? void 0 : o2.replaceTrack(e3, i3[1].id)), this.isPlanB) {
                const t4 = i3[1];
                t4.id = e3._mediaStreamTrack.id, this.localTrackMap.set(i3[0], t4);
              }
              if (i3[0] === ux.LocalVideoTrack && !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding) {
                const t4 = this.localTrackMap.get(ux.LocalVideoLowTrack);
                if (t4) {
                  const i4 = e3._mediaStreamTrack.clone();
                  t4.track._originMediaStreamTrack.stop(), t4.track._mediaStreamTrack = i4, t4.track._originMediaStreamTrack = i4, await new np((e4, i5) => {
                    this.handleReplaceTrack(t4.track, e4, i5, true);
                  });
                }
              }
              t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var s2;
              null === (s2 = r2) || void 0 === s2 || s2();
            }
          }), vy(this, "handleGetRTCStats", (e3) => {
            e3(this.statsCollector.getRTCStats());
          }), vy(this, "handleGetLocalVideoStats", (e3) => {
            e3(this.statsCollector.getLocalVideoTrackStats());
          }), vy(this, "handleGetLocalAudioStats", (e3) => {
            e3(this.statsCollector.getLocalAudioTrackStats());
          }), vy(this, "handleGetRemoteVideoStats", (e3) => this.statsCollector.getRemoteVideoTrackStats(e3.uid)[e3.uid]), vy(this, "handleGetRemoteAudioStats", (e3) => this.statsCollector.getRemoteAudioTrackStats(e3.uid)[e3.uid]), this.store = e2, this.statsCollector = t2, this.statsCollector.addP2PChannel(this), this.statsUploader = new LB(this.store), this.bindStatsUploaderEvents(), this.mutex = new KO("P2PChannel-mutex", this.store.clientId), this.isPlanB = !RD().supportUnifiedPlan || MN("CHROME_FORCE_PLAN_B") && Nw(), this.shouldForwardP2PCreation = MN("FORWARD_P2P_CREATION") && RD().supportPCSetConfiguration && Ow(), this.shouldForwardP2PCreation && (this.connection = cB(this.store), this.emit(px.PeerConnectionStateChange, this.connection.peerConnectionState), this.bindConnectionEvents(this.connection));
        }
        async startP2PConnection(e2) {
          var t2;
          this.state = hx.New, this._forceTurn = lB(e2), lD.debug("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] forceTurn: ").concat(this._forceTurn));
          const i2 = this.shouldForwardP2PCreation && "closed" === (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.peerConnectionState);
          if (this.shouldForwardP2PCreation && !i2 || (i2 && this.connection && (lD.warning("[".concat(this.store.clientId, "] P2PChannel.startP2PConnection ForwardP2P closed.")), this.resetConnection(this.connection)), this.connection = cB(this.store, e2), this.emit(px.PeerConnectionStateChange, this.connection.peerConnectionState), this.bindConnectionEvents(this.connection)), !this.connection) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot P2PChannel.startConnection before P2PConnection initialization .");
          return this._pcStatsUploadType = MN("NEW_ICE_RESTART") ? dx.FIRST_CONNECTION : dx.OLD_FIRST_CONNECTION, this._isTryConnecting = true, this._isStartRestartIce = false, this._iceError = null, this.connection.setConfiguration(e2), this.connection.establishPromise;
        }
        async connect(e2) {
          if (!this.connection) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot P2PChannel.connect before P2PChannel.startP2PConnection .");
          MN("ENABLE_PREALLOC_PC") && this.state === hx.Connected ? await this.connection.updateRemoteConnect(e2) : (this.store.peerConnectionStart(), await this.connection.connect(e2), this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = hx.Connected);
        }
        updateRemoteRTPCapabilities(e2) {
          const t2 = Array.from(this.localTrackMap.entries()).filter((e3) => {
            var t3;
            let [i3] = e3;
            return kn(t3 = [ux.LocalVideoLowTrack, ux.LocalVideoTrack]).call(t3, i3);
          }), i2 = t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }), n2 = t2.map((e3) => {
            let [t3] = e3;
            return t3;
          });
          if (this.connection instanceof _B) {
            if (TD.updateRemoteRTPCapabilities(this.store.sessionId, { trackTypes: JSON.stringify(n2), localCodecs: JSON.stringify(this.connection.localCodecs), remoteCodecs: JSON.stringify(e2) }), !kn(e2).call(e2, this.store.codec)) {
              const t3 = ["vp9", "vp8", "h264"].find((t4) => kn(e2).call(e2, t4));
              t3 && (this.store.codec = t3, lD.debug("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, " updateRemoteRTPCapabilities] default codec is not available, hence the fallback to ").concat(t3, ".")));
            }
            this.connection.updateRemoteRTPCapabilities(i2, e2);
          }
        }
        async getEstablishParams() {
          var e2;
          if (this.connection instanceof _B && "closed" !== this.connection.peerConnectionState && kn(e2 = [hx.New, hx.Connected]).call(e2, this.state)) return this.connection.establishPromise;
        }
        async publishDataChannel(e2) {
          if (!this.connection || this.state !== hx.Connected) {
            if (this.state === hx.Disconnected) throw new xw(Uw.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
            return e2.forEach((e3) => {
              var t3;
              kn(t3 = this.pendingLocalDataChannels).call(t3, e3) || this.pendingLocalDataChannels.push(e3);
            }), [];
          }
          const t2 = this.filterTobePublishedDataChannels(e2);
          return 0 === t2.length ? [] : (t2.forEach((e3) => {
            const t3 = Date.now();
            this.store.publish(e3.id.toString(), "datachannel", t3);
          }), await this.connection.createDataChannels(this.store.uid, t2), t2.forEach((e3) => {
            this.localDataChannels.push(e3);
            const t3 = Date.now();
            this.store.publish(e3.id + "", "datachannel", void 0, t3);
          }), e2.map((e3) => ({ streamId: e3.id, ordered: e3.ordered, maxRetransmits: e3.maxRetransmits, metadata: e3.metadata, channelId: e3._originDataChannelId })));
        }
        publish(e2, t2, i2) {
          var n2 = this;
          return sb(function* () {
            const r2 = yield ab(n2.mutex.lock("From P2PChannel.publish"));
            try {
              var o2;
              const r3 = n2.connection && kn(o2 = ["disconnected", "failed"]).call(o2, n2.connection.peerConnectionState);
              if (!n2.connection || n2.state !== hx.Connected || r3) {
                if (n2.state === hx.Disconnected) throw new xw(Uw.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
                n2.throwIfTrackTypeNotMatch(e2);
                const t3 = e2.filter((e3) => -1 === n2.pendingLocalTracks.indexOf(e3));
                return n2.pendingLocalTracks = n2.pendingLocalTracks.concat(t3), void (r3 && (n2._isWaitPcToRePub = true));
              }
              n2.store.pubId = n2.store.pubId + 1, LF.markPublishStart(n2.store.clientId, n2.store.pubId);
              const s2 = n2.filterTobePublishedTracks(e2, t2, i2);
              if (0 === s2.length) return void (yield ab(n2.tryToUnmuteAudio(e2)));
              yield* cb(HB(n2.doPublish(n2.connection, s2)));
            } finally {
              r2();
            }
          })();
        }
        doPublish(e2, t2) {
          var i2 = this;
          return sb(function* () {
            t2.forEach((e3) => {
              let { track: t3, type: n3 } = e3;
              const r3 = Date.now();
              i2.store.publish(t3.getTrackId(), n3 === ux.LocalAudioTrack ? "audio" : "video", r3);
            }), i2.bindLocalTrackEvents(t2);
            const n2 = t2.map((e3) => {
              let { track: t3 } = e3;
              return t3;
            }), r2 = yield ab(e2.send(n2, i2.store.codec, i2.store.audioCodec)), o2 = (yield ab(r2.next())).value, s2 = i2.createGatewayPublishMessage(t2, o2);
            let a2;
            try {
              a2 = yield s2;
            } catch (e3) {
              throw r2.throw(e3), (null == e3 ? void 0 : e3.code) === Uw.WS_ABORT && t2.forEach((e4) => {
                let { track: t3 } = e4;
                -1 === i2.pendingLocalTracks.indexOf(t3) && i2.pendingLocalTracks.push(t3);
              }), i2.unbindLocalTrackEvents(t2), e3;
            }
            const c2 = i2.mapPubResToRemoteConfig(s2, a2, n2), d2 = (yield ab(r2.next(c2))).value;
            if (i2.state === hx.Disconnected) throw new xw(Uw.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
            MN("ENABLE_VIDEO_SEI");
            const l2 = MN("ENABLE_ENCODED_TRANSFORM"), u2 = MN("ENABLE_AUDIO_METADATA");
            n2.forEach(async (e3) => {
              const t3 = e3.getRTCRtpTransceiver();
              t3 && l2 && (e3.trackMediaType === ax.VIDEO ? await NM(t3.sender, e3) : e3.trackMediaType === ax.AUDIO && await nM(t3.sender, { metadata: u2 ? () => {
                const t4 = e3.metadata.shift();
                return t4 && t4.value;
              } : void 0 }));
            }), t2.forEach((e3) => {
              let { type: t3 } = e3;
              i2.statsCollector.addLocalStats(t3);
            }), i2.assignLocalTracks(t2, d2), i2.statsUploader.startUploadOutboundStats(), t2.forEach((e3) => {
              let { track: t3, type: n3 } = e3;
              const r3 = Date.now();
              i2.store.publish(t3.getTrackId(), n3 === ux.LocalAudioTrack ? "audio" : "video", void 0, r3);
            });
          })();
        }
        async updateVideoStreamParameter(e2, t2) {
          const i2 = this.localTrackMap.get(t2);
          if (!i2 || !this.connection) return;
          if (!(i2.track instanceof Dk)) return lD.warn("[updateVideoStreamParameter]: track is not an instance of LocalVideoTrack");
          const { track: n2 } = i2, r2 = function(e3, t3) {
            const i3 = {};
            return e3.height && e3.width && (i3.scaleResolutionDownBy = tV(e3, t3)), i3.maxFramerate = e3.framerate ? Xx(e3.framerate) : void 0, i3.maxBitrate = e3.bitrate ? 1e3 * e3.bitrate : void 0, i3;
          }(e2, n2);
          if (n2._encoderConfig || (n2._encoderConfig = {}), t2 !== ux.LocalVideoLowTrack || !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding) null != r2.scaleResolutionDownBy && (n2._encoderConfig.scaleResolutionDownBy = r2.scaleResolutionDownBy);
          else {
            const t3 = n2._originMediaStreamTrack;
            if (!t3.canvas) return lD.warn("[".concat(n2.getTrackId(), "] no canvas on track"));
            !function(e3, t4) {
              const i3 = e3.canvas;
              t4.width && (i3.width = Xx(t4.width)), t4.height && (i3.height = Xx(t4.height)), t4.framerate && (i3.stopCapture && i3.stopCapture(), i3.stopCapture = gP(() => {
                !i3.startCapture && i3.stopCapture && i3.stopCapture(), i3.startCapture && i3.startCapture();
              }, Xx(t4.framerate)));
            }(t3, e2);
          }
          null != r2.maxBitrate && (n2._encoderConfig.bitrateMax = r2.maxBitrate / 1e3), null != r2.maxFramerate && (n2._encoderConfig.frameRate && "object" == typeof n2._encoderConfig.frameRate ? n2._encoderConfig.frameRate.max = r2.maxFramerate : n2._encoderConfig.frameRate = { max: r2.maxFramerate }), lD.debug("[".concat(n2.getTrackId(), "] LowStreamEncoderConfig: , ").concat(JSON.stringify(n2._encoderConfig))), await this.connection.updateRtpSenderEncodings(n2);
        }
        publishLowStream(e2) {
          var t2 = this;
          return sb(function* () {
            if (!t2.connection || t2.state !== hx.Connected) return;
            const i2 = yield ab(t2.mutex.lock("Locking from P2PChannel.publishLowStream"));
            try {
              const i3 = t2.localTrackMap.get(ux.LocalVideoTrack);
              if (!i3) throw new xw(Uw.UNEXPECTED_ERROR, "Could not find high stream");
              if (t2.localTrackMap.has(ux.LocalVideoLowTrack)) throw new xw(Uw.UNEXPECTED_ERROR, "[".concat(t2.store.clientId, "] Can't publish low stream when stream already publish"));
              const r2 = [{ track: t2.getLowVideoTrack(i3.track, e2), type: ux.LocalVideoLowTrack }];
              if (yield* cb(HB(t2.doPublish(t2.connection, r2))), i3.track.muted || !i3.track.enabled) {
                var n2;
                const e3 = null === (n2 = t2.localTrackMap.get(ux.LocalVideoLowTrack)) || void 0 === n2 ? void 0 : n2.id;
                void 0 !== e3 && (yield ab(t2.connection.muteLocal([e3])));
              }
            } finally {
              i2();
            }
          })();
        }
        async republish() {
          this.pendingLocalTracks.length > 0 && (lD.debug("[".concat(this.store.clientId, "] Emit P2PChannelEvents.RequestRePublish to republish tracks.")), await pO(this, px.RequestRePublish, this.pendingLocalTracks), this.emit(px.MediaReconnectEnd, this.store.uid), this.pendingLocalTracks = []), this.pendingLocalDataChannels.length > 0 && (lD.debug("Emit P2PChannelEvents.RequestRePublishDataChannel to republish datachannels."), await pO(this, px.RequestRePublishDataChannel, this.pendingLocalDataChannels), this.pendingLocalDataChannels = []), this._isWaitPcToRePub = false;
        }
        async reSubscribe(e2) {
          for (let e3 = this.pendingRemoteTracks.length - 1; e3 >= 0; e3--) {
            const { user: t2, kind: i2 } = this.pendingRemoteTracks[e3];
            (i2 !== ax.AUDIO || t2._audio_added_ && t2._audioSSRC) && (i2 !== ax.VIDEO || t2._video_added_ && t2._videoSSRC) || this.pendingRemoteTracks.splice(e3, 1);
          }
          if (e2) await pO(this, px.RequestReSubscribe, this.pendingRemoteTracks);
          else for (const { user: e3, kind: t2 } of this.pendingRemoteTracks) await this.subscribe(e3, t2, t2 === ax.VIDEO ? e3._videoSSRC : e3._audioSSRC);
          this.pendingRemoteTracks.forEach((e3) => {
            let { user: t2 } = e3;
            this.emit(px.MediaReconnectEnd, t2.uid);
          }), this.pendingRemoteTracks = [];
        }
        async unpublish(e2) {
          if (!this.connection || this.state !== hx.Connected) return void e2.forEach((e3) => {
            const t3 = this.pendingLocalTracks.indexOf(e3);
            -1 !== t3 && this.pendingLocalTracks.splice(t3, 1);
          });
          const t2 = this.filterTobeUnpublishedTracks(e2);
          if (0 === t2.length) return;
          const i2 = t2.find((e3) => "videoLowTrack" === e3[0]);
          if (i2) {
            i2[1].track.close();
          }
          return this.doUnpublish(this.connection, t2);
        }
        async unpublishDataChannel(e2) {
          if (!this.connection || this.state !== hx.Connected) return void e2.forEach((e3) => {
            const t3 = this.pendingLocalDataChannels.indexOf(e3);
            -1 !== t3 && this.pendingLocalDataChannels.splice(t3, 1);
          });
          const t2 = this.filterTobeUnpublishedDataChannels(e2);
          return 0 !== t2.length ? (t2.forEach((e3) => {
            const t3 = this.localDataChannels.indexOf(e3);
            -1 !== t3 && this.localDataChannels.splice(t3, 1);
          }), 0 === this.localDataChannels.length && await this.connection.stopDataChannels(this.store.uid), t2.map((e3) => e3.id)) : void 0;
        }
        async unpublishLowStream() {
          if (!this.connection || this.state !== hx.Connected) return;
          const e2 = this.localTrackMap.get(ux.LocalVideoLowTrack);
          if (!e2) return;
          e2.track.close();
          const t2 = [[ux.LocalVideoLowTrack, e2]];
          return this.doUnpublish(this.connection, t2);
        }
        async doUnpublish(e2, t2) {
          const i2 = this.createGatewayUnpublishMessage(t2);
          return await e2.stopSending(t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawLocalTracks(t2), this.unbindLocalTrackEvents(t2.map((e3) => {
            let [t3, { track: i3 }] = e3;
            return { type: t3, track: i3 };
          })), t2.forEach((e3) => {
            let [t3] = e3;
            this.statsCollector.removeLocalStats(t3);
          }), 0 === this.localTrackMap.size && this.statsUploader.stopUploadOutboundStats(), i2;
        }
        async subscribeDataChannel(e2, t2) {
          if (!this.connection || this.state !== hx.Connected) throw new xw(Uw.INVALID_OPERATION, "Cannot subscribe remote user when peerConnection disconnected.");
          const i2 = t2.filter((t3) => {
            var i3;
            return !(null !== (i3 = this.remoteDataChannelMap.get(e2)) && void 0 !== i3 && i3.get(t3.id));
          });
          if (0 !== i2.length) return await this.connection.createDataChannels(e2.uid, i2), i2.forEach((t3) => {
            var i3;
            this.remoteDataChannelMap.has(e2) ? null === (i3 = this.remoteDataChannelMap.get(e2)) || void 0 === i3 || i3.set(t3.id, t3) : this.remoteDataChannelMap.set(e2, /* @__PURE__ */ new Map([[t3.id, t3]]));
            const n2 = this.pendingRemoteDataChannels.findIndex((i4) => {
              let { user: n3, id: r2 } = i4;
              return n3.uid === e2.uid && r2 === t3.id;
            });
            -1 !== n2 && this.pendingRemoteDataChannels.splice(n2, 1);
          }), i2.map((e3) => e3.id);
        }
        async subscribe(e2, t2, i2, n2, r2) {
          var o2;
          if (!this.connection || this.state !== hx.Connected) throw new xw(Uw.INVALID_OPERATION, "Cannot subscribe remote user when peerConnection disconnected.");
          if (null !== (o2 = this.remoteUserMap.get(e2)) && void 0 !== o2 && o2.has(t2)) return;
          let s2, a2, c2;
          const d2 = this.connection.getPreMedia(i2);
          if (d2) lD.debug("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] preSSRCMap has ssrcId: ").concat(i2, ", no need to send sub to gateway.")), c2 = d2.transceiver, s2 = d2.track, a2 = d2.id;
          else if (r2) {
            const i3 = r2.find((e3) => {
              let { stream_type: i4 } = e3;
              return i4 === t2;
            });
            if (!i3) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot subscribe to remote ".concat(t2, " for user: ").concat(e2.uid, " because subscribe answer from gateway does not contain stream_type: ").concat(t2, "."));
            const n3 = await this.connection.receive(t2, i3.ssrcs, String(e2._uintid), i3.attributes);
            this.connection instanceof _B && (c2 = n3.transceiver), s2 = n3.track, a2 = n3.id;
          } else {
            const r3 = await this.connection.receive(t2, [{ ssrcId: i2, rtx: n2 }], String(e2._uintid), void 0);
            this.connection instanceof _B && (c2 = r3.transceiver), s2 = r3.track, a2 = r3.id;
          }
          t2 === ax.AUDIO ? (e2._audioTrack ? e2._audioTrack._updateOriginMediaStreamTrack(s2) : (e2._audioTrack = new zk(s2, e2.uid, e2._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(e2._audioTrack.getTrackId()))), c2 && e2._audioTrack._updateRtpTransceiver(c2), this.bindRemoteTrackEvents(e2, e2._audioTrack)) : (e2._videoTrack ? e2._videoTrack._updateOriginMediaStreamTrack(s2) : (e2._videoTrack = new qk(s2, e2.uid, e2._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(e2._videoTrack.getTrackId()))), c2 && e2._videoTrack._updateRtpTransceiver(c2), this.bindRemoteTrackEvents(e2, e2._videoTrack)), c2 && MN("ENABLE_ENCODED_TRANSFORM") && (t2 == ax.VIDEO ? await PM(c2.receiver, { onSei: MN("ENABLE_VIDEO_SEI") && ((t3) => {
            var i3;
            return null === (i3 = e2._videoTrack) || void 0 === i3 ? void 0 : i3._onSei(t3);
          }) }) : t2 == ax.AUDIO && await bM(c2.receiver, { enableTopn: !!MN("ENABLE_AUDIO_TOPN"), enableMetadata: !!MN("ENABLE_AUDIO_METADATA"), onMetadata: (e3) => {
            this.safeEmit(px.AudioMetadata, e3);
          } }));
          const l2 = this.remoteUserMap.get(e2);
          l2 ? l2.set(t2, a2) : this.remoteUserMap.set(e2, /* @__PURE__ */ new Map([[t2, a2]])), this.statsCollector.addRemoteStats(e2.uid), this.statsUploader.startUploadInboundStats();
          const u2 = this.pendingRemoteTracks.findIndex((i3) => {
            let { user: n3, kind: r3 } = i3;
            return n3.uid === e2.uid && t2 === r3;
          });
          -1 !== u2 && (this.pendingRemoteTracks.splice(u2, 1), this.emit(px.MediaReconnectEnd, e2.uid));
        }
        async massSubscribe(e2) {
          return this.massSubscribeNoLock(e2);
        }
        async massSubscribeNoLock(e2) {
          if (!this.connection || this.state !== hx.Connected) throw new xw(Uw.INVALID_OPERATION, "Cannot subscribeAll remote users when peerConnection disconnected.");
          e2 = e2.filter((e3) => {
            var t3;
            let { user: i3, mediaType: n3 } = e3;
            return !(null !== (t3 = this.remoteUserMap.get(i3)) && void 0 !== t3 && t3.has(n3));
          });
          const t2 = [], i2 = /* @__PURE__ */ new Map();
          e2.forEach((e3) => {
            if (!this.connection) return;
            const n3 = this.connection.getPreMedia(e3.ssrcId);
            n3 ? i2.set(e3.ssrcId, n3) : t2.push(e3);
          });
          const n2 = await this.connection.batchReceive(t2.map((e3) => {
            let { user: t3, mediaType: i3, ssrcId: n3, rtxSsrcId: r2 } = e3;
            return { kind: i3, ssrcMsg: [{ ssrcId: n3, rtx: r2 }], mslabel: String(t3._uintid) };
          }));
          t2.forEach((e3, t3) => {
            i2.set(e3.ssrcId, n2[t3]);
          });
          for (const { user: t3, mediaType: n3, ssrcId: r2 } of e2) {
            const e3 = i2.get(r2);
            if (!e3) return void lD.debug("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] cannot find ").concat(t3.uid, " subscribe data,").concat(n3, ", ").concat(r2));
            const { track: o2, id: s2, transceiver: a2 } = e3;
            a2 && MN("ENABLE_ENCODED_TRANSFORM") && (n3 == ax.VIDEO ? await PM(a2.receiver, { onSei: MN("ENABLE_VIDEO_SEI") && ((e4) => {
              var i3;
              return null === (i3 = t3._videoTrack) || void 0 === i3 ? void 0 : i3._onSei(e4);
            }) }) : n3 == ax.AUDIO && await bM(a2.receiver, { enableTopn: !!MN("ENABLE_AUDIO_TOPN"), enableMetadata: !!MN("ENABLE_AUDIO_METADATA"), onMetadata: (e4) => {
              this.safeEmit(px.AudioMetadata, e4);
            } })), n3 === ax.AUDIO ? (t3._audioTrack ? t3._audioTrack._updateOriginMediaStreamTrack(o2) : (t3._audioTrack = new zk(o2, t3.uid, t3._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(t3._audioTrack.getTrackId()))), a2 && t3._audioTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(t3, t3._audioTrack)) : (t3._videoTrack ? t3._videoTrack._updateOriginMediaStreamTrack(o2) : (t3._videoTrack = new qk(o2, t3.uid, t3._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(t3._videoTrack.getTrackId()))), a2 && t3._videoTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(t3, t3._videoTrack)), MN("ENABLE_VIDEO_SEI") && a2 && (n3 == ax.VIDEO ? await PM(a2.receiver, { onSei: (e4) => {
              var i3;
              null === (i3 = t3._videoTrack) || void 0 === i3 || i3._onSei(e4);
            } }) : n3 == ax.AUDIO && await bM(a2.receiver));
            const c2 = this.remoteUserMap.get(t3);
            c2 ? c2.set(n3, s2) : this.remoteUserMap.set(t3, /* @__PURE__ */ new Map([[n3, s2]])), this.statsCollector.addRemoteStats(t3.uid), this.statsUploader.startUploadInboundStats();
            const d2 = this.pendingRemoteTracks.findIndex((e4) => {
              let { user: i3, kind: r3 } = e4;
              return i3.uid === t3.uid && n3 === r3;
            });
            -1 !== d2 && (this.pendingRemoteTracks.splice(d2, 1), this.emit(px.MediaReconnectEnd, t3.uid));
          }
        }
        async unsubscribe(e2, t2, i2) {
          const n2 = this.pendingRemoteTracks.filter((i3) => {
            let { user: n3, kind: r3 } = i3;
            return void 0 !== t2 ? n3.uid === e2.uid && t2 === r3 : n3.uid === e2.uid;
          });
          if (n2.forEach((e3) => {
            const t3 = this.pendingRemoteTracks.indexOf(e3);
            this.pendingRemoteTracks.splice(t3, 1);
          }), this.connection && this.state === hx.Connected || i2 || n2.forEach((t3) => {
            let { kind: i3 } = t3;
            var n3;
            if (i3 === ax.AUDIO) null === (n3 = e2._audioTrack) || void 0 === n3 || n3._destroy(), e2._audioTrack = void 0;
            else if (i3 === ax.VIDEO) {
              var r3;
              null === (r3 = e2._videoTrack) || void 0 === r3 || r3._destroy(), e2._videoTrack = void 0;
            }
          }), !this.connection || this.state !== hx.Connected) return;
          const r2 = this.filterTobeUnSubscribedTracks(e2, t2);
          if (0 === r2.length) return;
          await this.connection.stopReceiving(r2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const o2 = this.createUnsubscribeMessage(r2);
          return this.withdrawRemoteTracks(r2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadInboundStats(), r2.forEach((e3) => {
            let [t3, { kind: n3 }] = e3;
            var r3, o3;
            n3 === ax.VIDEO && t3._videoSSRC && (null === (r3 = this.connection) || void 0 === r3 || r3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (n3 === ax.VIDEO) this.unbindRemoteTrackEvents(t3._videoTrack), i2 || (null === (o3 = t3._videoTrack) || void 0 === o3 || o3._destroy(), t3._videoTrack = void 0);
            else if (n3 === ax.AUDIO) {
              var s2;
              if (this.unbindRemoteTrackEvents(t3._audioTrack), !i2) null === (s2 = t3._audioTrack) || void 0 === s2 || s2._destroy(), t3._audioTrack = void 0;
            }
          }), o2;
        }
        async unsubscribeDataChannel(e2, t2) {
          if (t2.forEach((e3) => {
            const t3 = this.pendingRemoteDataChannels.findIndex((t4) => t4.id === e3.id);
            -1 !== t3 && this.pendingRemoteDataChannels.splice(t3, 1);
          }), !this.connection) return;
          const i2 = this.filterTobeUnSubscribedDataChannels(e2, t2);
          if (0 === i2.length) return;
          t2.forEach((e3) => {
            e3._close();
          });
          const n2 = this.remoteDataChannelMap.get(e2);
          return i2.forEach((e3) => {
            n2 && n2.delete(e3.id);
          }), n2 && 0 === n2.size && (this.remoteDataChannelMap.delete(e2), await this.connection.stopDataChannels(e2.uid)), i2.map((e3) => e3.id);
        }
        async massUnsubscribe(e2) {
          return this.massUnsubscribeNoLock(e2);
        }
        async massUnsubscribeNoLock(e2) {
          let t2 = [];
          for (const { user: i3, mediaType: n3 } of e2) {
            const e3 = this.pendingRemoteTracks.filter((e4) => {
              let { user: t3, kind: r2 } = e4;
              return void 0 !== n3 ? t3.uid === i3.uid && n3 === r2 : t3.uid === i3.uid;
            });
            e3.forEach((e4) => {
              const t3 = this.pendingRemoteTracks.indexOf(e4);
              this.pendingRemoteTracks.splice(t3, 1);
            }), t2 = t2.concat(e3);
          }
          if (!this.connection || this.state !== hx.Connected) return void t2.forEach((e3) => {
            let { user: t3, kind: i3 } = e3;
            var n3;
            if (i3 === ax.AUDIO) null === (n3 = t3._audioTrack) || void 0 === n3 || n3._destroy(), t3._audioTrack = void 0;
            else if (i3 === ax.VIDEO) {
              var r2;
              null === (r2 = t3._videoTrack) || void 0 === r2 || r2._destroy(), t3._videoTrack = void 0;
            }
          });
          const i2 = rr(e2).call(e2, (e3, t3) => {
            let { user: i3, mediaType: n3 } = t3;
            const r2 = this.filterTobeUnSubscribedTracks(i3, n3);
            return e3.concat(r2);
          }, []);
          if (0 === i2.length) return;
          await this.connection.stopReceiving(i2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const n2 = this.createUnsubscribeAllMessage(i2);
          return this.withdrawRemoteTracks(i2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadInboundStats(), i2.forEach((e3) => {
            let [t3, { kind: i3 }] = e3;
            var n3, r2;
            i3 === ax.VIDEO && t3._videoSSRC && (null === (n3 = this.connection) || void 0 === n3 || n3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (i3 === ax.VIDEO) this.unbindRemoteTrackEvents(t3._videoTrack), null === (r2 = t3._videoTrack) || void 0 === r2 || r2._destroy(), t3._videoTrack = void 0;
            else if (i3 === ax.AUDIO) {
              var o2;
              this.unbindRemoteTrackEvents(t3._audioTrack), null === (o2 = t3._audioTrack) || void 0 === o2 || o2._destroy(), t3._audioTrack = void 0;
            }
          }), n2;
        }
        isPreSubScribe(e2) {
          if (!this.connection || this.state !== hx.Connected) return false;
          return !!this.connection.getPreMedia(e2);
        }
        async muteRemote(e2, t2) {
          if (!this.connection) return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel.muteRemote has no remote user ").concat(e2.uid, "."));
          if (!i2.get(t2)) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel.muteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
          const n2 = t2 === ax.VIDEO ? e2._videoSSRC : e2._audioSSRC;
          void 0 !== n2 && this.connection.setStatsRemoteVideoIsReady(n2, false);
        }
        async unmuteRemote(e2, t2) {
          return this.unmuteRemoteNoLock(e2, t2);
        }
        async unmuteRemoteNoLock(e2, t2) {
          if (!this.connection) return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel.unmuteRemote has no remote user ").concat(e2.uid, "."));
          i2.get(t2) || lD.warning("[".concat(this.store.clientId, "] P2PChannel.unmuteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
        }
        addAudioMetadata(e2) {
          const t2 = this.localTrackMap.get(ux.LocalAudioTrack), i2 = t2 && t2.track;
          i2 && i2.metadata.push(e2);
        }
        getAllTracks(e2) {
          const t2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if ((null == t2 ? void 0 : t2.track) instanceof KL) {
            const i2 = t2.track;
            return Array.from(this.localTrackMap.entries()).filter((e3) => {
              let [t3] = e3;
              return t3 !== ux.LocalAudioTrack;
            }).filter((t3) => {
              let [i3] = t3;
              return !(e2 && i3 === ux.LocalVideoLowTrack);
            }).map((e3) => {
              let [, { track: t3 }] = e3;
              return t3;
            }).concat(i2.trackList);
          }
          return Array.from(this.localTrackMap.entries()).filter((t3) => {
            let [i2] = t3;
            return !(e2 && i2 === ux.LocalVideoLowTrack);
          }).map((e3) => {
            let [, { track: t3 }] = e3;
            return t3;
          });
        }
        getAllDataChannels() {
          return this.localDataChannels;
        }
        reportPublishEvent(e2, t2, i2, n2, r2) {
          if (e2) {
            const i3 = this.localTrackMap.get(ux.LocalAudioTrack), o3 = n2 ? this.localTrackMap.get(ux.LocalVideoLowTrack) : this.localTrackMap.get(ux.LocalVideoTrack);
            TD.publish(this.store.sessionId, { eventElapse: LF.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == i3 ? void 0 : i3.track.getTrackLabel(), videoName: null == o3 ? void 0 : o3.track.getTrackLabel(), screenshare: -1 !== (null == o3 ? void 0 : o3.track._hints.indexOf(BD.SCREEN_TRACK)), audio: !!i3, video: !!o3, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: r2 });
          } else {
            var o2;
            i2 || (i2 = []);
            const s2 = i2.find((e3) => e3 instanceof GL), a2 = n2 ? null === (o2 = this.localTrackMap.get(ux.LocalVideoTrack)) || void 0 === o2 ? void 0 : o2.track : i2.find((e3) => e3 instanceof Dk);
            TD.publish(this.store.sessionId, { eventElapse: LF.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == s2 ? void 0 : s2.getTrackLabel(), videoName: null == a2 ? void 0 : a2.getTrackLabel(), screenshare: -1 !== (null == a2 ? void 0 : a2._hints.indexOf(BD.SCREEN_TRACK)), audio: !!s2, video: !!a2, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: r2 });
          }
        }
        reportSubscribeEvent(e2, t2, i2, n2) {
          const r2 = n2 === ax.VIDEO ? i2._videoSSRC : i2._audioSSRC;
          r2 && TD.subscribe(this.store.sessionId, { succ: e2, ec: t2, video: n2 === ax.VIDEO, audio: n2 === ax.AUDIO, peerid: i2.uid, subscribeRequestid: r2, p2pid: this.store.p2pId, eventElapse: LF.measureFromSubscribeStart(this.store.clientId, r2), preSsrc: this.isPreSubScribe(r2) });
        }
        reset() {
          lD.debug("[".concat(this.store.clientId, "] P2PChannel.reset")), this.mutex = new KO("P2PChannel-mutex", this.store.clientId), this.connection && (this.resetConnection(this.connection), this.connection = void 0), this.shouldForwardP2PCreation && (this.connection = cB(this.store), this.emit(px.PeerConnectionStateChange, this.connection.peerConnectionState), this.bindConnectionEvents(this.connection)), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), this.statsUploader.stopUploadExtensionUsageStats(), this.statsUploader.stopUploadBaseStats(), this.unbindLocalTrackEvents(), this.unbindAllRemoteTrackEvents(), this.unbindRtpTransceiver();
          const e2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if ((null == e2 ? void 0 : e2.track) instanceof KL) {
            if (e2.track.trackList.length > 0) {
              const t2 = e2.track;
              e2.track.trackList.forEach((e3) => {
                t2.removeAudioTrack(e3);
              });
            }
            e2.track.close();
          }
          this.localTrackMap.clear(), this.remoteUserMap.clear(), this.statsCollector.removeRemoteStats(), this.statsCollector.removeLocalStats(), this.iceFailedCount = 0, this.dtlsFailedCount = 0, this.pendingLocalTracks = [], this.pendingRemoteTracks = [], this.localDataChannels = [], this.remoteDataChannelMap.clear(), this.pendingLocalDataChannels = [], this.pendingRemoteDataChannels = [], this.state = hx.Disconnected;
        }
        getStats() {
          var e2;
          return null === (e2 = this.connection) || void 0 === e2 ? void 0 : e2.getStats();
        }
        getRemoteVideoIsReady(e2) {
          var t2;
          return (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.getRemoteVideoIsReady(e2)) || false;
        }
        getLocalAudioVolume() {
          const e2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2) return e2.track.getVolumeLevel();
        }
        getLocalVideoSize() {
          const e2 = this.localTrackMap.get(ux.LocalVideoTrack);
          if (e2) return { width: e2.track.videoWidth || 0, height: e2.track.videoHeight || 0 };
        }
        getEncoderConfig(e2) {
          const t2 = this.localTrackMap.get(e2);
          return t2 && t2.track instanceof Dk || t2 && t2.track instanceof GL ? t2.track._encoderConfig : void 0;
        }
        getLocalMedia(e2) {
          return this.localTrackMap.get(e2);
        }
        hasLocalMedia() {
          return this.localTrackMap.size > 0;
        }
        hasRemoteMedia(e2, t2) {
          if (!e2) return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        async hasRemoteMediaWithLock(e2, t2) {
          if (!e2) return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        getRemoteMedia(e2) {
          var t2;
          const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3.uid === e2);
          return i2 ? { audioTrack: i2.audioTrack, audioSSRC: i2._audioSSRC, videoTrack: i2.videoTrack, videoSSRC: i2._videoSSRC } : {};
        }
        getAudioLevels() {
          let e2 = Array.from(this.remoteUserMap.entries()).map((e3) => {
            let [t3] = e3;
            return { uid: t3.uid, level: t3.audioTrack ? 100 * t3.audioTrack._source.getAccurateVolumeLevel() : 0 };
          });
          const t2 = this.localTrackMap.get(ux.LocalAudioTrack);
          return t2 && e2.push({ level: 100 * t2.track._source.getAccurateVolumeLevel(), uid: this.store.uid }), e2 = qS(e2).call(e2, (e3, t3) => e3.level - t3.level), e2;
        }
        async disconnectForReconnect() {
          this.connection && (lD.debug("[".concat(this.store.clientId, "] P2PChannel.disconnectForReconnect closing P2PConnection")), this.state = hx.Reconnecting, MN("KEEP_LAST_FRAME") && 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2] = e2;
            var i2;
            t2._videoTrack && t2._videoTrack._player && (null === (i2 = t2._videoTrack._player.getVideoElement()) || void 0 === i2 || i2.pause(), t2._videoTrack._player.isKeepLastFrame = true, t2._videoTrack._originMediaStreamTrack.stop());
          }), this.resetConnection(this.connection), this.connection = void 0, this.shouldForwardP2PCreation && (this.connection = cB(this.store), this.emit(px.PeerConnectionStateChange, this.connection.peerConnectionState), this.bindConnectionEvents(this.connection)), 0 !== this.localTrackMap.size && (Array.from(this.localTrackMap.entries()).forEach((e2) => {
            var t2;
            let [i2, { track: n2 }] = e2;
            switch (i2) {
              case ux.LocalVideoTrack:
                kn(t2 = n2._hints).call(t2, BD.LOW_STREAM) ? n2.close() : this.pendingLocalTracks.push(n2);
                break;
              case ux.LocalAudioTrack:
                n2 instanceof KL ? this.pendingLocalTracks = this.pendingLocalTracks.concat(n2.trackList) : this.pendingLocalTracks.push(n2);
              case ux.LocalVideoLowTrack:
            }
          }), this.emit(px.MediaReconnectStart, this.store.uid)), this.unbindLocalTrackEvents(), this.localTrackMap.clear(), 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from($N(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteMedia(t2, e3);
            }), this.emit(px.MediaReconnectStart, t2.uid);
          }), this.unbindAllRemoteTrackEvents(), this.remoteUserMap.clear(), 0 !== this.localDataChannels.length && (this.localDataChannels.forEach((e2) => {
            this.pendingLocalDataChannels.push(e2);
          }), this.localDataChannels.length = 0), 0 !== this.remoteDataChannelMap.size && (Array.from(this.remoteDataChannelMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from($N(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteDataChannel(t2, e3);
            });
          }), this.remoteDataChannelMap.clear()), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), lD.debug("[".concat(this.store.clientId, "] P2PChannel disconnected, waiting to reconnect.")));
        }
        hasPendingRemoteDataChannel(e2, t2) {
          for (const i2 of this.pendingRemoteDataChannels) {
            const { user: n2, id: r2 } = i2;
            if ((e2 instanceof FF ? e2.uid : e2) === n2.uid && r2 === t2) return true;
          }
          return false;
        }
        setPendingRemoteDataChannel(e2, t2) {
          this.hasPendingRemoteDataChannel(e2, t2) || this.pendingRemoteDataChannels.push({ user: e2, id: t2 });
        }
        hasPendingRemoteMedia(e2, t2) {
          for (const i2 of this.pendingRemoteTracks) {
            const { user: n2, kind: r2 } = i2;
            if ((e2 instanceof FF ? e2.uid : e2) === n2.uid && t2 === r2) return true;
          }
          return false;
        }
        setPendingRemoteMedia(e2, t2) {
          this.hasPendingRemoteMedia(e2, t2) || this.pendingRemoteTracks.push({ user: e2, kind: t2 });
        }
        restartICE(e2) {
          var t2 = this;
          return sb(function* () {
            if (!t2.connection || t2.state !== hx.Connected) return;
            const i2 = yield ab(t2.mutex.lock("From P2PChannel.restartICE"));
            let n2;
            try {
              n2 = yield ab(t2.connection.restartICE(e2));
              const i3 = yield ab(n2.next());
              if (i3.done) return;
              const r3 = i3.value, o2 = yield r3;
              switch (dB(t2.connection) && t2.reportPCStats(Date.now(), false, t2._pcStatsUploadType), e2) {
                case cx.UDP_TCP_RELAY:
                  t2._pcStatsUploadType = dx.UDP_TCP_RESTART;
                  break;
                case cx.TCP_RELAY:
                  t2._pcStatsUploadType = dx.TCP_RESTART;
                  break;
                case cx.RELAY:
                  t2._pcStatsUploadType = dx.RELAY_RESTART;
                  break;
                default:
                  t2._pcStatsUploadType = dx.OLD_RESTART;
              }
              t2._isTryConnecting = true, n2.next(o2);
            } catch (e3) {
              var r2;
              null === (r2 = n2) || void 0 === r2 || r2.throw(e3);
            } finally {
              i2();
            }
          })();
        }
        getUplinkNetworkQuality() {
          if (!this.connection) return 0;
          const e2 = this.connection.getStats(), t2 = this.localTrackMap.get(ux.LocalVideoTrack), i2 = this.localTrackMap.get(ux.LocalAudioTrack), n2 = e2.videoSend.find((e3) => e3.ssrc === (null == t2 ? void 0 : t2.ssrcs[0].ssrcId)), r2 = e2.audioSend.find((e3) => e3.ssrc === (null == i2 ? void 0 : i2.ssrcs[0].ssrcId));
          if (!n2 || !r2) return 1;
          const o2 = EO(this, px.NeedSignalRTT), s2 = n2 ? n2.rttMs : void 0, a2 = r2 ? r2.rttMs : void 0, c2 = s2 && a2 ? (s2 + a2) / 2 : s2 || a2, d2 = (c2 && o2 ? (c2 + o2) / 2 : c2 || o2) || 0, l2 = 100 * e2.sendPacketLossRate * 0.7 / 50 + 0.3 * d2 / 1500, u2 = l2 < 0.17 ? 1 : l2 < 0.36 ? 2 : l2 < 0.59 ? 3 : l2 < 0.1 ? 4 : 5, h2 = null == t2 ? void 0 : t2.track;
          if (h2 && h2._encoderConfig && -1 === h2._hints.indexOf(BD.SCREEN_TRACK)) {
            const t3 = h2._encoderConfig.bitrateMax, i3 = e2.bitrate.actualEncoded;
            if (t3 && i3) {
              const e3 = (1e3 * t3 - i3) / (1e3 * t3);
              return kM[e3 < 0.15 ? 0 : e3 < 0.3 ? 1 : e3 < 0.45 ? 2 : e3 < 0.6 ? 3 : 4][u2];
            }
          }
          return u2;
        }
        getDownlinkNetworkQuality() {
          if (!this.connection) return 0;
          const e2 = this.connection.getStats();
          let t2 = 0;
          return Array.from(this.remoteUserMap.entries()).forEach((i2) => {
            let [n2] = i2;
            const r2 = n2._audioSSRC, o2 = n2._videoSSRC, s2 = e2.audioRecv.find((e3) => e3.ssrc === r2), a2 = e2.videoRecv.find((e3) => e3.ssrc === o2);
            if (!s2 && !a2) return void (t2 += 1);
            const c2 = EO(this, px.NeedSignalRTT), d2 = e2.rtt, l2 = (d2 && c2 ? (d2 + c2) / 2 : d2 || c2) || 0, u2 = s2 ? s2.jitterMs : void 0, h2 = e2.recvPacketLossRate;
            let p2 = 0.7 * h2 * 100 / 50 + 0.3 * l2 / 1500;
            u2 && (p2 = 0.6 * h2 * 100 / 50 + 0.2 * l2 / 1500 + 0.2 * u2 / 400);
            t2 += p2 < 0.1 ? 1 : p2 < 0.17 ? 2 : p2 < 0.36 ? 3 : p2 < 0.59 ? 4 : 5;
          }), this.remoteUserMap.size > 0 ? Math.round(t2 / this.remoteUserMap.size) : t2;
        }
        async muteLocalTrack(e2) {
          return new np((t2, i2) => {
            this.handleMuteLocalTrack(e2, t2, i2);
          });
        }
        async replaceTrack(e2, t2) {
          var i2;
          if (lD.debug("[".concat(this.store.clientId, "] P2PChannel replaceTrack from [").concat(e2.getTrackId(), "] to [").concat(t2.getTrackId(), "]")), !this.connection || this.state !== hx.Connected) return;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (!n2) return;
          const r2 = n2[0];
          if (e2 !== t2 && (this.unbindLocalTrackEvents([{ track: e2, type: r2 }]), this.bindLocalTrackEvents([{ track: t2, type: r2 }]), n2[1].track = t2), await (null === (i2 = this.connection) || void 0 === i2 ? void 0 : i2.replaceTrack(t2, n2[1].id)), this.isPlanB) {
            const e3 = n2[1];
            e3.id = t2._mediaStreamTrack.id, this.localTrackMap.set(r2, e3);
          }
          if (r2 === ux.LocalVideoTrack && !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding) {
            const t3 = this.localTrackMap.get(ux.LocalVideoLowTrack);
            if (t3) {
              const i3 = e2._mediaStreamTrack.clone();
              t3.track._originMediaStreamTrack.stop(), t3.track._mediaStreamTrack = i3, t3.track._originMediaStreamTrack = i3, await new np((e3, i4) => {
                this.handleReplaceTrack(t3.track, e3, i4, true);
              });
            }
          }
        }
        filterTobePublishedTracks(e2, t2, i2) {
          const n2 = [], r2 = this.getAllTracks();
          e2 = SO(e2 = e2.filter((e3) => -1 === r2.indexOf(e3)));
          let o2, s2 = false;
          const a2 = this.localTrackMap.get(ux.LocalAudioTrack);
          for (const r3 of e2) {
            if (r3 instanceof Dk && (this.localTrackMap.has(ux.LocalVideoTrack) || s2 ? new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS).throw() : (n2.push({ track: r3, type: ux.LocalVideoTrack }), s2 = true), t2)) {
              const e3 = this.getLowVideoTrack(r3, i2);
              n2.push({ track: e3, type: ux.LocalVideoLowTrack });
            }
            if (r3 instanceof GL) if (a2) {
              const e3 = a2.track;
              if (e3 instanceof KL) oB([r3]), e3.addAudioTrack(r3), this.bindLocalAudioTrackEvents(r3, true);
              else {
                const t3 = sB([e3, r3]);
                lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection will replace audioTrack [").concat(t3.getTrackId(), "]")), this.replaceTrack(e3, t3);
              }
            } else if (o2 instanceof KL) oB([r3]), o2.addAudioTrack(r3);
            else if (o2 || !r3._useAudioElement && RD().webAudioMediaStreamDest && !r3._bypassWebAudio) {
              o2 = sB(o2 ? [r3, o2] : [r3]);
            } else o2 = r3;
          }
          return o2 && (lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection will send audioTrack [").concat(o2.getTrackId(), "]")), n2.push({ track: o2, type: ux.LocalAudioTrack })), n2;
        }
        filterTobeUnpublishedTracks(e2) {
          const t2 = [], i2 = this.getAllTracks();
          e2 = SO(e2 = e2.filter((e3) => -1 !== i2.indexOf(e3)));
          for (const i3 of e2) {
            if (i3 instanceof GL) {
              const e3 = this.localTrackMap.get(ux.LocalAudioTrack);
              if (!e3) continue;
              e3.track instanceof KL ? (e3.track.removeAudioTrack(i3), this.unbindLocalAudioTrackEvents(i3), 0 === e3.track.trackList.length && (t2.push([ux.LocalAudioTrack, e3]), e3.track.close())) : t2.push([ux.LocalAudioTrack, e3]);
            }
            if (i3 instanceof Dk) {
              const e3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!e3) continue;
              t2.push([ux.LocalVideoTrack, e3]);
              const i4 = this.localTrackMap.get(ux.LocalVideoLowTrack);
              i4 && t2.push([ux.LocalVideoLowTrack, i4]);
            }
          }
          return t2;
        }
        filterTobePublishedDataChannels(e2) {
          return e2 = (e2 = SO(e2)).filter((e3) => -1 === this.localDataChannels.findIndex((t2) => t2.id === e3.id));
        }
        filterTobeUnpublishedDataChannels(e2) {
          return e2 = (e2 = (e2 = SO(e2)).filter((e3) => -1 !== this.localDataChannels.indexOf(e3))).filter((e3) => e3._originDataChannel);
        }
        bindLocalTrackEvents(e2) {
          e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case ux.LocalVideoTrack:
                t2.addListener(FD.GET_STATS, this.handleGetLocalVideoStats), t2.addListener(FD.GET_RTC_STATS, this.handleGetRTCStats), t2.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.addListener(FD.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.addListener(FD.NEED_UPDATE_VIDEO_SEND_PARAMETERS, this.handleUpdateVideoSendParameters), t2.addListener(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case ux.LocalAudioTrack:
                this.bindLocalAudioTrackEvents(t2);
              case ux.LocalVideoLowTrack:
            }
          });
        }
        bindLocalAudioTrackEvents(e2, t2) {
          e2 instanceof KL ? e2.trackList.forEach((e3) => {
            e3.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.addListener(FD.GET_STATS, this.handleGetLocalAudioStats), e3.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.addListener(FD.GET_STATS, this.handleGetLocalAudioStats), e2.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack), t2 || (e2.addListener(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.addListener(FD.NEED_REPLACE_MIXING_TRACK, this.handleReplaceMixingTrack)));
        }
        unbindLocalTrackEvents(e2) {
          e2 || (e2 = Array.from(this.localTrackMap.entries()).map((e3) => {
            let [t2, { track: i2 }] = e3;
            return { track: i2, type: t2 };
          })), e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case ux.LocalVideoTrack:
                t2.off(FD.GET_STATS, this.handleGetLocalVideoStats), t2.off(FD.GET_RTC_STATS, this.handleGetRTCStats), t2.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.off(FD.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.off(FD.NEED_UPDATE_VIDEO_SEND_PARAMETERS, this.handleUpdateVideoSendParameters), t2.off(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case ux.LocalAudioTrack:
                this.unbindLocalAudioTrackEvents(t2);
              case ux.LocalVideoLowTrack:
            }
          });
        }
        unbindLocalAudioTrackEvents(e2) {
          e2 instanceof KL ? e2.trackList.forEach((e3) => {
            e3.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.off(FD.GET_STATS, this.handleGetLocalAudioStats), e3.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.off(FD.GET_STATS, this.handleGetLocalAudioStats), e2.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.off(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.off(FD.NEED_REPLACE_MIXING_TRACK, this.handleReplaceMixingTrack), e2.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack));
        }
        bindRemoteTrackEvents(e2, t2) {
          t2 instanceof qk && t2.addListener(FD.GET_STATS, (t3) => {
            t3(this.handleGetRemoteVideoStats(e2));
          }), t2 instanceof zk && t2.addListener(FD.GET_STATS, (t3) => {
            t3(this.handleGetRemoteAudioStats(e2));
          });
        }
        unbindRemoteTrackEvents(e2) {
          e2 && e2.removeAllListeners(FD.GET_STATS);
        }
        unbindAllRemoteTrackEvents() {
          Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            i2.has(ax.AUDIO) && this.unbindRemoteTrackEvents(t2._audioTrack), i2.has(ax.VIDEO) && this.unbindRemoteTrackEvents(t2._videoTrack);
          });
        }
        createGatewayPublishMessage(e2, t2) {
          return e2.map((e3, i2) => {
            var n2;
            let r2, o2, { track: s2, type: a2 } = e3;
            switch (a2) {
              case ux.LocalAudioTrack:
                r2 = JU.Audio, o2 = { dtx: s2 instanceof WL && s2._config.DTX, hq: false, lq: false, stereo: false, speech: false };
                break;
              case ux.LocalVideoTrack:
                r2 = kn(n2 = s2._hints).call(n2, BD.SCREEN_TRACK) ? JU.Screen : JU.High, o2 = WB(WB({}, Qx(s2)), {}, { codec: this.store.codec, svc_mode: nV() });
                break;
              case ux.LocalVideoLowTrack:
                r2 = JU.Low, o2 = WB(WB({}, Qx(s2)), {}, { codec: this.store.codec, svc_mode: nV() });
            }
            return { stream_type: r2, attributes: o2, ssrcs: t2[i2] };
          });
        }
        createGatewayUnpublishMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        assignLocalTracks(e2, t2) {
          e2.forEach((e3, i2) => {
            let { track: n2, type: r2 } = e3;
            this.localTrackMap.set(r2, { track: n2, id: t2[i2].id, ssrcs: t2[i2].localSSRC });
          });
        }
        withdrawLocalTracks(e2) {
          e2.forEach((e3) => {
            let [t2] = e3;
            this.localTrackMap.delete(t2);
          });
        }
        bindConnectionEvents(e2) {
          e2.onConnectionStateChange = async (t2) => {
            if (lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onConnectionStateChange(").concat(t2, ")")), this.emit(px.PeerConnectionStateChange, t2), "connected" !== t2 || this.store.keyMetrics.peerConnectionEnd || this.store.peerConnectionEnd(), "connected" === t2) {
              this._restartTimer && (window.clearTimeout(this._restartTimer), this._restartTimer = void 0), e2 instanceof _B && FB(e2, true), this._isTryConnecting && this.reportPCStats(Date.now(), true, this._pcStatsUploadType), this._isTryConnecting = false, this._isStartRestartIce = false, this._pcStatsUploadType = dx.DISCONNECTED_OR_FAILED;
              if ("CONNECTED" === EO(this, px.QueryClientConnectionState) && this._isWaitPcToRePub) {
                const e3 = this.pendingLocalTracks.map((e4) => e4.getTrackId()), t3 = this.pendingLocalDataChannels.map((e4) => "dc_".concat(e4.id));
                TD.reportApiInvoke(this.store.sessionId, { name: tO.REPUB_AFTER_PC_CONNECTED, options: e3.concat(t3), tag: iO.TRACER }).onSuccess(), this.republish();
              }
            }
            if (MN("NEW_ICE_RESTART") && e2 instanceof _B && !hw() && !this._forceTurn) {
              if (kn(lx).call(lx, t2)) {
                if (this._isStartRestartIce) return;
                this._isStartRestartIce = true;
                const t3 = (t4) => {
                  if (dB(e2)) {
                    lD.debug("[".concat(this.store.clientId, "] [P2PChannel] try to restartICE, type is ").concat(t4));
                    "CONNECTED" === EO(this, px.QueryClientConnectionState) && this.emit(px.RequestRestartICE, t4);
                  }
                }, i2 = () => {
                  dB(e2) && (this.reportPCStats(Date.now(), false, this._pcStatsUploadType), lD.debug("[".concat(this.store.clientId, "] P2PConnection disconnected timeout, force reconnect")), setTimeout(() => this.emit(px.P2PLost), 0), this.iceFailedCount += 1, this.requestReconnect());
                };
                return void (this._restartTimer = window.setTimeout(() => {
                  BB(e2, t3, i2);
                }, 800));
              }
            } else {
              if ("disconnected" === t2 && "disconnected" === e2.iceConnectionState) return setTimeout(() => {
                if ("disconnected" === e2.iceConnectionState && MN("ICE_RESTART")) {
                  "CONNECTED" === EO(this, px.QueryClientConnectionState) && this.emit(px.RequestRestartICE);
                }
              }, 800), void setTimeout(() => {
                "disconnected" === e2.peerConnectionState && (lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection disconnected timeout 4000ms, force reconnect")), this.reportPCStats(Date.now(), false, this._pcStatsUploadType), this._isTryConnecting = false, setTimeout(() => this.emit(px.P2PLost), 0), this.iceFailedCount += 1, this.requestReconnect());
              }, 4e3);
              "failed" === t2 && (lD.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection state failed, force reconnect")), this.reportPCStats(Date.now(), false, this._pcStatsUploadType), setTimeout(() => this.emit(px.P2PLost), 0), this.iceFailedCount += 1, await this.requestReconnect());
            }
          }, e2.onICEConnectionStateChange = (e3) => {
            "connected" !== e3 || this.store.keyMetrics.iceConnectionEnd || this.store.iceConnectionEnd(), lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICEConnectionStateChange(").concat(e3, ")")), TD.reportApiInvoke(this.store.sessionId, { name: "ICEConnectionStateChange", options: e3, tag: iO.TRACER }).onSuccess(), this.emit(px.IceConnectionStateChange, e3);
          }, e2.onICETransportStateChange = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICETransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportStateChange = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportError = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportError(").concat(e3, ")"));
          }, e2.onFirstAudioDecoded = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            var n2;
            i2 && (this.store.subscribe(i2.uid, "audio", void 0, void 0, void 0, Date.now()), null === (n2 = i2.audioTrack) || void 0 === n2 || n2.emit(YD.FIRST_FRAME_DECODED), TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_AUDIO_DECODE, ED.FIRST_AUDIO_DECODE, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId }));
          }, e2.onFirstAudioReceived = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            i2 && TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_AUDIO_RECEIVED, ED.FIRST_AUDIO_RECEIVED, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onFirstVideoDecoded = (e3, t2, i2) => {
            this.reportVideoFirstFrameDecoded(e3, t2, i2);
          }, e2.onFirstVideoReceived = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._videoSSRC === e3);
            i2 && TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_VIDEO_RECEIVED, ED.FIRST_VIDEO_RECEIVED, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onSelectedLocalCandidateChanged = (e3, t2) => {
            const i2 = "relay" === e3.candidateType, n2 = "relay" === t2.candidateType;
            "unknown" !== t2.candidateType && i2 === n2 || this.emit(px.ConnectionTypeChange, i2), lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedLocalCandidateChanged(").concat(JSON.stringify(iV(t2)), " -> ").concat(JSON.stringify(iV(e3)), ")"));
          }, e2.onSelectedRemoteCandidateChanged = (e3, t2) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedRemoteCandidateChanged(").concat(JSON.stringify(iV(t2)), " -> ").concat(JSON.stringify(iV(e3)), ")"));
          }, e2.onFirstVideoDecodedTimeout = (e3) => {
            this.reportVideoFirstFrameDecoded(e3, void 0, void 0, true);
          }, e2.getLocalVideoStats = () => {
            const e3 = this.statsCollector.getLocalVideoTrackStats(), t2 = this.statsCollector.getRTCStats();
            return WB(WB({}, e3), t2);
          }, e2.onICECandidateError = (e3) => {
            this._iceError = e3;
          };
        }
        resetConnection(e2) {
          e2 instanceof _B && function(e3) {
            UB.delete(e3.id), FB(e3);
          }(e2), e2.close(), this.emit(px.PeerConnectionStateChange, "closed"), function(e3) {
            e3.onConnectionStateChange = void 0, e3.onICEConnectionStateChange = void 0, e3.onICETransportStateChange = void 0, e3.onDTLSTransportStateChange = void 0, e3.onDTLSTransportError = void 0, e3.onFirstAudioDecoded = void 0, e3.onFirstAudioReceived = void 0, e3.onFirstVideoDecoded = void 0, e3.onFirstVideoReceived = void 0, e3.onSelectedLocalCandidateChanged = void 0, e3.onSelectedRemoteCandidateChanged = void 0, e3.onFirstVideoDecodedTimeout = void 0, e3.getLocalVideoStats = void 0;
          }(e2), this._isWaitPcToRePub = false;
        }
        filterTobeMutedTracks(e2) {
          const t2 = [];
          if (-1 === this.getAllTracks().indexOf(e2)) return t2;
          const i2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2 instanceof GL && (null == i2 ? void 0 : i2.track) instanceof KL) return i2.track.isActive || t2.push([ux.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2 && (t2.push(n2), n2[0] === ux.LocalVideoTrack)) {
            const e3 = this.localTrackMap.get(ux.LocalVideoLowTrack);
            e3 && t2.push([ux.LocalVideoLowTrack, e3]);
          }
          return t2;
        }
        filterTobeUnmutedTracks(e2) {
          const t2 = [], i2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2 instanceof GL && (null == i2 ? void 0 : i2.track) instanceof KL) return i2.track.isActive && t2.push([ux.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2) if (n2[0] === ux.LocalVideoTrack) {
            t2.push(n2);
            const e3 = this.localTrackMap.get(ux.LocalVideoLowTrack);
            e3 && t2.push([ux.LocalVideoLowTrack, e3]);
          } else t2.push(n2);
          return t2;
        }
        createMuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        createUnmuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        filterTobeUnSubscribedTracks(e2, t2) {
          const i2 = [], n2 = this.remoteUserMap.get(e2);
          if (!n2) return i2;
          if (t2) {
            const r2 = n2.get(t2);
            if (!r2) return i2;
            i2.push([e2, { kind: t2, id: r2 }]);
          } else Array.from(n2.entries()).forEach((t3) => {
            let [n3, r2] = t3;
            i2.push([e2, { kind: n3, id: r2 }]);
          });
          return i2;
        }
        filterTobeUnSubscribedDataChannels(e2, t2) {
          const i2 = [];
          return t2.forEach((t3) => {
            var n2;
            null !== (n2 = this.remoteDataChannelMap.get(e2)) && void 0 !== n2 && n2.has(t3.id) && i2.push(t3);
          }), i2;
        }
        createUnsubscribeMessage(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            let [i2, { kind: n2, id: r2 }] = e3;
            switch (n2) {
              case ax.VIDEO:
                return void (i2._videoSSRC && t2.push({ stream_type: ax.VIDEO, ssrcId: i2._videoSSRC }));
              case ax.AUDIO:
                return void (i2._audioSSRC && t2.push({ stream_type: ax.AUDIO, ssrcId: i2._audioSSRC }));
            }
          }), t2;
        }
        createUnsubscribeAllMessage(e2) {
          const t2 = /* @__PURE__ */ new Map();
          return e2.forEach((e3) => {
            let [i2, { kind: n2 }] = e3;
            if (t2.has(i2)) {
              let e4 = t2.get(i2);
              n2 === ax.VIDEO ? e4 |= ZU.Video : e4 |= ZU.Audio, t2.set(i2, e4);
            } else n2 === ax.VIDEO ? t2.set(i2, ZU.Video) : t2.set(i2, ZU.Audio);
          }), { users: Array.from(t2.entries()).map((e3) => {
            let [t3, i2] = e3;
            return { stream_id: t3.uid, stream_type: i2 };
          }) };
        }
        withdrawRemoteTracks(e2) {
          e2.forEach((e3) => {
            let [t2, { kind: i2 }] = e3;
            const n2 = this.remoteUserMap.get(t2);
            n2 && (n2.delete(i2), 0 === Array.from(n2.entries()).length && this.remoteUserMap.delete(t2));
          });
        }
        async updateBitrateLimit(e2) {
          const t2 = this.localTrackMap.get(ux.LocalVideoTrack), i2 = this.localTrackMap.get(ux.LocalVideoLowTrack);
          t2 && (await t2.track.setBitrateLimit(e2.uplink), await new np((e3, i3) => {
            this.handleUpdateVideoEncoder(t2.track, e3, i3, true);
          })), i2 && e2.low_stream_uplink && (await i2.track.setBitrateLimit({ max_bitrate: e2.low_stream_uplink.bitrate, min_bitrate: e2.low_stream_uplink.bitrate || 0 }), await new np((e3, t3) => {
            this.handleUpdateVideoEncoder(i2.track, e3, t3, true);
          }));
        }
        isP2PDisconnected() {
          if (this.connection) {
            return "connected" !== this.connection.peerConnectionState;
          }
          return true;
        }
        mapPubResToRemoteConfig(e2, t2, i2) {
          return e2.map((e3, n2) => {
            var r2;
            let { stream_type: o2 } = e3;
            const s2 = null === (r2 = t2.find((e4) => {
              let { stream_type: t3 } = e4;
              return o2 === t3;
            })) || void 0 === r2 ? void 0 : r2.attributes;
            if (s2 && MN("DISABLE_SCREEN_SHARE_REMB")) {
              const e4 = i2[n2]._hints;
              (kn(e4).call(e4, BD.SCREEN_TRACK) || kn(e4).call(e4, BD.SCREEN_LOW_TRACK)) && (s2.remb = false, lD.debug("disable remb for screen share, hints:", e4));
            }
            return s2;
          });
        }
        async tryToUnmuteAudio(e2) {
          for (let i2 = 0; i2 < e2.length; i2++) if (e2[i2] instanceof GL) {
            var t2;
            const n2 = this.filterTobeUnmutedTracks(e2[i2]);
            if (0 === n2.length) continue;
            await (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.unmuteLocal(n2.map((e3) => {
              let [, { id: t3 }] = e3;
              return t3;
            })));
            const r2 = this.createUnmuteMessage(n2);
            return void await _O(this, px.RequestUnmuteLocal, r2);
          }
        }
        bindStatsUploaderEvents() {
          this.statsUploader.requestStats = () => this.getStats(), this.statsUploader.requestLocalMedia = () => Array.from(this.localTrackMap.entries()), this.statsUploader.requestRemoteMedia = () => Array.from(this.remoteUserMap.entries()), this.statsUploader.requestVideoIsReady = (e2) => {
            var t2;
            return !(null === (t2 = this.connection) || void 0 === t2 || !t2.getRemoteVideoIsReady(e2));
          }, this.statsUploader.requestUpload = (e2, t2) => this.emit(px.RequestUpload, e2, t2), this.statsUploader.requestUploadStats = (e2) => this.emit(px.RequestUploadStats, e2), this.statsUploader.requestAllTracks = () => this.getAllTracks(), this.statsUploader.requestTransportStats = () => {
            var e2;
            return { connectState: (null === (e2 = this.connection) || void 0 === e2 ? void 0 : e2.peerConnectionState) || "closed" };
          };
        }
        unbindStatsUploaderEvents() {
          this.statsUploader.requestStats = void 0, this.statsUploader.requestLocalMedia = void 0, this.statsUploader.requestRemoteMedia = void 0, this.statsUploader.requestVideoIsReady = void 0;
        }
        async requestReconnect() {
          this.dtlsFailedCount += 1, await PO(zO(this.dtlsFailedCount, qO)), this.emit(px.RequestReconnect);
        }
        async reconnectP2P() {
          const e2 = Array.from(this.localTrackMap.entries()), t2 = this.createGatewayUnpublishMessage(e2);
          Array.from(this.remoteUserMap.entries()), t2.length > 0 && await pO(this, px.RequestUnpublishForReconnectPC, t2), this.disconnectForReconnect(), this.emit(px.RequestReconnectPC);
        }
        canPublishLowStream() {
          return this.localTrackMap.has(ux.LocalVideoTrack) || this.pendingLocalTracks.some((e2) => e2 instanceof Dk);
        }
        throwIfTrackTypeNotMatch(e2) {
          if (e2.filter((e3) => e3 instanceof Dk).length > 1) throw new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
          if (e2.filter((e3) => e3 instanceof GL).length > 1 && (e2.some((e3) => e3 instanceof GL && e3._bypassWebAudio) || !RD().webAudioMediaStreamDest)) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          for (const t2 of e2) {
            if (t2 instanceof Dk && this.pendingLocalTracks.some((e3) => e3 instanceof Dk)) throw new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
            if (t2 instanceof GL && this.pendingLocalTracks.some((e3) => e3 instanceof GL) && (!RD().webAudioMediaStreamDest || t2._bypassWebAudio || this.pendingLocalTracks.some((e3) => e3 instanceof GL && e3._bypassWebAudio))) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          }
        }
        getLowVideoTrack(e2, t2) {
          var i2;
          const n2 = !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding, r2 = WB(WB({}, { width: 160, height: 120, framerate: 15, bitrate: 50 }), t2);
          let o2;
          o2 = n2 ? e2._mediaStreamTrack.clone() : mB(e2, r2);
          const s2 = LO(8, "track-low-"), a2 = new Dk(o2, WB(WB({}, n2 && { scaleResolutionDownBy: tV(r2, e2) }), {}, { frameRate: r2.framerate, bitrateMax: r2.bitrate, bitrateMin: r2.bitrate }), void 0, void 0, s2);
          return a2.on(HD.TRANSCEIVER_UPDATED, (t3) => {
            e2._updateRtpTransceiver(t3, jD.LOW_STREAM);
          }), a2._hints.push(BD.LOW_STREAM), kn(i2 = e2._hints).call(i2, BD.SCREEN_TRACK) && a2._hints.push(BD.SCREEN_LOW_TRACK), e2.on("sei-to-send", (e3) => {
            a2.emit("sei-to-send", e3);
          }), e2.addListener(FD.NEED_CLOSE, () => {
            a2.close();
          }), a2;
        }
        async globalLock() {
          return this.mutex.lock("From P2PChannel.globalLock");
        }
        async reportPCStats(e2, t2, i2) {
          let n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
          if (this.connection && this.connection instanceof _B) {
            var r2, o2, s2, a2;
            const c2 = this.store.keyMetrics.descriptionStart || 0, { iceConnectionState: d2, dtlsTransportState: l2, peerConnectionState: u2 } = this.connection, { local: h2, remote: p2 } = await this.connection.getSelectedCandidatePair();
            TD.pcStats(this.store.sessionId, { startTime: c2, eventElapse: e2 - c2 || 0, iceconnectionsate: d2, dtlsstate: l2, connectionstate: u2, intSucc: t2 ? 1 : 2, error: this._iceError || n2 || "", selectedLocalCandidateProtocol: null !== (r2 = null == h2 ? void 0 : h2.protocol) && void 0 !== r2 ? r2 : "", selectedLocalCandidateType: null !== (o2 = h2.candidateType) && void 0 !== o2 ? o2 : "", selectedLocalCandidateAddress: "".concat(h2.address, ":").concat(h2.port), selectedRemoteCandidateProtocol: null !== (s2 = p2.protocol) && void 0 !== s2 ? s2 : "", selectedRemoteCandidateType: null !== (a2 = p2.candidateType) && void 0 !== a2 ? a2 : "", selectedRemoteCandidateAddress: "".concat(p2.address, ":").concat(p2.port), restartCnt: i2, preallocation: this.connection.isPreallocation }), this._iceError = null;
          }
        }
        reportVideoFirstFrameDecoded(e2, t2, i2, n2) {
          var r2;
          const o2 = Array.from($N(r2 = this.remoteUserMap).call(r2)).find((t3) => t3._videoSSRC === e2);
          if (o2) {
            n2 || this.store.subscribe(o2.uid, "video", void 0, void 0, void 0, void 0, Date.now());
            const r3 = this.store.keyMetrics, s2 = r3.subscribe.find((e3) => e3.userId === o2.uid && "video" === e3.type);
            TD.firstRemoteVideoDecode(this.store.sessionId, _D.FIRST_VIDEO_DECODE, ED.FIRST_VIDEO_DECODE, { peer: o2._uintid, videowidth: t2, videoheight: i2, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e2), subscribeRequestid: e2, p2pid: this.store.p2pId, apEnd: r3.requestAPEnd || 0, apStart: r3.requestAPStart || 0, joinGwEnd: r3.joinGatewayEnd || 0, joinGwStart: r3.joinGatewayStart || 0, pcEnd: r3.peerConnectionEnd || 0, pcStart: r3.peerConnectionStart || 0, subscriberEnd: (null == s2 ? void 0 : s2.subscribeEnd) || 0, subscriberStart: (null == s2 ? void 0 : s2.subscribeStart) || 0, videoAddNotify: (null == s2 ? void 0 : s2.streamAdded) || 0, state: n2 ? 1 : 0, firstFrame: (null == s2 ? void 0 : s2.firstFrame) || 0 });
          }
        }
        async remoteMediaSsrcChanged(e2, t2, i2) {
          if (!this.connection) return false;
          const n2 = this.remoteUserMap.get(e2);
          if (!n2) return false;
          const r2 = n2.get(t2);
          if (!r2) return false;
          const o2 = await this.connection.getRemoteSSRC(r2);
          return void 0 !== o2 && o2 !== i2;
        }
        unbindRtpTransceiver() {
          0 !== this.localTrackMap.size && Array.from(this.localTrackMap.entries()).forEach((e2) => {
            let [t2, { track: i2 }] = e2;
            t2 === ux.LocalVideoLowTrack ? i2._updateRtpTransceiver(void 0, jD.LOW_STREAM) : i2._updateRtpTransceiver(void 0);
          });
        }
      }, RU(jB.prototype, "startP2PConnection", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "startP2PConnection"), jB.prototype), RU(jB.prototype, "connect", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "connect"), jB.prototype), RU(jB.prototype, "updateRemoteRTPCapabilities", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "updateRemoteRTPCapabilities"), jB.prototype), RU(jB.prototype, "publishDataChannel", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "publishDataChannel"), jB.prototype), RU(jB.prototype, "unpublish", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unpublish"), jB.prototype), RU(jB.prototype, "unpublishDataChannel", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unpublishDataChannel"), jB.prototype), RU(jB.prototype, "unpublishLowStream", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unpublishLowStream"), jB.prototype), RU(jB.prototype, "subscribeDataChannel", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "subscribeDataChannel"), jB.prototype), RU(jB.prototype, "subscribe", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "subscribe"), jB.prototype), RU(jB.prototype, "massSubscribe", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "massSubscribe"), jB.prototype), RU(jB.prototype, "unsubscribe", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unsubscribe"), jB.prototype), RU(jB.prototype, "unsubscribeDataChannel", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unsubscribeDataChannel"), jB.prototype), RU(jB.prototype, "massUnsubscribe", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "massUnsubscribe"), jB.prototype), RU(jB.prototype, "muteRemote", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "muteRemote"), jB.prototype), RU(jB.prototype, "unmuteRemote", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "unmuteRemote"), jB.prototype), RU(jB.prototype, "hasRemoteMediaWithLock", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "hasRemoteMediaWithLock"), jB.prototype), RU(jB.prototype, "disconnectForReconnect", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "disconnectForReconnect"), jB.prototype), RU(jB.prototype, "updateBitrateLimit", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "updateBitrateLimit"), jB.prototype), RU(jB.prototype, "remoteMediaSsrcChanged", [qB], Object.getOwnPropertyDescriptor(jB.prototype, "remoteMediaSsrcChanged"), jB.prototype), jB);
      function qB(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2) throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PChannel.".concat(t2));
          try {
            for (var r2 = arguments.length, o2 = new Array(r2), s2 = 0; s2 < r2; s2++) o2[s2] = arguments[s2];
            return await n2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      function zB(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function JB(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? zB(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : zB(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const XB = Date.now(), QB = /* @__PURE__ */ new Map(), ZB = /* @__PURE__ */ new Map();
      async function $B(e2) {
        const t2 = QB.get(e2), i2 = Array.isArray(t2) && t2[t2.length - 1], n2 = ZB.get(e2);
        if (!i2) return void (n2.isSyncing = false);
        const r2 = { uid: i2.uid, payload: i2.payload };
        0 === n2.firstRecvTs && (n2.firstRecvTs = i2.recvTs, n2.firstSendTs = i2.sendTs);
        const o2 = i2.sendTs - n2.firstSendTs, s2 = o2 - (Date.now() - n2.firstRecvTs);
        s2 > 0 && (n2.firstRecvTs = Date.now() - o2);
        let a2 = i2.mediaDelay + s2;
        a2 <= 0 ? (t2.pop(), ej(i2.context, r2), a2 = 0) : a2 = Math.min(a2, 20), setTimeout(() => t2.length && $B(e2), a2);
      }
      function ej(e2, t2) {
        e2.safeEmit(dO.STREAM_MESSAGE, t2.uid, t2.payload), e2.onStreamMessage && e2.onStreamMessage(t2);
      }
      function tj(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i2 = arguments.length > 2 ? arguments[2] : void 0;
        if (!e2.syncWithAudio) return ej(i2, { uid: e2.uid, payload: e2.payload });
        const n2 = "".concat(i2.id, "-").concat(e2.uid), r2 = QB.get(n2) || [], o2 = r2.findIndex((t3) => e2.sendTs >= t3.sendTs), s2 = JB(JB({}, e2), {}, { context: i2, mediaDelay: t2, recvTs: Date.now() });
        -1 === o2 ? r2.push(s2) : r2.splice(o2, 0, s2), QB.set(n2, r2);
        let a2 = false;
        var c2;
        ZB.has(n2) ? a2 = !(null === (c2 = ZB.get(n2)) || void 0 === c2 || !c2.isSyncing) : ZB.set(n2, { isSyncing: a2, firstRecvTs: 0, firstSendTs: 0 });
        a2 || $B(n2);
      }
      const ij = rw().name;
      function nj(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function rj(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? nj(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : nj(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const oj = "websdk_ng_cache_parameter", sj = MN("MAX_PRELOAD_ASYNC_LENGTH"), aj = /* @__PURE__ */ new Map(), cj = [];
      let dj = null, lj = 0, uj = 0;
      const hj = /* @__PURE__ */ new Map(), pj = /* @__PURE__ */ function(e2, t2) {
        const i2 = [];
        let n2 = 0;
        const r2 = async () => {
          const e3 = i2.shift();
          e3 && await e3(), i2.length > 0 && n2 < t2 ? r2() : n2--;
        };
        return async function() {
          for (var o2 = arguments.length, s2 = new Array(o2), a2 = 0; a2 < o2; a2++) s2[a2] = arguments[a2];
          return new np(async (o3, a3) => {
            i2.push(async () => {
              try {
                const t3 = await e2(...s2);
                o3(t3);
              } catch (e3) {
                a3(e3);
              }
            }), n2 < t2 && (n2++, r2());
          });
        };
      }(Ej, sj), _j = qb.CancelToken.source();
      async function Ej(e2, t2, i2, n2, r2, o2) {
        try {
          if (!MN("ENABLE_PRELOAD")) return;
          if (!RD().supportWebCrypto) return void IO(() => {
            lD.warn("Your browser does not support preloading, this feature  be run in a secure environment");
          }, "preload_webcrypto_not_supported");
          if (!i2 && null !== i2) throw new xw(Uw.INVALID_PARAMS, "Invalid token: ".concat(i2, ". If you don not use token, set it to null"));
          i2 && Gw(i2, "token", 1, 2047), Gw(e2, "appid", 1, 2047), kU(t2), n2 && MU(n2);
          const s2 = kO();
          lD.debug("preload channel ".concat(t2, ", uid is ").concat(n2));
          const a2 = { appId: e2, cname: t2, token: i2 || e2, uid: "string" != typeof n2 ? n2 : null, sid: s2, proxyServer: r2 };
          let c2, d2;
          "string" == typeof n2 ? (a2.stringUid = n2, [d2, c2] = await np.all([vF(n2, { sid: s2, appId: e2 }, _j.token), IF(rj(rj({}, a2), {}, { token: i2 || e2, uid: 0 }), _j.token)]), a2.uid = d2.uid, c2.gatewayInfo.uid = a2.uid, c2.gatewayInfo.res.uid = a2.uid) : (o2 && (a2.stringUid = o2), c2 = await IF(a2, _j.token));
          const l2 = { sid: s2, appId: e2, cname: t2, token: i2 || e2, uid: a2.stringUid || n2, intUid: a2.uid || c2.gatewayInfo.uid, stringUid: a2.stringUid, ts: Date.now(), sua: d2, ap: c2 };
          await async function(e3) {
            let t3;
            try {
              e3.uid && fj({ appId: e3.appId, cname: e3.cname, token: e3.token, uid: e3.uid, stringUid: e3.stringUid });
              const i3 = Cj(e3), n3 = await async function(e4, t4) {
                try {
                  const i4 = await window.crypto.subtle.importKey("raw", bO(t4), "AES-GCM", false, ["encrypt"]), n4 = await window.crypto.subtle.encrypt({ name: "AES-GCM", iv: new Uint8Array(1) }, i4, yO(window.btoa(JSON.stringify(e4))));
                  return AO(new Uint8Array(n4));
                } catch (e5) {
                  return;
                }
              }(e3, e3.token || e3.appId);
              if (!n3) return;
              t3 = Rj(oj);
              const r3 = t3 ? JSON.parse(t3) : [];
              r3.push({ [i3]: n3 }), r3.length > MN("AP_CACHE_NUM") && r3.shift(), vj(oj, JSON.stringify(r3));
            } catch (e4) {
              lD.warn("Error caching server parameters:", e4.message), vj(oj, "");
            }
          }(l2), lj++;
        } catch (e3) {
          throw uj++, function(e4) {
            dj || (dj = window.setTimeout(() => {
              let t4 = "";
              hj.forEach((e5, i3) => {
                t4 += "".concat(i3, ": ").concat(e5, " ;");
              }), TD.reportApiInvoke(null, { name: tO.PRELOAD, options: { success: lj, failed: uj, err: t4 } }).onError(e4), lj = 0, uj = 0, hj.clear(), dj = null;
            }, 1e4));
            const t3 = hj.get(e4.code) || 0;
            hj.set(e4.code, t3 + 1);
          }(e3), e3;
        }
      }
      async function mj(e2) {
        try {
          if (MN("AP_REQUEST_DETAIL") || MN("ENABLE_ROLE_SELECT_EDGE")) return;
          const t2 = fj(e2);
          if (!t2 || "disabled" !== e2.cloudProxyServer) return;
          const i2 = await async function(e3, t3) {
            try {
              const i3 = await window.crypto.subtle.importKey("raw", bO(t3), "AES-GCM", false, ["decrypt"]), n2 = await window.crypto.subtle.decrypt({ name: "AES-GCM", iv: new Uint8Array(1) }, i3, yO(e3));
              return JSON.parse(window.atob(AO(new Uint8Array(n2))));
            } catch (e4) {
              return;
            }
          }(t2, e2.token || e2.appId);
          if (!i2) return;
          if (!function(e3, t3) {
            const i3 = e3.cname === t3.cname && e3.appId === t3.appId && e3.token === t3.token;
            if (!i3) return false;
            return t3.stringUid ? e3.stringUid === t3.stringUid : "number" == typeof t3.uid ? e3.uid === t3.uid : e3.uid == t3.uid;
          }(i2, e2)) return;
          if (i2 && Date.now() - i2.ts < MN("AP_CACHE_LIFETIME")) return i2;
        } catch (e3) {
          lD.warn("Error get preloadInfo", e3.message);
        }
      }
      function fj(e2) {
        let t2;
        try {
          if (t2 = Rj(oj), !t2) return;
          const i2 = JSON.parse(t2), n2 = Cj(e2), r2 = function(e3, t3) {
            for (let i3 = e3.length - 1; i3 >= 0; i3--) if (t3(e3[i3])) return i3;
            return -1;
          }(i2, (e3) => n2 in e3);
          if (-1 === r2) return;
          const o2 = i2.splice(r2, 1)[0];
          return vj(oj, JSON.stringify(i2)), o2[n2];
        } catch (e3) {
          lD.warn("Error delete preload info: ".concat(t2), e3.message), vj(oj, "");
        }
      }
      function Tj(e2) {
        if (e2) {
          let t2 = aj.get(e2);
          t2 && (window.clearTimeout(t2), t2 = null, aj.delete(e2)), kn(cj).call(cj, e2) || "disabled" !== e2.cloudProxyServer || cj.push(e2);
        }
        if (aj.size < MN("AP_CACHE_NUM") && cj.length > 0) {
          const e3 = cj.shift();
          aj.set(e3, window.setTimeout(async () => {
            const { appId: t2, cname: i2, token: n2, stringUid: r2, uid: o2, proxyServer: s2 } = e3;
            try {
              await pj(t2, i2, n2, o2, s2, r2), aj.has(e3) && Tj(e3);
            } catch (t3) {
              lD.warn("update preload failed", t3.message), Sj(e3);
            }
          }, MN("AP_UPDATE_INTERVAL")));
        }
      }
      function Sj(e2) {
        const t2 = cj.indexOf(e2);
        -1 !== t2 && cj.splice(t2, 1);
        let i2 = aj.get(e2);
        i2 && (window.clearTimeout(i2), i2 = null, aj.delete(e2), Tj());
      }
      function gj(e2, t2) {
        const i2 = e2.sua, n2 = e2.ap;
        t2 && i2 && TD.reqUserAccount(e2.sid, { lts: i2.requestTime, elapse: i2.elapse, success: true, serverAddr: i2.url, stringUid: t2, uid: e2.intUid, errorCode: null, extend: i2.req }), TD.reportResourceTiming(e2.ap.url, e2.sid), TD.joinWebProxyAP(e2.sid, { lts: n2.requestTime, elapse: n2.elapse, sucess: 1, apServerAddr: n2.url, turnServerAddrList: n2.proxyInfo.addresses.map((e3) => e3.ip).join(","), eventType: "disabled", unilbsServerIds: [Kx.CHOOSE_SERVER, Kx.CLOUD_PROXY_FALLBACK].toString() }), TD.joinChooseServer(e2.sid, { lts: n2.requestTime, elapse: n2.elapse, succ: true, csAddr: n2.url, opid: n2.opid, serverList: n2.gatewayInfo.gatewayAddrs.map((e3) => e3.address), ec: null, cid: n2.gatewayInfo.cid.toString(), uid: n2.gatewayInfo.uid.toString(), csIp: n2.gatewayInfo.csIp, unilbsServerIds: [Kx.CHOOSE_SERVER].toString(), isHttp3: n2.isHttp3 });
      }
      function Rj(e2) {
        return window.atob(window.localStorage.getItem(e2) || "");
      }
      function vj(e2, t2) {
        window.localStorage.setItem(e2, window.btoa(t2));
      }
      function Cj(e2) {
        let t2 = "".concat(e2.appId, "_").concat(e2.cname);
        return "string" == typeof e2.uid && (t2 += "_s_".concat(e2.uid)), "number" == typeof e2.uid && (t2 += "_".concat(e2.uid)), e2.token && (t2 += "_".concat(e2.token)), GO(t2);
      }
      function Ij(e2) {
        let t2 = function() {
          const e3 = wj.pop();
          return e3 ? (e3.offset = e3.limit = 0, e3) : { bytes: new Uint8Array(64), offset: 0, limit: 0 };
        }();
        return function(e3, t3) {
          let i2 = e3.appId;
          void 0 !== i2 && (Fj(t3, 10), Mj(t3, i2));
          let n2 = e3.cid;
          void 0 !== n2 && (Fj(t3, 16), Fj(t3, n2));
          let r2 = e3.cname;
          void 0 !== r2 && (Fj(t3, 26), Mj(t3, r2));
          let o2 = e3.deviceId;
          void 0 !== o2 && (Fj(t3, 34), Mj(t3, o2));
          let s2 = e3.elapse;
          void 0 !== s2 && (Fj(t3, 40), jj(t3, s2));
          let a2 = e3.fileSize;
          void 0 !== a2 && (Fj(t3, 48), jj(t3, bj(a2)));
          let c2 = e3.height;
          void 0 !== c2 && (Fj(t3, 56), jj(t3, bj(c2)));
          let d2 = e3.jpg;
          void 0 !== d2 && (Fj(t3, 66), Fj(t3, d2.length), Lj(t3, d2));
          let l2 = e3.networkType;
          void 0 !== l2 && (Fj(t3, 72), jj(t3, bj(l2)));
          let u2 = e3.osType;
          void 0 !== u2 && (Fj(t3, 80), jj(t3, bj(u2)));
          let h2 = e3.requestId;
          void 0 !== h2 && (Fj(t3, 90), Mj(t3, h2));
          let p2 = e3.sdkVersion;
          void 0 !== p2 && (Fj(t3, 98), Mj(t3, p2));
          let _2 = e3.sequence;
          void 0 !== _2 && (Fj(t3, 104), jj(t3, bj(_2)));
          let E2 = e3.sid;
          void 0 !== E2 && (Fj(t3, 114), Mj(t3, E2));
          let m2 = e3.timestamp;
          void 0 !== m2 && (Fj(t3, 120), jj(t3, m2));
          let f2 = e3.uid;
          void 0 !== f2 && (Fj(t3, 128), Fj(t3, f2));
          let T2 = e3.vid;
          void 0 !== T2 && (Fj(t3, 136), Fj(t3, T2));
          let S2 = e3.width;
          void 0 !== S2 && (Fj(t3, 144), jj(t3, bj(S2)));
          let g2 = e3.service;
          void 0 !== g2 && (Fj(t3, 152), Fj(t3, g2));
          let R2 = e3.callbackData;
          void 0 !== R2 && (Fj(t3, 162), Fj(t3, R2.length), Lj(t3, R2));
          let v2 = e3.ticket;
          void 0 !== v2 && (Fj(t3, 170), Mj(t3, v2));
          let C2 = e3.vendorConfigs;
          void 0 !== C2 && (Fj(t3, 178), Mj(t3, C2));
        }(e2, t2), function(e3) {
          let t3 = e3.bytes, i2 = e3.limit;
          return t3.length === i2 ? t3 : t3.subarray(0, i2);
        }(t2);
      }
      function yj(e2) {
        return function(e3) {
          let t3 = {};
          e: for (; !Nj(e3); ) {
            let i2 = Vj(e3);
            switch (i2 >>> 3) {
              case 0:
                break e;
              case 1:
                t3.code = Vj(e3);
                break;
              case 2:
                t3.msg = kj(e3, Vj(e3));
                break;
              case 3:
                t3.requestId = kj(e3, Vj(e3));
                break;
              case 4:
                t3.timestamp = Bj(e3, false);
                break;
              default:
                Aj(e3, 7 & i2);
            }
          }
          return t3;
        }({ bytes: t2 = e2, offset: 0, limit: t2.length });
        var t2;
      }
      function Aj(e2, t2) {
        switch (t2) {
          case 0:
            for (; 128 & Uj(e2); ) ;
            break;
          case 2:
            Oj(e2, Vj(e2));
            break;
          case 5:
            Oj(e2, 4);
            break;
          case 1:
            Oj(e2, 8);
            break;
          default:
            throw new Error("Unimplemented type: " + t2);
        }
      }
      function bj(e2) {
        return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
      }
      let wj = [];
      function Oj(e2, t2) {
        if (e2.offset + t2 > e2.limit) throw new Error("Skip past limit");
        e2.offset += t2;
      }
      function Nj(e2) {
        return e2.offset >= e2.limit;
      }
      function Dj(e2, t2) {
        let i2 = e2.bytes, n2 = e2.offset, r2 = e2.limit, o2 = n2 + t2;
        if (o2 > i2.length) {
          let t3 = new Uint8Array(2 * o2);
          t3.set(i2), e2.bytes = t3;
        }
        return e2.offset = o2, o2 > r2 && (e2.limit = o2), n2;
      }
      function Pj(e2, t2) {
        let i2 = e2.offset;
        if (i2 + t2 > e2.limit) throw new Error("Read past limit");
        return e2.offset += t2, i2;
      }
      function Lj(e2, t2) {
        let i2 = Dj(e2, t2.length);
        e2.bytes.set(t2, i2);
      }
      function kj(e2, t2) {
        let i2 = Pj(e2, t2), n2 = String.fromCharCode, r2 = e2.bytes, o2 = "ï¿½", s2 = "";
        for (let e3 = 0; e3 < t2; e3++) {
          let a2, c2, d2, l2, u2 = r2[e3 + i2];
          128 & u2 ? 192 == (224 & u2) ? e3 + 1 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], 128 != (192 & a2) ? s2 += o2 : (l2 = (31 & u2) << 6 | 63 & a2, l2 < 128 ? s2 += o2 : (s2 += n2(l2), e3++))) : 224 == (240 & u2) ? e3 + 2 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], c2 = r2[e3 + i2 + 2], 32896 != (49344 & (a2 | c2 << 8)) ? s2 += o2 : (l2 = (15 & u2) << 12 | (63 & a2) << 6 | 63 & c2, l2 < 2048 || l2 >= 55296 && l2 <= 57343 ? s2 += o2 : (s2 += n2(l2), e3 += 2))) : 240 == (248 & u2) ? e3 + 3 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], c2 = r2[e3 + i2 + 2], d2 = r2[e3 + i2 + 3], 8421504 != (12632256 & (a2 | c2 << 8 | d2 << 16)) ? s2 += o2 : (l2 = (7 & u2) << 18 | (63 & a2) << 12 | (63 & c2) << 6 | 63 & d2, l2 < 65536 || l2 > 1114111 ? s2 += o2 : (l2 -= 65536, s2 += n2(55296 + (l2 >> 10), 56320 + (1023 & l2)), e3 += 3))) : s2 += o2 : s2 += n2(u2);
        }
        return s2;
      }
      function Mj(e2, t2) {
        let i2 = t2.length, n2 = 0;
        for (let e3 = 0; e3 < i2; e3++) {
          let r3 = t2.charCodeAt(e3);
          r3 >= 55296 && r3 <= 56319 && e3 + 1 < i2 && (r3 = (r3 << 10) + t2.charCodeAt(++e3) - 56613888), n2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
        }
        Fj(e2, n2);
        let r2 = Dj(e2, n2), o2 = e2.bytes;
        for (let e3 = 0; e3 < i2; e3++) {
          let n3 = t2.charCodeAt(e3);
          n3 >= 55296 && n3 <= 56319 && e3 + 1 < i2 && (n3 = (n3 << 10) + t2.charCodeAt(++e3) - 56613888), n3 < 128 ? o2[r2++] = n3 : (n3 < 2048 ? o2[r2++] = n3 >> 6 & 31 | 192 : (n3 < 65536 ? o2[r2++] = n3 >> 12 & 15 | 224 : (o2[r2++] = n3 >> 18 & 7 | 240, o2[r2++] = n3 >> 12 & 63 | 128), o2[r2++] = n3 >> 6 & 63 | 128), o2[r2++] = 63 & n3 | 128);
        }
      }
      function Uj(e2) {
        return e2.bytes[Pj(e2, 1)];
      }
      function xj(e2, t2) {
        let i2 = Dj(e2, 1);
        e2.bytes[i2] = t2;
      }
      function Vj(e2) {
        let t2, i2 = 0, n2 = 0;
        do {
          t2 = Uj(e2), i2 < 32 && (n2 |= (127 & t2) << i2), i2 += 7;
        } while (128 & t2);
        return n2;
      }
      function Fj(e2, t2) {
        for (t2 >>>= 0; t2 >= 128; ) xj(e2, 127 & t2 | 128), t2 >>>= 7;
        xj(e2, t2);
      }
      function Bj(e2, t2) {
        let i2, n2 = 0, r2 = 0, o2 = 0;
        return i2 = Uj(e2), n2 = 127 & i2, 128 & i2 && (i2 = Uj(e2), n2 |= (127 & i2) << 7, 128 & i2 && (i2 = Uj(e2), n2 |= (127 & i2) << 14, 128 & i2 && (i2 = Uj(e2), n2 |= (127 & i2) << 21, 128 & i2 && (i2 = Uj(e2), r2 = 127 & i2, 128 & i2 && (i2 = Uj(e2), r2 |= (127 & i2) << 7, 128 & i2 && (i2 = Uj(e2), r2 |= (127 & i2) << 14, 128 & i2 && (i2 = Uj(e2), r2 |= (127 & i2) << 21, 128 & i2 && (i2 = Uj(e2), o2 = 127 & i2, 128 & i2 && (i2 = Uj(e2), o2 |= (127 & i2) << 7))))))))), { low: n2 | r2 << 28, high: r2 >>> 4 | o2 << 24, unsigned: t2 };
      }
      function jj(e2, t2) {
        let i2 = t2.low >>> 0, n2 = (t2.low >>> 28 | t2.high << 4) >>> 0, r2 = t2.high >>> 24, o2 = 0 === r2 ? 0 === n2 ? i2 < 16384 ? i2 < 128 ? 1 : 2 : i2 < 1 << 21 ? 3 : 4 : n2 < 16384 ? n2 < 128 ? 5 : 6 : n2 < 1 << 21 ? 7 : 8 : r2 < 128 ? 9 : 10, s2 = Dj(e2, o2), a2 = e2.bytes;
        switch (o2) {
          case 10:
            a2[s2 + 9] = r2 >>> 7 & 1;
          case 9:
            a2[s2 + 8] = 9 !== o2 ? 128 | r2 : 127 & r2;
          case 8:
            a2[s2 + 7] = 8 !== o2 ? n2 >>> 21 | 128 : n2 >>> 21 & 127;
          case 7:
            a2[s2 + 6] = 7 !== o2 ? n2 >>> 14 | 128 : n2 >>> 14 & 127;
          case 6:
            a2[s2 + 5] = 6 !== o2 ? n2 >>> 7 | 128 : n2 >>> 7 & 127;
          case 5:
            a2[s2 + 4] = 5 !== o2 ? 128 | n2 : 127 & n2;
          case 4:
            a2[s2 + 3] = 4 !== o2 ? i2 >>> 21 | 128 : i2 >>> 21 & 127;
          case 3:
            a2[s2 + 2] = 3 !== o2 ? i2 >>> 14 | 128 : i2 >>> 14 & 127;
          case 2:
            a2[s2 + 1] = 2 !== o2 ? i2 >>> 7 | 128 : i2 >>> 7 & 127;
          case 1:
            a2[s2] = 1 !== o2 ? 128 | i2 : 127 & i2;
        }
      }
      const Gj = {}, Wj = {}, Hj = 4294967296, Kj = 18446744073709552e3, Yj = Kj / 2, qj = Zj(0, true), zj = Zj(0), Jj = $j(0, -2147483648, false), Xj = $j(-1, 2147483647, false), Qj = $j(-1, -1, true);
      function Zj(e2, t2) {
        let i2, n2, r2;
        return t2 ? (r2 = 0 <= (e2 >>>= 0) && e2 < 256) && (n2 = Wj[e2], n2) ? n2 : (i2 = $j(e2, 0, true), r2 && (Wj[e2] = i2), i2) : (r2 = -128 <= (e2 |= 0) && e2 < 128) && (n2 = Gj[e2], n2) ? n2 : (i2 = $j(e2, e2 < 0 ? -1 : 0, false), r2 && (Gj[e2] = i2), i2);
      }
      function $j(e2, t2, i2) {
        return { low: 0 | e2, high: 0 | t2, unsigned: !!i2 };
      }
      function eG(e2, t2) {
        if (isNaN(e2)) return t2 ? qj : zj;
        if (t2) {
          if (e2 < 0) return qj;
          if (e2 >= Kj) return Qj;
        } else {
          if (e2 <= -Yj) return Jj;
          if (e2 + 1 >= Yj) return Xj;
        }
        return e2 < 0 ? t2 ? qj : zj : $j(e2 % Hj | 0, e2 / Hj | 0, t2);
      }
      function tG(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      class iG extends Zw {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          if (this._connectionState === e2) return;
          const t2 = this._connectionState;
          this._connectionState = e2, this.emit(gx.CONNECTION_STATE_CHANGE, e2, t2);
        }
        get quality() {
          return this._quality;
        }
        set quality(e2) {
          this._quality = e2 > 1 ? 1 : e2 < 0.1 ? 0.1 : e2, this._qualityTimer && (window.clearTimeout(this._qualityTimer), this._qualityTimer = null), this._quality >= 1 || (this._qualityTimer = window.setTimeout(() => {
            this.quality = this._quality / this._qualityRatio;
          }, 6e4));
        }
        constructor(e2) {
          var t2;
          super(), vy(this, "name", "AgoraRTCImageModeration"), vy(this, "_connectionState", Sx.CONNECTING), vy(this, "_sequence", 0), vy(this, "_moderationStartTime", void 0), vy(this, "_workerConnection", void 0), vy(this, "_workerMessageLengthLimit", void 0), vy(this, "_qualityRatio", void 0), vy(this, "_connectInfo", void 0), vy(this, "_cancelTokenSource", qb.CancelToken.source()), vy(this, "_retryConfig", void 0), vy(this, "_moderationInterval", void 0), vy(this, "_moderationTimer", null), vy(this, "_moderationMode", 1), vy(this, "_quality", 1), vy(this, "_qualityTimer", null), vy(this, "_ticket", void 0), vy(this, "_moderationIntervalMinimum", void 0), vy(this, "_uploadFailedNum", 0), vy(this, "_uploadNum", 0), vy(this, "_uploadTimer", null), vy(this, "_extraInfo", void 0), vy(this, "_vendor", ""), vy(this, "_encoder", new TextEncoder()), vy(this, "_moderationId", void 0), vy(this, "inspectImage", () => {
            if (this.connectionState !== Sx.CONNECTED) throw new SD(Uw.OPERATION_ABORTED, "image moderation service connection status is ".concat(this.connectionState));
            this._moderationTimer && (window.clearInterval(this._moderationTimer), this._moderationTimer = null), this._moderationTimer = window.setInterval(() => {
              this.connectionState === Sx.CONNECTED ? this.requestToInspectImage() : lD.debug("[".concat(this._moderationId, "] Moderation State is not connected , "), this.connectionState);
            }, this._moderationInterval < this._moderationIntervalMinimum ? this._moderationIntervalMinimum : this._moderationInterval), this.requestToInspectImage();
          }), this._moderationId = LO(5, "image-moderation-"), this._workerMessageLengthLimit = MN("IMAGE_MODERATION_WORKER_MESSAGE_LENGTH_LIMIT"), this._moderationIntervalMinimum = MN("IMAGE_MODERATION_INTERVAL_MINIMUM"), this._moderationInterval = null !== (t2 = e2.interval) && void 0 !== t2 ? t2 : 1e3, e2.extraInfo && (this._extraInfo = this._encoder.encode(e2.extraInfo)), e2.vendor && (this._vendor = e2.vendor), this._qualityRatio = MN("IMAGE_MODERATION_QUALITY_RATIO"), this._moderationStartTime = Number(Date.now()), this._workerConnection = new Gx("worker-" + this._moderationId, qO), this.on(gx.STATE_CHANGE, (e3, t3) => {
            lD.debug("[".concat(this._moderationId, "] Moderation operation :").concat(Rx[e3], " ").concat(t3 || ""));
          }), this.handleWorkerEvents();
        }
        async init(e2, t2) {
          this.emit(gx.STATE_CHANGE, Rx.CONNECT_AP), this._connectInfo = e2;
          const i2 = this._cancelTokenSource.token;
          return this._retryConfig = t2, new np((n2, r2) => {
            this.on(gx.CONNECTION_STATE_CHANGE, (e3, t3) => {
              e3 === Sx.CONNECTED && n2();
            }), this.requestAP(e2, i2, t2).then((e3) => {
              this.connectWorker(e3);
            }).catch((e3) => {
              r2(e3);
            });
          });
        }
        updateConfig(e2) {
          var t2;
          this._moderationInterval = null !== (t2 = e2.interval) && void 0 !== t2 ? t2 : 1e3, e2.extraInfo && (this._extraInfo = this._encoder.encode(e2.extraInfo)), e2.vendor && (this._vendor = e2.vendor), lD.debug("[".concat(this._moderationId, "] updateConfig: ").concat(JSON.stringify(e2))), this.connectionState === Sx.CONNECTED && this.inspectImage();
        }
        async requestAP(e2, t2, i2) {
          const n2 = MN("WEBCS_DOMAIN").map((e3) => "https://".concat(e3, "/api/v1")), r2 = await function(e3, t3, i3, n3) {
            let { appId: r3, areaCode: o3, cname: s3, sid: a2, token: c2, uid: d2 } = t3;
            EF++;
            const l2 = "moderation_plugin", u2 = { service_name: l2, json_body: JSON.stringify({ appId: r3, areaCode: o3, cname: s3, command: "allocateEdge", requestId: EF, seq: EF, sid: a2, appToken: c2, ts: Date.now(), uid: d2 + "" }) };
            let h2, p2, _2 = e3[0];
            return JO(async () => {
              h2 = Date.now();
              const e4 = await zV(_2, { data: u2, cancelToken: i3, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" }, params: { action: "wrtc_gateway" } });
              if (p2 = Date.now() - h2, 0 !== e4.code) {
                const t5 = new SD(Uw.UNEXPECTED_RESPONSE, "moderation plugin ap error, code" + e4.code, { retry: true, responseTime: p2 });
                throw lD.error(t5.toString()), t5;
              }
              const t4 = JSON.parse(e4.json_body);
              if (200 !== t4.code) {
                const e5 = new SD(Uw.UNEXPECTED_RESPONSE, "moderation plugin ap error, code: ".concat(t4.code, ", reason: ").concat(t4.reason), { code: t4.code, responseTime: p2 });
                throw lD.error(e5.toString()), e5;
              }
              if (!t4.servers || !Array.isArray(t4.servers) || 0 === t4.servers.length) {
                const e5 = new SD(Uw.UNEXPECTED_RESPONSE, "moderation plugin ap empty server", { code: t4.code, responseTime: p2 });
                throw lD.error(e5.toString()), e5;
              }
              if (!t4.servers.some((e5) => !!e5.wss)) {
                const e5 = new SD(Uw.UNEXPECTED_RESPONSE, "moderation plugin ap empty port", { code: t4.code, responseTime: p2 });
                throw lD.error(e5.toString()), e5;
              }
              const n4 = MN("IMAGE_MODERATION_WORKER_HOST");
              return { addressList: t4.servers.map((e5) => {
                let { address: t5, wss: i4 } = e5;
                if (t5 && i4) return "wss://".concat(t5.replace(/\./g, "-"), ".").concat(n4, ":").concat(i4, "/moderation");
              }).filter((e5) => !!e5), workerToken: t4.workerToken, vid: t4.vid, ticket: t4.appTicket, responseTime: p2 };
            }, (t4, i4) => (TD.apworkerEvent(a2, { success: true, sc: 200, serviceName: l2, responseDetail: JSON.stringify(t4.addressList), firstSuccess: 0 === i4, responseTime: p2, serverIp: e3[i4 % e3.length] }), false), (t4, i4) => (TD.apworkerEvent(a2, { success: false, sc: t4.data && t4.data.code || 200, serviceName: l2, responseTime: p2, serverIp: e3[i4 % e3.length] }), !!(t4.code !== Uw.OPERATION_ABORTED && t4.code !== Uw.UNEXPECTED_RESPONSE || t4.data && t4.data.retry) && (_2 = e3[(i4 + 1) % e3.length], true)), n3);
          }(n2, e2, t2, i2);
          this.emit(gx.STATE_CHANGE, Rx.AP_CONNECTED);
          const { addressList: o2, ticket: s2 } = r2;
          return this._ticket = s2, o2;
        }
        async connectWorker(e2) {
          this.emit(gx.STATE_CHANGE, Rx.CONNECT_WORKER), await this._workerConnection.init(e2, 1e4);
        }
        handleWorkerEvents() {
          this._workerConnection.on(LU.CONNECTED, async () => {
            this.emit(gx.STATE_CHANGE, Rx.WORKER_CONNECTED, this._workerConnection.url), this.connectionState = Sx.CONNECTED;
          }), this._workerConnection.on(LU.CLOSED, () => {
            this.connectionState = Sx.CLOSED;
          }), this._workerConnection.on(LU.FAILED, () => {
            this.connectionState = Sx.CLOSED;
          }), this._workerConnection.on(LU.RECONNECTING, () => {
            this.connectionState = this.connectionState === Sx.CONNECTED ? Sx.RECONNECTING : Sx.CONNECTING;
          }), this._workerConnection.on(LU.ON_MESSAGE, async (e2) => {
            if (e2.data instanceof ArrayBuffer) {
              const t2 = yj(new Uint8Array(e2.data));
              MN("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && lD.debug("[".concat(this._moderationId, "] Response message for worker of image moderation "), JSON.stringify(t2)), this._uploadNum++, void 0 === t2.code || 0 === t2.code || (this._uploadFailedNum++, lD.error("[".concat(this._moderationId, "] Error response from worke, code is ").concat(t2.code, ", msg is ").concat(t2.msg)), this._uploadTimer || (this._uploadTimer = window.setTimeout(() => {
                TD.reportApiInvoke(this._connectInfo.sid || null, { name: tO.IMAGE_MODERATION_UPLOAD, options: [this._uploadFailedNum, this._uploadNum, t2.code], tag: iO.TRACER }).onError(new SD(Uw.IMAGE_MODERATION_UPLOAD_FAILED, t2.msg)), this._uploadTimer = null;
              }, MN("IMAGE_MODERATION_UPLOAD_REPORT_INTERVAL"))));
            } else lD.error("[".concat(this._moderationId, "] Unexpected message type from worker"));
          }), this._workerConnection.on(LU.WILL_RECONNECT, (e2, t2, i2) => {
            "recover" === e2 && i2(e2), i2("tryNext");
          }), this._workerConnection.on(LU.REQUEST_NEW_URLS, (e2, t2) => {
            this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then(e2).catch(t2);
          });
        }
        static intToLong(e2) {
          return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
        }
        async requestToInspectImage() {
          const e2 = EO(this, gx.CLIENT_LOCAL_VIDEO_TRACK), t2 = { appId: this._connectInfo.appId, cname: this._connectInfo.cname, cid: this._connectInfo.cid, sid: this._connectInfo.sid, uid: this._connectInfo.uid, vid: this._connectInfo.vid };
          if (e2) {
            if (!e2.isPlaying) return void (MN("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && lD.debug("Only the track being played can be inspected"));
            this._sequence++;
            const i2 = await this.generateRequestData(e2, t2);
            this._workerConnection.sendMessage(i2, true, true);
          } else MN("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && lD.debug("Only the track being published can be inspected");
        }
        async generateRequestData(e2, t2) {
          let { appId: i2, cname: n2, cid: r2, vid: o2, sid: s2, uid: a2 } = t2;
          const c2 = Date.now(), d2 = await e2.getCurrentFrameImage("image/jpeg", this.quality), l2 = await $P(d2, i2, n2), u2 = this._sequence + "-" + r2 + "-" + a2 + "-" + c2 + "-" + LO(12, ""), h2 = { appId: i2, cid: r2, cname: n2, deviceId: "", elapse: iG.intToLong(Number(c2 - this._moderationStartTime)), fileSize: d2.buffer.byteLength, height: d2.height, width: d2.width, jpg: l2, networkType: 6, osType: 7, requestId: u2, sdkVersion: "4.23.1", sequence: this._sequence, sid: s2, timestamp: eG(c2), uid: a2, vid: o2, service: this._moderationMode, ticket: this._ticket, callbackData: this._extraInfo, vendorConfigs: this._vendor };
          void 0 === this._extraInfo && delete h2.callbackData;
          const p2 = Ij(h2);
          if (p2.byteLength < this._workerMessageLengthLimit) {
            if (MN("SHOW_IMAGE_MODERATION_WORKER_MESSAGE")) {
              const e3 = function(e4) {
                for (var t3 = 1; t3 < arguments.length; t3++) {
                  var i3 = null != arguments[t3] ? arguments[t3] : {};
                  t3 % 2 ? tG(Object(i3), true).forEach(function(t4) {
                    vy(e4, t4, i3[t4]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i3)) : tG(Object(i3)).forEach(function(t4) {
                    Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(i3, t4));
                  });
                }
                return e4;
              }({}, h2);
              delete e3.jpg, lD.debug("[".concat(this._moderationId, "] Request message for worker of image moderation service: "), JSON.stringify(e3));
            }
            return p2;
          }
          {
            const t3 = this.quality * this._qualityRatio;
            return this.quality = t3, await this.generateRequestData(e2, { appId: i2, cname: n2, cid: r2, vid: o2, sid: s2, uid: a2 });
          }
        }
        close() {
          this._cancelTokenSource.cancel(), this._cancelTokenSource = qb.CancelToken.source(), this._workerConnection && this._workerConnection.close(), this._moderationTimer && window.clearInterval(this._moderationTimer), this._moderationTimer = null, this._uploadTimer && window.clearTimeout(this._uploadTimer), this._uploadTimer = null, this.connectionState = Sx.CLOSED, this.emit(gx.STATE_CHANGE, Rx.CLOSED);
        }
      }
      function nG(e2) {
        if (Bw(e2.interval, "interval", 1e3, 1 / 0), e2 && e2.extraInfo && e2.extraInfo.length > 1024) throw new SD(Uw.INVALID_PARAMS, "config.extraInfo length cannot exceed 1024 bytes");
        if (e2 && e2.vendor && e2.vendor.length > 1024) throw new SD(Uw.INVALID_PARAMS, "config.vendor length cannot exceed 1024 bytes");
      }
      const rG = { name: "ImageModeration", create: function(e2) {
        let { config: t2 } = e2;
        return nG(t2), new iG(t2);
      } };
      var oG, sG, aG, cG, dG, lG, uG, hG, pG, _G, EG, mG, fG, TG, SG, gG, RG, vG, CG, IG, yG, AG, bG, wG, OG, NG, DG, PG, LG, kG, MG, UG, xG, VG, FG, BG, jG, GG, WG, HG, KG, YG;
      function qG(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function zG(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? qG(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : qG(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      KO.setLogger(lD);
      let JG = (oG = fD(), sG = fD({ argsMap: (e2, t2) => {
        if (!Array.isArray(t2)) {
          if (!(t2 instanceof pP)) return [t2];
          t2 = [t2];
        }
        return t2.map((e3) => e3 ? Object(e3).toString() : "null");
      } }), aG = fD({ argsMap: (e2, t2) => (t2 || (t2 = []), Array.isArray(t2) || t2.trackMediaType !== qD.DATA ? (Array.isArray(t2) || (t2 = [t2]), t2.map((e3) => e3.getTrackId())) : [t2.getChannelId()]) }), cG = fD({ argsMap: (e2, t2, i2, n2) => ["object" == typeof t2 ? t2.uid : t2, i2, n2] }), dG = fD({ argsMap: (e2, t2, i2) => [t2, i2] }), lG = fD({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return [null == t3 ? void 0 : t3.uid, i2];
      }) }), uG = fD({ argsMap: (e2, t2, i2, n2) => ["object" == typeof t2 ? t2.uid : t2, i2, n2] }), hG = fD({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return { uid: null == t3 ? void 0 : t3.uid, mediaType: i2 };
      }) }), pG = fD(), _G = fD(), EG = fD(), mG = fD(), fG = fD(), TG = fD(), SG = fD(), gG = fD(), RG = fD(), vG = fD(), CG = fD(), IG = fD(), yG = fD(), AG = fD(), bG = fD(), wG = fD({ argsMap: (e2, t2) => [t2] }), OG = fD(), NG = fD(), DG = fD(), PG = fD(), LG = fD(), kG = fD(), MG = fD(), UG = fD(), xG = fD({ argsMap: (e2, t2) => (Array.isArray(t2) || (t2 = [t2]), [JSON.stringify(t2)]) }), VG = fD(), FG = fD(), BG = fD(), jG = fD(), GG = fD(), WG = fD(), HG = fD({ reportResult: true }), KG = fD(), YG = class extends Zw {
        get connectionState() {
          return this._gateway.state;
        }
        get remoteUsers() {
          return this._users;
        }
        get localTracks() {
          return this._p2pChannel.getAllTracks(true);
        }
        get uid() {
          return this._uid;
        }
        get channelName() {
          return this._channelName;
        }
        get localDataChannels() {
          return this._p2pChannel.getAllDataChannels();
        }
        get mode() {
          return this._config.mode;
        }
        get role() {
          var e2;
          return (null === (e2 = this._config) || void 0 === e2 ? void 0 : e2.role) || "audience";
        }
        get codec() {
          return this._config.codec;
        }
        get audioCodec() {
          return this._config.audioCodec || "opus";
        }
        get isStringUID() {
          return !!this._joinInfo && !!this._joinInfo.stringUid;
        }
        get __className__() {
          return "Client";
        }
        constructor(e2, t2) {
          let i2;
          if (super(), vy(this, "store", void 0), vy(this, "_uid", void 0), vy(this, "_channelName", void 0), vy(this, "_uintUid", void 0), vy(this, "_users", []), vy(this, "_config", void 0), vy(this, "_clientId", void 0), vy(this, "_appId", void 0), vy(this, "_sessionId", null), vy(this, "_key", void 0), vy(this, "_rtmConfig", {}), vy(this, "_joinInfo", void 0), vy(this, "_gateway", void 0), vy(this, "_statsCollector", void 0), vy(this, "_configDistribute", void 0), vy(this, "_leaveMutex", void 0), vy(this, "_publishMutex", void 0), vy(this, "_renewTokenMutex", void 0), vy(this, "_subscribeMutex", void 0), vy(this, "_encryptionMode", "none"), vy(this, "_encryptionSecret", null), vy(this, "_encryptionSalt", null), vy(this, "_encryptDataStream", false), vy(this, "_encryptDataStreamKey", null), vy(this, "_encryptDataStreamIv", null), vy(this, "_proxyServer", void 0), vy(this, "_turnServer", { servers: [], mode: "auto" }), vy(this, "_cloudProxyServerMode", "disabled"), vy(this, "_isDualStreamEnabled", false), vy(this, "_defaultStreamFallbackType", void 0), vy(this, "_lowStreamParameter", void 0), vy(this, "_streamFallbackTypeCacheMap", /* @__PURE__ */ new Map()), vy(this, "_remoteStreamTypeCacheMap", /* @__PURE__ */ new Map()), vy(this, "_axiosCancelSource", qb.CancelToken.source()), vy(this, "_audioVolumeIndicationInterval", void 0), vy(this, "_networkQualityInterval", void 0), vy(this, "_userOfflineTimeout", void 0), vy(this, "_streamRemovedTimeout", void 0), vy(this, "_liveTranscodeStreamingClient", void 0), vy(this, "_liveRawStreamingClient", void 0), vy(this, "_channelMediaRelayClient", void 0), vy(this, "_networkQualitySensitivity", "normal"), vy(this, "_p2pChannel", void 0), vy(this, "_useLocalAccessPoint", false), vy(this, "_setLocalAPVersion", void 0), vy(this, "_joinAndNotLeaveYet", false), vy(this, "_numberOfJoinCount", 0), vy(this, "_remoteDefaultVideoStreamType", void 0), vy(this, "_inspect", void 0), vy(this, "_moderation", void 0), vy(this, "_license", void 0), vy(this, "_pendingPublishedUsers", []), vy(this, "ntpAlignErrorCount", 0), vy(this, "remoteInboundOffset", 0), vy(this, "_peerConnectionState", void 0), vy(this, "_handleLocalTrackEnable", (e3, t3, i3) => {
            this.publish(e3, false).then(t3).catch(i3);
          }), vy(this, "_handleLocalTrackDisable", (e3, t3, i3) => {
            this.unpublish(e3).then(t3).catch(i3);
          }), vy(this, "_handleUserOnline", (e3) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(e3.uid, this.channelName)) return void lD.debug("[".concat(e3.uid, "] will be ignored in local"));
            this.isStringUID && "string" != typeof e3.uid && lD.error("[".concat(this._clientId, "] StringUID is Mixed with UintUID"));
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (t3) t3._trust_in_room_ = true, t3._is_pre_created && (t3._is_pre_created = false, this.safeEmit(dO.USER_JOINED, t3));
            else {
              const t4 = new FF(e3.uid, e3.uint_id || e3.uid);
              this._users.push(t4), lD.debug("[".concat(this._clientId, "] user online"), e3.uid), this.safeEmit(dO.USER_JOINED, t4);
            }
          }), vy(this, "_handleUserOffline", (e3) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(e3.uid, this.channelName)) return;
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            t3 && (this._handleRemoveStream(e3), this._handleRemoveDataChannels(e3), t3._audio_pre_subscribed || t3._video_pre_subscribed ? t3._is_pre_created = true : TO(this._users, t3), this._remoteStreamTypeCacheMap.delete(t3.uid), this._streamFallbackTypeCacheMap.delete(t3.uid), lD.debug("[".concat(this._clientId, "] user offline"), e3.uid, "reason:", e3.reason), this.safeEmit(dO.USER_LEAVED, t3, e3.reason));
          }), vy(this, "_handleAddAudioOrVideoStream", (e3, t3, i3, n3, r2, o2, s2) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(t3, this.channelName)) return;
            const a2 = this._users.find((e4) => e4.uid === t3);
            if (!a2) return void lD.error("[".concat(this._clientId, "] can not find target user!(on_add_stream)"));
            lD.debug("[".concat(this._clientId, "] stream added with uid ").concat(t3, ", type ").concat(e3)), this.store.subscribe(a2.uid, e3, void 0, void 0, void 0, Date.now());
            const c2 = "audio" === e3 ? a2.hasAudio : a2.hasVideo;
            a2._uintid || (a2._uintid = r2 || t3), "audio" === e3 ? a2._trust_audio_stream_added_state_ = true : a2._trust_video_stream_added_state_ = true, "audio" === e3 ? (a2._audio_added_ = true, void 0 !== i3 && (a2._audioSSRC = i3), void 0 !== n3 && (a2._cname = n3), o2 && (a2._audioOrtc = o2)) : (a2._video_added_ = true, void 0 !== i3 && (a2._videoSSRC = i3), void 0 !== n3 && (a2._cname = n3), void 0 !== s2 && (a2._rtxSsrcId = s2), o2 && (a2._videoOrtc = o2)), ("audio" === e3 ? a2.hasAudio : a2.hasVideo) && !c2 && (lD.info("[".concat(this._clientId, "] remote user ").concat(a2.uid, " published ").concat(e3)), this.safeEmit(dO.USER_PUBLISHED, a2, e3)), "video" === e3 ? TD.onGatewayStream(this._sessionId, _D.ON_ADD_VIDEO_STREAM, ED.ON_ADD_VIDEO_STREAM, { peer: r2 || t3, ssrc: a2._videoSSRC }) : TD.onGatewayStream(this._sessionId, _D.ON_ADD_AUDIO_STREAM, ED.ON_ADD_AUDIO_STREAM, { peer: r2 || t3, ssrc: a2._audioSSRC }), this._p2pChannel.remoteMediaSsrcChanged(a2, e3, i3).then((t4) => {
              if (t4 && (lD.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after rejoin because SSRC id changed.")), this._p2pChannel instanceof YB)) return this._p2pChannel.unsubscribe(a2, e3, true).then(() => this._subscribe(a2, e3, true).catch((e4) => {
                lD.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
              }));
            }), this._p2pChannel.hasPendingRemoteMedia(a2, e3) && (lD.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after reconnect.")), this._subscribe(a2, e3, true).catch((e4) => {
              lD.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
            }));
          }), vy(this, "_handleRemoveStream", (e3) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(e3.uid, this.channelName)) return;
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (!t3) return void lD.warning("[".concat(this._clientId, "] can not find target user!(on_remove_stream)"));
            lD.debug("[".concat(this._clientId, "] stream removed with uid ").concat(e3.uid));
            let i3 = () => {
            };
            t3.hasAudio && t3.hasVideo ? i3 = () => {
              lD.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.safeEmit(dO.USER_UNPUBLISHED, t3, "audio"), lD.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.safeEmit(dO.USER_UNPUBLISHED, t3, "video");
            } : t3.hasVideo ? i3 = () => {
              lD.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.safeEmit(dO.USER_UNPUBLISHED, t3, "video");
            } : t3.hasAudio && (i3 = () => {
              lD.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.safeEmit(dO.USER_UNPUBLISHED, t3, "audio");
            }), t3._video_pre_subscribed || t3._audio_pre_subscribed || (t3._trust_audio_stream_added_state_ = true, t3._trust_video_stream_added_state_ = true, t3._audio_added_ = false, t3._video_added_ = false, this._p2pChannel instanceof YB && this._p2pChannel.unsubscribe(t3).then((e4) => {
              if (e4) return this._gateway.unsubscribe(e4, t3.uid);
            }), t3._audioSSRC = void 0, t3._videoSSRC = void 0, t3._audioOrtc = void 0, t3._videoOrtc = void 0, t3._rtxSsrcId = void 0), TD.onGatewayStream(this._sessionId, _D.ON_REMOVE_STREAM, ED.ON_REMOVE_STREAM, { peer: e3.uint_id || e3.uid }), i3();
          }), vy(this, "_handleSetStreamLocalEnable", (e3, t3, i3) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(t3, this.channelName)) return;
            const n3 = this._users.find((e4) => e4.uid === t3);
            if (!n3) return void lD.error("[".concat(this._clientId, "] can not find target user!(disable_local)"));
            lD.debug("[".concat(this._clientId, "] local ").concat(e3, " ").concat(i3 ? "enabled" : "disabled", " with uid ").concat(t3));
            const r2 = "audio" === e3 ? n3.hasAudio : n3.hasVideo;
            if ("audio" === e3) {
              n3._trust_audio_enabled_state_ = true;
              const e4 = n3._audio_enabled_;
              if (n3._audio_enabled_ = i3, n3._audio_enabled_ === e4) return;
              {
                const e5 = n3._audio_enabled_ ? "enable-local-audio" : "disable-local-audio";
                lD.debug("[".concat(this._clientId, "] user-info-updated, uid: ").concat(t3, ", msg: ").concat(e5)), this.safeEmit(dO.USER_INFO_UPDATED, t3, e5);
              }
            } else {
              n3._trust_video_enabled_state_ = true;
              const e4 = n3._video_enabled_;
              if (n3._video_enabled_ = i3, n3._video_enabled_ === e4) return;
              {
                const e5 = n3._video_enabled_ ? "enable-local-video" : "disable-local-video";
                lD.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(t3, ", msg: ").concat(e5)), this.safeEmit(dO.USER_INFO_UPDATED, t3, e5);
              }
            }
            const o2 = "audio" === e3 ? n3.hasAudio : n3.hasVideo;
            return r2 !== o2 ? !r2 && o2 ? (lD.info("[".concat(this._clientId, "] remote user ").concat(t3, " published ").concat(e3)), void this.safeEmit(dO.USER_PUBLISHED, n3, e3)) : ("video" === e3 && n3._videoTrack && n3._videoTrack._destroy(), "audio" === e3 && n3._audioTrack, this._p2pChannel.muteRemote(n3, e3), lD.info("[".concat(this._clientId, "] remote user ").concat(t3, " unpublished ").concat(e3)), void this.safeEmit(dO.USER_UNPUBLISHED, n3, e3)) : void 0;
          }), vy(this, "_handleMuteStream", (e3, t3, i3) => {
            if (MN("BLOCK_LOCAL_CLIENT") && xM(e3, this.channelName)) return;
            lD.debug("[".concat(this._clientId, "] receive mute message"), e3, t3, i3);
            const n3 = this._users.find((t4) => t4.uid === e3);
            if (!n3) return void lD.warning("[".concat(this._clientId, "] can not find remote user, ignore mute event, uid: ").concat(e3));
            const r2 = "audio" === t3 ? n3.hasAudio : n3.hasVideo;
            if ("audio" === t3) {
              n3._trust_audio_mute_state_ = true;
              const t4 = n3._audio_muted_;
              if (n3._audio_muted_ = i3, n3._audio_muted_ === t4) return;
              {
                const t5 = n3._audio_muted_ ? "mute-audio" : "unmute-audio";
                lD.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.safeEmit(dO.USER_INFO_UPDATED, e3, t5);
              }
            } else {
              n3._trust_video_mute_state_ = true;
              const t4 = n3._video_muted_;
              if (n3._video_muted_ = i3, n3._video_muted_ === t4) return;
              {
                const t5 = n3._video_muted_ ? "mute-video" : "unmute-video";
                lD.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.safeEmit(dO.USER_INFO_UPDATED, e3, t5);
              }
            }
            const o2 = "audio" === t3 ? n3.hasAudio : n3.hasVideo;
            if (r2 !== o2) {
              if (!r2 && o2) {
                return ("audio" === t3 ? n3._audioSSRC : n3._videoSSRC) ? (lD.info("[".concat(this._clientId, "] remote user ").concat(e3, " published ").concat(t3)), void this.safeEmit(dO.USER_PUBLISHED, n3, t3)) : void lD.warning("[".concat(this._clientId, "] remote user ").concat(e3, " receive ").concat(t3, " unmute message  before add stream message, ").concat(t3, " SSRC doesn't exist yet."));
              }
              "video" === t3 && n3._videoTrack && !n3._video_pre_subscribed && n3._videoTrack._destroy(), "audio" === t3 && n3._audioTrack, this._p2pChannel.muteRemote(n3, t3), lD.info("[".concat(this._clientId, "] remote user ").concat(e3, " unpublished ").concat(t3)), this.safeEmit(dO.USER_UNPUBLISHED, n3, t3);
            }
          }), vy(this, "_handleP2PLost", async (e3) => {
            lD.debug("[".concat(this._clientId, "] receive p2p lost"), e3), parseInt(e3.p2pid, 10) === this.store.p2pId ? await this._p2pChannel.requestReconnect() : lD.warning("[".concat(this._clientId, "] P2PLost stream not found"), e3);
          }), vy(this, "_handleTokenWillExpire", () => {
            lD.debug("[".concat(this._clientId, "] received message onTokenPrivilegeWillExpire")), this.safeEmit(dO.ON_TOKEN_PRIVILEGE_WILL_EXPIRE);
          }), vy(this, "_handleBeforeUnload", (e3) => {
            "beforeunload" === e3.type && void 0 !== e3.returnValue && "" !== e3.returnValue || (this.leave(), lD.info("[".concat(this._clientId, "] auto leave onbeforeunload or pagehide")));
          }), vy(this, "_handleUpdateNetworkQuality", () => {
            if ("normal" === this._networkQualitySensitivity) return;
            if (navigator && void 0 !== navigator.onLine && !navigator.onLine) return void this.safeEmit(dO.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 });
            const e3 = { downlinkNetworkQuality: 0, uplinkNetworkQuality: 0 };
            e3.uplinkNetworkQuality = this._p2pChannel.getUplinkNetworkQuality(), e3.downlinkNetworkQuality = this._p2pChannel.getDownlinkNetworkQuality(), this.safeEmit(dO.NETWORK_QUALITY, e3);
          }), vy(this, "_handleP2PAddAudioOrVideoStream", (e3, t3, i3, n3) => {
            const r2 = this._users.find((e4) => e4.uid === t3);
            if (!r2) return void lD.error("[".concat(this._clientId, "] can not find target user!(on_add_stream)"));
            lD.debug("[".concat(this._clientId, "] stream added with uid ").concat(t3, ", type ").concat(e3)), this.store.subscribe(r2.uid, e3, void 0, void 0, void 0, Date.now());
            const o2 = "audio" === e3 ? r2.hasAudio : r2.hasVideo;
            "audio" === e3 ? r2._trust_audio_stream_added_state_ = true : r2._trust_video_stream_added_state_ = true, "audio" === e3 ? (r2._audio_added_ = true, void 0 !== i3 && (r2._audioSSRC = i3), void 0 !== n3 && (r2._audioMid = n3)) : (r2._video_added_ = true, void 0 !== i3 && (r2._videoSSRC = i3), void 0 !== n3 && (r2._videoMid = n3)), ("audio" === e3 ? r2.hasAudio : r2.hasVideo) && !o2 && (lD.info("[".concat(this._clientId, "] remote user ").concat(r2.uid, " published ").concat(e3)), this.safeEmit(dO.USER_PUBLISHED, r2, e3)), this._p2pChannel.hasPendingRemoteMedia(r2, e3) && (lD.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(r2.uid, " after reconnect.")), this._subscribe(r2, e3, true).catch((e4) => {
              lD.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
            }));
          }), this._config = e2, this._clientId = t2 || LO(5, "client-"), this.store = new FN(e2.codec, e2.audioCodec, e2.mode, this._clientId), this._leaveMutex = new KO("client-leave", this._clientId), this._publishMutex = new KO("client-publish", this._clientId), this._renewTokenMutex = new KO("client-renewtoken", this._clientId), this._subscribeMutex = new KO("client-subscribe", this._clientId), this.store.clientCreated(), e2.proxyServer && this.setProxyServer(e2.proxyServer, true), e2.turnServer && this.setTurnServer(e2.turnServer, true), lD.info("[".concat(this._clientId, "] Initializing AgoraRTC client v").concat(yN, " build: ").concat(DN, ", mode: ").concat(this.mode, ", codec: ").concat(this.codec)), e2.clientRoleOptions) try {
            cO(e2.clientRoleOptions), i2 = Object.assign({}, e2.clientRoleOptions);
          } catch (e3) {
            lD.warning("[".concat(this._clientId, "] ").concat(e3.toString()));
          }
          var n2;
          this._statsCollector = new UF(this.store), this._statsCollector.onStatsException = (e3, t3, i3) => {
            lD.warn("[".concat(this._clientId, "] receive exception msg, code: ").concat(e3, ", msg: ").concat(t3, ", uid: ").concat(i3)), this.safeEmit(dO.EXCEPTION, { code: e3, msg: t3, uid: i3 });
          }, this._statsCollector.onUploadPublishDuration = (e3, t3, i3, n3) => {
            const r2 = this._users.find((t4) => t4.uid === e3);
            r2 && TD.peerPublishStatus(this._sessionId, { subscribeElapse: n3, audioPublishDuration: t3, videoPublishDuration: i3, peer: r2._uintid });
          }, this.store.useP2P = "p2p" === e2.mode, this._gateway = new KV(this.store, { clientId: this._clientId, mode: this.mode, codec: this.codec, websocketRetryConfig: e2.websocketRetryConfig || qO, httpRetryConfig: e2.httpRetryConfig || qO, forceWaitGatewayResponse: void 0 === e2.forceWaitGatewayResponse || e2.forceWaitGatewayResponse, statsCollector: this._statsCollector, role: e2.role, clientRoleOptions: i2 }), this._configDistribute = new NF(this._clientId, this.store), this.store.useP2P ? (this._p2pChannel = (n2 = { store: this.store, statsCollector: this._statsCollector }, BV("P2PChannel").create(n2)), this._handleP2PEvents()) : this._p2pChannel = new YB(this.store, this._statsCollector), this._handleP2PChannelEvents(), this._handleGatewayEvents(), this._handleGatewaySignalEvents();
        }
        async joinMeta(e2, t2, i2, n2, r2) {
          let o2 = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], s2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
          kN("JOIN_GATEWAY_USE_443PORT_ONLY", o2), kN("JOIN_GATEWAY_USE_DUAL_DOMAIN", s2);
          const a2 = this._gateway.signal.websocket;
          return a2 instanceof jx && (a2.use443PortOnly = o2, a2.tryDoubleDomain = s2), async function(e3, t3, i3) {
            Xb.get(e3) || Xb.set(e3, []), Qb.get(e3) || Qb.set(e3, t3), Zb.get(e3) || Zb.set(e3, 0);
            const n3 = Xb.get(e3), r3 = Qb.get(e3);
            if (!n3 || !r3) throw new Error("concurrent: deferQueue or maxConcurrency is null");
            if (Zb.get(e3) === r3) {
              const e4 = Jb();
              n3.push(e4), await e4.promise;
            }
            Zb.set(e3, Zb.get(e3) + 1);
            for (var o3 = arguments.length, s3 = new Array(o3 > 3 ? o3 - 3 : 0), a3 = 3; a3 < o3; a3++) s3[a3 - 3] = arguments[a3];
            const c2 = await i3(...s3);
            return Zb.set(e3, Zb.get(e3) - 1), Zb.get(e3) === r3 - 1 && n3.length > 0 && (n3[0].resolve(), n3.shift()), 0 === Zb.get(e3) && (Xb.set(e3, []), Qb.set(e3, 0), Zb.set(e3, 0)), c2;
          }("client.join", MN("JOIN_MAX_CONCURRENCY"), this.join.bind(this), e2, t2, i2, n2, r2);
        }
        async join(e2, t2, i2, n2, r2) {
          const o2 = ++this._numberOfJoinCount;
          this.store.joinStart(), n2 && (this.store.uid = n2);
          const s2 = "HTTPS" === (XO || XO || (XO = (window.location.protocol.split(":")[0] || "").toUpperCase(), XO)), a2 = iN() ? window.isSecureContext : "Browser Not Support";
          if (!iN() && !s2 || !window.isSecureContext) {
            const e3 = "The website must be running in a secure context (About secure context: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts ), otherwise the media collection will be restricted by the browser";
            lD.warning(e3);
          }
          "DISCONNECTED" === this.connectionState && (this.store.avoidJoinStart = Math.round(Date.now()), lD.debug("[".concat(this._clientId, "] set avoidJoinStart to ").concat(this.store.avoidJoinStart))), TD.setAppId(e2);
          try {
            if (!i2 && null !== i2) throw new SD(Uw.INVALID_PARAMS, "Invalid token: ".concat(i2, ". If you don not use token, set it to null"));
            i2 && Gw(i2, "token", 1, 2047), Gw(e2, "appid", 1, 2047), kU(t2), n2 && MU(n2), r2 && Gw(r2, "optionalInfo", 1, 2047);
          } catch (r3) {
            throw TD.reportApiInvoke(kO(), { name: tO.JOIN, options: [e2, t2, i2, n2], states: { isHttps: s2, isSecureContext: a2 }, tag: iO.TRACER }).onError(r3), r3;
          }
          if (this._leaveMutex.isLocked) {
            lD.debug("[".concat(this._clientId, "] join: waiting leave operation"));
            (await this._leaveMutex.lock())(), lD.debug("[".concat(this._clientId, "] join: continue"));
          }
          if (this._joinAndNotLeaveYet = true, "DISCONNECTED" !== this.connectionState) {
            const r3 = new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Client already in connecting/connected state"));
            throw TD.reportApiInvoke(kO(), { name: tO.JOIN, options: [e2, t2, i2, n2], states: { isHttps: s2, isSecureContext: a2 }, tag: iO.TRACER }).onError(r3), r3;
          }
          this._gateway.state = "CONNECTING";
          const c2 = await mj({ appId: e2, cname: t2, uid: n2, stringUid: "string" == typeof n2 ? n2 : void 0, token: i2 || e2, cloudProxyServer: this._cloudProxyServerMode });
          if (!this._joinAndNotLeaveYet) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
          const d2 = (null == c2 ? void 0 : c2.sid) || kO();
          lD.info("[".concat(this._clientId, "] start join channel ").concat(t2, ", join number: ").concat(o2)), this._sessionId || (this._sessionId = d2, this.store.sessionId = this._sessionId);
          const l2 = TD.reportApiInvoke(d2, { id: this._clientId, name: tO.JOIN, options: [e2, t2, i2, n2], states: { isHttps: s2, isSecureContext: a2 }, tag: iO.TRACER }), u2 = zG(zG(zG({}, this._rtmConfig), {}, { role: this.role, clientId: this._clientId, appId: e2, sid: this._sessionId, cname: t2, uid: "string" != typeof n2 ? n2 : null, turnServer: this._turnServer, proxyServer: this._proxyServer, token: i2 || e2, cloudProxyServer: this._cloudProxyServerMode, optionalInfo: r2, license: this._license, useLocalAccessPoint: this._useLocalAccessPoint, preload: !!c2 }, void 0 !== this._remoteDefaultVideoStreamType && { defaultVideoStream: this._remoteDefaultVideoStreamType }), {}, { apRequestDetail: MN("AP_REQUEST_DETAIL") || void 0 });
          if (this._useLocalAccessPoint && (u2.setLocalAPVersion = this._setLocalAPVersion), "string" == typeof n2 && (u2.stringUid = n2, this._uintUid ? (u2.uid = this._uintUid, this._uintUid = void 0) : u2.uid = 0), "none" !== this._encryptionMode && this._encryptionSecret) {
            if (u2.aesmode = this._encryptionMode, u2.aespassword = await (async (e3) => {
              const t3 = function() {
                const e4 = window.atob("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCMnXAHkKIGAM+x4N22gCI+Wyu\nSTM9ztkT3uYslTT2PuKmZfPzhH6kVdO7PTjGCOZnAsyb3oTtWat0KcxQ4jxvqQV+\nHvYl3iI1Yd4vl2c3qRMJPLtRDfNxa2Mcxgq7e9aEUibzdd0st+OJAy3tOj/Y0aVy\nxQiYDz3vqa6bP29adwIDAQAB"), t4 = new Uint8Array(new ArrayBuffer(e4.length));
                for (let i4 = 0; i4 < e4.length; i4 += 1) t4[i4] = e4.charCodeAt(i4);
                return t4;
              }(), i3 = await window.crypto.subtle.importKey("spki", t3, { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]), n3 = Jw(e3), r3 = await window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, i3, n3);
              return function(e4) {
                let t4 = "";
                for (let i4 = 0; i4 < e4.length; i4 += 1) t4 += String.fromCharCode(e4[i4]);
                return window.btoa(t4);
              }(new Uint8Array(r3));
            })(this._encryptionSecret), !this._joinAndNotLeaveYet) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            this._encryptionSalt && (u2.aessalt = this._encryptionSalt);
          }
          if (this._encryptDataStream && ("aes-128-gcm2" === this._encryptionMode || "aes-256-gcm2" === this._encryptionMode)) if (this._encryptionSalt && this._encryptionSecret) if (window.crypto.subtle) {
            const e3 = new TextEncoder(), t3 = MN("USE_PURE_ENCRYPTION_MASTER_KEY") ? e3.encode(u2.appId + this._encryptionSecret + this._encryptionSecret) : e3.encode(u2.appId + u2.cname + this._encryptionSecret);
            this._encryptDataStreamIv = await async function(e4, t4, i3) {
              const n3 = await window.crypto.subtle.importKey("raw", t4, "PBKDF2", false, ["deriveBits", "deriveKey"]), r3 = "aes-128-gcm2" === e4 ? 128 : 256, o3 = await window.crypto.subtle.deriveBits({ name: "PBKDF2", iterations: 1e3, hash: "SHA-256", salt: i3 }, n3, r3 + 96);
              return new Uint8Array(o3).subarray(r3 / 8);
            }(this._encryptionMode, t3, yO(this._encryptionSalt)), this._encryptDataStreamKey = await async function(e4, t4, i3) {
              const n3 = await window.crypto.subtle.importKey("raw", t4, "PBKDF2", false, ["deriveBits", "deriveKey"]), r3 = "aes-128-gcm2" === e4 ? 128 : 256;
              return await window.crypto.subtle.deriveKey({ name: "PBKDF2", iterations: 1e3, hash: "SHA-256", salt: i3 }, n3, { name: "AES-GCM", length: r3 }, true, ["encrypt", "decrypt"]);
            }(this._encryptionMode, t3, yO(this._encryptionSalt));
          } else a2 ? lD.warning("[".concat(this._clientId, "] encrypt datastream must be running in a secure context, fallback to plain data stream")) : lD.warning("[".concat(this._clientId, "] current browser do not support WebCrypto ,fallback to plain data stream")), this._encryptDataStream = false;
          else this._encryptDataStream = false, lD.debug("[".concat(this._clientId, "] no salt / secret, cannot support encrypt data stream, fallback to plain data stream"));
          this._startSession(this._sessionId, { channel: t2, appId: e2, stringUid: u2.stringUid });
          const h2 = this._sessionId;
          setTimeout(() => {
            "CONNECTING" === this.connectionState && h2 === this._sessionId && TD.joinChannelTimeout(this._sessionId, 5);
          }, 5e3);
          try {
            var p2;
            let n3;
            const r3 = u2.cloudProxyServer;
            if (kn(p2 = ["proxy3", "proxy4", "proxy5"]).call(p2, r3)) {
              const e3 = MN("PROXY_SERVER_TYPE3");
              Array.isArray(e3) ? u2.proxyServer = e3[0] : u2.proxyServer = e3;
            }
            if (TD.setProxyServer(u2.proxyServer), lD.setProxyServer(u2.proxyServer), this.store.requestAPStart(), c2) {
              if (lD.debug("[".concat(this._clientId, "] get serverInfo Success from Preload Cache ").concat(u2.stringUid ? ", ".concat(u2.stringUid, " => ").concat(c2.intUid) : "", " ")), u2.stringUid && !u2.uid && (u2.uid = c2.intUid), n3 = { gatewayInfo: c2.ap.gatewayInfo }, MN("JOIN_WITH_FALLBACK_MEDIA_PROXY") && "auto" === u2.turnServer.mode) if (0 === c2.ap.proxyInfo.addresses.length) lD.warning("no edge services in ap response of proxy fallback, will not set proxy in iceServers");
              else {
                const e3 = (await eV(c2.ap.proxyInfo, c2.ap.gatewayInfo.uid)).map((e4) => ({ turnServerURL: e4.address, tcpport: e4.tcpport || wN.tcpport, udpport: e4.udpport || wN.udpport, username: e4.username || wN.username, password: e4.password || wN.password, forceturn: false, security: true }));
                u2.turnServer = { mode: "manual", servers: e3 };
              }
              gj(c2, u2.stringUid);
            } else {
              if (u2.stringUid && !u2.uid) {
                let e3;
                [e3, n3] = await np.all([RF(u2.stringUid, u2, this._axiosCancelSource.token, this._config.httpRetryConfig || qO, this.store), gF(u2, this._axiosCancelSource.token, this._config.httpRetryConfig || qO, true, this.store)]), lD.debug("[".concat(this._clientId, "] getUserAccount Success ").concat(u2.stringUid, " => ").concat(e3)), u2.uid = e3, n3.gatewayInfo.uid = e3, n3.gatewayInfo.res.uid = e3;
              } else n3 = await gF(u2, this._axiosCancelSource.token, this._config.httpRetryConfig || qO, true, this.store);
              if (!this._joinAndNotLeaveYet) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            }
            this.store.requestAPEnd(), setTimeout(() => {
              this._configDistribute.startGetConfigDistribute(u2, this._axiosCancelSource.token), this._configDistribute.on(nx.UPDATE_BITRATE_LIMIT, (e3) => {
                this._p2pChannel.updateBitrateLimit(e3);
              }), this._configDistribute.on(nx.UPDATE_CLIENT_ROLE_OPTIONS, (e3) => {
                this._setClientRoleOptions(e3);
              });
            }, 0), this._key = i2 || e2;
            const o3 = n3.gatewayInfo, s3 = u2.uid ? u2.uid : o3.uid;
            this._joinInfo = zG(zG({}, u2), {}, { cid: o3.cid, uid: s3, vid: o3.vid, apResponse: o3.res, apGatewayAddress: o3.apGatewayAddress, uni_lbs_ip: o3.uni_lbs_ip, gatewayAddrs: o3.gatewayAddrs }), this.store.intUid = s3, this.store.cid = o3.cid;
            const a3 = await this._joinGateway();
            if (!this._joinAndNotLeaveYet) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            l2.onSuccess(a3), this._appId = e2, this._channelName = u2.cname, this._uid = a3, this.store.uid = a3, setTimeout(() => {
              this._networkQualityInterval && window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = window.setInterval(this._handleUpdateNetworkQuality, 2e3), window.addEventListener(lw() ? "beforeunload" : "pagehide", this._handleBeforeUnload), this._statsCollector.startUpdateStats();
            }, 0);
            const d3 = u2.stringUid ? "string uid: ".concat(u2.stringUid, ",uid: ").concat(u2.uid) : "uid: ".concat(this._uid);
            return lD.info("[".concat(this._clientId, "] Joining channel success: channel: ").concat(t2, ",").concat(d3)), setTimeout(() => {
              lD.startUpload();
            }, 5e3), this.store.joinEnd(), _2 = this, kn(MM).call(MM, _2) || MM.push(_2), "disabled" === this._cloudProxyServerMode && RD().supportWebCrypto && MN("ENABLE_PRELOAD") && Tj(this._joinInfo), a3;
          } catch (e3) {
            const t3 = Array.isArray(e3) ? e3[0] : e3;
            throw t3 && t3.code === Uw.OPERATION_ABORTED ? lD.warning("[".concat(this._clientId, "] join number: ").concat(o2, ", Joining channel failed, rollback"), t3) : lD.error("[".concat(this._clientId, "] join number: ").concat(o2, ", Joining channel failed, rollback"), t3), t3.code !== Uw.OPERATION_ABORTED && this._numberOfJoinCount === o2 && (this._gateway.state = "DISCONNECTED", this._reset()), l2.onError(t3), t3;
          }
          var _2;
        }
        _joinGateway() {
          if (!this._joinInfo || !this._key) throw new SD(Uw.INVALID_OPERATION);
          return this._gateway.join(this._joinInfo, this._key, !("disabled" !== this._joinInfo.cloudProxyServer || this._joinInfo.proxyServer || !MN("JOIN_WITH_FALLBACK_SIGNAL_PROXY")));
        }
        async leave() {
          lD.info("[".concat(this._clientId, "] Leaving channel")), window.removeEventListener(lw() ? "beforeunload" : "pagehide", this._handleBeforeUnload), this._reset(), function(e3) {
            const t2 = MM.indexOf(e3);
            -1 !== t2 && MM.splice(t2, 1);
          }(this), this._statsCollector.stopUpdateStats();
          const e2 = await this._leaveMutex.lock();
          if ("DISCONNECTED" === this.connectionState) return lD.info("[".concat(this._clientId, "] Leaving channel repeated, success")), void e2();
          await this._gateway.leave("CONNECTED" !== this.connectionState, oO.LEAVE), lD.info("[".concat(this._clientId, "] Leaving channel success")), this._joinAndNotLeaveYet = false, this.store.resetJoinChannelServiceRecords(), e2();
        }
        async publish(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (!Array.isArray(e2)) {
            if (!(e2 instanceof pP)) return this._publishDataChannel(e2);
            e2 = [e2];
          }
          if (0 === e2.length) throw new SD(Uw.INVALID_PARAMS, "param list is empty");
          const i2 = e2;
          if ("audience" === this._gateway.role) throw new SD(Uw.INVALID_OPERATION, "audience can not publish stream");
          for (const e3 of i2) {
            if (!(e3 instanceof pP)) throw new SD(Uw.INVALID_PARAMS, "parameter is not local track");
            if (!e3._enabled && t2) throw new SD(Uw.TRACK_IS_DISABLED, "can not publish a disabled track: ".concat(e3.getTrackId()));
          }
          lD.info("[".concat(this._clientId, "] Publishing tracks, id ").concat(i2.map((e3) => "".concat(e3.getTrackId(), " "))));
          const n2 = await this._publishMutex.lock();
          await this._configDistribute.awaitConfigDistributeComplete(), t2 && i2.forEach((e3) => {
            const t3 = this._configDistribute.getBitrateLimit();
            e3 instanceof Dk && t3 && e3.setBitrateLimit(t3.uplink);
          });
          try {
            await this._publishHighStream(i2), lD.info("[".concat(this._clientId, "] Publish success, id ").concat(i2.map((e3) => "".concat(e3.getTrackId(), " "))));
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] publish error"), e3.toString()), e3;
          } finally {
            n2();
          }
        }
        async _publishDataChannel(e2) {
          Bw(e2.id, "id", 0, 65535, true), Vw(e2.ordered, "ordered"), Gw(e2.metadata, "metadata", 0, 512), lD.info("[".concat(this._clientId, "] Publishing datachannels, id ").concat(e2.id));
          const t2 = await this._publishMutex.lock();
          try {
            if (-1 !== this._p2pChannel.getAllDataChannels().findIndex((t4) => t4.id === e2.id)) throw new SD(Uw.INVALID_PARAMS, "Invalid id: ".concat(e2.id, ". If you want to republish the datachannel, unpublish first"));
            if (!this._joinInfo || void 0 === this._uid) throw new SD(Uw.INVALID_OPERATION, "Can't publish datachannel, haven't joined yet!");
            if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "can not publish datachannel in ".concat(this.connectionState, " state"));
            if ("auto" === this._turnServer.mode && MN("FORCE_TURN") && !MN("TURN_ENABLE_TCP") && !MN("TURN_ENABLE_UDP")) throw new SD(Uw.UNEXPECTED_ERROR, "force TURN With No TURN Configuration");
            const t3 = function(e3) {
              return jV(e3, false);
            }(e2), i2 = await this._p2pChannel.publishDataChannel([t3]);
            if (i2.length > 0) {
              if ("number" != typeof t3._originDataChannelId) throw lD.error("[".concat(this._clientId, "] can not publish with mediaType datachannel, cannot get RTCDatachannel id")), new SD(Uw.CREATE_DATACHANNEL_ERROR);
              try {
                await np.all(i2.map((e3) => this._uid && this._gateway.publishDataChannel(this._uid, e3, true))), await t3._waitTillOpen();
              } catch (e3) {
                if (e3.code !== Uw.DISCONNECT_P2P) throw e3;
              }
            }
            return lD.info("[".concat(this._clientId, "] Publish dataChannels success, id ").concat(t3.id)), t3;
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] publish datachannels error"), e3.toString()), e3;
          } finally {
            t2();
          }
        }
        async unpublish(e2) {
          if (!this._joinInfo || void 0 === this._uid) throw new SD(Uw.INVALID_OPERATION, "Can't unpublish stream, haven't joined yet!");
          let t2 = [];
          if (e2) if (Array.isArray(e2)) t2 = e2;
          else {
            if (!(e2 instanceof pP)) return this._unpublishDataChannel([e2]);
            t2 = [e2];
          }
          else this.store.useP2P || await this._unpublishDataChannel(), t2 = this._p2pChannel.getAllTracks(true);
          lD.info("[".concat(this._clientId, "] Unpublish tracks, tracks ").concat(t2.map((e3) => "".concat(e3.getTrackId(), " ")), " "));
          const i2 = await this._publishMutex.lock();
          try {
            if (this.store.useP2P) {
              const e3 = await this._p2pChannel.unpublish(t2);
              e3 && await this._gateway.sendExtensionMessage(vx.UNPUBLISH, { unpubMsg: e3 }, true);
            } else {
              const e3 = await this._p2pChannel.unpublish(t2);
              e3 && await this._gateway.unpublish(e3, this._uid), lD.info("[".concat(this._clientId, "] Unpublish success,tracks ").concat(t2.map((e4) => "".concat(e4.getTrackId()))));
            }
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] unpublish error"), e3.toString()), e3;
          } finally {
            i2 && i2();
          }
        }
        async _unpublishDataChannel(e2) {
          void 0 !== e2 && 0 !== e2.length || (e2 = this._p2pChannel.getAllDataChannels()), lD.info("[".concat(this._clientId, "] Unpublish datachannels, datachannels ").concat(e2.map((e3) => "".concat(e3.id, " ")), " "));
          const t2 = await this._publishMutex.lock();
          try {
            const t3 = await this._p2pChannel.unpublishDataChannel(e2);
            t3 && await this._gateway.unpublishDataChannel(t3), lD.info("[".concat(this._clientId, "] Unpublish dataChannel success,dataChannel ").concat(e2.map((e3) => "".concat(e3.id))));
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] unpublish dataChannel error"), e3.toString()), e3;
          } finally {
            t2 && t2();
          }
        }
        async subscribe(e2, t2, i2) {
          if (!(e2 instanceof FF)) {
            const t3 = this.remoteUsers.find((t4) => t4.uid === e2);
            if (!t3) throw new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            e2 = t3;
          }
          return "datachannel" === t2 ? this._subscribeDataChannel(e2, i2) : this._subscribe(e2, t2);
        }
        async presubscribe(e2, t2) {
          if (Fw(t2, "mediaType", ["audio", "video"]), this.store.useP2P) throw new SD(Uw.INVALID_OPERATION, "can't presub at p2p mode");
          if (!this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "can't presub when not join");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "can't presub in ".concat(this.connectionState, " state"));
          const i2 = t2 === ax.AUDIO, n2 = t2 === ax.VIDEO, r2 = await this._subscribeMutex.lock();
          try {
            const { ssrcId: r3, ortc: o2, rtxSsrcId: s2, cname: a2, uint_id: c2 } = await this._gateway.presubscribe(e2, t2, true);
            if (null == r3) throw new SD(Uw.UNEXPECTED_RESPONSE, "no ssrc id");
            let d2 = this._users.find((t3) => t3.uid === e2);
            d2 || (d2 = new FF(e2, c2 || e2), d2._is_pre_created = true, this._users.push(d2)), a2 && (d2._cname = a2), d2._uintid || (d2._uintid = c2 || e2), i2 && (d2._audioSSRC = r3, d2._audio_pre_subscribed = true, o2 && (d2._audioOrtc = o2)), n2 && (d2._videoSSRC = r3, d2._video_pre_subscribed = true, o2 && (d2._videoOrtc = o2), null != s2 && (d2._rtxSsrcId = s2)), lD.info("[".concat(this._clientId, "] presub succeed ssrc: ").concat(r3)), await this._p2pChannel.subscribe(d2, t2, r3, s2, o2);
            const l2 = i2 ? d2._audioTrack : d2._videoTrack;
            if (!l2) throw new SD(Uw.UNEXPECTED_ERROR, "can not find remote track in user");
            return i2 && (d2._trust_audio_stream_added_state_ = true, d2._audio_added_ = true), n2 && (d2._trust_video_stream_added_state_ = true, d2._video_added_ = true), l2;
          } catch (t3) {
            throw lD.error("[".concat(this._clientId, "] presub user ").concat(e2, " error"), t3), t3;
          } finally {
            r2();
          }
        }
        async _subscribeDataChannel(e2, t2) {
          var i2;
          if (Bw(t2, "channelId", 0, 65535, true), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe datachannel, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe datachannel in ".concat(this.connectionState, " state"));
          const n2 = this._users.find((t3) => t3 === e2);
          if (!n2) throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
          if (!e2.hasAudio && !e2.hasVideo && 0 === e2._dataChannels.length) throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), new SD(Uw.INVALID_REMOTE_USER, "user is not published");
          const r2 = null === (i2 = e2._dataChannels) || void 0 === i2 ? void 0 : i2.find((e3) => e3.id === t2);
          if (!r2) throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType datachannel, remote datachannel is not published")), new SD(Uw.REMOTE_USER_IS_NOT_PUBLISHED);
          const o2 = await this._subscribeMutex.lock();
          lD.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: datachannel"));
          try {
            const t3 = await this._p2pChannel.subscribeDataChannel(e2, [r2]);
            if (t3 && kn(t3).call(t3, r2.id)) try {
              var s2;
              if ("number" != typeof r2._originDataChannelId) throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType datachannel, cannot get RTCDatachannel")), new SD(Uw.CREATE_DATACHANNEL_ERROR);
              const t4 = { id: r2.id, datachannelId: r2._originDataChannelId, ordered: r2.ordered, maxRetransmits: r2.maxRetransmits, metadata: null !== (s2 = r2.metadata) && void 0 !== s2 ? s2 : "" };
              await this._gateway.subscribeDataChannel(e2.uid, t4, true), await r2._waitTillOpen();
            } catch (t4) {
              if ((null == t4 ? void 0 : t4.code) !== Uw.WS_ABORT) throw await this._p2pChannel.unsubscribeDataChannel(e2, [r2]), t4;
              await this._p2pChannel.unsubscribeDataChannel(e2, [r2]), this._p2pChannel.setPendingRemoteDataChannel(e2, r2.id);
            }
            return lD.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: datachannel")), r2;
          } finally {
            o2();
          }
        }
        async _p2pSubscribe(e2, t2, i2) {
          if (Fw(t2, "mediaType", ["audio", "video"]), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          const n2 = this._users.find((t3) => t3 === e2);
          if (!n2) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), t3;
          }
          if (!e2.hasAudio && !e2.hasVideo) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not published");
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), t3;
          }
          if (!i2 && ("audio" === t2 && !e2.hasAudio || "video" === t2 && !e2.hasVideo)) {
            const i3 = new SD(Uw.REMOTE_USER_IS_NOT_PUBLISHED);
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType ").concat(t2, ", remote track is not published")), i3;
          }
          const r2 = await this._subscribeMutex.lock();
          lD.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            if (await this._p2pChannel.hasRemoteMediaWithLock(e2, t2)) await this._p2pChannel.unmuteRemote(e2, t2);
            else try {
              const i4 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC, n3 = "audio" === t2 ? e2._audioMid : e2._videoMid;
              this.store.subscribe(e2.uid, t2, Date.now()), this.store.useP2P && await this._p2pChannel.subscribe(e2, t2, i4, n3);
            } catch (e3) {
              throw e3;
            }
            lD.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: ").concat(t2)), this._defaultStreamFallbackType && this.setStreamFallbackOption(e2.uid, this._defaultStreamFallbackType).catch((e3) => {
              lD.warning("[".concat(this._clientId, "] auto set fallback failed"), e3);
            });
            const i3 = "audio" === t2 ? e2._audioTrack : e2._videoTrack;
            if (!i3) throw new SD(Uw.UNEXPECTED_ERROR, "can not find remote track in user object");
            return i3;
          } catch (t3) {
            throw lD.error("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, " error"), t3), t3;
          } finally {
            r2();
          }
        }
        async _subscribe(e2, t2, i2) {
          if (this.store.useP2P) return this._p2pSubscribe(e2, t2);
          if (Fw(t2, "mediaType", ["audio", "video"]), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          const n2 = this._users.find((t3) => t3 === e2);
          if (!n2) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), t3;
          }
          if (!e2.hasAudio && !e2.hasVideo) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not published");
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), t3;
          }
          if (!(i2 || ("audio" !== t2 || e2.hasAudio && void 0 !== e2._audioSSRC) && ("video" !== t2 || e2.hasVideo && void 0 !== e2._videoSSRC))) {
            const i3 = new SD(Uw.REMOTE_USER_IS_NOT_PUBLISHED);
            throw lD.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType ").concat(t2, ", remote track is not published")), i3;
          }
          let r2 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC, o2 = "audio" === t2 ? e2._audioOrtc : e2._videoOrtc, s2 = "video" === t2 ? e2._rtxSsrcId : void 0, a2 = { stream_type: "audio" === t2 ? ax.AUDIO : ax.VIDEO, ssrcId: r2 };
          const c2 = await this._subscribeMutex.lock();
          lD.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            if (await this._p2pChannel.hasRemoteMediaWithLock(e2, t2)) await this._p2pChannel.unmuteRemote(e2, t2);
            else try {
              const i4 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC;
              void 0 !== i4 && i4 !== r2 && (r2 = i4, o2 = "audio" === t2 ? e2._audioOrtc : e2._videoOrtc, s2 = "video" === t2 ? e2._rtxSsrcId : void 0, a2 = { stream_type: "audio" === t2 ? ax.AUDIO : ax.VIDEO, ssrcId: r2 }), LF.markSubscribeStart(this.store.clientId, r2), this.store.subscribe(e2.uid, t2, Date.now()), await this._p2pChannel.subscribe(e2, t2, r2, s2, o2);
              try {
                this._p2pChannel.isPreSubScribe(r2) || await this._gateway.subscribe(e2.uid, a2, true);
              } catch (i5) {
                if ((null == i5 ? void 0 : i5.code) !== Uw.WS_ABORT) throw await this._p2pChannel.unsubscribe(e2, t2), i5;
                await this._p2pChannel.unsubscribe(e2, t2, true), this._p2pChannel.setPendingRemoteMedia(e2, t2);
              }
              this.store.subscribe(e2.uid, t2, void 0, Date.now()), this._p2pChannel.reportSubscribeEvent(true, null, e2, t2);
            } catch (i4) {
              throw this._p2pChannel.reportSubscribeEvent(false, null == i4 ? void 0 : i4.code, e2, t2), i4;
            }
            lD.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: ").concat(t2)), this._defaultStreamFallbackType && this.setStreamFallbackOption(e2.uid, this._defaultStreamFallbackType).catch((e3) => {
              lD.warning("[".concat(this._clientId, "] auto set fallback failed"), e3);
            });
            const i3 = "audio" === t2 ? e2._audioTrack : e2._videoTrack;
            if (!i3) throw new SD(Uw.UNEXPECTED_ERROR, "can not find remote track in user object");
            return i3;
          } catch (t3) {
            throw lD.error("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, " error"), t3), t3;
          } finally {
            c2();
          }
        }
        async massSubscribe(e2) {
          if (Ww(e2, "subscribeList"), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          const t2 = Date.now(), i2 = /* @__PURE__ */ new Map(), n2 = await this._subscribeMutex.lock();
          lD.info("[".concat(this._clientId, "]start massSubscribe user ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i3);
          }).join("; ")));
          const r2 = (e2 = [...e2]).map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return { user: t3, mediaType: i3 };
          }), o2 = await this._p2pChannel.globalLock();
          try {
            var s2;
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const n4 = e2[t3], { user: o3, mediaType: s3 } = n4;
              if (Fw(s3, "mediaType", ["audio", "video"]), !o3) {
                const e3 = new SD(Uw.INVALID_PARAMS, "user property does not exist in subscribeList item");
                throw lD.error("[".concat(this._clientId, "] user property does not exist in subscribeList item")), e3;
              }
              const a2 = this._users.find((e3) => e3 === o3);
              if (!a2) {
                const i3 = new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
                lD.error("[".concat(this._clientId, "] can not massSubscribe ").concat(o3.uid, ", this user is not in the channel")), r2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              if ("audio" === s3 && (!o3.hasAudio || void 0 === o3._audioSSRC) || "video" === s3 && (!o3.hasVideo || void 0 === o3._videoSSRC)) {
                const i3 = new SD(Uw.REMOTE_USER_IS_NOT_PUBLISHED);
                lD.error("[".concat(this._clientId, "] can not subscribe ").concat(o3.uid, " with mediaType ").concat(s3, ", remote user is not published")), r2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              const c2 = ZU.Video | ZU.LwoVideo, d2 = i2.get(o3);
              if (d2) {
                if ("video" === s3 ? d2 & c2 : d2 & ZU.Audio) {
                  e2.splice(t3, 1), lD.warning("[".concat(this._clientId, "] repeat massSubscribe user:").concat(o3.uid, ", mediaType:").concat(s3, " twice"));
                  continue;
                }
                i2.set(o3, d2 | ("video" === s3 ? c2 : ZU.Audio));
              } else i2.set(o3, "video" === s3 ? c2 : ZU.Audio);
            }
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const n4 = e2[t3], { user: r3, mediaType: o3 } = n4, s3 = ZU.Video | ZU.LwoVideo;
              if (this._p2pChannel.hasRemoteMedia(r3, o3)) {
                await this._p2pChannel.unmuteRemoteNoLock(r3, o3);
                const n5 = i2.get(r3);
                i2.set(r3, "video" === o3 ? n5 ^ s3 : n5 ^ ZU.Audio), e2.splice(t3, 1);
              }
            }
            this.store.massSubscribe(e2.map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), t2);
            let n3 = rr(s2 = Array.from(i2.entries())).call(s2, (e3, t3) => {
              let [i3, n4] = t3;
              if (0 === n4) return e3;
              const r3 = { stream_id: i3.uid, stream_type: n4 };
              return n4 & ZU.Audio && (r3.audio_ssrc = i3._audioSSRC), n4 & ZU.Video && (r3.video_ssrc = i3._videoSSRC), e3.push(r3), e3;
            }, []);
            try {
              e2.length > 0 && await this._p2pChannel.massSubscribeNoLock(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return { user: t3, mediaType: i4, ssrcId: i4 === ax.VIDEO ? t3._videoSSRC : t3._audioSSRC, rtxSsrcId: i4 === ax.VIDEO ? t3._rtxSsrcId : void 0 };
              }));
              const i3 = /* @__PURE__ */ new Map();
              if (n3 = n3.filter((e3) => e3.video_ssrc && !this._p2pChannel.isPreSubScribe(e3.video_ssrc) || e3.audio_ssrc && !this._p2pChannel.isPreSubScribe(e3.audio_ssrc) || !e3.video_ssrc && !e3.audio_ssrc), n3.length > 0) {
                const e3 = await this._gateway.subscribeAll(n3, true);
                ((null == e3 ? void 0 : e3.users) || []).forEach((e4) => {
                  let { stream_id: t3, video_error_code: n4, audio_error_code: r3, error_code: o3 } = e4;
                  (n4 || r3 || o3) && i3.set(t3, { video_error_code: n4, audio_error_code: r3, error_code: o3 });
                });
              }
              if (Array.from(i3.entries()).length > 0) {
                const e3 = [];
                Array.from(i3.entries()).forEach((t3) => {
                  let [i4, n4] = t3;
                  const r3 = this.remoteUsers.find((e4) => e4.uid === i4);
                  if (r3) {
                    let t4;
                    n4.error_code || n4.video_error_code && n4.audio_error_code ? t4 = void 0 : n4.video_error_code ? t4 = ax.VIDEO : n4.audio_error_code && (t4 = ax.AUDIO), e3.push({ user: r3, mediaType: t4 });
                  }
                }), e3.length > 0 && await this._p2pChannel.massUnsubscribeNoLock(e3);
              }
              for (const e3 of r2) {
                const t3 = i3.get(e3.user.uid);
                if (t3) {
                  const i4 = t3.error_code || "audio" === e3.mediaType && t3.audio_error_code || "video" === e3.mediaType && t3.video_error_code;
                  if (i4) {
                    const t4 = Ox(i4);
                    lD.error("user:".concat(e3.user.uid, " mediaType:").concat(e3.mediaType, " has massSubscribe error ").concat(t4.desc)), e3.error = new SD(Uw.SUBSCRIBE_FAILED, "code ".concat(i4, ": ").concat(t4.desc));
                  }
                }
                e3.error || ("video" === e3.mediaType ? e3.track = e3.user.videoTrack : e3.track = e3.user.audioTrack);
              }
              return this.store.massSubscribe(r2.filter((e3) => !e3.error).map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), void 0, Date.now()), r2.forEach((e3) => {
                var i4;
                TD.subscribe(this.store.sessionId, { succ: !!e3.error, ec: (null === (i4 = e3.error) || void 0 === i4 ? void 0 : i4.code) || null, video: e3.mediaType === ax.VIDEO, audio: e3.mediaType === ax.AUDIO, peerid: e3.user.uid, subscribeRequestid: e3.mediaType === ax.VIDEO ? e3.user._videoSSRC : e3.user._audioSSRC, p2pid: this.store.p2pId, eventElapse: Math.floor(performance.now() - t2), preSsrc: this._p2pChannel.isPreSubScribe(e3.user._videoSSRC) }, true);
              }), lD.info("[".concat(this._clientId, "] massSubscribe success ").concat(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i4);
              }).join("; "))), r2;
            } catch (t3) {
              throw await this._p2pChannel.massUnsubscribeNoLock(e2), t3;
            }
          } finally {
            o2(), n2();
          }
        }
        async unsubscribe(e2, t2, i2) {
          if (!(e2 instanceof FF)) {
            const t3 = this.remoteUsers.find((t4) => t4.uid === e2);
            if (!t3) throw new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            e2 = t3;
          }
          if (t2 || this.store.useP2P) {
            if ("datachannel" === t2) return this._unsubscribeDataChannel(e2, i2);
          } else await this._unsubscribeDataChannel(e2, i2);
          if (t2 && Fw(t2, "mediaType", ["audio", "video"]), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't unsubscribe stream, haven't joined yet!");
          const n2 = this._users.find((t3) => t3 === e2);
          if (!n2) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            throw lD.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, ", user is not in the channel")), t3;
          }
          lD.info("[".concat(this._clientId, "] unsubscribe uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
          const r2 = await this._subscribeMutex.lock();
          try {
            if (this.store.useP2P) await this._p2pChannel.unsubscribe(e2, t2);
            else {
              const i3 = await this._p2pChannel.unsubscribe(e2, t2);
              i3 && await this._gateway.unsubscribe(i3, e2.uid), t2 && "audio" !== t2 || (e2._audio_pre_subscribed = false), t2 && "video" !== t2 || (e2._video_pre_subscribed = false), e2._is_pre_created && TO(this._users, e2), lD.info("[".concat(this._clientId, "] unsubscribe success uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
            }
          } catch (t3) {
            if (t3.code === Uw.DISCONNECT_P2P) return void lD.warning("disconnecting p2p, abort unsubscribe request.");
            throw lD.error("[".concat(this._clientId, "] unsubscribe user ").concat(e2.uid, " error"), t3.toString()), t3;
          } finally {
            r2();
          }
        }
        async _unsubscribeDataChannel(e2, t2) {
          if (t2 && Bw(t2, "id", 0, 65535, true), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't unsubscribe datachannel, haven't joined yet!");
          const i2 = this._users.find((t3) => t3 === e2);
          if (!i2) {
            const t3 = new SD(Uw.INVALID_REMOTE_USER, "user is not in the channel");
            throw lD.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, ", user is not in the channel")), t3;
          }
          let n2;
          if ("number" == typeof t2) {
            const i3 = e2._dataChannels.find((e3) => e3.id === t2);
            i3 && (n2 = [i3]);
          } else n2 = e2._dataChannels;
          if (void 0 === n2) {
            const i3 = new SD(Uw.REMOTE_USER_IS_NOT_PUBLISHED);
            throw lD.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, " with channelId ").concat(t2, ", remote datachannel is not published")), i3;
          }
          lD.info("[".concat(this._clientId, "] unsubscribe uid: ").concat(e2.uid, ", mediaType: datachannel, ids: ").concat(n2.map((e3) => e3.id)));
          try {
            const t3 = await this._p2pChannel.unsubscribeDataChannel(e2, n2);
            t3 && await this._gateway.unsubscribeDataChannel(t3, e2.uid), lD.info("[".concat(this._clientId, "] unsubscribe datachannel success uid: ").concat(e2.uid, ", mediaType: datachannel, ids: ").concat(t3));
          } catch (t3) {
            if (t3.code === Uw.DISCONNECT_P2P) return void lD.warning("disconnecting p2p, abort unsubscribe request.");
            throw lD.error("[".concat(this._clientId, "] unsubscribe user ").concat(e2.uid, " error"), t3.toString()), t3;
          }
        }
        async massUnsubscribe(e2) {
          if (Ww(e2, "unsubscribeList"), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't unsubscribeAll stream, haven't joined yet!");
          lD.info("[".concat(this._clientId, "] start massUnsubscribe ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i2 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i2, ";");
          }).join())), e2 = [...e2];
          const t2 = /* @__PURE__ */ new Map();
          for (let i2 = e2.length - 1; i2 >= 0; i2--) {
            const { user: n2, mediaType: r2 } = e2[i2];
            if (!n2) {
              const e3 = new SD(Uw.INVALID_PARAMS, "user property does not exist in unsubscribeList item");
              throw lD.error("[".concat(this._clientId, "] user property does not exist in unsubscribeList item")), e3;
            }
            Fw(r2, "mediaType", ["video", "audio", void 0]);
            const o2 = this._users.find((e3) => e3 === n2);
            if (!o2) {
              lD.warning("[".concat(this._clientId, "] can not unsubscribe ").concat(n2.uid, ", user is not in the channel")), e2.splice(i2, 1);
              continue;
            }
            const s2 = ZU.Video | ZU.LwoVideo;
            if (t2.has(n2)) {
              const o3 = t2.get(n2);
              let a2;
              switch (r2) {
                case "video":
                  a2 = o3 & s2;
                  break;
                case "audio":
                  a2 = o3 & ZU.Audio;
                  break;
                default:
                  a2 = o3 & (ZU.Audio | s2);
              }
              if (a2) {
                lD.warning("[".concat(this._clientId, "] repeat massUnsubscribe user:").concat(n2.uid, ",mediaType:").concat(r2, " twice.")), e2.splice(i2, 1);
                continue;
              }
              r2 ? "audio" === r2 ? t2.set(n2, o3 | ZU.Audio) : "video" === r2 && t2.set(n2, o3 | s2) : t2.set(n2, o3 | ZU.Audio | s2);
            } else r2 ? "audio" === r2 ? t2.set(n2, ZU.Audio) : "video" === r2 && t2.set(n2, s2) : t2.set(n2, ZU.Audio | s2);
          }
          try {
            const t3 = await this._p2pChannel.massUnsubscribe(e2);
            t3 && await this._gateway.massUnsubscribe(t3), lD.info("[".concat(this._clientId, "] massUnsubscribe success ").concat(e2.map((e3) => {
              let { user: t4, mediaType: i2 } = e3;
              return "user: ".concat(null == t4 ? void 0 : t4.uid, ", mediaType: ").concat(i2, ";");
            }).join()));
          } catch (e3) {
            if (e3.code === Uw.DISCONNECT_P2P) return void lD.warning("[".concat(this._clientId, "] disconnecting p2p, abort unsubscribe request."));
            throw lD.error("[".concat(this._clientId, "] massUnsubscribe error"), e3.toString()), e3;
          }
        }
        async setLowStreamParameter(e2) {
          !function(e3) {
            if (!e3) throw new xw(Uw.INVALID_PARAMS);
            Hw(e3.width) || jw(e3.width, "streamParameter.width"), Hw(e3.height) || jw(e3.height, "streamParameter.height"), Hw(e3.framerate) || jw(e3.framerate, "streamParameter.framerate"), Hw(e3.bitrate) || Bw(e3.bitrate, "streamParameter.bitrate");
          }(e2), (!e2.width && e2.height || e2.width && !e2.height) && lD.warning("[".concat(this._clientId, "] The width and height parameters take effect only when both are set")), lD.info("[".concat(this._clientId, "] set low stream parameter to"), JSON.stringify(e2));
          const t2 = this._configDistribute.getLowStreamConfigDistribute();
          if (t2 && t2.bitrate && e2.bitrate && t2.bitrate < e2.bitrate && (e2.bitrate = t2.bitrate), this._lowStreamParameter = e2, this._isDualStreamEnabled) return this._p2pChannel.updateVideoStreamParameter(e2, ux.LocalVideoLowTrack);
        }
        async enableDualStream() {
          if (!RD().supportDualStream) throw TD.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), new SD(Uw.NOT_SUPPORTED, "Your browser is not support dual stream");
          if (this._isDualStreamEnabled) throw new SD(Uw.INVALID_OPERATION, "Dual stream is already enabled");
          if (this._p2pChannel.canPublishLowStream()) try {
            await this._publishLowStream();
          } catch (e2) {
            throw TD.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), e2;
          }
          this._isDualStreamEnabled = true, TD.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: true }), lD.info("[".concat(this._clientId, "] enable dual stream"));
        }
        async disableDualStream() {
          if (this._isDualStreamEnabled) {
            if (!this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
            if (this._p2pChannel.getLocalMedia(ux.LocalVideoLowTrack)) try {
              const e2 = await this._p2pChannel.unpublishLowStream();
              e2 && await this._gateway.unpublish(e2, this._joinInfo.stringUid || this._joinInfo.uid);
            } catch (e2) {
              throw TD.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: false }), e2;
            }
            this._isDualStreamEnabled = false, TD.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: true }), lD.info("[".concat(this._clientId, "] disable dual stream"));
          }
        }
        async setClientRole(e2, t2) {
          if (function(e3) {
            Fw(e3, "role", ["audience", "host"]);
          }(e2), t2 && cO(t2), "rtc" === this.mode || "p2p" === this.mode) throw lD.warning("[".concat(this._clientId, "]").concat(this.mode, " mode can not use setClientRole")), new SD(Uw.INVALID_OPERATION, "".concat(this.mode, " mode can not use setClientRole"));
          if (t2 && t2.level && "host" === e2) throw new SD(Uw.INVALID_OPERATION, "host mode can not set audience latency level");
          if ("audience" === e2 && this._p2pChannel.hasLocalMedia()) throw new SD(Uw.INVALID_OPERATION, "can not set client role to audience when publishing stream");
          const i2 = this._config.role;
          this._joinInfo && (this._joinInfo.role = e2), e2 !== i2 && MN("ENABLE_ROLE_SELECT_EDGE") ? (this._gateway.updateClientRole(e2, t2), this._config.role = e2, this._gateway.reconnect("recover", lO.REGIONAL_DISTRIBUTION)) : (await this._gateway.setClientRole(e2, t2), this._config.role = e2), lD.info("[".concat(this._clientId, "] set client role to ").concat(e2, ", level: ").concat(t2 && t2.level));
        }
        async _setClientRoleOptions(e2) {
          if ("rtc" === this.mode || "p2p" === this.mode) return;
          if ("audience" !== this._config.role || this._p2pChannel.hasLocalMedia()) return;
          let t2 = false;
          try {
            e2 && cO(e2), await this._gateway.setClientRole(this._config.role, e2), t2 = true;
          } catch (e3) {
          } finally {
            lD.info("[".concat(this._clientId, "] set client role options ").concat(t2 ? "succeed" : "failed", ", options is ").concat(e2));
          }
        }
        getRemoteInboundOffset() {
          var e2;
          const t2 = null === (e2 = this._p2pChannel.getStats()) || void 0 === e2 ? void 0 : e2.audioSend[0];
          if (!t2 || !t2.timestamp) return 0;
          const i2 = t2.timestamp - Date.now();
          return Math.abs(i2) > 1e3 + t2.rttMs + 100 ? this.ntpAlignErrorCount += 1 : this.ntpAlignErrorCount = 0, this.ntpAlignErrorCount >= 3 ? i2 : 0;
        }
        getNtpWallTimeInMs() {
          return "visible" === document.visibilityState && (this.remoteInboundOffset = this.getRemoteInboundOffset()), this.remoteInboundOffset + Date.now() + this._gateway.ntpOffset;
        }
        setProxyServer(e2, t2) {
          if (Gw(e2, "proxyServer"), !t2) {
            if ("DISCONNECTED" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Set proxy server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint) throw new SD(Uw.INVALID_OPERATION, "You have already set the proxy");
          }
          this._proxyServer = e2, TD.setProxyServer(this._proxyServer), lD.setProxyServer(this._proxyServer), lD.info("[".concat(this._clientId, "] Set proxy server ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setTurnServer(e2, t2) {
          if (Array.isArray(e2) || (e2 = [e2]), !t2) {
            if ("DISCONNECTED" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Set turn server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint) throw new SD(Uw.INVALID_OPERATION, "You have already set the proxy");
          }
          if (sO(e2)) return this._turnServer = { servers: e2, mode: "original-manual" }, void lD.info("[".concat(this._clientId, "] Set original turnserver ").concat(t2 ? "by initialize call" : "", " success: ").concat(e2.map((e3) => e3.urls).join(","), "."));
          e2.forEach((e3) => aO(e3)), this._turnServer = { servers: e2, mode: "manual" }, lD.info("[".concat(this._clientId, "] Set turnserver ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setLicense(e2) {
          if ("DISCONNECTED" !== this.connectionState) {
            throw new SD(Uw.INVALID_OPERATION, "you should set license before join channel");
          }
          if (Gw(e2, "license", 32, 32), !/^[A-Za-z\d]+$/.test(e2)) throw new SD(Uw.INVALID_PARAMS, "license should only contains characters from A-Z a-z 0-9");
          this._license = e2, lD.info("[".concat(this._clientId, "] set license success"), e2);
        }
        startProxyServer(e2) {
          if ("DISCONNECTED" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Start proxy server before join channel");
          if (this._proxyServer || "manual" === this._turnServer.mode || this._useLocalAccessPoint) throw new SD(Uw.INVALID_OPERATION, "You have already set the proxy");
          const t2 = [3, 4, 5];
          let i2;
          switch (void 0 === e2 && (e2 = 3), e2) {
            case 1:
            case 2:
              throw new SD(Uw.NOT_SUPPORTED, "proxy mode 1/2 has been deprecated and not supported.");
            case 3:
              i2 = "proxy3";
              break;
            case 4:
              i2 = "proxy4";
              break;
            case 5:
              i2 = "proxy5";
              break;
            default:
              throw new SD(Uw.INVALID_PARAMS, "proxy server mode must be ".concat(t2.join("|")));
          }
          this._cloudProxyServerMode = i2, this.store.cloudProxyServerMode = i2, lD.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode);
        }
        stopProxyServer() {
          if ("DISCONNECTED" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "Stop proxy server after leave channel");
          TD.setProxyServer(), lD.setProxyServer(), this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled", lD.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode), this._proxyServer = void 0, this._turnServer = { mode: "auto", servers: [] };
        }
        setLocalAccessPointsV2(e2) {
          if (!e2.accessPoints) throw new SD(Uw.INVALID_PARAMS, "accessPoints is required.");
          Ww(e2.accessPoints.serverList, "accessPoints.serverList"), Gw(e2.accessPoints.domain, "accessPoints.domain");
          const t2 = (e3, t3) => {
            Bw(e3, t3, 0, 65535, true);
          };
          let i2 = 443;
          if (e2.accessPoints.port && (t2(e2.accessPoints.port, "accessPoints.port"), i2 = e2.accessPoints.port), this._proxyServer || "disabled" !== this._cloudProxyServerMode) throw new SD(Uw.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          MN("CLOSE_AFB_FOR_LOCAL_AP") && (kN("JOIN_WITH_FALLBACK_SIGNAL_PROXY", false), kN("JOIN_WITH_FALLBACK_MEDIA_PROXY", false));
          const n2 = /^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/, r2 = e2.accessPoints.domain, o2 = e2.accessPoints.serverList.map((e3) => n2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(r2) : e3), s2 = o2.map((e3) => "".concat(e3, ":").concat(i2));
          this._useLocalAccessPoint = true, this._setLocalAPVersion = 2, kN("WEBCS_DOMAIN", s2), kN("WEBCS_DOMAIN_BACKUP_LIST", s2), kN("GATEWAY_DOMAINS", [r2]), e2.report && e2.report.hostname && Array.isArray(e2.report.hostname) && e2.report.hostname.length ? (Ww(e2.report.hostname, "report.hostname"), kN("EVENT_REPORT_DOMAIN", e2.report.hostname[0]), kN("EVENT_REPORT_BACKUP_DOMAIN", e2.report.hostname[1] || e2.report.hostname[0])) : (kN("EVENT_REPORT_DOMAIN", o2[0]), kN("EVENT_REPORT_BACKUP_DOMAIN", o2[1] || o2[0]));
          let a2 = 6443;
          e2.report && e2.report.port && (t2(e2.report.port, "report.port"), a2 = e2.report.port), kN("STATS_COLLECTOR_PORT", a2), e2.report ? kN("ENABLE_EVENT_REPORT", true) : kN("ENABLE_EVENT_REPORT", false);
          let c2 = "";
          e2.log && e2.log.hostname && Array.isArray(e2.log.hostname) && e2.log.hostname.length ? (Ww(e2.log.hostname, "log.hostname"), c2 = e2.log.hostname[0]) : c2 = o2[0];
          let d2 = 6444;
          e2.log && e2.log.port && (t2(e2.log.port, "log.port"), d2 = e2.log.port), kN("LOG_UPLOAD_SERVER", "".concat(c2, ":").concat(d2));
          let l2 = [];
          e2.cds && e2.cds.hostname && Array.isArray(e2.cds.hostname) && e2.cds.hostname.length ? (Ww(e2.cds.hostname, "cds.hostname"), l2 = e2.cds.hostname) : l2 = o2;
          let u2 = 443;
          e2.cds && e2.cds.port && (t2(e2.cds.port, "cds.port"), u2 = e2.cds.port), kN("CDS_AP", l2.map((e3) => "".concat(e3, ":").concat(u2))), e2.cds ? kN("ENABLE_CONFIG_DISTRIBUTE", true) : kN("ENABLE_CONFIG_DISTRIBUTE", false), lD.info("set local access point v2 success");
        }
        setLocalAccessPoints(e2, t2) {
          if (Ww(e2, "serverList"), Gw(t2, "domain"), this._proxyServer || "disabled" !== this._cloudProxyServerMode) throw new SD(Uw.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          const i2 = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
          e2 = e2.map((e3) => i2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(t2) : e3), this._useLocalAccessPoint = true, this._setLocalAPVersion = 1, kN("WEBCS_DOMAIN", e2), kN("WEBCS_DOMAIN_BACKUP_LIST", e2), kN("GATEWAY_DOMAINS", [t2]), kN("EVENT_REPORT_DOMAIN", e2[0]), kN("EVENT_REPORT_BACKUP_DOMAIN", e2[1] || e2[0]), kN("LOG_UPLOAD_SERVER", "".concat(e2[0], ":6444")), lD.info("[".concat(this._clientId, "] set local access point success"));
        }
        async setRemoteDefaultVideoStreamType(e2) {
          if (Fw(e2, "streamType", [0, 1, 4, 5, 6, 7, 8, 9]), this._remoteDefaultVideoStreamType = e2, this._joinInfo) try {
            await this._gateway.setDefaultRemoteVideoStreamType(e2), this._joinInfo.defaultVideoStream = this._remoteDefaultVideoStreamType;
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] set default remote video stream type error"), e3.toString()), e3;
          }
          else lD.debug("[".concat(this._clientId, "] haven't joined yet, cache remoteDefaultVideoStreamType ").concat(e2));
        }
        async setRemoteVideoStreamType(e2, t2) {
          Fw(t2, "streamType", [0, 1, 4, 5, 6, 7, 8, 9]);
          try {
            await this._gateway.setRemoteVideoStreamType(e2, t2), setTimeout(() => {
              const t3 = this._users.find((t4) => t4.uid === e2);
              t3 && t3.videoTrack && t3.videoTrack.updateMediaStreamTrackResolution();
            }, 2e3);
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] set remote video stream type error"), e3.toString()), e3;
          }
          lD.info("[".concat(this._clientId, "] set remote ").concat(e2, " video stream type to ").concat(t2)), this._remoteStreamTypeCacheMap.set(e2, t2);
        }
        async setStreamFallbackOption(e2, t2) {
          Fw(t2, "fallbackType", [0, 1, 2, 3, 4, 5, 6, 7, 8]);
          try {
            await this._gateway.setStreamFallbackOption(e2, t2);
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] set stream fallback option"), e3.toString()), e3;
          }
          lD.info("[".concat(this._clientId, "] set remote ").concat(e2, " stream fallback type to ").concat(t2)), this._streamFallbackTypeCacheMap.set(e2, t2);
        }
        setEncryptionConfig(e2, t2, i2, n2) {
          !function(e3) {
            Fw(e3, "encryptionMode", ["aes-128-xts", "aes-256-xts", "aes-128-ecb", "sm4-128-ecb", "aes-128-gcm", "aes-256-gcm", "aes-128-gcm2", "aes-256-gcm2", "none"]);
          }(e2), Gw(t2, "secret");
          const r2 = ["aes-128-gcm2", "aes-256-gcm2"];
          if (kn(r2).call(r2, e2)) {
            if (!i2 || !(i2 instanceof Uint8Array && 32 === i2.length)) throw new SD(Uw.INVALID_PARAMS, "salt must be an Uint8Array and exactly equal to 32 bytes");
          } else if (i2) throw new SD(Uw.INVALID_PARAMS, "current encrypt mode does not need salt");
          if (n2) {
            if (Vw(n2, "encryptDataStream"), !kn(r2).call(r2, e2)) throw new SD(Uw.INVALID_PARAMS, "current encrypt mode does not support data stream");
            this._encryptDataStream = true;
          }
          new RegExp(`^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*,.<>?/:;'"|{}\\[\\]])(?=.{8,})`).test(t2) || lD.warning("The secret is not strong:\n      The secret must contain at least 1 lowercase alphabetical character,\n      The secret must contain at least 1 uppercase alphabetical character,\n      The secret must contain at least 1 numeric character,\n      The secret must contain at least one special character,\n      The secret must be eight characters or longer.\n      "), this._encryptionMode = e2, this._encryptionSecret = t2, i2 && (this._encryptionSalt = AO(i2));
        }
        async renewToken(e2) {
          if (Gw(e2, "token", 1, 2047), !this._key || !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "renewToken should not be called before user join");
          const t2 = this._key;
          this._key = e2, this._joinInfo && (this._joinInfo.token = e2);
          const i2 = await this._renewTokenMutex.lock();
          try {
            if (MN("USE_NEW_TOKEN")) {
              lD.debug("[".concat(this._clientId, "] start renew token with ticket from unilbs"));
              const t3 = await bF(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || qO);
              lD.debug("[".concat(this._clientId, "] get ticket from unilbs success")), await this._gateway.renewToken({ token: e2, ticket: t3 });
            } else lD.debug("[".concat(this._clientId, "] start renew token without ticket")), await this._gateway.renewToken({ token: e2 });
            lD.debug("[".concat(this._clientId, "] renewToken success"));
          } catch (e3) {
            throw this._key = t2, this._joinInfo.token = t2, lD.error("[".concat(this._clientId, "] renewToken failed"), e3.toString()), e3;
          } finally {
            i2();
          }
        }
        enableAudioVolumeIndicator() {
          this._audioVolumeIndicationInterval ? lD.warning("you have already enabled audio volume indicator!") : this._audioVolumeIndicationInterval = window.setInterval(() => {
            const e2 = this._p2pChannel.getAudioLevels();
            this.safeEmit(dO.VOLUME_INDICATOR, e2);
          }, MN("AUDIO_VOLUME_INDICATION_INTERVAL") || 2e3);
        }
        getRTCStats() {
          const e2 = this._statsCollector.getRTCStats(), t2 = this._gateway.getInChannelInfo();
          return e2.Duration = Math.round(t2.duration / 1e3), e2;
        }
        async startLiveStreaming(e2, t2) {
          if (!t2) {
            if ("h264" !== this.codec) throw new SD(Uw.LIVE_STREAMING_INVALID_RAW_STREAM, "raw streaming is only support h264");
            if (!this._p2pChannel.hasLocalMedia()) throw new SD(Uw.LIVE_STREAMING_INVALID_RAW_STREAM, "can not find stream to raw streaming");
          }
          if (this._liveRawStreamingClient && this._liveRawStreamingClient.hasUrl(e2) || this._liveTranscodeStreamingClient && this._liveTranscodeStreamingClient.hasUrl(e2)) throw new SD(Uw.LIVE_STREAMING_TASK_CONFLICT);
          const i2 = t2 ? UU.TRANSCODE : UU.RAW;
          return this._createLiveStreamingClient(i2).startLiveStreamingTask(e2, i2);
        }
        setLiveTranscoding(e2) {
          return this._createLiveStreamingClient(UU.TRANSCODE).setTranscodingConfig(e2);
        }
        async stopLiveStreaming(e2) {
          const t2 = [this._liveRawStreamingClient, this._liveTranscodeStreamingClient].filter((t3) => t3 && t3.hasUrl(e2));
          if (!t2.length) throw new SD(Uw.INVALID_PARAMS, "can not find live streaming url to stop");
          await np.all(t2.map((t3) => t3 && t3.stopLiveStreamingTask(e2)));
        }
        async startChannelMediaRelay(e2) {
          VF(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.startChannelMediaRelay(e2);
        }
        async updateChannelMediaRelay(e2) {
          VF(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.updateChannelMediaRelay(e2);
        }
        async stopChannelMediaRelay() {
          const e2 = this._createChannelMediaRelayClient();
          await e2.stopChannelMediaRelay(), this._statsCollector.onStatsChanged && (this._statsCollector.onStatsChanged = void 0);
        }
        sendAudioMetadata(e2) {
          this._p2pChannel instanceof YB && this._p2pChannel.addAudioMetadata(e2);
        }
        async sendStreamMessage(e2) {
          var t2;
          let i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (!this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "can not send data stream, not joined");
          if (("string" == typeof e2 || e2 instanceof Uint8Array) && (e2 = { payload: e2 }), "string" == typeof e2.payload) {
            const t3 = new TextEncoder();
            e2.payload = t3.encode(e2.payload);
          }
          let n2 = false;
          this._encryptDataStream && this._encryptDataStreamIv && this._encryptDataStreamKey && window.crypto.subtle && kn(t2 = ["aes-128-gcm2", "aes-256-gcm2"]).call(t2, this._encryptionMode) && (n2 = true, e2.payload = await async function(e3, t3, i3) {
            var n3;
            const r2 = rr(n3 = Array.from(i3)).call(n3, (e4, t4) => e4 + t4, 0), o2 = { serverTs: 0, seq: jN++, length: i3.length, checkSum: r2 }, s2 = new Uint8Array(BO(r2, 2)), a2 = new ArrayBuffer(10), c2 = new DataView(a2);
            c2.setUint32(0, o2.serverTs), c2.setUint16(4, o2.seq), c2.setUint16(6, o2.length), c2.setUint16(8, o2.checkSum);
            const d2 = 16 - i3.length % 16;
            i3 = wO(i3, new Uint8Array(d2));
            const l2 = await window.crypto.subtle.encrypt({ name: "AES-GCM", iv: e3, tagLength: 128, additionalData: s2 }, t3, i3);
            return wO(new Uint8Array(a2), new Uint8Array(l2));
          }(this._encryptDataStreamIv, this._encryptDataStreamKey, e2.payload));
          if (new Blob([e2.payload]).size > 1024) throw new SD(Uw.INVALID_PARAMS, n2 ? "encrypted stream message out of range." : "stream message out of range.");
          return this._gateway.signal.request(OU.DATA_STREAM, { payload: AO(e2.payload), syncWithAudio: e2.syncWithAudio, sendTs: Date.now() - XB }, !i2);
        }
        sendMetadata(e2) {
          if (!this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "can not send metadata, not joined");
          if (new Blob([e2]).size > 1024) throw new SD(Uw.METADATA_OUT_OF_RANGE);
          return this._gateway.signal.request(OU.SEND_METADATA, { session_id: this._joinInfo.sid, metadata: AO(e2) });
        }
        async sendCustomReportMessage(e2) {
          if (Array.isArray(e2) || (e2 = [e2]), e2.forEach(hD), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "can not send custom report, not joined");
          await TD.sendCustomReportMessage(this._joinInfo.sid, e2);
        }
        getLocalAudioStats() {
          return this._statsCollector.getLocalAudioTrackStats();
        }
        getRemoteAudioStats() {
          return this._statsCollector.getRemoteAudioTrackStats();
        }
        getLocalVideoStats() {
          return this._statsCollector.getLocalVideoTrackStats();
        }
        getRemoteVideoStats() {
          return this._statsCollector.getRemoteVideoTrackStats();
        }
        getRemoteNetworkQuality() {
          return this._statsCollector.getRemoteNetworkQualityStats();
        }
        async pickSVCLayer(e2, t2) {
          Fw(t2.spatialLayer, "spatialLayer", [0, 1, 2, 3]), Fw(t2.temporalLayer, "temporalLayer", [0, 1, 2, 3]);
          try {
            await this._gateway.pickSVCLayer(e2, t2);
          } catch (e3) {
            throw lD.error("[".concat(this._clientId, "] pick SVC layer failed"), e3.toString()), e3;
          }
        }
        async setRTMConfig(e2) {
          const { apRTM: t2 = false, rtmFlag: i2 } = e2;
          if (Vw(t2, "apRTM"), Bw(i2, "rtmFlag", 0), this._rtmConfig.apRTM = t2, this._rtmConfig.rtmFlag = i2, lD.debug("[".concat(this._clientId, "] setRTMconfig ").concat(JSON.stringify(e2), " in ").concat(this.connectionState, " state")), ("CONNECTED" === this.connectionState || "RECONNECTING" === this.connectionState) && this._joinInfo) return this._joinInfo.apRTM = t2, this._joinInfo.rtmFlag = i2, this._gateway.setRTM2Flag(i2);
        }
        _reset() {
          if (lD.debug("[".concat(this._clientId, "] reset client")), function(e2) {
            const t2 = UM.indexOf(e2);
            -1 !== t2 && UM.splice(t2, 1);
          }(this._clientId), this.store.hasStartJoinChannel = false, this.store.isABTestSuccess = false, this._axiosCancelSource.cancel(), this._axiosCancelSource = qb.CancelToken.source(), this._streamFallbackTypeCacheMap = /* @__PURE__ */ new Map(), this._remoteStreamTypeCacheMap = /* @__PURE__ */ new Map(), this._configDistribute.stopGetConfigDistribute(), this._joinInfo && Sj(this._joinInfo), this._joinInfo = void 0, this._proxyServer = void 0, this._defaultStreamFallbackType = void 0, this._sessionId && TD.removeSid(this._sessionId), this._sessionId = null, this.store.sessionId = null, this._statsCollector.reset(), this._key = void 0, this._appId = void 0, this._uid = void 0, this.store.uid = void 0, this._channelName = void 0, this._encryptionMode = "none", this._encryptionSecret = null, this._encryptionSalt = null, this._encryptDataStreamKey = null, this._encryptDataStreamIv = null, this._pendingPublishedUsers = [], this._users.forEach((e2) => {
            e2._audioTrack && e2._audioTrack._destroy(), e2._videoTrack && e2._videoTrack._destroy(), e2._dataChannels && (e2._dataChannels.forEach((e3) => e3._close()), e2._dataChannels.length = 0);
          }), this._users = [], this._audioVolumeIndicationInterval && (window.clearInterval(this._audioVolumeIndicationInterval), this._audioVolumeIndicationInterval = void 0), "fallback" === this._cloudProxyServerMode && (this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled"), this._p2pChannel.reset(), this._publishMutex = new KO("client-publish", this._clientId), this._subscribeMutex = new KO("client-subscribe", this._clientId), this._networkQualityInterval && (window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = void 0), this._liveRawStreamingClient && (this._liveRawStreamingClient.terminate(), this._liveRawStreamingClient.removeAllListeners(), this._liveRawStreamingClient = void 0), this._liveTranscodeStreamingClient && (this._liveTranscodeStreamingClient.terminate(), this._liveTranscodeStreamingClient.removeAllListeners(), this._liveTranscodeStreamingClient = void 0), this._channelMediaRelayClient && (this._channelMediaRelayClient.dispose(), this._channelMediaRelayClient = void 0), this._inspect) try {
            this._inspect.close(), this._inspect = void 0;
          } catch (e2) {
          }
          if (this._moderation) try {
            this.setImageModeration(false);
          } catch (e2) {
          }
        }
        _startSession(e2, t2) {
          var i2;
          const n2 = e2 || kO();
          e2 ? lD.debug("[".concat(this._clientId, "] new Session ").concat(n2)) : lD.debug("[".concat(this._clientId, "] renewSession ").concat(this._sessionId, " => ").concat(n2));
          const r2 = e2 ? "" : this._sessionId || "";
          this._sessionId = n2, this.store.sessionId = n2, TD.addSid(n2);
          const o2 = { lts: (/* @__PURE__ */ new Date()).getTime(), mode: this.mode, buildFormat: 1, stringUid: (null == t2 ? void 0 : t2.stringUid) || (null === (i2 = this._joinInfo) || void 0 === i2 ? void 0 : i2.stringUid), channelProfile: "live" === this.mode ? 1 : 0, channelMode: 0, isABTestSuccess: Number(this._configDistribute.isSuccess), lsid: r2, clientRole: "audience" === this.role ? 2 : 1 };
          TD.sessionInit(this._sessionId, zG({ cname: t2.channel, appid: t2.appId }, o2)), this._joinInfo && (this._joinInfo.sid = n2), this._gateway.joinInfo && (this._gateway.joinInfo.sid = n2);
        }
        async _publishHighStream(e2) {
          if (!this._joinInfo || void 0 === this._uid) throw new SD(Uw.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          if ("auto" === this._turnServer.mode && MN("FORCE_TURN") && !MN("TURN_ENABLE_TCP") && !MN("TURN_ENABLE_UDP")) throw new SD(Uw.UNEXPECTED_ERROR, "force TURN With No TURN Configuration");
          lD.debug("[".concat(this._clientId, "] publish high stream"));
          try {
            const i2 = await this._p2pChannel.publish(e2, this._isDualStreamEnabled, this._lowStreamParameter);
            if (this.store.useP2P) {
              const e3 = (await i2.next()).value;
              if (e3) {
                try {
                  await this._gateway.sendExtensionMessage(vx.PUBLISH, e3, true);
                } catch (e4) {
                  throw i2.throw(e4), e4;
                }
                await i2.next();
              }
              this._p2pChannel.reportPublishEvent(true, null);
            } else {
              const n2 = (await i2.next()).value;
              if (n2) {
                var t2;
                let e3;
                try {
                  e3 = await this._gateway.publish(this._uid, n2, true);
                } catch (e4) {
                  if (e4.code !== Uw.DISCONNECT_P2P) throw i2.throw(e4), e4;
                }
                await i2.next((null === (t2 = e3) || void 0 === t2 ? void 0 : t2.ortc) || []);
              }
              this._p2pChannel.reportPublishEvent(true, null);
              for (const t3 of e2) t3 instanceof Dk && t3._encoderConfig && this._gateway.setVideoProfile(t3._encoderConfig).catch((e3) => {
                lD.debug("[".concat(this._clientId, "] stop setVideoProfile, because websocket is closed"));
              }), !t3.muted && t3.enabled || await this._p2pChannel.muteLocalTrack(t3);
            }
          } catch (t3) {
            if (this._p2pChannel.reportPublishEvent(false, null == t3 ? void 0 : t3.code, e2), (null == t3 ? void 0 : t3.code) === Uw.WS_ABORT) return;
            throw t3;
          }
        }
        async _publishLowStream() {
          if (!this._joinInfo || void 0 === this._uid) throw new SD(Uw.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          lD.debug("[".concat(this._clientId, "] publish low stream"));
          const e2 = this._configDistribute.getLowStreamConfigDistribute();
          e2 && e2.bitrate && (this._lowStreamParameter || (this._lowStreamParameter = { width: 160, height: 120, framerate: 15, bitrate: 50 }), this._lowStreamParameter && this._lowStreamParameter.bitrate && e2.bitrate < this._lowStreamParameter.bitrate && (this._lowStreamParameter.bitrate = e2.bitrate));
          try {
            const e3 = await this._p2pChannel.publishLowStream(this._lowStreamParameter), i2 = (await e3.next()).value;
            if (i2) {
              var t2;
              let n2;
              try {
                n2 = await this._gateway.publish(this._uid, i2, true);
              } catch (t3) {
                if (t3.code !== Uw.DISCONNECT_P2P) throw e3.throw(t3), t3;
              }
              e3.next((null === (t2 = n2) || void 0 === t2 ? void 0 : t2.ortc) || []), this._p2pChannel.reportPublishEvent(true, null, void 0, true);
            }
          } catch (e3) {
            if (this._p2pChannel.reportPublishEvent(false, null == e3 ? void 0 : e3.code, void 0, true), (null == e3 ? void 0 : e3.code) === Uw.WS_ABORT) return;
            throw e3;
          }
        }
        _createLiveStreamingClient(e2) {
          const t2 = () => {
            if (!this._joinInfo || !this._appId) {
              return new SD(Uw.INVALID_OPERATION, "can not create live streaming client, please join channel first").throw();
            }
            const e3 = (t3 = { joinInfo: this._joinInfo, appId: this._appId, websocketRetryConfig: this._config.websocketRetryConfig, httpRetryConfig: this._config.httpRetryConfig }, BV("LiveStreaming").create(t3));
            var t3;
            return e3.onLiveStreamError = (e4, t4) => {
              TD.reportApiInvoke(this._sessionId, { name: tO.ON_LIVE_STREAM_ERROR, options: [e4, t4], tag: iO.TRACER }).onSuccess(), this.safeEmit(dO.LIVE_STREAMING_ERROR, e4, t4);
            }, e3.onLiveStreamWarning = (e4, t4) => {
              TD.reportApiInvoke(this._sessionId, { name: tO.ON_LIVE_STREAM_WARNING, options: [e4, t4], tag: iO.TRACER }).onSuccess(), this.safeEmit(dO.LIVE_STREAMING_WARNING, e4, t4);
            }, e3.on(GU.REQUEST_WORKER_MANAGER_LIST, (e4, t4, i2) => {
              if (!this._joinInfo) return i2(new SD(Uw.INVALID_OPERATION, "can not find join info to get worker manager"));
              (async function(e5, t5, i3, n2) {
                const r2 = MN("UAP_AP").slice(0, MN("AJAX_REQUEST_CONCURRENT")).map((e6) => t5.proxyServer ? "https://".concat(t5.proxyServer, "/ap/?url=").concat(e6 + "/api/v1?action=uap") : "https://".concat(e6, "/api/v1?action=uap"));
                return await sF(r2, e5, t5, i3, n2);
              })(e4, this._joinInfo, this._axiosCancelSource.token, qO).then(t4).catch(i2);
            }), e3;
          };
          return e2 === UU.RAW ? (this._liveRawStreamingClient = this._liveRawStreamingClient || t2(), this._liveRawStreamingClient) : (this._liveTranscodeStreamingClient = this._liveTranscodeStreamingClient || t2(), this._liveTranscodeStreamingClient);
        }
        _createChannelMediaRelayClient() {
          if (!this._joinInfo) {
            return new SD(Uw.INVALID_OPERATION, "can not create channel media relay client, please join channel first").throw();
          }
          if (!this._channelMediaRelayClient) {
            const { sendResolutionWidth: t2, sendResolutionHeight: i2 } = this.getLocalVideoStats(), n2 = (e2 = { joinInfo: this._joinInfo, clientId: this._clientId, websocketRetryConfig: this._config.websocketRetryConfig, httpRetryConfig: this._config.httpRetryConfig, resolution: { width: t2, height: i2 } }, BV("ChannelMediaRelay").create(e2));
            n2.on("state", (e3) => {
              e3 === qU.RELAY_STATE_FAILURE && n2 && n2.dispose(), this.safeEmit(dO.CHANNEL_MEDIA_RELAY_STATE, e3);
            }), n2.on("event", (e3) => {
              this.safeEmit(dO.CHANNEL_MEDIA_RELAY_EVENT, e3);
            }), this._channelMediaRelayClient = n2, this._statsCollector.onStatsChanged = (e3, t3) => {
              var i3;
              "resolution" === e3 && (null === (i3 = this._channelMediaRelayClient) || void 0 === i3 || i3.setVideoProfile(t3));
            };
          }
          var e2;
          return this._channelMediaRelayClient;
        }
        _handleUpdateDataChannel(e2, t2) {
          const { added: i2, deleted: n2 } = e2, r2 = [];
          if (t2) {
            const e3 = [];
            this._users.forEach((t3) => {
              t3._dataChannels.forEach((n3) => {
                i2.every((e4) => e4.uid !== t3._uintid || e4.stream_id !== n3.id) && e3.push({ uid: t3._uintid, stream_id: n3.id, ordered: n3.ordered, max_retrans_times: n3.maxRetransmits, metadata: n3.metadata });
              });
            }), e3.length > 0 && this._handleUpdateDataChannel({ added: [], deleted: e3 });
          }
          Array.isArray(i2) && i2.length > 0 && i2.forEach((e3) => {
            const { uid: i3, stream_id: n3, ordered: o2, max_retrans_times: s2, metadata: a2 } = e3, c2 = this._users.find((e4) => e4._uintid === i3);
            if (!c2) return void lD.error("[".concat(this._clientId, "] can not find target user!(on_add_data_channel)"));
            lD.debug("[".concat(this._clientId, "] data_channel added with uid ").concat(i3)), kn(r2).call(r2, c2) || r2.push(c2), c2._uintid || (c2._uintid = i3);
            if (!(-1 !== c2._dataChannels.findIndex((t3) => t3.id === e3.stream_id))) {
              const e4 = { id: n3, ordered: !!o2, maxRetransmits: s2, metadata: a2 }, i4 = function(e5) {
                return jV(e5, true);
              }(e4);
              c2._dataChannels.push(i4), lD.info("[".concat(this._clientId, "] remote user ").concat(c2.uid, " published datachannel")), t2 || this.safeEmit(dO.USER_PUBLISHED, c2, "datachannel", e4);
            }
            this._p2pChannel.hasPendingRemoteDataChannel(c2, e3.stream_id) && (lD.debug("[".concat(this._clientId, "] resubscribe datachannel for user ").concat(c2.uid, " after reconnect.")), this._subscribeDataChannel(c2, e3.stream_id).catch((e4) => {
              lD.error("[".concat(this._clientId, "] resubscribe datachannel error"), e4.toString());
            }));
          }), t2 && (this.safeEmit(dO.PUBLISHED_USER_LIST, this._pendingPublishedUsers), this._pendingPublishedUsers = []), Array.isArray(n2) && n2.length > 0 && n2.forEach((e3) => {
            const { uid: t3, stream_id: i3 } = e3, n3 = this._users.find((e4) => e4._uintid === t3);
            if (!n3) return void lD.error("[".concat(this._clientId, "] can not find target user!(on_delete_data_channel)"));
            const r3 = n3._dataChannels.find((t4) => t4.id === e3.stream_id);
            r3 && (lD.debug("[".concat(this._clientId, "] data_stream delete with uid ").concat(t3)), this._p2pChannel.unsubscribeDataChannel(n3, [r3]).then((e4) => {
              if (n3._dataChannels = n3._dataChannels.filter((e5) => e5 !== r3), e4) return this._gateway.unsubscribeDataChannel(e4, n3.uid);
            }), lD.info("[".concat(this._clientId, "] remote user ").concat(t3, " unpublished datachannel ,id:").concat(r3.id)), this.safeEmit(dO.USER_UNPUBLISHED, n3, "datachannel", r3._config));
          });
        }
        _handleRemoveDataChannels(e2) {
          const t2 = this._users.find((t3) => t3.uid === e2.uid);
          if (t2) {
            if (void 0 !== t2._dataChannels && t2._dataChannels.length > 0) {
              lD.debug("[".concat(this._clientId, "] datachannel removed with uid ").concat(e2.uid));
              const i2 = () => {
                lD.info("[".concat(this._clientId, "] remote user ").concat(t2.uid, " unpublished datachannel")), t2._dataChannels.forEach((e3) => {
                  this.safeEmit(dO.USER_UNPUBLISHED, t2, "datachannel", e3._config);
                });
              };
              this._p2pChannel.unsubscribeDataChannel(t2, t2._dataChannels).then((e3) => {
                if (e3) return this._gateway.unsubscribeDataChannel(e3, t2.uid);
              }), i2();
            }
          } else lD.warning("[".concat(this._clientId, "] can not find target user!(on_remove_datachannel)"));
        }
        _handleGatewayEvents() {
          this._gateway.on(XU.UPDATE_GATEWAY_CONFIG, () => {
            !function() {
              let e2;
              try {
                e2 = window.localStorage.getItem("websdk_ng_global_parameter");
              } catch (e3) {
                return void lD.error("Error loading sdk config", e3.message);
              }
              if (e2) try {
                const t2 = JSON.parse(window.atob(e2)), i2 = Date.now();
                Object.keys(t2).forEach((e3) => {
                  const { value: n2, type: r2, expires: o2 } = t2[e3];
                  o2 && o2 <= i2 || r2 || VM() || !Object.prototype.hasOwnProperty.call(ON, e3) || (xN[e3] = n2, LN[e3] = n2, lD.debug("Update gateway parameters from config distribute", e3, n2));
                });
              } catch (e3) {
                lD.error("Error update config from local cache", e3.message);
              }
            }();
          }), this._gateway.on(XU.DISCONNECT_P2P, async () => {
            await this._p2pChannel.disconnectForReconnect();
          }), this._gateway.on(XU.CONNECTION_STATE_CHANGE, (e2, t2, i2) => {
            var n2;
            if (i2 === oO.FALLBACK) return;
            const r2 = () => {
              this.safeEmit(dO.CONNECTION_STATE_CHANGE, e2, t2, i2);
            };
            if (TD.reportApiInvoke(this._sessionId || (null === (n2 = this._gateway.joinInfo) || void 0 === n2 ? void 0 : n2.sid) || null, { name: tO.CONNECTION_STATE_CHANGE, options: [e2, t2, i2], tag: iO.TRACER }).onSuccess(JSON.stringify({ cur: e2, prev: t2, reason: i2 })), lD.info("[".concat(this._clientId, "] signal connection state change: ").concat(t2, " -> ").concat(e2)), "DISCONNECTED" === e2) return this._reset(), void r2();
            if ("RECONNECTING" === e2) this._users.forEach((e3) => {
              e3._trust_in_room_ = false, e3._trust_audio_enabled_state_ = false, e3._trust_video_enabled_state_ = false, e3._trust_audio_mute_state_ = false, e3._trust_video_mute_state_ = false, e3._trust_audio_stream_added_state_ = false, e3._trust_video_stream_added_state_ = false, e3._is_pre_created || (e3._audio_pre_subscribed || (e3._audioSSRC = void 0, e3._audioOrtc = void 0), e3._video_pre_subscribed || (e3._videoSSRC = void 0, e3._videoOrtc = void 0, e3._rtxSsrcId = void 0), e3._cname = void 0);
            }), this._userOfflineTimeout && window.clearTimeout(this._userOfflineTimeout), this._streamRemovedTimeout && window.clearTimeout(this._streamRemovedTimeout), this._userOfflineTimeout = void 0, this._streamRemovedTimeout = void 0;
            else if ("CONNECTED" === e2) {
              var o2;
              this._streamFallbackTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setStreamFallbackOption(t3, e3).catch((e4) => {
                  lD.warning("[".concat(this._clientId, "] auto set stream fallback option failed"), e4);
                });
              }), this._remoteStreamTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setRemoteVideoStreamType(t3, e3).catch((e4) => {
                  lD.warning("[".concat(this._clientId, "] auto set remote stream type failed"), e4);
                });
              }), void 0 !== this._remoteDefaultVideoStreamType && void 0 === (null === (o2 = this._joinInfo) || void 0 === o2 ? void 0 : o2.defaultVideoStream) && this.setRemoteDefaultVideoStreamType(this._remoteDefaultVideoStreamType).then(() => {
                lD.debug("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway connected"));
              }).catch((e3) => {
                lD.error("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway failed, ").concat(e3));
              }), this.store.useP2P || (this._p2pChannel.republish(), this._userOfflineTimeout = window.setTimeout(() => {
                if ("CONNECTED" !== this.connectionState) return;
                this._userOfflineTimeout = void 0;
                this._users.filter((e3) => !e3._trust_in_room_).forEach((e3) => {
                  lD.debug("[".concat(this._clientId, "] user offline timeout, emit user offline ").concat(e3.uid)), this._handleUserOffline({ uid: e3.uid });
                });
              }, 3e3), this._streamRemovedTimeout = window.setTimeout(() => {
                "CONNECTED" === this.connectionState && (this._streamRemovedTimeout = void 0, this._users.forEach((e3) => {
                  e3._trust_audio_mute_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch audio unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, ax.AUDIO, false)), e3._trust_video_mute_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch video unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, ax.VIDEO, false)), e3._trust_audio_enabled_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch enable local audio ").concat(e3.uid)), this._handleSetStreamLocalEnable("audio", e3.uid, true)), e3._trust_video_enabled_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch enable local video ").concat(e3.uid)), this._handleSetStreamLocalEnable("video", e3.uid, true)), e3._trust_video_stream_added_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch reset video stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "video")), e3._trust_audio_stream_added_state_ || (lD.debug("[".concat(this._clientId, "] auto dispatch reset audio stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "audio")), e3._video_added_ || e3._audio_added_ || (lD.debug("[".concat(this._clientId, "] auto dispatch stream remove ").concat(e3.uid)), this._handleRemoveStream({ uid: e3.uid, uint_id: e3._uintid }));
                }));
              }, 1e3));
            }
            r2();
          }), this._gateway.on(XU.REQUEST_NEW_GATEWAY_LIST, async (e2, t2) => {
            if (!this._joinInfo) return t2(new SD(Uw.UNEXPECTED_ERROR, "can not recover, no join info"));
            try {
              let t3;
              const i2 = await mj(zG(zG({}, this._joinInfo), {}, { uid: this._joinInfo.uid, stringUid: void 0 }));
              i2 ? (t3 = i2.ap, gj(i2), this._joinInfo.preload = true) : (t3 = await SF(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || qO, this.store), this._joinInfo.preload = false), this._joinInfo && (this._joinInfo.apResponse = t3.gatewayInfo.res, this._joinInfo.gatewayAddrs = t3.gatewayInfo.gatewayAddrs, this._joinInfo.uni_lbs_ip = t3.gatewayInfo.uni_lbs_ip);
              const n2 = [];
              t3.gatewayInfo.gatewayAddrs.forEach((e3) => {
                let { address: t4 } = e3;
                const [i3, r2] = t4.split(":");
                this._joinInfo && this._joinInfo.proxyServer ? n2.push({ proxy: this._joinInfo.proxyServer, host: i3, port: r2 }) : n2.push({ host: i3, port: r2 });
              }), e2(n2);
            } catch (e3) {
              t2(e3);
            }
          }), this._gateway.on(XU.NETWORK_QUALITY, (e2) => {
            "normal" === this._networkQualitySensitivity && this.safeEmit(dO.NETWORK_QUALITY, e2);
          }), this._gateway.on(XU.STREAM_TYPE_CHANGE, (e2, t2) => {
            this.safeEmit(dO.STREAM_TYPE_CHANGED, e2, t2);
            TD.reportApiInvoke(this._sessionId, { name: tO.STREAM_TYPE_CHANGE, options: [e2, t2], tag: iO.TRACER }).onSuccess(JSON.stringify({ uid: e2, streamType: t2 }));
          }), this._gateway.on(XU.IS_P2P_DISCONNECTED, (e2) => {
            this._p2pChannel.isP2PDisconnected() ? e2(true) : this._p2pChannel.hasLocalMedia() || this._p2pChannel.hasRemoteMedia() ? e2(false) : e2(true);
          }), this._gateway.on(XU.REQUEST_P2P_CONNECTION_PARAMS, async (e2, t2, i2) => {
            try {
              let i3 = await this._p2pChannel.getEstablishParams();
              MN("ENABLE_PREALLOC_PC") && i3 || (i3 = await this._p2pChannel.startP2PConnection(e2)), t2(i3);
            } catch (e3) {
              i2(e3);
            }
          }), this._gateway.on(XU.JOIN_RESPONSE, (e2, t2) => {
            if (this.store.useP2P) return;
            let i2;
            e2.attributes ? i2 = e2.attributes.userAttributes.preSubSsrcs : lD.debug("no attributes in joinResponse");
            const n2 = _V(e2.ortc, t2, i2);
            this._p2pChannel.connect(n2);
          }), this._gateway.on(XU.PRE_CONNECT_PC, async (e2) => {
            const { candidates: t2, fingerprint: i2 } = e2;
            if (this._joinInfo && t2.length > 0 && !this._p2pChannel.isPlanB) {
              var n2;
              await this._p2pChannel.startP2PConnection({ turnServer: this._joinInfo.turnServer });
              const { cert: e3, cid: r2 } = this._joinInfo.apResponse;
              await this._p2pChannel.connect({ iceParameters: { iceUfrag: "".concat(r2, "_").concat(e3), icePwd: "".concat(r2, "_").concat(e3) }, dtlsParameters: { fingerprints: [{ hashFunction: "sha-256", fingerprint: null !== (n2 = MN("FINGERPRINT")) && void 0 !== n2 ? n2 : i2 }] }, candidates: t2, rtpCapabilities: { send: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, recv: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] } }, setup: "active", cname: "o/i14u9pJrxRKAsu", preallocation: true });
            }
          });
        }
        _handleGatewaySignalEvents() {
          this._gateway.signal.on(DU.ON_USER_ONLINE, this._handleUserOnline), this._gateway.signal.on(DU.ON_USER_OFFLINE, this._handleUserOffline), this._gateway.signal.on(DU.ON_ADD_AUDIO_STREAM, (e2) => this._handleAddAudioOrVideoStream("audio", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc)), this._gateway.signal.on(DU.ON_ADD_VIDEO_STREAM, (e2) => this._handleAddAudioOrVideoStream("video", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc, e2.rtxSsrcId)), this._gateway.signal.on(DU.ON_REMOTE_DATASTREAM_UPDATE, (e2) => {
            this._handleUpdateDataChannel(e2);
          }), this._gateway.signal.on(DU.ON_REMOTE_FULL_DATASTREAM_INFO, (e2) => {
            this._handleUpdateDataChannel({ added: e2.datastreams || [], deleted: [] }, true);
          }), this._gateway.signal.on(DU.ON_REMOVE_STREAM, this._handleRemoveStream), this._gateway.signal.on(DU.ON_P2P_LOST, this._handleP2PLost), this._gateway.signal.on(DU.MUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, ax.AUDIO, true)), this._gateway.signal.on(DU.UNMUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, ax.AUDIO, false)), this._gateway.signal.on(DU.MUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, ax.VIDEO, true)), this._gateway.signal.on(DU.UNMUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, ax.VIDEO, false)), this._gateway.signal.on(DU.RECEIVE_METADATA, (e2) => {
            const t2 = yO(e2.metadata);
            this.safeEmit(dO.RECEIVE_METADATA, e2.uid, t2);
          }), this._gateway.signal.on(DU.ON_DATA_STREAM, async (e2) => {
            var t2;
            if (!e2) return;
            let i2 = yO(e2.payload);
            if (this._encryptDataStream && this._encryptDataStreamIv && this._encryptDataStreamKey && window.crypto.subtle && kn(t2 = ["aes-128-gcm2", "aes-256-gcm2"]).call(t2, this._encryptionMode)) {
              if (e2.payload.length < 10) throw new SD(Uw.UNEXPECTED_RESPONSE, "payload length ".concat(e2.payload.length, " is less than header length ").concat(10));
              const t3 = await async function(e3, t4, i3) {
                const n3 = i3.subarray(0, 10), r2 = n3.slice(8, 10), o2 = (r2[0] << 8) + r2[1], s2 = (n3[6] << 8) + n3[7], a2 = await window.crypto.subtle.decrypt({ name: "AES-GCM", iv: e3, tagLength: 128, additionalData: new Uint8Array(BO(o2, 2)) }, t4, i3.subarray(10));
                return new Uint8Array(a2).subarray(0, s2);
              }(this._encryptDataStreamIv, this._encryptDataStreamKey, i2);
              i2 = t3;
            }
            let n2 = 0;
            if (e2.ordered || e2.syncWithAudio) {
              const t3 = this._p2pChannel.getStats(), i3 = this.remoteUsers.find((t4) => t4.uid === e2.uid), r2 = null == t3 ? void 0 : t3.audioRecv.find((e3) => e3.ssrc === (null == i3 ? void 0 : i3._audioSSRC));
              n2 = null == r2 ? void 0 : r2.jitterBufferMs;
            }
            (null == n2 || Number.isNaN(n2)) && (n2 = 0), tj(zG(zG({}, e2), {}, { payload: i2 }), n2, { id: this._clientId, onStreamMessage: "function" == typeof this.onStreamMessage ? this.onStreamMessage.bind(this) : void 0, safeEmit: this.safeEmit.bind(this) });
          }), this._gateway.signal.on(DU.ON_CRYPT_ERROR, () => {
            IO(() => {
              lD.warning("[".concat(this._clientId, "] on crypt error")), this.safeEmit(dO.CRYPT_ERROR);
            }, this._sessionId);
          }), this._gateway.signal.on(DU.ON_TOKEN_PRIVILEGE_WILL_EXPIRE, this._handleTokenWillExpire), this._gateway.signal.on(DU.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            lD.warning("[".concat(this._clientId, "] received message onTokenPrivilegeDidExpire, please get new token and join again")), this._gateway.leave(true, oO.TOKEN_EXPIRE), this.safeEmit(dO.ON_TOKEN_PRIVILEGE_DID_EXPIRE), this._reset();
          }), this._gateway.signal.on(DU.ON_STREAM_FALLBACK_UPDATE, (e2) => {
            lD.debug("[".concat(this._clientId, "] stream fallback peerId: ").concat(e2.stream_id, ", attr: ").concat(e2.stream_type)), this.safeEmit(dO.STREAM_FALLBACK, e2.stream_id, 1 === e2.stream_type ? "fallback" : "recover");
          }), this._gateway.signal.on(DU.ON_PUBLISH_STREAM, (e2) => {
            this.uid === this._uid && (this._p2pChannel.reportPublishEvent(true, null, void 0, false, JSON.stringify({ proxy: e2.proxy })), lD.info("[".concat(this._clientId, "] on publish stream, ").concat(JSON.stringify(e2))));
          }), this._gateway.signal.on(DU.ENABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, true);
          }), this._gateway.signal.on(DU.DISABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, false);
          }), this._gateway.signal.on(wU.REQUEST_TIMEOUT, (e2, t2) => {
            if (this._joinInfo) switch (e2) {
              case OU.PUBLISH: {
                if (!t2) return;
                const e3 = t2.ortc;
                if (e3) {
                  var i2, n2;
                  const r2 = e3.some((e4) => {
                    let { stream_type: t3 } = e4;
                    return t3 === JU.Audio;
                  }), o2 = e3.some((e4) => {
                    let { stream_type: t3 } = e4;
                    return t3 !== JU.Audio;
                  }), s2 = e3.some((e4) => {
                    let { stream_type: t3 } = e4;
                    return t3 === JU.Screen || t3 === JU.ScreenLow;
                  });
                  "offer" === t2.state && TD.publish(this._joinInfo.sid, { eventElapse: LF.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: false, ec: Uw.TIMEOUT, audio: r2, video: o2, p2pid: t2.p2p_id, publishRequestid: this.store.pubId, screenshare: s2, audioName: r2 ? null === (i2 = e3.find((e4) => {
                    let { stream_type: t3 } = e4;
                    return t3 === JU.Audio;
                  })) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId.toString() : void 0, videoName: o2 ? null === (n2 = e3.find((e4) => {
                    let { stream_type: t3 } = e4;
                    return t3 !== JU.Audio;
                  })) || void 0 === n2 || null === (n2 = n2.ssrcs[0]) || void 0 === n2 ? void 0 : n2.ssrcId.toString() : void 0 });
                }
                break;
              }
              case OU.SUBSCRIBE:
                t2 && TD.subscribe(this._joinInfo.sid, { succ: false, ec: Uw.TIMEOUT, audio: t2.stream_type === ax.AUDIO, video: t2.stream_type === ax.VIDEO, peerid: t2.stream_id, subscribeRequestid: t2.ssrcId, p2pid: this.store.p2pId, eventElapse: LF.measureFromSubscribeStart(this.store.clientId, t2.ssrcId), preSsrc: this._p2pChannel.isPreSubScribe(t2.ssrcId) });
            }
          }), this._gateway.signal.on(DU.ON_P2P_OK, (e2) => {
            this.uid, this._uid;
          }), this._gateway.signal.on(DU.ON_PUBLISHED_USER_LIST, (e2) => {
            if (null == e2 || !e2.users) return;
            MN("BLOCK_LOCAL_CLIENT") && (e2.users = e2.users.filter((e3) => !xM(e3.string_id || e3.stream_id, this.channelName)));
            const t2 = [], i2 = [];
            for (const n2 of e2.users) {
              let e3 = this._users.find((e4) => e4._uintid === n2.stream_id);
              e3 ? e3._trust_in_room_ = true : (e3 = new FF(n2.string_id || n2.stream_id, n2.stream_id), this._users.push(e3), 0 === this.getListeners(dO.PUBLISHED_USER_LIST).length && (lD.debug("[".concat(this._clientId, "] user online"), n2.stream_id), this.safeEmit(dO.USER_JOINED, e3)));
              const r2 = ZU.Audio & n2.stream_type, o2 = (ZU.Video | ZU.LwoVideo) & n2.stream_type, s2 = !!(65280 & n2.stream_type), a2 = r2 && e3.hasAudio, c2 = o2 && e3.hasVideo;
              o2 && (e3._trust_video_stream_added_state_ = true, e3._video_added_ = true, e3._videoSSRC = n2.video_ssrc, e3._rtxSsrcId = n2.video_rtx), r2 && (e3._trust_audio_stream_added_state_ = true, e3._audio_added_ = true, e3._audioSSRC = n2.audio_ssrc), r2 && !a2 && 0 === this.getListeners(dO.PUBLISHED_USER_LIST).length && (lD.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published audio")), this.safeEmit(dO.USER_PUBLISHED, e3, "audio")), o2 && !c2 && 0 === this.getListeners(dO.PUBLISHED_USER_LIST).length && (lD.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published video")), this.safeEmit(dO.USER_PUBLISHED, e3, "video")), (r2 && !a2 || o2 && !c2 || s2) && t2.push(e3), o2 && this._p2pChannel.hasPendingRemoteMedia(e3, "video") && i2.push({ user: e3, mediaType: "video" }), r2 && this._p2pChannel.hasPendingRemoteMedia(e3, "audio") && i2.push({ user: e3, mediaType: "audio" });
            }
            i2.length > 0 && (lD.debug("[".concat(this._clientId, "] RE massSubscribe after reconnect ").concat(i2.map((e3) => "user: ".concat(e3.user.uid, ", mediaType: ").concat(e3.mediaType)).join("; "), " ")), this.massSubscribe(i2).catch((e3) => {
              lD.error("[".concat(this._clientId, "] mass resubscribe error"), e3.toString());
            })), this.getListeners(dO.PUBLISHED_USER_LIST).length > 0 ? MN("ENABLE_DATASTREAM_2") ? this._pendingPublishedUsers = t2 : (lD.info("[".concat(this._clientId, "] client emit user-list event, users: ").concat(t2.map((e3) => e3.uid).join(", "))), this.safeEmit(dO.PUBLISHED_USER_LIST, t2)) : lD.info("[".concat(this._clientId, "] client not emit user-list event case there is no user-list listener, users: ").concat(t2.map((e3) => e3.uid).join(", ")));
          }), this._gateway.signal.on(DU.ON_RTP_CAPABILITY_CHANGE, (e2) => {
            const { video_codec: t2 } = e2;
            this._p2pChannel instanceof YB && this._p2pChannel.updateRemoteRTPCapabilities(t2.map((e3) => e3.toLowerCase()).filter((e3) => {
              var t3;
              return kn(t3 = Object.keys(BN)).call(t3, e3);
            }));
          });
        }
        _handleP2PEvents() {
          this._gateway.signal.on(DU.ON_USER_OFFLINE, () => {
            this._p2pChannel.disconnectForReconnect();
          }), this._gateway.signal.on(vx.PUBLISH, (e2, t2, i2) => {
            const { uid: n2 } = e2;
            e2.forEach((e3) => {
              const { kind: r2, ssrcs: o2, mid: s2, isMuted: a2 } = e3;
              this._handleP2PAddAudioOrVideoStream(r2, n2, o2[0].ssrcId, s2);
              const c2 = this._users.find((e4) => e4.uid === n2);
              return c2 && this.store.useP2P ? this._p2pChannel.mockSubscribe(c2, r2, o2[0].ssrcId, s2).then(() => {
                t2();
              }).catch(i2) : t2(), this._handleMuteStream(n2, r2, !!a2);
            });
          }), this._gateway.signal.on(vx.CALL, async (e2, t2, i2) => {
            if (this.store.useP2P) try {
              var n2;
              t2(await this._p2pChannel.startP2P({ turnServer: null === (n2 = this._joinInfo) || void 0 === n2 ? void 0 : n2.turnServer }, e2));
            } catch (e3) {
              i2(e3);
            }
          }), this._gateway.signal.on(wU.P2P_CONNECTION, async (e2) => {
            this.store.useP2P && (await this._p2pChannel).p2pConnect(e2);
          }), this._gateway.signal.on(vx.UNPUBLISH, async (e2, t2, i2) => {
            if (this.store.useP2P) {
              const { unpubMsg: n2, uid: r2 } = e2, o2 = this._users.find((e3) => e3.uid === r2);
              if (!o2) return lD.warning("[".concat(this._clientId, "] can not find remote user, ignore mute event, uid: ").concat(r2)), void t2();
              try {
                n2.forEach(async (e3) => {
                  let { stream_type: t3 } = e3;
                  const i3 = t3 === JU.Audio ? ax.AUDIO : ax.VIDEO;
                  await this._p2pChannel.unsubscribe(o2, i3), this._handleMuteStream(r2, i3, true);
                }), t2();
              } catch (e3) {
                i2(e3);
              }
            }
          }), this._gateway.signal.on(vx.CONTROL, async (e2, t2) => {
            const { action: i2 } = e2;
            switch (i2) {
              case Ix.MUTE_LOCAL_VIDEO:
                this._handleMuteStream(t2, ax.VIDEO, true);
                break;
              case Ix.MUTE_LOCAL_AUDIO:
                this._handleMuteStream(t2, ax.AUDIO, true);
                break;
              case Ix.UNMUTE_LOCAL_VIDEO:
                this._handleP2PAddAudioOrVideoStream("video", t2), this._handleMuteStream(t2, ax.VIDEO, false);
                break;
              case Ix.UNMUTE_LOCAL_AUDIO:
                this._handleP2PAddAudioOrVideoStream("audio", t2), this._handleMuteStream(t2, ax.AUDIO, false);
            }
          }), this._gateway.signal.on(vx.RESTART_ICE, async (e2, t2, i2) => {
            if (this.store.useP2P) try {
              const { direction: i3, iceParameter: n2 } = e2;
              if (i3 !== PU.SEND_ONLY || n2) {
                t2(await this._p2pChannel.restartICE(i3, n2));
              } else this._p2pChannel.handleDisconnect(i3), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._gateway.signal.on(vx.CANDIDATE, (e2) => {
            if (this.store.useP2P) {
              const { candidate: t2, direction: i2 } = e2;
              this._p2pChannel.addRemoteCandidate(t2, i2);
            }
          }), this._p2pChannel.on(px.RequestP2PRestartICE, async (e2, t2, i2) => {
            try {
              const { direction: i3 } = e2;
              t2(await this._gateway.sendExtensionMessage(vx.RESTART_ICE, e2, i3 === PU.SEND_ONLY));
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(px.LocalCandidate, (e2) => {
            this._gateway.sendExtensionMessage(vx.CANDIDATE, JSON.stringify(e2), true);
          }), this._p2pChannel.on(px.RequestP2PMuteLocal, async (e2, t2, i2) => {
            try {
              await this._gateway.sendExtensionMessage(vx.CONTROL, e2, true), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(px.RequestP2PUnmuteRemote, async (e2, t2, i2) => {
            if (this._joinInfo) try {
              await this._gateway.unmuteRemote(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
            } catch (e3) {
              e3.code === Uw.DISCONNECT_P2P ? t2() : i2(e3);
            }
            else t2();
          }), this._p2pChannel.on(px.RequestP2PMuteRemote, async (e2, t2, i2) => {
            if (this._joinInfo) try {
              await this._gateway.muteRemote(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
            } catch (e3) {
              e3.code === Uw.DISCONNECT_P2P ? t2() : i2(e3);
            }
            else t2();
          }), this._p2pChannel.on(px.StateChange, (e2, t2) => {
            t2 === hx.Connected && this._p2pChannel.republish();
          });
        }
        _handleP2PChannelEvents() {
          this._p2pChannel.on(px.PeerConnectionStateChange, (e2) => {
            const t2 = this._peerConnectionState;
            e2 !== t2 && (this.safeEmit(dO.PEERCONNECTION_STATE_CHANGE, e2, t2), this._peerConnectionState = e2);
          }), this._p2pChannel.on(px.RequestMuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo) try {
              await this._gateway.muteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
            } catch (e3) {
              e3.code === Uw.DISCONNECT_P2P ? t2() : i2(e3);
            }
            else t2();
          }), this._p2pChannel.on(px.RequestUnmuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo) try {
              await this._gateway.unmuteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
            } catch (e3) {
              e3.code === Uw.DISCONNECT_P2P ? t2() : i2(e3);
            }
            else t2();
          }), this._p2pChannel.on(px.RequestRePublish, (e2, t2, i2) => {
            this.publish(e2, false).then(t2).catch(i2);
          }), this._p2pChannel.on(px.RequestRePublishDataChannel, (e2, t2, i2) => {
            np.all(e2.map(async (e3) => {
              const t3 = await this._p2pChannel.publishDataChannel([e3]);
              try {
                t3.forEach((e4) => {
                  this._uid && this._gateway.publishDataChannel(this._uid, e4, true);
                });
              } catch (e4) {
                if (e4.code !== Uw.DISCONNECT_P2P) throw e4;
              }
            })).then(t2).catch(i2);
          }), this._p2pChannel.on(px.RequestReSubscribe, async (e2, t2, i2) => {
            try {
              for (const { user: t3, kind: i3 } of e2) i3 === ax.VIDEO ? await this.subscribe(t3, "video") : await this.subscribe(t3, "audio");
              t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(px.RequestUpload, (e2, t2) => {
            this._gateway.upload(e2, t2);
          }), this._p2pChannel.on(px.RequestUploadStats, (e2) => {
            this._gateway.uploadWRTCStats(e2);
          }), this._p2pChannel.on(px.MediaReconnectStart, (e2) => {
            this.safeEmit(dO.MEDIA_RECONNECT_START, e2);
          }), this._p2pChannel.on(px.MediaReconnectEnd, (e2) => {
            this.safeEmit(dO.MEDIA_RECONNECT_END, e2);
          }), this._p2pChannel.on(px.NeedSignalRTT, (e2) => {
            e2(this._gateway.getSignalRTT());
          }), this._p2pChannel.on(px.RequestRestartICE, async (e2) => {
            if (this.store.useP2P) return;
            const t2 = await this._p2pChannel.restartICE(e2), i2 = await t2.next();
            if (i2.done) return;
            const n2 = i2.value;
            let r2;
            try {
              r2 = await this._gateway.restartICE({ iceParameters: n2 });
            } catch (e3) {
              return void t2.throw(e3);
            }
            const { iceParameters: o2 } = function(e3) {
              const t3 = e3.iceParameters;
              return { iceParameters: { iceUfrag: t3.iceUfrag, icePwd: t3.icePwd } };
            }(r2);
            await t2.next({ remoteIceParameters: o2 });
          }), this._p2pChannel.on(px.RequestReconnect, async () => {
            this._gateway.reconnect();
          }), this._p2pChannel.on(px.RequestReconnectPC, async () => {
            var e2;
            const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } = await this._p2pChannel.startP2PConnection({ turnServer: null === (e2 = this._joinInfo) || void 0 === e2 ? void 0 : e2.turnServer }), { gatewayEstablishParams: r2, gatewayAddress: o2 } = await this._gateway.reconnectPC({ iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 }), s2 = _V(r2, o2);
            await this._p2pChannel.connect(s2), await this._p2pChannel.republish(), await this._p2pChannel.reSubscribe();
          }), this._p2pChannel.on(px.RequestUnpublishForReconnectPC, async (e2, t2, i2) => {
            this._joinInfo && void 0 !== this._uid ? (await this._gateway.unpublish(e2, this._uid), t2()) : i2();
          }), this._p2pChannel.on(px.P2PLost, () => {
            this.safeEmit(dO.P2P_LOST, this.store.uid);
          }), this._p2pChannel.on(px.UpdateVideoEncoder, (e2) => {
            e2._encoderConfig && this._gateway.setVideoProfile(e2._encoderConfig);
          }), this._p2pChannel.on(px.ConnectionTypeChange, (e2) => {
            this.safeEmit(dO.IS_USING_CLOUD_PROXY, e2);
          }), this._p2pChannel.on(px.RequestLowStreamParameter, (e2) => {
            e2(this._lowStreamParameter || { width: 160, height: 120, framerate: 15, bitrate: 50 });
          }), this._p2pChannel.on(px.QueryClientConnectionState, (e2) => {
            e2(this.connectionState);
          }), this._p2pChannel.on(px.AudioMetadata, (e2) => {
            this.safeEmit(dO.AUDIO_METADATA, e2);
          });
        }
        getKeyMetrics() {
          return this.store.keyMetrics;
        }
        async enableContentInspect(e2) {
          if (!this._joinInfo || "CONNECTED" !== this.connectionState) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] can not create content inspect, please join channel first"));
          if (this._inspect) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] Inspect content service already in connecting/connected state"));
          try {
            const i2 = (t2 = { config: e2 }, BV("ContentInspect").create(t2));
            this._inspect = i2, this.handleVideoInspectEvents(i2);
            const { appId: n2, cname: r2, sid: o2, token: s2, uid: a2, cid: c2, vid: d2 } = this._joinInfo;
            await i2.init({ appId: n2, areaCode: "", cname: r2, sid: o2, token: s2, uid: a2, cid: c2, vid: d2 ? Number(d2) : 0 }, qO);
          } catch (e3) {
            throw Array.isArray(e3) ? e3[0] : e3;
          }
          var t2;
        }
        handleVideoInspectEvents(e2) {
          e2.on(mx.CONNECTION_STATE_CHANGE, (t2, i2) => {
            if (this.safeEmit(dO.CONTENT_INSPECT_CONNECTION_STATE_CHANGE, t2, i2), i2 === _x.CONNECTED) {
              if ("CONNECTED" !== this.connectionState) return void this.safeEmit(dO.CONTENT_INSPECT_ERROR, new SD(Uw.OPERATION_ABORTED, "Content inspect was cancelled because it left the channel"));
              e2.inspectImage();
            }
          }), e2.on(mx.INSPECT_RESULT, (e3, t2) => {
            var i2;
            if ((null == t2 ? void 0 : t2.code) === Uw.INVALID_OPERATION && "DISCONNECTED" === this.connectionState) return lD.debug("Stop inspect content because that has left channel"), null == this || null === (i2 = this._inspect) || void 0 === i2 || i2.close(), void (this._inspect = void 0);
            this.safeEmit(dO.CONTENT_INSPECT_RESULT, e3, t2);
          }), e2.on(mx.CLIENT_LOCAL_VIDEO_TRACK, (e3) => {
            e3(this.localTracks.filter((e4) => "video" === e4.trackMediaType)[0]);
          });
        }
        async disableContentInspect() {
          if (!this._inspect) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] inspectVideoContent not started"));
          try {
            this._inspect.close(), this._inspect = void 0;
          } catch (e2) {
            throw Array.isArray(e2) ? e2[0] : e2;
          }
        }
        async setImageModeration(e2, t2) {
          if (Vw(e2, "enabled"), e2) {
            if (!t2) throw new SD(Uw.INVALID_PARAMS, "config is required");
            if (nG(t2), !this._joinInfo) throw new SD(Uw.INVALID_OPERATION, "can not create image moderation, please join channel first");
            try {
              if (this._moderation) this._moderation.updateConfig(t2);
              else {
                const e3 = (i2 = { config: t2 }, BV("ImageModeration").create(i2));
                this._moderation = e3, this.handleImageModerationEvents(e3);
                const { appId: n2, cname: r2, sid: o2, token: s2, uid: a2, cid: c2, vid: d2 } = this._joinInfo;
                await e3.init({ appId: n2, areaCode: "", cname: r2, sid: o2, token: s2, uid: a2, cid: c2, vid: d2 ? Number(d2) : 0 }, qO);
              }
            } catch (e3) {
              throw Array.isArray(e3) ? e3[0] : e3;
            }
          } else {
            var i2;
            if (!this._moderation) throw new SD(Uw.INVALID_OPERATION, "[".concat(this._clientId, "] image moderation not started"));
            try {
              this._moderation.close(), this._moderation.removeAllListeners(), this._moderation = void 0;
            } catch (e3) {
              throw Array.isArray(e3) ? e3[0] : e3;
            }
          }
        }
        handleImageModerationEvents(e2) {
          e2.on(gx.CONNECTION_STATE_CHANGE, (t2, i2) => {
            if (this.safeEmit(dO.IMAGE_MODERATION_CONNECTION_STATE_CHANGE, t2, i2), t2 === Sx.CONNECTED) {
              if ("CONNECTED" !== this.connectionState) throw this.setImageModeration(false), new SD(Uw.OPERATION_ABORTED, "Image moderation was cancelled because it left the channel");
              e2.inspectImage();
            }
          }), e2.on(gx.CLIENT_LOCAL_VIDEO_TRACK, (e3) => {
            e3(this.localTracks.filter((e4) => "video" === e4.trackMediaType)[0]);
          });
        }
        setP2PTransport(e2) {
          if (function(e3) {
            Fw(e3, "transport", ["default", "auto", "relay", "sd-rtn"]);
          }(e2), "p2p" !== this.mode) throw new SD(Uw.INVALID_OPERATION, "only p2p mode can set p2pTransport");
          this.store.p2pTransport = e2, lD.info("[".concat(this._clientId, "] set client p2pTransport to ").concat(e2));
        }
        getJoinChannelServiceRecords() {
          return lD.debug("getJoinChannelServiceRecords"), this.store.joinChannelServiceRecords;
        }
        async setPublishAudioFilterEnabled(e2) {
          Vw(e2, "enabled"), kN("ENABLE_PUBLISH_AUDIO_FILTER", e2), this._joinInfo && await this._gateway.setPublishAudioFilterEnabled(e2);
        }
        _handleResetAddStream(e2, t2) {
          switch (t2) {
            case "audio":
              e2._audio_added_ = false, e2._trust_audio_stream_added_state_ = true;
              break;
            case "video":
              e2._video_added_ = false, e2._trust_video_stream_added_state_ = true;
          }
        }
      }, RU(YG.prototype, "leave", [oG], Object.getOwnPropertyDescriptor(YG.prototype, "leave"), YG.prototype), RU(YG.prototype, "publish", [sG], Object.getOwnPropertyDescriptor(YG.prototype, "publish"), YG.prototype), RU(YG.prototype, "unpublish", [aG], Object.getOwnPropertyDescriptor(YG.prototype, "unpublish"), YG.prototype), RU(YG.prototype, "subscribe", [cG], Object.getOwnPropertyDescriptor(YG.prototype, "subscribe"), YG.prototype), RU(YG.prototype, "presubscribe", [dG], Object.getOwnPropertyDescriptor(YG.prototype, "presubscribe"), YG.prototype), RU(YG.prototype, "massSubscribe", [lG], Object.getOwnPropertyDescriptor(YG.prototype, "massSubscribe"), YG.prototype), RU(YG.prototype, "unsubscribe", [uG], Object.getOwnPropertyDescriptor(YG.prototype, "unsubscribe"), YG.prototype), RU(YG.prototype, "massUnsubscribe", [hG], Object.getOwnPropertyDescriptor(YG.prototype, "massUnsubscribe"), YG.prototype), RU(YG.prototype, "setLowStreamParameter", [pG], Object.getOwnPropertyDescriptor(YG.prototype, "setLowStreamParameter"), YG.prototype), RU(YG.prototype, "enableDualStream", [_G], Object.getOwnPropertyDescriptor(YG.prototype, "enableDualStream"), YG.prototype), RU(YG.prototype, "disableDualStream", [EG], Object.getOwnPropertyDescriptor(YG.prototype, "disableDualStream"), YG.prototype), RU(YG.prototype, "setClientRole", [mG], Object.getOwnPropertyDescriptor(YG.prototype, "setClientRole"), YG.prototype), RU(YG.prototype, "_setClientRoleOptions", [fG], Object.getOwnPropertyDescriptor(YG.prototype, "_setClientRoleOptions"), YG.prototype), RU(YG.prototype, "setProxyServer", [TG], Object.getOwnPropertyDescriptor(YG.prototype, "setProxyServer"), YG.prototype), RU(YG.prototype, "setTurnServer", [SG], Object.getOwnPropertyDescriptor(YG.prototype, "setTurnServer"), YG.prototype), RU(YG.prototype, "setLicense", [gG], Object.getOwnPropertyDescriptor(YG.prototype, "setLicense"), YG.prototype), RU(YG.prototype, "startProxyServer", [RG], Object.getOwnPropertyDescriptor(YG.prototype, "startProxyServer"), YG.prototype), RU(YG.prototype, "stopProxyServer", [vG], Object.getOwnPropertyDescriptor(YG.prototype, "stopProxyServer"), YG.prototype), RU(YG.prototype, "setLocalAccessPointsV2", [CG], Object.getOwnPropertyDescriptor(YG.prototype, "setLocalAccessPointsV2"), YG.prototype), RU(YG.prototype, "setLocalAccessPoints", [IG], Object.getOwnPropertyDescriptor(YG.prototype, "setLocalAccessPoints"), YG.prototype), RU(YG.prototype, "setRemoteDefaultVideoStreamType", [yG], Object.getOwnPropertyDescriptor(YG.prototype, "setRemoteDefaultVideoStreamType"), YG.prototype), RU(YG.prototype, "setRemoteVideoStreamType", [AG], Object.getOwnPropertyDescriptor(YG.prototype, "setRemoteVideoStreamType"), YG.prototype), RU(YG.prototype, "setStreamFallbackOption", [bG], Object.getOwnPropertyDescriptor(YG.prototype, "setStreamFallbackOption"), YG.prototype), RU(YG.prototype, "setEncryptionConfig", [wG], Object.getOwnPropertyDescriptor(YG.prototype, "setEncryptionConfig"), YG.prototype), RU(YG.prototype, "renewToken", [OG], Object.getOwnPropertyDescriptor(YG.prototype, "renewToken"), YG.prototype), RU(YG.prototype, "enableAudioVolumeIndicator", [NG], Object.getOwnPropertyDescriptor(YG.prototype, "enableAudioVolumeIndicator"), YG.prototype), RU(YG.prototype, "startLiveStreaming", [DG], Object.getOwnPropertyDescriptor(YG.prototype, "startLiveStreaming"), YG.prototype), RU(YG.prototype, "setLiveTranscoding", [PG], Object.getOwnPropertyDescriptor(YG.prototype, "setLiveTranscoding"), YG.prototype), RU(YG.prototype, "stopLiveStreaming", [LG], Object.getOwnPropertyDescriptor(YG.prototype, "stopLiveStreaming"), YG.prototype), RU(YG.prototype, "startChannelMediaRelay", [kG], Object.getOwnPropertyDescriptor(YG.prototype, "startChannelMediaRelay"), YG.prototype), RU(YG.prototype, "updateChannelMediaRelay", [MG], Object.getOwnPropertyDescriptor(YG.prototype, "updateChannelMediaRelay"), YG.prototype), RU(YG.prototype, "stopChannelMediaRelay", [UG], Object.getOwnPropertyDescriptor(YG.prototype, "stopChannelMediaRelay"), YG.prototype), RU(YG.prototype, "sendCustomReportMessage", [xG], Object.getOwnPropertyDescriptor(YG.prototype, "sendCustomReportMessage"), YG.prototype), RU(YG.prototype, "pickSVCLayer", [VG], Object.getOwnPropertyDescriptor(YG.prototype, "pickSVCLayer"), YG.prototype), RU(YG.prototype, "setRTMConfig", [FG], Object.getOwnPropertyDescriptor(YG.prototype, "setRTMConfig"), YG.prototype), RU(YG.prototype, "enableContentInspect", [BG], Object.getOwnPropertyDescriptor(YG.prototype, "enableContentInspect"), YG.prototype), RU(YG.prototype, "disableContentInspect", [jG], Object.getOwnPropertyDescriptor(YG.prototype, "disableContentInspect"), YG.prototype), RU(YG.prototype, "setImageModeration", [GG], Object.getOwnPropertyDescriptor(YG.prototype, "setImageModeration"), YG.prototype), RU(YG.prototype, "setP2PTransport", [WG], Object.getOwnPropertyDescriptor(YG.prototype, "setP2PTransport"), YG.prototype), RU(YG.prototype, "getJoinChannelServiceRecords", [HG], Object.getOwnPropertyDescriptor(YG.prototype, "getJoinChannelServiceRecords"), YG.prototype), RU(YG.prototype, "setPublishAudioFilterEnabled", [KG], Object.getOwnPropertyDescriptor(YG.prototype, "setPublishAudioFilterEnabled"), YG.prototype), YG);
      class XG {
        constructor(e2, t2) {
          vy(this, "id", 0), vy(this, "element", void 0), vy(this, "peerPair", void 0), vy(this, "context", void 0), vy(this, "audioPlayerElement", void 0), vy(this, "audioTrack", void 0), XG.count += 1, this.id = XG.count, this.element = e2, this.context = t2;
        }
        initPeers() {
          this.peerPair = [new RTCPeerConnection(), new RTCPeerConnection()], this.peerPair[1].ontrack = (e2) => {
            const t2 = document.createElement("audio");
            t2.srcObject = new MediaStream([e2.track]), t2.play(), this.audioPlayerElement = t2;
          };
        }
        async switchSdp() {
          if (!this.peerPair) return;
          const e2 = async (e3, t3) => {
            const i2 = "offer" === t3 ? await e3.createOffer() : await e3.createAnswer();
            return await e3.setLocalDescription(i2), "complete" === e3.iceGatheringState ? e3.localDescription : new np((t4) => {
              e3.onicegatheringstatechange = () => {
                "complete" === e3.iceGatheringState && t4(e3.localDescription);
              };
            });
          }, t2 = async (e3, t3) => await e3.setRemoteDescription(t3);
          try {
            const i2 = await e2(this.peerPair[0], "offer");
            await t2(this.peerPair[1], i2);
            const n2 = await e2(this.peerPair[1], "answer");
            await t2(this.peerPair[0], n2);
          } catch (e3) {
            throw new SD(Uw.LOCAL_AEC_ERROR, e3.toString()).print();
          }
        }
        async getTracksFromMediaElement(e2) {
          if (this.audioTrack) return this.audioTrack;
          let t2;
          try {
            e2 instanceof HTMLVideoElement && (e2.captureStream ? e2.captureStream() : e2.mozCaptureStream()), t2 = this.context.createMediaStreamDestination();
            this.context.createMediaElementSource(e2).connect(t2);
          } catch (e3) {
            throw new SD(Uw.LOCAL_AEC_ERROR, e3.toString()).print();
          }
          if (!t2) {
            throw new SD(Uw.LOCAL_AEC_ERROR, "no dest node when local aec").print();
          }
          const i2 = t2.stream.getAudioTracks()[0];
          return this.audioTrack = i2, i2;
        }
        getElement() {
          return this.element;
        }
        async startEchoCancellation() {
          this.context.resume(), this.peerPair && this.close(), this.initPeers();
          const e2 = this.element, t2 = await this.getTracksFromMediaElement(e2);
          this.peerPair && this.peerPair[0].addTrack(t2), await this.switchSdp();
        }
        close() {
          lD.debug("close echo cancellation unit, id is", this.id), this.audioPlayerElement && this.audioPlayerElement.pause(), this.peerPair && this.peerPair.forEach((e2) => {
            e2.close();
          }), this.peerPair = void 0, this.audioPlayerElement = void 0;
        }
      }
      var QG, ZG;
      vy(XG, "count", 0);
      const $G = window.AudioContext || window.webkitAudioContext;
      const eW = new (QG = fD({ report: TD }), RU((ZG = class {
        constructor() {
          vy(this, "units", []), vy(this, "context", void 0);
        }
        processExternalMediaAEC(e2) {
          if (!this._doesEnvironmentNeedAEC()) return lD.debug("the system does not need to process local aec"), -1;
          this.context || (this.context = new $G());
          let t2 = this.units.find((t3) => t3 && t3.getElement() === e2);
          return t2 || (t2 = new XG(e2, this.context), this.units.push(t2)), t2.startEchoCancellation(), lD.debug("start processing local audio echo cancellation, id is", t2.id), t2.id;
        }
        _doesEnvironmentNeedAEC() {
          return rw().name !== ew.SAFARI;
        }
      }).prototype, "processExternalMediaAEC", [QG], Object.getOwnPropertyDescriptor(ZG.prototype, "processExternalMediaAEC"), ZG.prototype), ZG)();
      function tW(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function iW(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? tW(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : tW(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const nW = window || document;
      function rW(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (!nW) return;
        const i2 = gz._cspEventHandlerPointer;
        if (i2 && t2) return void console.error(i2, t2);
        const n2 = (e3) => {
          if (!(e3 && e3.blockedURI && (gz.onSecurityPolicyViolation || gz.getListeners(Tx.SECURITY_POLICY_VIOLATION).length > 0))) return;
          const t3 = e3.blockedURI;
          MN("CSP_DETECTED_HOSTNAME_LIST").some((e4) => kn(t3).call(t3, e4)) && (gz.onSecurityPolicyViolation && "function" == typeof gz.onSecurityPolicyViolation && gz.onSecurityPolicyViolation(e3), gz.getListeners(Tx.SECURITY_POLICY_VIOLATION).length > 0 && gz.safeEmit(Tx.SECURITY_POLICY_VIOLATION, e3));
        };
        i2 && nW.removeEventListener("securitypolicyviolation", i2), (t2 || e2 && "function" == typeof e2 || gz.getListeners(Tx.SECURITY_POLICY_VIOLATION).length > 0) && nW.addEventListener("securitypolicyviolation", n2), gz._cspEventHandlerPointer = n2;
      }
      var oW = l, sW = Fy, aW = RegExp.prototype, cW = function(e2) {
        return e2 === aW || oW(aW, e2) ? sW(e2) : e2.flags;
      }, dW = i(cW);
      function lW(e2) {
        let t2 = e2.length;
        for (; --t2 >= 0; ) e2[t2] = 0;
      }
      const uW = 256, hW = 286, pW = 30, _W = 15, EW = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]), mW = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), fW = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]), TW = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), SW = new Array(576);
      lW(SW);
      const gW = new Array(60);
      lW(gW);
      const RW = new Array(512);
      lW(RW);
      const vW = new Array(256);
      lW(vW);
      const CW = new Array(29);
      lW(CW);
      const IW = new Array(pW);
      function yW(e2, t2, i2, n2, r2) {
        this.static_tree = e2, this.extra_bits = t2, this.extra_base = i2, this.elems = n2, this.max_length = r2, this.has_stree = e2 && e2.length;
      }
      let AW, bW, wW;
      function OW(e2, t2) {
        this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;
      }
      lW(IW);
      const NW = (e2) => e2 < 256 ? RW[e2] : RW[256 + (e2 >>> 7)], DW = (e2, t2) => {
        e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;
      }, PW = (e2, t2, i2) => {
        e2.bi_valid > 16 - i2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, DW(e2, e2.bi_buf), e2.bi_buf = t2 >> 16 - e2.bi_valid, e2.bi_valid += i2 - 16) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += i2);
      }, LW = (e2, t2, i2) => {
        PW(e2, i2[2 * t2], i2[2 * t2 + 1]);
      }, kW = (e2, t2) => {
        let i2 = 0;
        do {
          i2 |= 1 & e2, e2 >>>= 1, i2 <<= 1;
        } while (--t2 > 0);
        return i2 >>> 1;
      }, MW = (e2, t2, i2) => {
        const n2 = new Array(16);
        let r2, o2, s2 = 0;
        for (r2 = 1; r2 <= _W; r2++) s2 = s2 + i2[r2 - 1] << 1, n2[r2] = s2;
        for (o2 = 0; o2 <= t2; o2++) {
          let t3 = e2[2 * o2 + 1];
          0 !== t3 && (e2[2 * o2] = kW(n2[t3]++, t3));
        }
      }, UW = (e2) => {
        let t2;
        for (t2 = 0; t2 < hW; t2++) e2.dyn_ltree[2 * t2] = 0;
        for (t2 = 0; t2 < pW; t2++) e2.dyn_dtree[2 * t2] = 0;
        for (t2 = 0; t2 < 19; t2++) e2.bl_tree[2 * t2] = 0;
        e2.dyn_ltree[512] = 1, e2.opt_len = e2.static_len = 0, e2.sym_next = e2.matches = 0;
      }, xW = (e2) => {
        e2.bi_valid > 8 ? DW(e2, e2.bi_buf) : e2.bi_valid > 0 && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;
      }, VW = (e2, t2, i2, n2) => {
        const r2 = 2 * t2, o2 = 2 * i2;
        return e2[r2] < e2[o2] || e2[r2] === e2[o2] && n2[t2] <= n2[i2];
      }, FW = (e2, t2, i2) => {
        const n2 = e2.heap[i2];
        let r2 = i2 << 1;
        for (; r2 <= e2.heap_len && (r2 < e2.heap_len && VW(t2, e2.heap[r2 + 1], e2.heap[r2], e2.depth) && r2++, !VW(t2, n2, e2.heap[r2], e2.depth)); ) e2.heap[i2] = e2.heap[r2], i2 = r2, r2 <<= 1;
        e2.heap[i2] = n2;
      }, BW = (e2, t2, i2) => {
        let n2, r2, o2, s2, a2 = 0;
        if (0 !== e2.sym_next) do {
          n2 = 255 & e2.pending_buf[e2.sym_buf + a2++], n2 += (255 & e2.pending_buf[e2.sym_buf + a2++]) << 8, r2 = e2.pending_buf[e2.sym_buf + a2++], 0 === n2 ? LW(e2, r2, t2) : (o2 = vW[r2], LW(e2, o2 + uW + 1, t2), s2 = EW[o2], 0 !== s2 && (r2 -= CW[o2], PW(e2, r2, s2)), n2--, o2 = NW(n2), LW(e2, o2, i2), s2 = mW[o2], 0 !== s2 && (n2 -= IW[o2], PW(e2, n2, s2)));
        } while (a2 < e2.sym_next);
        LW(e2, 256, t2);
      }, jW = (e2, t2) => {
        const i2 = t2.dyn_tree, n2 = t2.stat_desc.static_tree, r2 = t2.stat_desc.has_stree, o2 = t2.stat_desc.elems;
        let s2, a2, c2, d2 = -1;
        for (e2.heap_len = 0, e2.heap_max = 573, s2 = 0; s2 < o2; s2++) 0 !== i2[2 * s2] ? (e2.heap[++e2.heap_len] = d2 = s2, e2.depth[s2] = 0) : i2[2 * s2 + 1] = 0;
        for (; e2.heap_len < 2; ) c2 = e2.heap[++e2.heap_len] = d2 < 2 ? ++d2 : 0, i2[2 * c2] = 1, e2.depth[c2] = 0, e2.opt_len--, r2 && (e2.static_len -= n2[2 * c2 + 1]);
        for (t2.max_code = d2, s2 = e2.heap_len >> 1; s2 >= 1; s2--) FW(e2, i2, s2);
        c2 = o2;
        do {
          s2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], FW(e2, i2, 1), a2 = e2.heap[1], e2.heap[--e2.heap_max] = s2, e2.heap[--e2.heap_max] = a2, i2[2 * c2] = i2[2 * s2] + i2[2 * a2], e2.depth[c2] = (e2.depth[s2] >= e2.depth[a2] ? e2.depth[s2] : e2.depth[a2]) + 1, i2[2 * s2 + 1] = i2[2 * a2 + 1] = c2, e2.heap[1] = c2++, FW(e2, i2, 1);
        } while (e2.heap_len >= 2);
        e2.heap[--e2.heap_max] = e2.heap[1], ((e3, t3) => {
          const i3 = t3.dyn_tree, n3 = t3.max_code, r3 = t3.stat_desc.static_tree, o3 = t3.stat_desc.has_stree, s3 = t3.stat_desc.extra_bits, a3 = t3.stat_desc.extra_base, c3 = t3.stat_desc.max_length;
          let d3, l2, u2, h2, p2, _2, E2 = 0;
          for (h2 = 0; h2 <= _W; h2++) e3.bl_count[h2] = 0;
          for (i3[2 * e3.heap[e3.heap_max] + 1] = 0, d3 = e3.heap_max + 1; d3 < 573; d3++) l2 = e3.heap[d3], h2 = i3[2 * i3[2 * l2 + 1] + 1] + 1, h2 > c3 && (h2 = c3, E2++), i3[2 * l2 + 1] = h2, l2 > n3 || (e3.bl_count[h2]++, p2 = 0, l2 >= a3 && (p2 = s3[l2 - a3]), _2 = i3[2 * l2], e3.opt_len += _2 * (h2 + p2), o3 && (e3.static_len += _2 * (r3[2 * l2 + 1] + p2)));
          if (0 !== E2) {
            do {
              for (h2 = c3 - 1; 0 === e3.bl_count[h2]; ) h2--;
              e3.bl_count[h2]--, e3.bl_count[h2 + 1] += 2, e3.bl_count[c3]--, E2 -= 2;
            } while (E2 > 0);
            for (h2 = c3; 0 !== h2; h2--) for (l2 = e3.bl_count[h2]; 0 !== l2; ) u2 = e3.heap[--d3], u2 > n3 || (i3[2 * u2 + 1] !== h2 && (e3.opt_len += (h2 - i3[2 * u2 + 1]) * i3[2 * u2], i3[2 * u2 + 1] = h2), l2--);
          }
        })(e2, t2), MW(i2, d2, e2.bl_count);
      }, GW = (e2, t2, i2) => {
        let n2, r2, o2 = -1, s2 = t2[1], a2 = 0, c2 = 7, d2 = 4;
        for (0 === s2 && (c2 = 138, d2 = 3), t2[2 * (i2 + 1) + 1] = 65535, n2 = 0; n2 <= i2; n2++) r2 = s2, s2 = t2[2 * (n2 + 1) + 1], ++a2 < c2 && r2 === s2 || (a2 < d2 ? e2.bl_tree[2 * r2] += a2 : 0 !== r2 ? (r2 !== o2 && e2.bl_tree[2 * r2]++, e2.bl_tree[32]++) : a2 <= 10 ? e2.bl_tree[34]++ : e2.bl_tree[36]++, a2 = 0, o2 = r2, 0 === s2 ? (c2 = 138, d2 = 3) : r2 === s2 ? (c2 = 6, d2 = 3) : (c2 = 7, d2 = 4));
      }, WW = (e2, t2, i2) => {
        let n2, r2, o2 = -1, s2 = t2[1], a2 = 0, c2 = 7, d2 = 4;
        for (0 === s2 && (c2 = 138, d2 = 3), n2 = 0; n2 <= i2; n2++) if (r2 = s2, s2 = t2[2 * (n2 + 1) + 1], !(++a2 < c2 && r2 === s2)) {
          if (a2 < d2) do {
            LW(e2, r2, e2.bl_tree);
          } while (0 != --a2);
          else 0 !== r2 ? (r2 !== o2 && (LW(e2, r2, e2.bl_tree), a2--), LW(e2, 16, e2.bl_tree), PW(e2, a2 - 3, 2)) : a2 <= 10 ? (LW(e2, 17, e2.bl_tree), PW(e2, a2 - 3, 3)) : (LW(e2, 18, e2.bl_tree), PW(e2, a2 - 11, 7));
          a2 = 0, o2 = r2, 0 === s2 ? (c2 = 138, d2 = 3) : r2 === s2 ? (c2 = 6, d2 = 3) : (c2 = 7, d2 = 4);
        }
      };
      let HW = false;
      const KW = (e2, t2, i2, n2) => {
        PW(e2, 0 + (n2 ? 1 : 0), 3), xW(e2), DW(e2, i2), DW(e2, ~i2), i2 && e2.pending_buf.set(e2.window.subarray(t2, t2 + i2), e2.pending), e2.pending += i2;
      };
      var YW = (e2) => {
        HW || ((() => {
          let e3, t2, i2, n2, r2;
          const o2 = new Array(16);
          for (i2 = 0, n2 = 0; n2 < 28; n2++) for (CW[n2] = i2, e3 = 0; e3 < 1 << EW[n2]; e3++) vW[i2++] = n2;
          for (vW[i2 - 1] = n2, r2 = 0, n2 = 0; n2 < 16; n2++) for (IW[n2] = r2, e3 = 0; e3 < 1 << mW[n2]; e3++) RW[r2++] = n2;
          for (r2 >>= 7; n2 < pW; n2++) for (IW[n2] = r2 << 7, e3 = 0; e3 < 1 << mW[n2] - 7; e3++) RW[256 + r2++] = n2;
          for (t2 = 0; t2 <= _W; t2++) o2[t2] = 0;
          for (e3 = 0; e3 <= 143; ) SW[2 * e3 + 1] = 8, e3++, o2[8]++;
          for (; e3 <= 255; ) SW[2 * e3 + 1] = 9, e3++, o2[9]++;
          for (; e3 <= 279; ) SW[2 * e3 + 1] = 7, e3++, o2[7]++;
          for (; e3 <= 287; ) SW[2 * e3 + 1] = 8, e3++, o2[8]++;
          for (MW(SW, 287, o2), e3 = 0; e3 < pW; e3++) gW[2 * e3 + 1] = 5, gW[2 * e3] = kW(e3, 5);
          AW = new yW(SW, EW, 257, hW, _W), bW = new yW(gW, mW, 0, pW, _W), wW = new yW(new Array(0), fW, 0, 19, 7);
        })(), HW = true), e2.l_desc = new OW(e2.dyn_ltree, AW), e2.d_desc = new OW(e2.dyn_dtree, bW), e2.bl_desc = new OW(e2.bl_tree, wW), e2.bi_buf = 0, e2.bi_valid = 0, UW(e2);
      }, qW = (e2, t2, i2, n2) => {
        let r2, o2, s2 = 0;
        e2.level > 0 ? (2 === e2.strm.data_type && (e2.strm.data_type = ((e3) => {
          let t3, i3 = 4093624447;
          for (t3 = 0; t3 <= 31; t3++, i3 >>>= 1) if (1 & i3 && 0 !== e3.dyn_ltree[2 * t3]) return 0;
          if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26]) return 1;
          for (t3 = 32; t3 < uW; t3++) if (0 !== e3.dyn_ltree[2 * t3]) return 1;
          return 0;
        })(e2)), jW(e2, e2.l_desc), jW(e2, e2.d_desc), s2 = ((e3) => {
          let t3;
          for (GW(e3, e3.dyn_ltree, e3.l_desc.max_code), GW(e3, e3.dyn_dtree, e3.d_desc.max_code), jW(e3, e3.bl_desc), t3 = 18; t3 >= 3 && 0 === e3.bl_tree[2 * TW[t3] + 1]; t3--) ;
          return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;
        })(e2), r2 = e2.opt_len + 3 + 7 >>> 3, o2 = e2.static_len + 3 + 7 >>> 3, o2 <= r2 && (r2 = o2)) : r2 = o2 = i2 + 5, i2 + 4 <= r2 && -1 !== t2 ? KW(e2, t2, i2, n2) : 4 === e2.strategy || o2 === r2 ? (PW(e2, 2 + (n2 ? 1 : 0), 3), BW(e2, SW, gW)) : (PW(e2, 4 + (n2 ? 1 : 0), 3), ((e3, t3, i3, n3) => {
          let r3;
          for (PW(e3, t3 - 257, 5), PW(e3, i3 - 1, 5), PW(e3, n3 - 4, 4), r3 = 0; r3 < n3; r3++) PW(e3, e3.bl_tree[2 * TW[r3] + 1], 3);
          WW(e3, e3.dyn_ltree, t3 - 1), WW(e3, e3.dyn_dtree, i3 - 1);
        })(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, s2 + 1), BW(e2, e2.dyn_ltree, e2.dyn_dtree)), UW(e2), n2 && xW(e2);
      }, zW = (e2, t2, i2) => (e2.pending_buf[e2.sym_buf + e2.sym_next++] = t2, e2.pending_buf[e2.sym_buf + e2.sym_next++] = t2 >> 8, e2.pending_buf[e2.sym_buf + e2.sym_next++] = i2, 0 === t2 ? e2.dyn_ltree[2 * i2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (vW[i2] + uW + 1)]++, e2.dyn_dtree[2 * NW(t2)]++), e2.sym_next === e2.sym_end), JW = (e2) => {
        PW(e2, 2, 3), LW(e2, 256, SW), ((e3) => {
          16 === e3.bi_valid ? (DW(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : e3.bi_valid >= 8 && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);
        })(e2);
      }, XW = { _tr_init: YW, _tr_stored_block: KW, _tr_flush_block: qW, _tr_tally: zW, _tr_align: JW };
      var QW = (e2, t2, i2, n2) => {
        let r2 = 65535 & e2, o2 = e2 >>> 16 & 65535, s2 = 0;
        for (; 0 !== i2; ) {
          s2 = i2 > 2e3 ? 2e3 : i2, i2 -= s2;
          do {
            r2 = r2 + t2[n2++] | 0, o2 = o2 + r2 | 0;
          } while (--s2);
          r2 %= 65521, o2 %= 65521;
        }
        return r2 | o2 << 16;
      };
      const ZW = new Uint32Array((() => {
        let e2, t2 = [];
        for (var i2 = 0; i2 < 256; i2++) {
          e2 = i2;
          for (var n2 = 0; n2 < 8; n2++) e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
          t2[i2] = e2;
        }
        return t2;
      })());
      var $W = (e2, t2, i2, n2) => {
        const r2 = ZW, o2 = n2 + i2;
        e2 ^= -1;
        for (let i3 = n2; i3 < o2; i3++) e2 = e2 >>> 8 ^ r2[255 & (e2 ^ t2[i3])];
        return ~e2;
      }, eH = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" }, tH = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_MEM_ERROR: -4, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
      const { _tr_init: iH, _tr_stored_block: nH, _tr_flush_block: rH, _tr_tally: oH, _tr_align: sH } = XW, { Z_NO_FLUSH: aH, Z_PARTIAL_FLUSH: cH, Z_FULL_FLUSH: dH, Z_FINISH: lH, Z_BLOCK: uH, Z_OK: hH, Z_STREAM_END: pH, Z_STREAM_ERROR: _H, Z_DATA_ERROR: EH, Z_BUF_ERROR: mH, Z_DEFAULT_COMPRESSION: fH, Z_FILTERED: TH, Z_HUFFMAN_ONLY: SH, Z_RLE: gH, Z_FIXED: RH, Z_DEFAULT_STRATEGY: vH, Z_UNKNOWN: CH, Z_DEFLATED: IH } = tH, yH = 258, AH = 262, bH = 42, wH = 113, OH = 666, NH = (e2, t2) => (e2.msg = eH[t2], t2), DH = (e2) => 2 * e2 - (e2 > 4 ? 9 : 0), PH = (e2) => {
        let t2 = e2.length;
        for (; --t2 >= 0; ) e2[t2] = 0;
      }, LH = (e2) => {
        let t2, i2, n2, r2 = e2.w_size;
        t2 = e2.hash_size, n2 = t2;
        do {
          i2 = e2.head[--n2], e2.head[n2] = i2 >= r2 ? i2 - r2 : 0;
        } while (--t2);
        t2 = r2, n2 = t2;
        do {
          i2 = e2.prev[--n2], e2.prev[n2] = i2 >= r2 ? i2 - r2 : 0;
        } while (--t2);
      };
      let kH = (e2, t2, i2) => (t2 << e2.hash_shift ^ i2) & e2.hash_mask;
      const MH = (e2) => {
        const t2 = e2.state;
        let i2 = t2.pending;
        i2 > e2.avail_out && (i2 = e2.avail_out), 0 !== i2 && (e2.output.set(t2.pending_buf.subarray(t2.pending_out, t2.pending_out + i2), e2.next_out), e2.next_out += i2, t2.pending_out += i2, e2.total_out += i2, e2.avail_out -= i2, t2.pending -= i2, 0 === t2.pending && (t2.pending_out = 0));
      }, UH = (e2, t2) => {
        rH(e2, e2.block_start >= 0 ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, MH(e2.strm);
      }, xH = (e2, t2) => {
        e2.pending_buf[e2.pending++] = t2;
      }, VH = (e2, t2) => {
        e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;
      }, FH = (e2, t2, i2, n2) => {
        let r2 = e2.avail_in;
        return r2 > n2 && (r2 = n2), 0 === r2 ? 0 : (e2.avail_in -= r2, t2.set(e2.input.subarray(e2.next_in, e2.next_in + r2), i2), 1 === e2.state.wrap ? e2.adler = QW(e2.adler, t2, r2, i2) : 2 === e2.state.wrap && (e2.adler = $W(e2.adler, t2, r2, i2)), e2.next_in += r2, e2.total_in += r2, r2);
      }, BH = (e2, t2) => {
        let i2, n2, r2 = e2.max_chain_length, o2 = e2.strstart, s2 = e2.prev_length, a2 = e2.nice_match;
        const c2 = e2.strstart > e2.w_size - AH ? e2.strstart - (e2.w_size - AH) : 0, d2 = e2.window, l2 = e2.w_mask, u2 = e2.prev, h2 = e2.strstart + yH;
        let p2 = d2[o2 + s2 - 1], _2 = d2[o2 + s2];
        e2.prev_length >= e2.good_match && (r2 >>= 2), a2 > e2.lookahead && (a2 = e2.lookahead);
        do {
          if (i2 = t2, d2[i2 + s2] === _2 && d2[i2 + s2 - 1] === p2 && d2[i2] === d2[o2] && d2[++i2] === d2[o2 + 1]) {
            o2 += 2, i2++;
            do {
            } while (d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && d2[++o2] === d2[++i2] && o2 < h2);
            if (n2 = yH - (h2 - o2), o2 = h2 - yH, n2 > s2) {
              if (e2.match_start = t2, s2 = n2, n2 >= a2) break;
              p2 = d2[o2 + s2 - 1], _2 = d2[o2 + s2];
            }
          }
        } while ((t2 = u2[t2 & l2]) > c2 && 0 != --r2);
        return s2 <= e2.lookahead ? s2 : e2.lookahead;
      }, jH = (e2) => {
        const t2 = e2.w_size;
        let i2, n2, r2;
        do {
          if (n2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= t2 + (t2 - AH) && (e2.window.set(e2.window.subarray(t2, t2 + t2 - n2), 0), e2.match_start -= t2, e2.strstart -= t2, e2.block_start -= t2, e2.insert > e2.strstart && (e2.insert = e2.strstart), LH(e2), n2 += t2), 0 === e2.strm.avail_in) break;
          if (i2 = FH(e2.strm, e2.window, e2.strstart + e2.lookahead, n2), e2.lookahead += i2, e2.lookahead + e2.insert >= 3) for (r2 = e2.strstart - e2.insert, e2.ins_h = e2.window[r2], e2.ins_h = kH(e2, e2.ins_h, e2.window[r2 + 1]); e2.insert && (e2.ins_h = kH(e2, e2.ins_h, e2.window[r2 + 3 - 1]), e2.prev[r2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = r2, r2++, e2.insert--, !(e2.lookahead + e2.insert < 3)); ) ;
        } while (e2.lookahead < AH && 0 !== e2.strm.avail_in);
      }, GH = (e2, t2) => {
        let i2, n2, r2, o2 = e2.pending_buf_size - 5 > e2.w_size ? e2.w_size : e2.pending_buf_size - 5, s2 = 0, a2 = e2.strm.avail_in;
        do {
          if (i2 = 65535, r2 = e2.bi_valid + 42 >> 3, e2.strm.avail_out < r2) break;
          if (r2 = e2.strm.avail_out - r2, n2 = e2.strstart - e2.block_start, i2 > n2 + e2.strm.avail_in && (i2 = n2 + e2.strm.avail_in), i2 > r2 && (i2 = r2), i2 < o2 && (0 === i2 && t2 !== lH || t2 === aH || i2 !== n2 + e2.strm.avail_in)) break;
          s2 = t2 === lH && i2 === n2 + e2.strm.avail_in ? 1 : 0, nH(e2, 0, 0, s2), e2.pending_buf[e2.pending - 4] = i2, e2.pending_buf[e2.pending - 3] = i2 >> 8, e2.pending_buf[e2.pending - 2] = ~i2, e2.pending_buf[e2.pending - 1] = ~i2 >> 8, MH(e2.strm), n2 && (n2 > i2 && (n2 = i2), e2.strm.output.set(e2.window.subarray(e2.block_start, e2.block_start + n2), e2.strm.next_out), e2.strm.next_out += n2, e2.strm.avail_out -= n2, e2.strm.total_out += n2, e2.block_start += n2, i2 -= n2), i2 && (FH(e2.strm, e2.strm.output, e2.strm.next_out, i2), e2.strm.next_out += i2, e2.strm.avail_out -= i2, e2.strm.total_out += i2);
        } while (0 === s2);
        return a2 -= e2.strm.avail_in, a2 && (a2 >= e2.w_size ? (e2.matches = 2, e2.window.set(e2.strm.input.subarray(e2.strm.next_in - e2.w_size, e2.strm.next_in), 0), e2.strstart = e2.w_size, e2.insert = e2.strstart) : (e2.window_size - e2.strstart <= a2 && (e2.strstart -= e2.w_size, e2.window.set(e2.window.subarray(e2.w_size, e2.w_size + e2.strstart), 0), e2.matches < 2 && e2.matches++, e2.insert > e2.strstart && (e2.insert = e2.strstart)), e2.window.set(e2.strm.input.subarray(e2.strm.next_in - a2, e2.strm.next_in), e2.strstart), e2.strstart += a2, e2.insert += a2 > e2.w_size - e2.insert ? e2.w_size - e2.insert : a2), e2.block_start = e2.strstart), e2.high_water < e2.strstart && (e2.high_water = e2.strstart), s2 ? 4 : t2 !== aH && t2 !== lH && 0 === e2.strm.avail_in && e2.strstart === e2.block_start ? 2 : (r2 = e2.window_size - e2.strstart, e2.strm.avail_in > r2 && e2.block_start >= e2.w_size && (e2.block_start -= e2.w_size, e2.strstart -= e2.w_size, e2.window.set(e2.window.subarray(e2.w_size, e2.w_size + e2.strstart), 0), e2.matches < 2 && e2.matches++, r2 += e2.w_size, e2.insert > e2.strstart && (e2.insert = e2.strstart)), r2 > e2.strm.avail_in && (r2 = e2.strm.avail_in), r2 && (FH(e2.strm, e2.window, e2.strstart, r2), e2.strstart += r2, e2.insert += r2 > e2.w_size - e2.insert ? e2.w_size - e2.insert : r2), e2.high_water < e2.strstart && (e2.high_water = e2.strstart), r2 = e2.bi_valid + 42 >> 3, r2 = e2.pending_buf_size - r2 > 65535 ? 65535 : e2.pending_buf_size - r2, o2 = r2 > e2.w_size ? e2.w_size : r2, n2 = e2.strstart - e2.block_start, (n2 >= o2 || (n2 || t2 === lH) && t2 !== aH && 0 === e2.strm.avail_in && n2 <= r2) && (i2 = n2 > r2 ? r2 : n2, s2 = t2 === lH && 0 === e2.strm.avail_in && i2 === n2 ? 1 : 0, nH(e2, e2.block_start, i2, s2), e2.block_start += i2, MH(e2.strm)), s2 ? 3 : 1);
      }, WH = (e2, t2) => {
        let i2, n2;
        for (; ; ) {
          if (e2.lookahead < AH) {
            if (jH(e2), e2.lookahead < AH && t2 === aH) return 1;
            if (0 === e2.lookahead) break;
          }
          if (i2 = 0, e2.lookahead >= 3 && (e2.ins_h = kH(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== i2 && e2.strstart - i2 <= e2.w_size - AH && (e2.match_length = BH(e2, i2)), e2.match_length >= 3) if (n2 = oH(e2, e2.strstart - e2.match_start, e2.match_length - 3), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= 3) {
            e2.match_length--;
            do {
              e2.strstart++, e2.ins_h = kH(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart;
            } while (0 != --e2.match_length);
            e2.strstart++;
          } else e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = kH(e2, e2.ins_h, e2.window[e2.strstart + 1]);
          else n2 = oH(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;
          if (n2 && (UH(e2, false), 0 === e2.strm.avail_out)) return 1;
        }
        return e2.insert = e2.strstart < 2 ? e2.strstart : 2, t2 === lH ? (UH(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.sym_next && (UH(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
      }, HH = (e2, t2) => {
        let i2, n2, r2;
        for (; ; ) {
          if (e2.lookahead < AH) {
            if (jH(e2), e2.lookahead < AH && t2 === aH) return 1;
            if (0 === e2.lookahead) break;
          }
          if (i2 = 0, e2.lookahead >= 3 && (e2.ins_h = kH(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = 2, 0 !== i2 && e2.prev_length < e2.max_lazy_match && e2.strstart - i2 <= e2.w_size - AH && (e2.match_length = BH(e2, i2), e2.match_length <= 5 && (e2.strategy === TH || 3 === e2.match_length && e2.strstart - e2.match_start > 4096) && (e2.match_length = 2)), e2.prev_length >= 3 && e2.match_length <= e2.prev_length) {
            r2 = e2.strstart + e2.lookahead - 3, n2 = oH(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - 3), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2;
            do {
              ++e2.strstart <= r2 && (e2.ins_h = kH(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart);
            } while (0 != --e2.prev_length);
            if (e2.match_available = 0, e2.match_length = 2, e2.strstart++, n2 && (UH(e2, false), 0 === e2.strm.avail_out)) return 1;
          } else if (e2.match_available) {
            if (n2 = oH(e2, 0, e2.window[e2.strstart - 1]), n2 && UH(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out) return 1;
          } else e2.match_available = 1, e2.strstart++, e2.lookahead--;
        }
        return e2.match_available && (n2 = oH(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < 2 ? e2.strstart : 2, t2 === lH ? (UH(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.sym_next && (UH(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
      };
      function KH(e2, t2, i2, n2, r2) {
        this.good_length = e2, this.max_lazy = t2, this.nice_length = i2, this.max_chain = n2, this.func = r2;
      }
      const YH = [new KH(0, 0, 0, 0, GH), new KH(4, 4, 8, 4, WH), new KH(4, 5, 16, 8, WH), new KH(4, 6, 32, 32, WH), new KH(4, 4, 16, 16, HH), new KH(8, 16, 32, 32, HH), new KH(8, 16, 128, 128, HH), new KH(8, 32, 128, 256, HH), new KH(32, 128, 258, 1024, HH), new KH(32, 258, 258, 4096, HH)];
      function qH() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = IH, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new Uint16Array(1146), this.dyn_dtree = new Uint16Array(122), this.bl_tree = new Uint16Array(78), PH(this.dyn_ltree), PH(this.dyn_dtree), PH(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new Uint16Array(16), this.heap = new Uint16Array(573), PH(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new Uint16Array(573), PH(this.depth), this.sym_buf = 0, this.lit_bufsize = 0, this.sym_next = 0, this.sym_end = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
      const zH = (e2) => {
        if (!e2) return 1;
        const t2 = e2.state;
        return !t2 || t2.strm !== e2 || t2.status !== bH && 57 !== t2.status && 69 !== t2.status && 73 !== t2.status && 91 !== t2.status && 103 !== t2.status && t2.status !== wH && t2.status !== OH ? 1 : 0;
      }, JH = (e2) => {
        if (zH(e2)) return NH(e2, _H);
        e2.total_in = e2.total_out = 0, e2.data_type = CH;
        const t2 = e2.state;
        return t2.pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = 2 === t2.wrap ? 57 : t2.wrap ? bH : wH, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = -2, iH(t2), hH;
      }, XH = (e2) => {
        const t2 = JH(e2);
        return t2 === hH && ((e3) => {
          e3.window_size = 2 * e3.w_size, PH(e3.head), e3.max_lazy_match = YH[e3.level].max_lazy, e3.good_match = YH[e3.level].good_length, e3.nice_match = YH[e3.level].nice_length, e3.max_chain_length = YH[e3.level].max_chain, e3.strstart = 0, e3.block_start = 0, e3.lookahead = 0, e3.insert = 0, e3.match_length = e3.prev_length = 2, e3.match_available = 0, e3.ins_h = 0;
        })(e2.state), t2;
      }, QH = (e2, t2, i2, n2, r2, o2) => {
        if (!e2) return _H;
        let s2 = 1;
        if (t2 === fH && (t2 = 6), n2 < 0 ? (s2 = 0, n2 = -n2) : n2 > 15 && (s2 = 2, n2 -= 16), r2 < 1 || r2 > 9 || i2 !== IH || n2 < 8 || n2 > 15 || t2 < 0 || t2 > 9 || o2 < 0 || o2 > RH || 8 === n2 && 1 !== s2) return NH(e2, _H);
        8 === n2 && (n2 = 9);
        const a2 = new qH();
        return e2.state = a2, a2.strm = e2, a2.status = bH, a2.wrap = s2, a2.gzhead = null, a2.w_bits = n2, a2.w_size = 1 << a2.w_bits, a2.w_mask = a2.w_size - 1, a2.hash_bits = r2 + 7, a2.hash_size = 1 << a2.hash_bits, a2.hash_mask = a2.hash_size - 1, a2.hash_shift = ~~((a2.hash_bits + 3 - 1) / 3), a2.window = new Uint8Array(2 * a2.w_size), a2.head = new Uint16Array(a2.hash_size), a2.prev = new Uint16Array(a2.w_size), a2.lit_bufsize = 1 << r2 + 6, a2.pending_buf_size = 4 * a2.lit_bufsize, a2.pending_buf = new Uint8Array(a2.pending_buf_size), a2.sym_buf = a2.lit_bufsize, a2.sym_end = 3 * (a2.lit_bufsize - 1), a2.level = t2, a2.strategy = o2, a2.method = i2, XH(e2);
      };
      var ZH = (e2, t2) => {
        if (zH(e2) || t2 > uH || t2 < 0) return e2 ? NH(e2, _H) : _H;
        const i2 = e2.state;
        if (!e2.output || 0 !== e2.avail_in && !e2.input || i2.status === OH && t2 !== lH) return NH(e2, 0 === e2.avail_out ? mH : _H);
        const n2 = i2.last_flush;
        if (i2.last_flush = t2, 0 !== i2.pending) {
          if (MH(e2), 0 === e2.avail_out) return i2.last_flush = -1, hH;
        } else if (0 === e2.avail_in && DH(t2) <= DH(n2) && t2 !== lH) return NH(e2, mH);
        if (i2.status === OH && 0 !== e2.avail_in) return NH(e2, mH);
        if (i2.status === bH && 0 === i2.wrap && (i2.status = wH), i2.status === bH) {
          let t3 = IH + (i2.w_bits - 8 << 4) << 8, n3 = -1;
          if (n3 = i2.strategy >= SH || i2.level < 2 ? 0 : i2.level < 6 ? 1 : 6 === i2.level ? 2 : 3, t3 |= n3 << 6, 0 !== i2.strstart && (t3 |= 32), t3 += 31 - t3 % 31, VH(i2, t3), 0 !== i2.strstart && (VH(i2, e2.adler >>> 16), VH(i2, 65535 & e2.adler)), e2.adler = 1, i2.status = wH, MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
        }
        if (57 === i2.status) {
          if (e2.adler = 0, xH(i2, 31), xH(i2, 139), xH(i2, 8), i2.gzhead) xH(i2, (i2.gzhead.text ? 1 : 0) + (i2.gzhead.hcrc ? 2 : 0) + (i2.gzhead.extra ? 4 : 0) + (i2.gzhead.name ? 8 : 0) + (i2.gzhead.comment ? 16 : 0)), xH(i2, 255 & i2.gzhead.time), xH(i2, i2.gzhead.time >> 8 & 255), xH(i2, i2.gzhead.time >> 16 & 255), xH(i2, i2.gzhead.time >> 24 & 255), xH(i2, 9 === i2.level ? 2 : i2.strategy >= SH || i2.level < 2 ? 4 : 0), xH(i2, 255 & i2.gzhead.os), i2.gzhead.extra && i2.gzhead.extra.length && (xH(i2, 255 & i2.gzhead.extra.length), xH(i2, i2.gzhead.extra.length >> 8 & 255)), i2.gzhead.hcrc && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending, 0)), i2.gzindex = 0, i2.status = 69;
          else if (xH(i2, 0), xH(i2, 0), xH(i2, 0), xH(i2, 0), xH(i2, 0), xH(i2, 9 === i2.level ? 2 : i2.strategy >= SH || i2.level < 2 ? 4 : 0), xH(i2, 3), i2.status = wH, MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
        }
        if (69 === i2.status) {
          if (i2.gzhead.extra) {
            let t3 = i2.pending, n3 = (65535 & i2.gzhead.extra.length) - i2.gzindex;
            for (; i2.pending + n3 > i2.pending_buf_size; ) {
              let r3 = i2.pending_buf_size - i2.pending;
              if (i2.pending_buf.set(i2.gzhead.extra.subarray(i2.gzindex, i2.gzindex + r3), i2.pending), i2.pending = i2.pending_buf_size, i2.gzhead.hcrc && i2.pending > t3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - t3, t3)), i2.gzindex += r3, MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
              t3 = 0, n3 -= r3;
            }
            let r2 = new Uint8Array(i2.gzhead.extra);
            i2.pending_buf.set(r2.subarray(i2.gzindex, i2.gzindex + n3), i2.pending), i2.pending += n3, i2.gzhead.hcrc && i2.pending > t3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - t3, t3)), i2.gzindex = 0;
          }
          i2.status = 73;
        }
        if (73 === i2.status) {
          if (i2.gzhead.name) {
            let t3, n3 = i2.pending;
            do {
              if (i2.pending === i2.pending_buf_size) {
                if (i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - n3, n3)), MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
                n3 = 0;
              }
              t3 = i2.gzindex < i2.gzhead.name.length ? 255 & i2.gzhead.name.charCodeAt(i2.gzindex++) : 0, xH(i2, t3);
            } while (0 !== t3);
            i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - n3, n3)), i2.gzindex = 0;
          }
          i2.status = 91;
        }
        if (91 === i2.status) {
          if (i2.gzhead.comment) {
            let t3, n3 = i2.pending;
            do {
              if (i2.pending === i2.pending_buf_size) {
                if (i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - n3, n3)), MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
                n3 = 0;
              }
              t3 = i2.gzindex < i2.gzhead.comment.length ? 255 & i2.gzhead.comment.charCodeAt(i2.gzindex++) : 0, xH(i2, t3);
            } while (0 !== t3);
            i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = $W(e2.adler, i2.pending_buf, i2.pending - n3, n3));
          }
          i2.status = 103;
        }
        if (103 === i2.status) {
          if (i2.gzhead.hcrc) {
            if (i2.pending + 2 > i2.pending_buf_size && (MH(e2), 0 !== i2.pending)) return i2.last_flush = -1, hH;
            xH(i2, 255 & e2.adler), xH(i2, e2.adler >> 8 & 255), e2.adler = 0;
          }
          if (i2.status = wH, MH(e2), 0 !== i2.pending) return i2.last_flush = -1, hH;
        }
        if (0 !== e2.avail_in || 0 !== i2.lookahead || t2 !== aH && i2.status !== OH) {
          let n3 = 0 === i2.level ? GH(i2, t2) : i2.strategy === SH ? ((e3, t3) => {
            let i3;
            for (; ; ) {
              if (0 === e3.lookahead && (jH(e3), 0 === e3.lookahead)) {
                if (t3 === aH) return 1;
                break;
              }
              if (e3.match_length = 0, i3 = oH(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, i3 && (UH(e3, false), 0 === e3.strm.avail_out)) return 1;
            }
            return e3.insert = 0, t3 === lH ? (UH(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.sym_next && (UH(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          })(i2, t2) : i2.strategy === gH ? ((e3, t3) => {
            let i3, n4, r2, o2;
            const s2 = e3.window;
            for (; ; ) {
              if (e3.lookahead <= yH) {
                if (jH(e3), e3.lookahead <= yH && t3 === aH) return 1;
                if (0 === e3.lookahead) break;
              }
              if (e3.match_length = 0, e3.lookahead >= 3 && e3.strstart > 0 && (r2 = e3.strstart - 1, n4 = s2[r2], n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2])) {
                o2 = e3.strstart + yH;
                do {
                } while (n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && n4 === s2[++r2] && r2 < o2);
                e3.match_length = yH - (o2 - r2), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);
              }
              if (e3.match_length >= 3 ? (i3 = oH(e3, 1, e3.match_length - 3), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (i3 = oH(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), i3 && (UH(e3, false), 0 === e3.strm.avail_out)) return 1;
            }
            return e3.insert = 0, t3 === lH ? (UH(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.sym_next && (UH(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          })(i2, t2) : YH[i2.level].func(i2, t2);
          if (3 !== n3 && 4 !== n3 || (i2.status = OH), 1 === n3 || 3 === n3) return 0 === e2.avail_out && (i2.last_flush = -1), hH;
          if (2 === n3 && (t2 === cH ? sH(i2) : t2 !== uH && (nH(i2, 0, 0, false), t2 === dH && (PH(i2.head), 0 === i2.lookahead && (i2.strstart = 0, i2.block_start = 0, i2.insert = 0))), MH(e2), 0 === e2.avail_out)) return i2.last_flush = -1, hH;
        }
        return t2 !== lH ? hH : i2.wrap <= 0 ? pH : (2 === i2.wrap ? (xH(i2, 255 & e2.adler), xH(i2, e2.adler >> 8 & 255), xH(i2, e2.adler >> 16 & 255), xH(i2, e2.adler >> 24 & 255), xH(i2, 255 & e2.total_in), xH(i2, e2.total_in >> 8 & 255), xH(i2, e2.total_in >> 16 & 255), xH(i2, e2.total_in >> 24 & 255)) : (VH(i2, e2.adler >>> 16), VH(i2, 65535 & e2.adler)), MH(e2), i2.wrap > 0 && (i2.wrap = -i2.wrap), 0 !== i2.pending ? hH : pH);
      }, $H = (e2, t2) => {
        let i2 = t2.length;
        if (zH(e2)) return _H;
        const n2 = e2.state, r2 = n2.wrap;
        if (2 === r2 || 1 === r2 && n2.status !== bH || n2.lookahead) return _H;
        if (1 === r2 && (e2.adler = QW(e2.adler, t2, i2, 0)), n2.wrap = 0, i2 >= n2.w_size) {
          0 === r2 && (PH(n2.head), n2.strstart = 0, n2.block_start = 0, n2.insert = 0);
          let e3 = new Uint8Array(n2.w_size);
          e3.set(t2.subarray(i2 - n2.w_size, i2), 0), t2 = e3, i2 = n2.w_size;
        }
        const o2 = e2.avail_in, s2 = e2.next_in, a2 = e2.input;
        for (e2.avail_in = i2, e2.next_in = 0, e2.input = t2, jH(n2); n2.lookahead >= 3; ) {
          let e3 = n2.strstart, t3 = n2.lookahead - 2;
          do {
            n2.ins_h = kH(n2, n2.ins_h, n2.window[e3 + 3 - 1]), n2.prev[e3 & n2.w_mask] = n2.head[n2.ins_h], n2.head[n2.ins_h] = e3, e3++;
          } while (--t3);
          n2.strstart = e3, n2.lookahead = 2, jH(n2);
        }
        return n2.strstart += n2.lookahead, n2.block_start = n2.strstart, n2.insert = n2.lookahead, n2.lookahead = 0, n2.match_length = n2.prev_length = 2, n2.match_available = 0, e2.next_in = s2, e2.input = a2, e2.avail_in = o2, n2.wrap = r2, hH;
      }, eK = { deflateInit: (e2, t2) => QH(e2, t2, IH, 15, 8, vH), deflateInit2: QH, deflateReset: XH, deflateResetKeep: JH, deflateSetHeader: (e2, t2) => zH(e2) || 2 !== e2.state.wrap ? _H : (e2.state.gzhead = t2, hH), deflate: ZH, deflateEnd: (e2) => {
        if (zH(e2)) return _H;
        const t2 = e2.state.status;
        return e2.state = null, t2 === wH ? NH(e2, EH) : hH;
      }, deflateSetDictionary: $H, deflateInfo: "pako deflate (from Nodeca project)" };
      const tK = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2);
      var iK = function(e2) {
        const t2 = Array.prototype.slice.call(arguments, 1);
        for (; t2.length; ) {
          const i2 = t2.shift();
          if (i2) {
            if ("object" != typeof i2) throw new TypeError(i2 + "must be non-object");
            for (const t3 in i2) tK(i2, t3) && (e2[t3] = i2[t3]);
          }
        }
        return e2;
      }, nK = (e2) => {
        let t2 = 0;
        for (let i3 = 0, n2 = e2.length; i3 < n2; i3++) t2 += e2[i3].length;
        const i2 = new Uint8Array(t2);
        for (let t3 = 0, n2 = 0, r2 = e2.length; t3 < r2; t3++) {
          let r3 = e2[t3];
          i2.set(r3, n2), n2 += r3.length;
        }
        return i2;
      };
      let rK = true;
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e2) {
        rK = false;
      }
      const oK = new Uint8Array(256);
      for (let e2 = 0; e2 < 256; e2++) oK[e2] = e2 >= 252 ? 6 : e2 >= 248 ? 5 : e2 >= 240 ? 4 : e2 >= 224 ? 3 : e2 >= 192 ? 2 : 1;
      oK[254] = oK[254] = 1;
      var sK = (e2) => {
        if ("function" == typeof TextEncoder && TextEncoder.prototype.encode) return new TextEncoder().encode(e2);
        let t2, i2, n2, r2, o2, s2 = e2.length, a2 = 0;
        for (r2 = 0; r2 < s2; r2++) i2 = e2.charCodeAt(r2), 55296 == (64512 & i2) && r2 + 1 < s2 && (n2 = e2.charCodeAt(r2 + 1), 56320 == (64512 & n2) && (i2 = 65536 + (i2 - 55296 << 10) + (n2 - 56320), r2++)), a2 += i2 < 128 ? 1 : i2 < 2048 ? 2 : i2 < 65536 ? 3 : 4;
        for (t2 = new Uint8Array(a2), o2 = 0, r2 = 0; o2 < a2; r2++) i2 = e2.charCodeAt(r2), 55296 == (64512 & i2) && r2 + 1 < s2 && (n2 = e2.charCodeAt(r2 + 1), 56320 == (64512 & n2) && (i2 = 65536 + (i2 - 55296 << 10) + (n2 - 56320), r2++)), i2 < 128 ? t2[o2++] = i2 : i2 < 2048 ? (t2[o2++] = 192 | i2 >>> 6, t2[o2++] = 128 | 63 & i2) : i2 < 65536 ? (t2[o2++] = 224 | i2 >>> 12, t2[o2++] = 128 | i2 >>> 6 & 63, t2[o2++] = 128 | 63 & i2) : (t2[o2++] = 240 | i2 >>> 18, t2[o2++] = 128 | i2 >>> 12 & 63, t2[o2++] = 128 | i2 >>> 6 & 63, t2[o2++] = 128 | 63 & i2);
        return t2;
      }, aK = (e2, t2) => {
        const i2 = t2 || e2.length;
        if ("function" == typeof TextDecoder && TextDecoder.prototype.decode) return new TextDecoder().decode(e2.subarray(0, t2));
        let n2, r2;
        const o2 = new Array(2 * i2);
        for (r2 = 0, n2 = 0; n2 < i2; ) {
          let t3 = e2[n2++];
          if (t3 < 128) {
            o2[r2++] = t3;
            continue;
          }
          let s2 = oK[t3];
          if (s2 > 4) o2[r2++] = 65533, n2 += s2 - 1;
          else {
            for (t3 &= 2 === s2 ? 31 : 3 === s2 ? 15 : 7; s2 > 1 && n2 < i2; ) t3 = t3 << 6 | 63 & e2[n2++], s2--;
            s2 > 1 ? o2[r2++] = 65533 : t3 < 65536 ? o2[r2++] = t3 : (t3 -= 65536, o2[r2++] = 55296 | t3 >> 10 & 1023, o2[r2++] = 56320 | 1023 & t3);
          }
        }
        return ((e3, t3) => {
          if (t3 < 65534 && e3.subarray && rK) return String.fromCharCode.apply(null, e3.length === t3 ? e3 : e3.subarray(0, t3));
          let i3 = "";
          for (let n3 = 0; n3 < t3; n3++) i3 += String.fromCharCode(e3[n3]);
          return i3;
        })(o2, r2);
      }, cK = (e2, t2) => {
        (t2 = t2 || e2.length) > e2.length && (t2 = e2.length);
        let i2 = t2 - 1;
        for (; i2 >= 0 && 128 == (192 & e2[i2]); ) i2--;
        return i2 < 0 || 0 === i2 ? t2 : i2 + oK[e2[i2]] > t2 ? i2 : t2;
      };
      var dK = function() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      };
      const lK = Object.prototype.toString, { Z_NO_FLUSH: uK, Z_SYNC_FLUSH: hK, Z_FULL_FLUSH: pK, Z_FINISH: _K, Z_OK: EK, Z_STREAM_END: mK, Z_DEFAULT_COMPRESSION: fK, Z_DEFAULT_STRATEGY: TK, Z_DEFLATED: SK } = tH;
      function gK(e2) {
        this.options = iK({ level: fK, method: SK, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: TK }, e2 || {});
        let t2 = this.options;
        t2.raw && t2.windowBits > 0 ? t2.windowBits = -t2.windowBits : t2.gzip && t2.windowBits > 0 && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new dK(), this.strm.avail_out = 0;
        let i2 = eK.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);
        if (i2 !== EK) throw new Error(eH[i2]);
        if (t2.header && eK.deflateSetHeader(this.strm, t2.header), t2.dictionary) {
          let e3;
          if (e3 = "string" == typeof t2.dictionary ? sK(t2.dictionary) : "[object ArrayBuffer]" === lK.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, i2 = eK.deflateSetDictionary(this.strm, e3), i2 !== EK) throw new Error(eH[i2]);
          this._dict_set = true;
        }
      }
      function RK(e2, t2) {
        const i2 = new gK(t2);
        if (i2.push(e2, true), i2.err) throw i2.msg || eH[i2.err];
        return i2.result;
      }
      gK.prototype.push = function(e2, t2) {
        const i2 = this.strm, n2 = this.options.chunkSize;
        let r2, o2;
        if (this.ended) return false;
        for (o2 = t2 === ~~t2 ? t2 : true === t2 ? _K : uK, "string" == typeof e2 ? i2.input = sK(e2) : "[object ArrayBuffer]" === lK.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length; ; ) if (0 === i2.avail_out && (i2.output = new Uint8Array(n2), i2.next_out = 0, i2.avail_out = n2), (o2 === hK || o2 === pK) && i2.avail_out <= 6) this.onData(i2.output.subarray(0, i2.next_out)), i2.avail_out = 0;
        else {
          if (r2 = eK.deflate(i2, o2), r2 === mK) return i2.next_out > 0 && this.onData(i2.output.subarray(0, i2.next_out)), r2 = eK.deflateEnd(this.strm), this.onEnd(r2), this.ended = true, r2 === EK;
          if (0 !== i2.avail_out) {
            if (o2 > 0 && i2.next_out > 0) this.onData(i2.output.subarray(0, i2.next_out)), i2.avail_out = 0;
            else if (0 === i2.avail_in) break;
          } else this.onData(i2.output);
        }
        return true;
      }, gK.prototype.onData = function(e2) {
        this.chunks.push(e2);
      }, gK.prototype.onEnd = function(e2) {
        e2 === EK && (this.result = nK(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      };
      var vK = { Deflate: gK, deflate: RK, deflateRaw: function(e2, t2) {
        return (t2 = t2 || {}).raw = true, RK(e2, t2);
      }, gzip: function(e2, t2) {
        return (t2 = t2 || {}).gzip = true, RK(e2, t2);
      }, constants: tH };
      const CK = 16209;
      var IK = function(e2, t2) {
        let i2, n2, r2, o2, s2, a2, c2, d2, l2, u2, h2, p2, _2, E2, m2, f2, T2, S2, g2, R2, v2, C2, I2, y2;
        const A2 = e2.state;
        i2 = e2.next_in, I2 = e2.input, n2 = i2 + (e2.avail_in - 5), r2 = e2.next_out, y2 = e2.output, o2 = r2 - (t2 - e2.avail_out), s2 = r2 + (e2.avail_out - 257), a2 = A2.dmax, c2 = A2.wsize, d2 = A2.whave, l2 = A2.wnext, u2 = A2.window, h2 = A2.hold, p2 = A2.bits, _2 = A2.lencode, E2 = A2.distcode, m2 = (1 << A2.lenbits) - 1, f2 = (1 << A2.distbits) - 1;
        e: do {
          p2 < 15 && (h2 += I2[i2++] << p2, p2 += 8, h2 += I2[i2++] << p2, p2 += 8), T2 = _2[h2 & m2];
          t: for (; ; ) {
            if (S2 = T2 >>> 24, h2 >>>= S2, p2 -= S2, S2 = T2 >>> 16 & 255, 0 === S2) y2[r2++] = 65535 & T2;
            else {
              if (!(16 & S2)) {
                if (64 & S2) {
                  if (32 & S2) {
                    A2.mode = 16191;
                    break e;
                  }
                  e2.msg = "invalid literal/length code", A2.mode = CK;
                  break e;
                }
                T2 = _2[(65535 & T2) + (h2 & (1 << S2) - 1)];
                continue t;
              }
              for (g2 = 65535 & T2, S2 &= 15, S2 && (p2 < S2 && (h2 += I2[i2++] << p2, p2 += 8), g2 += h2 & (1 << S2) - 1, h2 >>>= S2, p2 -= S2), p2 < 15 && (h2 += I2[i2++] << p2, p2 += 8, h2 += I2[i2++] << p2, p2 += 8), T2 = E2[h2 & f2]; ; ) {
                if (S2 = T2 >>> 24, h2 >>>= S2, p2 -= S2, S2 = T2 >>> 16 & 255, 16 & S2) {
                  if (R2 = 65535 & T2, S2 &= 15, p2 < S2 && (h2 += I2[i2++] << p2, p2 += 8, p2 < S2 && (h2 += I2[i2++] << p2, p2 += 8)), R2 += h2 & (1 << S2) - 1, R2 > a2) {
                    e2.msg = "invalid distance too far back", A2.mode = CK;
                    break e;
                  }
                  if (h2 >>>= S2, p2 -= S2, S2 = r2 - o2, R2 > S2) {
                    if (S2 = R2 - S2, S2 > d2 && A2.sane) {
                      e2.msg = "invalid distance too far back", A2.mode = CK;
                      break e;
                    }
                    if (v2 = 0, C2 = u2, 0 === l2) {
                      if (v2 += c2 - S2, S2 < g2) {
                        g2 -= S2;
                        do {
                          y2[r2++] = u2[v2++];
                        } while (--S2);
                        v2 = r2 - R2, C2 = y2;
                      }
                    } else if (l2 < S2) {
                      if (v2 += c2 + l2 - S2, S2 -= l2, S2 < g2) {
                        g2 -= S2;
                        do {
                          y2[r2++] = u2[v2++];
                        } while (--S2);
                        if (v2 = 0, l2 < g2) {
                          S2 = l2, g2 -= S2;
                          do {
                            y2[r2++] = u2[v2++];
                          } while (--S2);
                          v2 = r2 - R2, C2 = y2;
                        }
                      }
                    } else if (v2 += l2 - S2, S2 < g2) {
                      g2 -= S2;
                      do {
                        y2[r2++] = u2[v2++];
                      } while (--S2);
                      v2 = r2 - R2, C2 = y2;
                    }
                    for (; g2 > 2; ) y2[r2++] = C2[v2++], y2[r2++] = C2[v2++], y2[r2++] = C2[v2++], g2 -= 3;
                    g2 && (y2[r2++] = C2[v2++], g2 > 1 && (y2[r2++] = C2[v2++]));
                  } else {
                    v2 = r2 - R2;
                    do {
                      y2[r2++] = y2[v2++], y2[r2++] = y2[v2++], y2[r2++] = y2[v2++], g2 -= 3;
                    } while (g2 > 2);
                    g2 && (y2[r2++] = y2[v2++], g2 > 1 && (y2[r2++] = y2[v2++]));
                  }
                  break;
                }
                if (64 & S2) {
                  e2.msg = "invalid distance code", A2.mode = CK;
                  break e;
                }
                T2 = E2[(65535 & T2) + (h2 & (1 << S2) - 1)];
              }
            }
            break;
          }
        } while (i2 < n2 && r2 < s2);
        g2 = p2 >> 3, i2 -= g2, p2 -= g2 << 3, h2 &= (1 << p2) - 1, e2.next_in = i2, e2.next_out = r2, e2.avail_in = i2 < n2 ? n2 - i2 + 5 : 5 - (i2 - n2), e2.avail_out = r2 < s2 ? s2 - r2 + 257 : 257 - (r2 - s2), A2.hold = h2, A2.bits = p2;
      };
      const yK = 15, AK = new Uint16Array([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]), bK = new Uint8Array([16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]), wK = new Uint16Array([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]), OK = new Uint8Array([16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]);
      var NK = (e2, t2, i2, n2, r2, o2, s2, a2) => {
        const c2 = a2.bits;
        let d2, l2, u2, h2, p2, _2, E2 = 0, m2 = 0, f2 = 0, T2 = 0, S2 = 0, g2 = 0, R2 = 0, v2 = 0, C2 = 0, I2 = 0, y2 = null;
        const A2 = new Uint16Array(16), b2 = new Uint16Array(16);
        let w2, O2, N2, D2 = null;
        for (E2 = 0; E2 <= yK; E2++) A2[E2] = 0;
        for (m2 = 0; m2 < n2; m2++) A2[t2[i2 + m2]]++;
        for (S2 = c2, T2 = yK; T2 >= 1 && 0 === A2[T2]; T2--) ;
        if (S2 > T2 && (S2 = T2), 0 === T2) return r2[o2++] = 20971520, r2[o2++] = 20971520, a2.bits = 1, 0;
        for (f2 = 1; f2 < T2 && 0 === A2[f2]; f2++) ;
        for (S2 < f2 && (S2 = f2), v2 = 1, E2 = 1; E2 <= yK; E2++) if (v2 <<= 1, v2 -= A2[E2], v2 < 0) return -1;
        if (v2 > 0 && (0 === e2 || 1 !== T2)) return -1;
        for (b2[1] = 0, E2 = 1; E2 < yK; E2++) b2[E2 + 1] = b2[E2] + A2[E2];
        for (m2 = 0; m2 < n2; m2++) 0 !== t2[i2 + m2] && (s2[b2[t2[i2 + m2]]++] = m2);
        if (0 === e2 ? (y2 = D2 = s2, _2 = 20) : 1 === e2 ? (y2 = AK, D2 = bK, _2 = 257) : (y2 = wK, D2 = OK, _2 = 0), I2 = 0, m2 = 0, E2 = f2, p2 = o2, g2 = S2, R2 = 0, u2 = -1, C2 = 1 << S2, h2 = C2 - 1, 1 === e2 && C2 > 852 || 2 === e2 && C2 > 592) return 1;
        for (; ; ) {
          w2 = E2 - R2, s2[m2] + 1 < _2 ? (O2 = 0, N2 = s2[m2]) : s2[m2] >= _2 ? (O2 = D2[s2[m2] - _2], N2 = y2[s2[m2] - _2]) : (O2 = 96, N2 = 0), d2 = 1 << E2 - R2, l2 = 1 << g2, f2 = l2;
          do {
            l2 -= d2, r2[p2 + (I2 >> R2) + l2] = w2 << 24 | O2 << 16 | N2;
          } while (0 !== l2);
          for (d2 = 1 << E2 - 1; I2 & d2; ) d2 >>= 1;
          if (0 !== d2 ? (I2 &= d2 - 1, I2 += d2) : I2 = 0, m2++, 0 == --A2[E2]) {
            if (E2 === T2) break;
            E2 = t2[i2 + s2[m2]];
          }
          if (E2 > S2 && (I2 & h2) !== u2) {
            for (0 === R2 && (R2 = S2), p2 += f2, g2 = E2 - R2, v2 = 1 << g2; g2 + R2 < T2 && (v2 -= A2[g2 + R2], !(v2 <= 0)); ) g2++, v2 <<= 1;
            if (C2 += 1 << g2, 1 === e2 && C2 > 852 || 2 === e2 && C2 > 592) return 1;
            u2 = I2 & h2, r2[u2] = S2 << 24 | g2 << 16 | p2 - o2;
          }
        }
        return 0 !== I2 && (r2[p2 + I2] = E2 - R2 << 24 | 64 << 16), a2.bits = S2, 0;
      };
      const { Z_FINISH: DK, Z_BLOCK: PK, Z_TREES: LK, Z_OK: kK, Z_STREAM_END: MK, Z_NEED_DICT: UK, Z_STREAM_ERROR: xK, Z_DATA_ERROR: VK, Z_MEM_ERROR: FK, Z_BUF_ERROR: BK, Z_DEFLATED: jK } = tH, GK = 16180, WK = 16190, HK = 16191, KK = 16192, YK = 16194, qK = 16199, zK = 16200, JK = 16206, XK = 16209, QK = (e2) => (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);
      function ZK() {
        this.strm = null, this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Uint16Array(320), this.work = new Uint16Array(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
      const $K = (e2) => {
        if (!e2) return 1;
        const t2 = e2.state;
        return !t2 || t2.strm !== e2 || t2.mode < GK || t2.mode > 16211 ? 1 : 0;
      }, eY = (e2) => {
        if ($K(e2)) return xK;
        const t2 = e2.state;
        return e2.total_in = e2.total_out = t2.total = 0, e2.msg = "", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = GK, t2.last = 0, t2.havedict = 0, t2.flags = -1, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new Int32Array(852), t2.distcode = t2.distdyn = new Int32Array(592), t2.sane = 1, t2.back = -1, kK;
      }, tY = (e2) => {
        if ($K(e2)) return xK;
        const t2 = e2.state;
        return t2.wsize = 0, t2.whave = 0, t2.wnext = 0, eY(e2);
      }, iY = (e2, t2) => {
        let i2;
        if ($K(e2)) return xK;
        const n2 = e2.state;
        return t2 < 0 ? (i2 = 0, t2 = -t2) : (i2 = 5 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || t2 > 15) ? xK : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = i2, n2.wbits = t2, tY(e2));
      }, nY = (e2, t2) => {
        if (!e2) return xK;
        const i2 = new ZK();
        e2.state = i2, i2.strm = e2, i2.window = null, i2.mode = GK;
        const n2 = iY(e2, t2);
        return n2 !== kK && (e2.state = null), n2;
      };
      let rY, oY, sY = true;
      const aY = (e2) => {
        if (sY) {
          rY = new Int32Array(512), oY = new Int32Array(32);
          let t2 = 0;
          for (; t2 < 144; ) e2.lens[t2++] = 8;
          for (; t2 < 256; ) e2.lens[t2++] = 9;
          for (; t2 < 280; ) e2.lens[t2++] = 7;
          for (; t2 < 288; ) e2.lens[t2++] = 8;
          for (NK(1, e2.lens, 0, 288, rY, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; ) e2.lens[t2++] = 5;
          NK(2, e2.lens, 0, 32, oY, 0, e2.work, { bits: 5 }), sY = false;
        }
        e2.lencode = rY, e2.lenbits = 9, e2.distcode = oY, e2.distbits = 5;
      }, cY = (e2, t2, i2, n2) => {
        let r2;
        const o2 = e2.state;
        return null === o2.window && (o2.wsize = 1 << o2.wbits, o2.wnext = 0, o2.whave = 0, o2.window = new Uint8Array(o2.wsize)), n2 >= o2.wsize ? (o2.window.set(t2.subarray(i2 - o2.wsize, i2), 0), o2.wnext = 0, o2.whave = o2.wsize) : (r2 = o2.wsize - o2.wnext, r2 > n2 && (r2 = n2), o2.window.set(t2.subarray(i2 - n2, i2 - n2 + r2), o2.wnext), (n2 -= r2) ? (o2.window.set(t2.subarray(i2 - n2, i2), 0), o2.wnext = n2, o2.whave = o2.wsize) : (o2.wnext += r2, o2.wnext === o2.wsize && (o2.wnext = 0), o2.whave < o2.wsize && (o2.whave += r2))), 0;
      };
      var dY = (e2, t2) => {
        let i2, n2, r2, o2, s2, a2, c2, d2, l2, u2, h2, p2, _2, E2, m2, f2, T2, S2, g2, R2, v2, C2, I2 = 0;
        const y2 = new Uint8Array(4);
        let A2, b2;
        const w2 = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
        if ($K(e2) || !e2.output || !e2.input && 0 !== e2.avail_in) return xK;
        i2 = e2.state, i2.mode === HK && (i2.mode = KK), s2 = e2.next_out, r2 = e2.output, c2 = e2.avail_out, o2 = e2.next_in, n2 = e2.input, a2 = e2.avail_in, d2 = i2.hold, l2 = i2.bits, u2 = a2, h2 = c2, C2 = kK;
        e: for (; ; ) switch (i2.mode) {
          case GK:
            if (0 === i2.wrap) {
              i2.mode = KK;
              break;
            }
            for (; l2 < 16; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if (2 & i2.wrap && 35615 === d2) {
              0 === i2.wbits && (i2.wbits = 15), i2.check = 0, y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = $W(i2.check, y2, 2, 0), d2 = 0, l2 = 0, i2.mode = 16181;
              break;
            }
            if (i2.head && (i2.head.done = false), !(1 & i2.wrap) || (((255 & d2) << 8) + (d2 >> 8)) % 31) {
              e2.msg = "incorrect header check", i2.mode = XK;
              break;
            }
            if ((15 & d2) !== jK) {
              e2.msg = "unknown compression method", i2.mode = XK;
              break;
            }
            if (d2 >>>= 4, l2 -= 4, v2 = 8 + (15 & d2), 0 === i2.wbits && (i2.wbits = v2), v2 > 15 || v2 > i2.wbits) {
              e2.msg = "invalid window size", i2.mode = XK;
              break;
            }
            i2.dmax = 1 << i2.wbits, i2.flags = 0, e2.adler = i2.check = 1, i2.mode = 512 & d2 ? 16189 : HK, d2 = 0, l2 = 0;
            break;
          case 16181:
            for (; l2 < 16; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if (i2.flags = d2, (255 & dW(i2)) !== jK) {
              e2.msg = "unknown compression method", i2.mode = XK;
              break;
            }
            if (57344 & dW(i2)) {
              e2.msg = "unknown header flags set", i2.mode = XK;
              break;
            }
            i2.head && (i2.head.text = d2 >> 8 & 1), 512 & dW(i2) && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = $W(i2.check, y2, 2, 0)), d2 = 0, l2 = 0, i2.mode = 16182;
          case 16182:
            for (; l2 < 32; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            i2.head && (i2.head.time = d2), 512 & dW(i2) && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, y2[2] = d2 >>> 16 & 255, y2[3] = d2 >>> 24 & 255, i2.check = $W(i2.check, y2, 4, 0)), d2 = 0, l2 = 0, i2.mode = 16183;
          case 16183:
            for (; l2 < 16; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            i2.head && (i2.head.xflags = 255 & d2, i2.head.os = d2 >> 8), 512 & dW(i2) && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = $W(i2.check, y2, 2, 0)), d2 = 0, l2 = 0, i2.mode = 16184;
          case 16184:
            if (1024 & dW(i2)) {
              for (; l2 < 16; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              i2.length = d2, i2.head && (i2.head.extra_len = d2), 512 & dW(i2) && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = $W(i2.check, y2, 2, 0)), d2 = 0, l2 = 0;
            } else i2.head && (i2.head.extra = null);
            i2.mode = 16185;
          case 16185:
            if (1024 & dW(i2) && (p2 = i2.length, p2 > a2 && (p2 = a2), p2 && (i2.head && (v2 = i2.head.extra_len - i2.length, i2.head.extra || (i2.head.extra = new Uint8Array(i2.head.extra_len)), i2.head.extra.set(n2.subarray(o2, o2 + p2), v2)), 512 & dW(i2) && 4 & i2.wrap && (i2.check = $W(i2.check, n2, p2, o2)), a2 -= p2, o2 += p2, i2.length -= p2), i2.length)) break e;
            i2.length = 0, i2.mode = 16186;
          case 16186:
            if (2048 & dW(i2)) {
              if (0 === a2) break e;
              p2 = 0;
              do {
                v2 = n2[o2 + p2++], i2.head && v2 && i2.length < 65536 && (i2.head.name += String.fromCharCode(v2));
              } while (v2 && p2 < a2);
              if (512 & dW(i2) && 4 & i2.wrap && (i2.check = $W(i2.check, n2, p2, o2)), a2 -= p2, o2 += p2, v2) break e;
            } else i2.head && (i2.head.name = null);
            i2.length = 0, i2.mode = 16187;
          case 16187:
            if (4096 & dW(i2)) {
              if (0 === a2) break e;
              p2 = 0;
              do {
                v2 = n2[o2 + p2++], i2.head && v2 && i2.length < 65536 && (i2.head.comment += String.fromCharCode(v2));
              } while (v2 && p2 < a2);
              if (512 & dW(i2) && 4 & i2.wrap && (i2.check = $W(i2.check, n2, p2, o2)), a2 -= p2, o2 += p2, v2) break e;
            } else i2.head && (i2.head.comment = null);
            i2.mode = 16188;
          case 16188:
            if (512 & dW(i2)) {
              for (; l2 < 16; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              if (4 & i2.wrap && d2 !== (65535 & i2.check)) {
                e2.msg = "header crc mismatch", i2.mode = XK;
                break;
              }
              d2 = 0, l2 = 0;
            }
            i2.head && (i2.head.hcrc = dW(i2) >> 9 & 1, i2.head.done = true), e2.adler = i2.check = 0, i2.mode = HK;
            break;
          case 16189:
            for (; l2 < 32; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            e2.adler = i2.check = QK(d2), d2 = 0, l2 = 0, i2.mode = WK;
          case WK:
            if (0 === i2.havedict) return e2.next_out = s2, e2.avail_out = c2, e2.next_in = o2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, UK;
            e2.adler = i2.check = 1, i2.mode = HK;
          case HK:
            if (t2 === PK || t2 === LK) break e;
          case KK:
            if (i2.last) {
              d2 >>>= 7 & l2, l2 -= 7 & l2, i2.mode = JK;
              break;
            }
            for (; l2 < 3; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            switch (i2.last = 1 & d2, d2 >>>= 1, l2 -= 1, 3 & d2) {
              case 0:
                i2.mode = 16193;
                break;
              case 1:
                if (aY(i2), i2.mode = qK, t2 === LK) {
                  d2 >>>= 2, l2 -= 2;
                  break e;
                }
                break;
              case 2:
                i2.mode = 16196;
                break;
              case 3:
                e2.msg = "invalid block type", i2.mode = XK;
            }
            d2 >>>= 2, l2 -= 2;
            break;
          case 16193:
            for (d2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if ((65535 & d2) != (d2 >>> 16 ^ 65535)) {
              e2.msg = "invalid stored block lengths", i2.mode = XK;
              break;
            }
            if (i2.length = 65535 & d2, d2 = 0, l2 = 0, i2.mode = YK, t2 === LK) break e;
          case YK:
            i2.mode = 16195;
          case 16195:
            if (p2 = i2.length, p2) {
              if (p2 > a2 && (p2 = a2), p2 > c2 && (p2 = c2), 0 === p2) break e;
              r2.set(n2.subarray(o2, o2 + p2), s2), a2 -= p2, o2 += p2, c2 -= p2, s2 += p2, i2.length -= p2;
              break;
            }
            i2.mode = HK;
            break;
          case 16196:
            for (; l2 < 14; ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if (i2.nlen = 257 + (31 & d2), d2 >>>= 5, l2 -= 5, i2.ndist = 1 + (31 & d2), d2 >>>= 5, l2 -= 5, i2.ncode = 4 + (15 & d2), d2 >>>= 4, l2 -= 4, i2.nlen > 286 || i2.ndist > 30) {
              e2.msg = "too many length or distance symbols", i2.mode = XK;
              break;
            }
            i2.have = 0, i2.mode = 16197;
          case 16197:
            for (; i2.have < i2.ncode; ) {
              for (; l2 < 3; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              i2.lens[w2[i2.have++]] = 7 & d2, d2 >>>= 3, l2 -= 3;
            }
            for (; i2.have < 19; ) i2.lens[w2[i2.have++]] = 0;
            if (i2.lencode = i2.lendyn, i2.lenbits = 7, A2 = { bits: i2.lenbits }, C2 = NK(0, i2.lens, 0, 19, i2.lencode, 0, i2.work, A2), i2.lenbits = A2.bits, C2) {
              e2.msg = "invalid code lengths set", i2.mode = XK;
              break;
            }
            i2.have = 0, i2.mode = 16198;
          case 16198:
            for (; i2.have < i2.nlen + i2.ndist; ) {
              for (; I2 = i2.lencode[d2 & (1 << i2.lenbits) - 1], m2 = I2 >>> 24, f2 = I2 >>> 16 & 255, T2 = 65535 & I2, !(m2 <= l2); ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              if (T2 < 16) d2 >>>= m2, l2 -= m2, i2.lens[i2.have++] = T2;
              else {
                if (16 === T2) {
                  for (b2 = m2 + 2; l2 < b2; ) {
                    if (0 === a2) break e;
                    a2--, d2 += n2[o2++] << l2, l2 += 8;
                  }
                  if (d2 >>>= m2, l2 -= m2, 0 === i2.have) {
                    e2.msg = "invalid bit length repeat", i2.mode = XK;
                    break;
                  }
                  v2 = i2.lens[i2.have - 1], p2 = 3 + (3 & d2), d2 >>>= 2, l2 -= 2;
                } else if (17 === T2) {
                  for (b2 = m2 + 3; l2 < b2; ) {
                    if (0 === a2) break e;
                    a2--, d2 += n2[o2++] << l2, l2 += 8;
                  }
                  d2 >>>= m2, l2 -= m2, v2 = 0, p2 = 3 + (7 & d2), d2 >>>= 3, l2 -= 3;
                } else {
                  for (b2 = m2 + 7; l2 < b2; ) {
                    if (0 === a2) break e;
                    a2--, d2 += n2[o2++] << l2, l2 += 8;
                  }
                  d2 >>>= m2, l2 -= m2, v2 = 0, p2 = 11 + (127 & d2), d2 >>>= 7, l2 -= 7;
                }
                if (i2.have + p2 > i2.nlen + i2.ndist) {
                  e2.msg = "invalid bit length repeat", i2.mode = XK;
                  break;
                }
                for (; p2--; ) i2.lens[i2.have++] = v2;
              }
            }
            if (i2.mode === XK) break;
            if (0 === i2.lens[256]) {
              e2.msg = "invalid code -- missing end-of-block", i2.mode = XK;
              break;
            }
            if (i2.lenbits = 9, A2 = { bits: i2.lenbits }, C2 = NK(1, i2.lens, 0, i2.nlen, i2.lencode, 0, i2.work, A2), i2.lenbits = A2.bits, C2) {
              e2.msg = "invalid literal/lengths set", i2.mode = XK;
              break;
            }
            if (i2.distbits = 6, i2.distcode = i2.distdyn, A2 = { bits: i2.distbits }, C2 = NK(2, i2.lens, i2.nlen, i2.ndist, i2.distcode, 0, i2.work, A2), i2.distbits = A2.bits, C2) {
              e2.msg = "invalid distances set", i2.mode = XK;
              break;
            }
            if (i2.mode = qK, t2 === LK) break e;
          case qK:
            i2.mode = zK;
          case zK:
            if (a2 >= 6 && c2 >= 258) {
              e2.next_out = s2, e2.avail_out = c2, e2.next_in = o2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, IK(e2, h2), s2 = e2.next_out, r2 = e2.output, c2 = e2.avail_out, o2 = e2.next_in, n2 = e2.input, a2 = e2.avail_in, d2 = i2.hold, l2 = i2.bits, i2.mode === HK && (i2.back = -1);
              break;
            }
            for (i2.back = 0; I2 = i2.lencode[d2 & (1 << i2.lenbits) - 1], m2 = I2 >>> 24, f2 = I2 >>> 16 & 255, T2 = 65535 & I2, !(m2 <= l2); ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if (f2 && !(240 & f2)) {
              for (S2 = m2, g2 = f2, R2 = T2; I2 = i2.lencode[R2 + ((d2 & (1 << S2 + g2) - 1) >> S2)], m2 = I2 >>> 24, f2 = I2 >>> 16 & 255, T2 = 65535 & I2, !(S2 + m2 <= l2); ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              d2 >>>= S2, l2 -= S2, i2.back += S2;
            }
            if (d2 >>>= m2, l2 -= m2, i2.back += m2, i2.length = T2, 0 === f2) {
              i2.mode = 16205;
              break;
            }
            if (32 & f2) {
              i2.back = -1, i2.mode = HK;
              break;
            }
            if (64 & f2) {
              e2.msg = "invalid literal/length code", i2.mode = XK;
              break;
            }
            i2.extra = 15 & f2, i2.mode = 16201;
          case 16201:
            if (i2.extra) {
              for (b2 = i2.extra; l2 < b2; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              i2.length += d2 & (1 << i2.extra) - 1, d2 >>>= i2.extra, l2 -= i2.extra, i2.back += i2.extra;
            }
            i2.was = i2.length, i2.mode = 16202;
          case 16202:
            for (; I2 = i2.distcode[d2 & (1 << i2.distbits) - 1], m2 = I2 >>> 24, f2 = I2 >>> 16 & 255, T2 = 65535 & I2, !(m2 <= l2); ) {
              if (0 === a2) break e;
              a2--, d2 += n2[o2++] << l2, l2 += 8;
            }
            if (!(240 & f2)) {
              for (S2 = m2, g2 = f2, R2 = T2; I2 = i2.distcode[R2 + ((d2 & (1 << S2 + g2) - 1) >> S2)], m2 = I2 >>> 24, f2 = I2 >>> 16 & 255, T2 = 65535 & I2, !(S2 + m2 <= l2); ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              d2 >>>= S2, l2 -= S2, i2.back += S2;
            }
            if (d2 >>>= m2, l2 -= m2, i2.back += m2, 64 & f2) {
              e2.msg = "invalid distance code", i2.mode = XK;
              break;
            }
            i2.offset = T2, i2.extra = 15 & f2, i2.mode = 16203;
          case 16203:
            if (i2.extra) {
              for (b2 = i2.extra; l2 < b2; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              i2.offset += d2 & (1 << i2.extra) - 1, d2 >>>= i2.extra, l2 -= i2.extra, i2.back += i2.extra;
            }
            if (i2.offset > i2.dmax) {
              e2.msg = "invalid distance too far back", i2.mode = XK;
              break;
            }
            i2.mode = 16204;
          case 16204:
            if (0 === c2) break e;
            if (p2 = h2 - c2, i2.offset > p2) {
              if (p2 = i2.offset - p2, p2 > i2.whave && i2.sane) {
                e2.msg = "invalid distance too far back", i2.mode = XK;
                break;
              }
              p2 > i2.wnext ? (p2 -= i2.wnext, _2 = i2.wsize - p2) : _2 = i2.wnext - p2, p2 > i2.length && (p2 = i2.length), E2 = i2.window;
            } else E2 = r2, _2 = s2 - i2.offset, p2 = i2.length;
            p2 > c2 && (p2 = c2), c2 -= p2, i2.length -= p2;
            do {
              r2[s2++] = E2[_2++];
            } while (--p2);
            0 === i2.length && (i2.mode = zK);
            break;
          case 16205:
            if (0 === c2) break e;
            r2[s2++] = i2.length, c2--, i2.mode = zK;
            break;
          case JK:
            if (i2.wrap) {
              for (; l2 < 32; ) {
                if (0 === a2) break e;
                a2--, d2 |= n2[o2++] << l2, l2 += 8;
              }
              if (h2 -= c2, e2.total_out += h2, i2.total += h2, 4 & i2.wrap && h2 && (e2.adler = i2.check = dW(i2) ? $W(i2.check, r2, h2, s2 - h2) : QW(i2.check, r2, h2, s2 - h2)), h2 = c2, 4 & i2.wrap && (dW(i2) ? d2 : QK(d2)) !== i2.check) {
                e2.msg = "incorrect data check", i2.mode = XK;
                break;
              }
              d2 = 0, l2 = 0;
            }
            i2.mode = 16207;
          case 16207:
            if (i2.wrap && dW(i2)) {
              for (; l2 < 32; ) {
                if (0 === a2) break e;
                a2--, d2 += n2[o2++] << l2, l2 += 8;
              }
              if (4 & i2.wrap && d2 !== (4294967295 & i2.total)) {
                e2.msg = "incorrect length check", i2.mode = XK;
                break;
              }
              d2 = 0, l2 = 0;
            }
            i2.mode = 16208;
          case 16208:
            C2 = MK;
            break e;
          case XK:
            C2 = VK;
            break e;
          case 16210:
            return FK;
          default:
            return xK;
        }
        return e2.next_out = s2, e2.avail_out = c2, e2.next_in = o2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, (i2.wsize || h2 !== e2.avail_out && i2.mode < XK && (i2.mode < JK || t2 !== DK)) && cY(e2, e2.output, e2.next_out, h2 - e2.avail_out), u2 -= e2.avail_in, h2 -= e2.avail_out, e2.total_in += u2, e2.total_out += h2, i2.total += h2, 4 & i2.wrap && h2 && (e2.adler = i2.check = dW(i2) ? $W(i2.check, r2, h2, e2.next_out - h2) : QW(i2.check, r2, h2, e2.next_out - h2)), e2.data_type = i2.bits + (i2.last ? 64 : 0) + (i2.mode === HK ? 128 : 0) + (i2.mode === qK || i2.mode === YK ? 256 : 0), (0 === u2 && 0 === h2 || t2 === DK) && C2 === kK && (C2 = BK), C2;
      }, lY = { inflateReset: tY, inflateReset2: iY, inflateResetKeep: eY, inflateInit: (e2) => nY(e2, 15), inflateInit2: nY, inflate: dY, inflateEnd: (e2) => {
        if ($K(e2)) return xK;
        let t2 = e2.state;
        return t2.window && (t2.window = null), e2.state = null, kK;
      }, inflateGetHeader: (e2, t2) => {
        if ($K(e2)) return xK;
        const i2 = e2.state;
        return 2 & i2.wrap ? (i2.head = t2, t2.done = false, kK) : xK;
      }, inflateSetDictionary: (e2, t2) => {
        const i2 = t2.length;
        let n2, r2, o2;
        return $K(e2) ? xK : (n2 = e2.state, 0 !== n2.wrap && n2.mode !== WK ? xK : n2.mode === WK && (r2 = 1, r2 = QW(r2, t2, i2, 0), r2 !== n2.check) ? VK : (o2 = cY(e2, t2, i2, i2), o2 ? (n2.mode = 16210, FK) : (n2.havedict = 1, kK)));
      }, inflateInfo: "pako inflate (from Nodeca project)" };
      var uY = function() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      };
      const hY = Object.prototype.toString, { Z_NO_FLUSH: pY, Z_FINISH: _Y, Z_OK: EY, Z_STREAM_END: mY, Z_NEED_DICT: fY, Z_STREAM_ERROR: TY, Z_DATA_ERROR: SY, Z_MEM_ERROR: gY } = tH;
      function RY(e2) {
        this.options = iK({ chunkSize: 65536, windowBits: 15, to: "" }, e2 || {});
        const t2 = this.options;
        t2.raw && t2.windowBits >= 0 && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(t2.windowBits >= 0 && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), t2.windowBits > 15 && t2.windowBits < 48 && (15 & t2.windowBits || (t2.windowBits |= 15)), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new dK(), this.strm.avail_out = 0;
        let i2 = lY.inflateInit2(this.strm, t2.windowBits);
        if (i2 !== EY) throw new Error(eH[i2]);
        if (this.header = new uY(), lY.inflateGetHeader(this.strm, this.header), t2.dictionary && ("string" == typeof t2.dictionary ? t2.dictionary = sK(t2.dictionary) : "[object ArrayBuffer]" === hY.call(t2.dictionary) && (t2.dictionary = new Uint8Array(t2.dictionary)), t2.raw && (i2 = lY.inflateSetDictionary(this.strm, t2.dictionary), i2 !== EY))) throw new Error(eH[i2]);
      }
      function vY(e2, t2) {
        const i2 = new RY(t2);
        if (i2.push(e2), i2.err) throw i2.msg || eH[i2.err];
        return i2.result;
      }
      RY.prototype.push = function(e2, t2) {
        const i2 = this.strm, n2 = this.options.chunkSize, r2 = this.options.dictionary;
        let o2, s2, a2;
        if (this.ended) return false;
        for (s2 = t2 === ~~t2 ? t2 : true === t2 ? _Y : pY, "[object ArrayBuffer]" === hY.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length; ; ) {
          for (0 === i2.avail_out && (i2.output = new Uint8Array(n2), i2.next_out = 0, i2.avail_out = n2), o2 = lY.inflate(i2, s2), o2 === fY && r2 && (o2 = lY.inflateSetDictionary(i2, r2), o2 === EY ? o2 = lY.inflate(i2, s2) : o2 === SY && (o2 = fY)); i2.avail_in > 0 && o2 === mY && i2.state.wrap > 0 && 0 !== e2[i2.next_in]; ) lY.inflateReset(i2), o2 = lY.inflate(i2, s2);
          switch (o2) {
            case TY:
            case SY:
            case fY:
            case gY:
              return this.onEnd(o2), this.ended = true, false;
          }
          if (a2 = i2.avail_out, i2.next_out && (0 === i2.avail_out || o2 === mY)) if ("string" === this.options.to) {
            let e3 = cK(i2.output, i2.next_out), t3 = i2.next_out - e3, r3 = aK(i2.output, e3);
            i2.next_out = t3, i2.avail_out = n2 - t3, t3 && i2.output.set(i2.output.subarray(e3, e3 + t3), 0), this.onData(r3);
          } else this.onData(i2.output.length === i2.next_out ? i2.output : i2.output.subarray(0, i2.next_out));
          if (o2 !== EY || 0 !== a2) {
            if (o2 === mY) return o2 = lY.inflateEnd(this.strm), this.onEnd(o2), this.ended = true, true;
            if (0 === i2.avail_in) break;
          }
        }
        return true;
      }, RY.prototype.onData = function(e2) {
        this.chunks.push(e2);
      }, RY.prototype.onEnd = function(e2) {
        e2 === EY && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = nK(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      };
      var CY = { Inflate: RY, inflate: vY, inflateRaw: function(e2, t2) {
        return (t2 = t2 || {}).raw = true, vY(e2, t2);
      }, ungzip: vY, constants: tH };
      const { Deflate: IY, deflate: yY, deflateRaw: AY, gzip: bY } = vK, { Inflate: wY, inflate: OY, inflateRaw: NY, ungzip: DY } = CY;
      var PY = yY, LY = OY, kY = function(e2) {
        return e2[e2.ONE_BYTE = 0] = "ONE_BYTE", e2[e2.TWO_BYTE = 1] = "TWO_BYTE", e2;
      }(kY || {});
      class MY {
        constructor() {
          vy(this, "_sequence", 0), vy(this, "_startTime", Date.now()), vy(this, "isUseOneByte", true);
        }
        get startTime() {
          const e2 = Date.now() - this._startTime;
          return e2 < Math.pow(2, 16) ? e2 : (this._startTime += Math.pow(2, 16), this.startTime);
        }
        get sequence() {
          return this._sequence < Math.pow(2, 32) ? this._sequence++ : (this._sequence -= Math.pow(2, 32), this.sequence);
        }
        serialize(e2) {
          const t2 = { commonPacketHeader: { length: 0, reserved: 0, extension: 0, sequence: this.sequence }, commonStreamHeader: this.startTime, extension: void 0, payload: e2 };
          if (e2.byteLength > 128) {
            const i3 = new Uint8Array(4);
            i3.set([1, 0, 0, 0]);
            const n3 = { id: 0, length: 4, data: i3.buffer }, r3 = { profile: this.isUseOneByte ? 0 : 1, length: this.isUseOneByte ? 5 : 6, datas: [n3] };
            t2.commonPacketHeader.extension = 1, t2.extension = r3, t2.payload = this.compress(e2), t2.commonPacketHeader.length = 8 + (t2.extension.length + 2) + t2.payload.byteLength;
          } else t2.commonPacketHeader.length = 8 + t2.payload.byteLength;
          MN("SHOW_DATASTREAM2_LOG") && lD.debug("send data header: ".concat(JSON.stringify(t2.commonPacketHeader)));
          const i2 = new ArrayBuffer(t2.commonPacketHeader.length), n2 = new Uint8Array(i2), r2 = new DataView(i2);
          let o2 = 0;
          if (r2.setUint16(o2, t2.commonPacketHeader.extension << 15 | t2.commonPacketHeader.reserved << 14 | t2.commonPacketHeader.length, true), o2 += 2, r2.setUint32(o2, t2.commonPacketHeader.sequence, true), o2 += 4, r2.setUint16(o2, t2.commonStreamHeader, true), o2 += 2, t2.extension) {
            const e3 = this.serializeExtension(t2.extension);
            n2.set(new Uint8Array(e3), o2), o2 += e3.byteLength;
          }
          if (n2.set(new Uint8Array(t2.payload), o2), o2 += t2.payload.byteLength, o2 !== t2.commonPacketHeader.length) throw Error("serialize error!");
          return i2;
        }
        deserialize(e2) {
          if (e2.byteLength < 4) return new ArrayBuffer(0);
          const t2 = new DataView(e2);
          let i2 = 0;
          const n2 = t2.getUint16(i2, true);
          i2 += 2;
          const r2 = { length: 16383 & n2, reserved: (16384 & n2) >> 14, extension: (32768 & n2) >> 15, sequence: t2.getUint16(i2 + 2, true) << 16 | t2.getUint16(i2, true) };
          let o2, s2;
          if (i2 += 4, MN("SHOW_DATASTREAM2_LOG") && lD.debug("receive data header: ".concat(JSON.stringify(r2))), t2.getUint16(i2, true), i2 += 2, r2.extension) {
            s2 = this.deserializeExtension(e2.slice(i2)), i2 += 2 + s2.length, o2 = e2.slice(i2);
            let t3 = false;
            if (s2.datas.length > 0) {
              const e3 = s2.datas.find((e4) => 0 === e4.id);
              if (e3) {
                t3 = !(1 & ~new DataView(e3.data).getUint32(0, true));
              }
            }
            o2 = t3 ? this.decompress(o2) : o2;
          } else o2 = e2.slice(8);
          return o2;
        }
        serializeExtension(e2) {
          const { profile: t2, length: i2, datas: n2 } = e2, r2 = new ArrayBuffer(i2 + 2), o2 = new Uint8Array(r2), s2 = new DataView(r2);
          let a2 = 0;
          if (s2.setUint8(a2++, t2), s2.setUint8(a2++, i2), n2.forEach((e3) => {
            t2 ? (s2.setUint8(a2++, e3.id), s2.setUint8(a2++, e3.length), o2.set(new Uint8Array(e3.data), a2), a2 += e3.data.byteLength) : (s2.setUint8(a2++, e3.id | e3.length << 4), o2.set(new Uint8Array(e3.data), a2), a2 += e3.data.byteLength);
          }), a2 !== i2 + 2) throw Error("serialize extension error, is ".concat(a2, "!==").concat(i2 + 2));
          return r2;
        }
        deserializeExtension(e2) {
          const t2 = new DataView(e2);
          let i2 = 0;
          const n2 = t2.getUint8(i2);
          i2++;
          const r2 = t2.getUint8(i2);
          i2++;
          const o2 = n2 === kY.TWO_BYTE, s2 = [], a2 = new DataView(e2, 2);
          let c2 = 0;
          for (; c2 < r2; ) {
            let e3 = 0, t3 = 0, i3 = new ArrayBuffer(0);
            o2 ? (e3 = a2.getUint8(c2), c2++, t3 = a2.getUint8(c2), c2++) : (e3 = 15 & a2.getUint8(c2), t3 = a2.getUint8(c2) >> 4, c2++), t3 > 0 && (i3 = a2.buffer.slice(c2 + 2, c2 + 2 + t3), c2 += i3.byteLength), s2.push({ id: e3, length: t3, data: i3 });
          }
          if (c2 !== r2) throw Error("parse error");
          return { profile: n2, length: r2, datas: s2 };
        }
        decompress(e2) {
          return LY(new Uint8Array(e2));
        }
        compress(e2) {
          return PY(new Uint8Array(e2));
        }
      }
      const UY = { name: "DataStream", create: (e2, t2) => {
        const i2 = t2 ? new Qk(e2) : new Zk(e2);
        return i2.useDataStream(new MY()), i2;
      } };
      class xY extends Zw {
        constructor(e2, t2, i2) {
          super(), vy(this, "ws", void 0), vy(this, "requestId", 1), vy(this, "heartBeatTimer", void 0), vy(this, "joinInfo", void 0), vy(this, "clientId", void 0), vy(this, "onOpen", () => {
            this.emit("open"), this.startHeartBeatCheck();
          }), vy(this, "onClose", (e3) => {
            this.emit("close"), this.dispose();
          }), vy(this, "onMessage", (e3) => {
            const t3 = JSON.parse(e3.data);
            if (!t3 || "serverResponse" !== t3.command || !t3.requestId) return t3 && "serverStatus" === t3.command && t3.serverStatus && t3.serverStatus.command ? (this.emit("status", t3.serverStatus), void this.emit(t3.serverStatus.command, t3.serverStatus)) : void 0;
            this.emit("req_".concat(t3.requestId), t3);
          }), this.joinInfo = e2, this.clientId = t2, this.ws = new Gx("cross-channel-".concat(this.clientId), i2), this.ws.on(LU.RECONNECTING, () => {
            this.ws.reconnectMode = "retry", this.emit("reconnecting");
          }), this.ws.on(LU.CONNECTED, this.onOpen), this.ws.on(LU.ON_MESSAGE, this.onMessage), this.ws.on(LU.CLOSED, this.onClose);
        }
        isConnect() {
          return "connected" === this.ws.state;
        }
        sendMessage(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, e2.seq = t2, this.ws.sendMessage(e2), t2;
        }
        waitStatus(e2) {
          return new np((t2, i2) => {
            const n2 = window.setTimeout(() => {
              i2(new SD(Uw.TIMEOUT, "wait status timeout, status: ".concat(e2)));
            }, 5e3);
            this.once(e2, (r2) => {
              window.clearTimeout(n2), r2.state && 0 !== r2.state ? i2(new SD(Uw.CROSS_CHANNEL_WAIT_STATUS_ERROR, "wait status error, status: ".concat(e2))) : t2(void 0);
            }), this.once("dispose", () => {
              window.clearTimeout(n2), i2(new SD(Uw.WS_ABORT));
            });
          });
        }
        async request(e2) {
          if ("closed" === this.ws.state) throw new SD(Uw.WS_DISCONNECT);
          const t2 = () => new np((e3, t3) => {
            this.ws.once(LU.CLOSED, () => t3(new SD(Uw.WS_ABORT))), this.ws.once(LU.CONNECTED, e3);
          });
          "connected" !== this.ws.state && await t2();
          const i2 = this.sendMessage(e2), n2 = new np((e3, t3) => {
            const n3 = () => {
              t3(new SD(Uw.WS_ABORT));
            };
            this.ws.once(LU.RECONNECTING, n3), this.ws.once(LU.CLOSED, n3), this.once("req_".concat(i2), e3), PO(3e3).then(() => {
              this.removeAllListeners("req_".concat(i2)), this.ws.off(LU.RECONNECTING, n3), this.ws.off(LU.CLOSED, n3), t3(new SD(Uw.TIMEOUT, "cross channel ws request timeout"));
            });
          }), r2 = await n2;
          if (!r2 || 200 !== r2.code) throw new SD(Uw.CROSS_CHANNEL_SERVER_ERROR_RESPONSE, "response: ".concat(JSON.stringify(r2)));
          return r2;
        }
        async connect(e2) {
          this.ws.removeAllListeners(LU.REQUEST_NEW_URLS), this.ws.on(LU.REQUEST_NEW_URLS, (t2) => {
            t2(e2);
          }), await this.ws.init(e2);
        }
        dispose() {
          this.clearHeartBeatCheck(), this.emit("dispose"), this.removeAllListeners(), this.ws.close();
        }
        sendPing(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, this.ws.sendMessage(e2), t2;
        }
        startHeartBeatCheck() {
          this.heartBeatTimer && window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = window.setInterval(() => {
            this.sendPing({ command: "ping", appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sid: this.joinInfo.sid, ts: +/* @__PURE__ */ new Date(), requestId: 0 });
          }, 3e3);
        }
        clearHeartBeatCheck() {
          window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = void 0;
        }
      }
      class VY extends Zw {
        set state(e2) {
          e2 !== this._state && (e2 !== qU.RELAY_STATE_FAILURE && (this.errorCode = zU.RELAY_OK), this.emit("state", e2, this.errorCode), this._state = e2);
        }
        get state() {
          return this._state;
        }
        constructor(e2, t2, i2, n2, r2) {
          super(), vy(this, "joinInfo", void 0), vy(this, "sid", void 0), vy(this, "clientId", void 0), vy(this, "cancelToken", qb.CancelToken.source()), vy(this, "workerToken", void 0), vy(this, "requestId", 0), vy(this, "signal", void 0), vy(this, "prevChannelMediaConfig", void 0), vy(this, "httpRetryConfig", void 0), vy(this, "_resolution", void 0), vy(this, "_state", qU.RELAY_STATE_IDLE), vy(this, "errorCode", zU.RELAY_OK), vy(this, "onStatus", (e3) => {
            lD.debug("[".concat(this.clientId, "] ChannelMediaStatus: ").concat(JSON.stringify(e3))), e3 && e3.command && ("onAudioPacketReceived" === e3.command && this.emit("event", YU.PACKET_RECEIVED_AUDIO_FROM_SRC), "onVideoPacketReceived" === e3.command && this.emit("event", YU.PACKET_RECEIVED_VIDEO_FROM_SRC), "onSrcTokenPrivilegeDidExpire" === e3.command && (this.errorCode = zU.SRC_TOKEN_EXPIRED, this.state = qU.RELAY_STATE_FAILURE), "onDestTokenPrivilegeDidExpire" === e3.command && (this.errorCode = zU.DEST_TOKEN_EXPIRED, this.state = qU.RELAY_STATE_FAILURE));
          }), vy(this, "onReconnect", async () => {
            lD.debug("[".concat(this.clientId, "] ChannelMediaSocket disconnect, reconnecting")), this.emit("event", YU.NETWORK_DISCONNECTED), this.state = qU.RELAY_STATE_IDLE, this.prevChannelMediaConfig && this.sendStartRelayMessage(this.prevChannelMediaConfig).catch((e3) => {
              this.state !== qU.RELAY_STATE_IDLE && (lD.error("auto restart channel media relay failed", e3.toString()), this.errorCode = zU.SERVER_CONNECTION_LOST, this.state = qU.RELAY_STATE_FAILURE);
            });
          }), this.joinInfo = e2, this.clientId = t2, this.sid = kO(), this.signal = new xY(this.joinInfo, this.clientId, i2), this.httpRetryConfig = n2, this._resolution = r2;
        }
        async startChannelMediaRelay(e2) {
          if (this.state !== qU.RELAY_STATE_IDLE) throw new SD(Uw.INVALID_OPERATION);
          this.state = qU.RELAY_STATE_CONNECTING, await this.connect(), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: connect success"));
          try {
            await this.sendStartRelayMessage(e2);
          } catch (e3) {
            if (e3.data && e3.data.serverResponse && "SetSourceChannel" === e3.data.serverResponse.command) throw new SD(Uw.CROSS_CHANNEL_FAILED_JOIN_SRC);
            if (e3.data && e3.data.serverResponse && "SetDestChannelStatus" === e3.serverResponse.command) throw new SD(Uw.CROSS_CHANNEL_FAILED_JOIN_DEST);
            if (e3.data && e3.data.serverResponse && "StartPacketTransfer" === e3.serverResponse.command) throw new SD(Uw.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST);
            throw e3;
          }
          this.prevChannelMediaConfig = e2;
        }
        async updateChannelMediaRelay(e2) {
          if (this.state !== qU.RELAY_STATE_RUNNING) throw new SD(Uw.INVALID_OPERATION);
          await this.sendUpdateMessage(e2), this.prevChannelMediaConfig = e2;
        }
        async setVideoProfile(e2) {
          if (this._resolution = e2, this.state !== qU.RELAY_STATE_RUNNING) throw new SD(Uw.INVALID_OPERATION);
          const t2 = this.genMessage(KU.SetVideoProfile);
          await this.signal.request(t2), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: setVideoProfile success"));
        }
        async stopChannelMediaRelay() {
          await this.sendStopRelayMessage(), lD.debug("[".concat(this.clientId, "] stopChannelMediaRelay: send stop message success")), this.state = qU.RELAY_STATE_IDLE, this.dispose();
        }
        dispose() {
          lD.debug("[".concat(this.clientId, "] disposeChannelMediaRelay")), this.cancelToken.cancel(), this.cancelToken = qb.CancelToken.source(), this.state = qU.RELAY_STATE_IDLE, this.emit("dispose"), this.signal.dispose(), this.prevChannelMediaConfig = void 0;
        }
        async connect() {
          const e2 = await AF(this.joinInfo, this.cancelToken.token, this.httpRetryConfig);
          this.workerToken = e2.workerToken, await this.signal.connect(e2.addressList), this.emit("event", YU.NETWORK_CONNECTED), this.signal.on("status", this.onStatus), this.signal.on("reconnecting", this.onReconnect);
        }
        async sendStartRelayMessage(e2) {
          const t2 = this.genMessage(KU.StopPacketTransfer);
          await this.signal.request(t2), await this.signal.waitStatus("Normal Quit"), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: StopPacketTransfer success"));
          const i2 = this.genMessage(KU.SetSdkProfile, e2);
          await this.signal.request(i2), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSdkProfile success"));
          const n2 = this.genMessage(KU.SetSourceChannel, e2);
          await this.signal.request(n2), await this.signal.waitStatus("SetSourceChannelStatus"), this.emit("event", YU.PACKET_JOINED_SRC_CHANNEL), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceChannel success"));
          const r2 = this.genMessage(KU.SetSourceUserId, e2);
          await this.signal.request(r2), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceUserId success"));
          const o2 = this.genMessage(KU.SetDestChannel, e2);
          await this.signal.request(o2), await this.signal.waitStatus("SetDestChannelStatus"), this.emit("event", YU.PACKET_JOINED_DEST_CHANNEL), lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetDestChannel success"));
          const s2 = this.genMessage(KU.StartPacketTransfer, e2);
          await this.signal.request(s2), this.emit("event", YU.PACKET_SENT_TO_DEST_CHANNEL), this.state = qU.RELAY_STATE_RUNNING, lD.debug("[".concat(this.clientId, "] startChannelMediaRelay: StartPacketTransfer success")), this.setVideoProfile(this._resolution);
        }
        async sendUpdateMessage(e2) {
          const t2 = this.genMessage(KU.UpdateDestChannel, e2);
          await this.signal.request(t2), this.emit("event", YU.PACKET_UPDATE_DEST_CHANNEL), lD.debug("[".concat(this.clientId, "] sendUpdateMessage: UpdateDestChannel success"));
        }
        async sendStopRelayMessage() {
          const e2 = this.genMessage(KU.StopPacketTransfer);
          await this.signal.request(e2), lD.debug("[".concat(this.clientId, "] sendStopRelayMessage: StopPacketTransfer success"));
        }
        genMessage(e2, t2) {
          const i2 = [], n2 = [], r2 = [];
          this.requestId += 1;
          const o2 = { appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sdkVersion: yN, sid: this.sid, ts: Date.now(), requestId: this.requestId, seq: this.requestId, allocate: true, clientRequest: {} };
          "4.23.1" === o2.sdkVersion && (o2.sdkVersion = "0.0.1");
          let s2 = null, a2 = null;
          switch (e2) {
            case KU.SetSdkProfile:
              return o2.clientRequest = { command: "SetSdkProfile", type: "multi_channel" }, o2;
            case KU.SetSourceChannel:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2) throw new SD(Uw.UNEXPECTED_ERROR, "can not find source config");
              return o2.clientRequest = { command: "SetSourceChannel", uid: "0", channelName: a2.channelName, token: a2.token || this.joinInfo.appId }, o2;
            case KU.SetSourceUserId:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2) throw new SD(Uw.UNEXPECTED_ERROR, "can not find source config");
              return o2.clientRequest = { command: "SetSourceUserId", uid: a2.uid + "" }, o2;
            case KU.SetDestChannel:
              if (s2 = t2 && t2.getDestChannelMediaInfo(), !s2) throw new SD(Uw.UNEXPECTED_ERROR, "can not find dest config");
              return s2.forEach((e3) => {
                i2.push(e3.channelName), n2.push(e3.uid + ""), r2.push(e3.token || this.joinInfo.appId);
              }), o2.clientRequest = { command: "SetDestChannel", channelName: i2, uid: n2, token: r2 }, o2;
            case KU.StartPacketTransfer:
              return o2.clientRequest = { command: "StartPacketTransfer" }, o2;
            case KU.Reconnect:
              return o2.clientRequest = { command: "Reconnect" }, o2;
            case KU.StopPacketTransfer:
              return o2.clientRequest = { command: "StopPacketTransfer" }, o2;
            case KU.UpdateDestChannel:
              if (s2 = t2 && t2.getDestChannelMediaInfo(), !s2) throw new SD(Uw.UNEXPECTED_ERROR, "can not find dest config");
              return s2.forEach((e3) => {
                i2.push(e3.channelName), n2.push(e3.uid + ""), r2.push(e3.token || this.joinInfo.appId);
              }), o2.clientRequest = { command: "UpdateDestChannel", channelName: i2, uid: n2, token: r2 }, o2;
            case KU.SetVideoProfile:
              o2.clientRequest = { command: "SetVideoProfile", width: this._resolution.width, height: this._resolution.height };
          }
          return o2;
        }
      }
      const FY = { name: "ChannelMediaRelay", create: function(e2) {
        return new VY(e2.joinInfo, e2.clientId, e2.websocketRetryConfig || qO, e2.httpRetryConfig || qO, e2.resolution);
      } };
      function BY(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function jY(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? BY(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : BY(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class GY extends Zw {
        constructor(e2, t2, i2, n2) {
          super(), vy(this, "spec", void 0), vy(this, "token", void 0), vy(this, "websocket", void 0), vy(this, "pingpongTimer", void 0), vy(this, "reconnectMode", "retry"), vy(this, "serviceMode", void 0), vy(this, "reqId", 0), vy(this, "commandReqId", 0), vy(this, "handleWebSocketOpen", () => {
            this.reconnectMode = "retry", this.startPingPong();
          }), vy(this, "handleWebSocketMessage", (e3) => {
            if (!e3.data) return;
            const t3 = JSON.parse(e3.data);
            t3.requestId ? this.emit("@".concat(t3.requestId, "-").concat(t3.sid), t3) : (TD.workerEvent(this.spec.sid, { actionType: "status", serverCode: t3.code, workerType: this.serviceMode === UU.TRANSCODE ? 1 : 2 }), this.emit(jU.PUBLISH_STREAM_STATUS, t3));
          }), this.spec = t2, this.token = e2, this.serviceMode = n2, this.websocket = new Gx("live-streaming", i2), this.websocket.on(LU.CONNECTED, this.handleWebSocketOpen), this.websocket.on(LU.ON_MESSAGE, this.handleWebSocketMessage), this.websocket.on(LU.REQUEST_NEW_URLS, (e3, t3) => {
            pO(this, jU.REQUEST_NEW_ADDRESS).then(e3).catch(t3);
          }), this.websocket.on(LU.RECONNECTING, () => {
            this.websocket.reconnectMode = this.reconnectMode;
          });
        }
        init(e2) {
          return this.websocket.init(e2);
        }
        async request(e2, t2, i2, n2) {
          this.reqId += 1, "request" === e2 && (this.commandReqId += 1);
          const r2 = this.commandReqId, o2 = this.reqId;
          if (!o2 || !this.websocket) throw new SD(Uw.UNEXPECTED_ERROR);
          const s2 = jY({ command: e2, sdkVersion: "4.23.1" === yN ? "0.0.1" : yN, seq: o2, requestId: o2, allocate: i2, cname: this.spec.cname, appId: this.spec.appId, sid: this.spec.sid, uid: this.spec.uid.toString(), ts: Math.floor(Date.now() / 1e3) }, t2);
          if ("closed" === this.websocket.state) throw new SD(Uw.WS_DISCONNECT);
          const a2 = () => new np((e3, t3) => {
            this.websocket.once(LU.CLOSED, () => t3(new SD(Uw.WS_ABORT))), this.websocket.once(LU.CONNECTED, e3);
          });
          "connected" !== this.websocket.state && await a2(), s2.clientRequest && (s2.clientRequest.workerToken = this.token);
          const c2 = new np((e3, t3) => {
            const i3 = () => {
              t3(new SD(Uw.WS_ABORT));
            };
            this.websocket.once(LU.RECONNECTING, i3), this.websocket.once(LU.CLOSED, i3), this.once("@".concat(o2, "-").concat(this.spec.sid), (t4) => {
              e3(t4);
            });
          });
          n2 && TD.workerEvent(this.spec.sid, jY(jY({}, n2), {}, { requestId: r2, actionType: "request", payload: JSON.stringify(t2.clientRequest), serverCode: 0, code: 0 }));
          const d2 = Date.now();
          this.websocket.sendMessage(s2);
          let l2 = null;
          try {
            l2 = await c2;
          } catch (n3) {
            if ("closed" === this.websocket.state) throw n3;
            return await a2(), await this.request(e2, t2, i2);
          }
          return n2 && TD.workerEvent(this.spec.sid, jY(jY({}, n2), {}, { requestId: r2, actionType: "response", payload: JSON.stringify(l2.serverResponse), serverCode: l2.code, success: 200 === l2.code, responseTime: Date.now() - d2 })), 200 !== l2.code && this.handleResponseError(l2), l2;
        }
        tryNextAddress() {
          this.reconnectMode = "tryNext", this.websocket.reconnect("tryNext");
        }
        close() {
          const e2 = "4.23.1" === yN ? "0.0.1" : yN;
          this.reqId += 1, "connected" === this.websocket.state ? (this.websocket.sendMessage({ command: "request", appId: this.spec.appId, cname: this.spec.cname, uid: this.spec.uid.toString(), sdkVersion: e2, sid: this.spec.sid, seq: this.reqId, ts: Math.floor(Date.now() / 1e3), requestId: this.reqId, clientRequest: { command: "DestroyWorker" } }), this.websocket.close(false, true)) : this.websocket.close(false), this.pingpongTimer && (window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0);
        }
        handleResponseError(e2) {
          switch (e2.code) {
            case WU.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM:
              return void lD.warning("live stream response already exists stream");
            case WU.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR:
            case WU.LIVE_STREAM_RESPONSE_BAD_STREAM:
            case WU.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR:
              return new SD(Uw.LIVE_STREAMING_INVALID_ARGUMENT, "", { code: e2.code }).throw();
            case WU.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST:
              if ("UnpublishStream" === e2.serverResponse.command) return;
              throw new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case WU.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED:
              return new SD(Uw.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED, "", { code: e2.code }).throw();
            case WU.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const t2 = new SD(Uw.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE);
              return this.emit(jU.WARNING, t2, e2.serverResponse.url);
            }
            case WU.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN: {
              const t2 = new SD(Uw.LIVE_STREAMING_WARN_FREQUENT_REQUEST);
              return this.emit(jU.WARNING, t2, e2.serverResponse.url);
            }
            case WU.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH:
              throw new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case WU.LIVE_STREAM_RESPONSE_NOT_SUPPORTED:
              return new SD(Uw.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED, "", { code: e2.code }).throw();
            case WU.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM: {
              const t2 = new SD(Uw.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT);
              return this.emit(jU.WARNING, t2, e2.serverResponse.url);
            }
            case WU.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR:
              return new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code }).throw();
            case WU.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT:
              throw new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream resource limit", { retry: true, changeAddress: true });
            case WU.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case WU.LIVE_STREAM_RESPONSE_WORKER_QUIT:
              if ("UnpublishStream" === e2.serverResponse.command) return;
              throw new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case WU.ERROR_FAIL_SEND_MESSAGE:
              if ("UnpublishStream" === e2.serverResponse.command) return;
              if ("UpdateTranscoding" === e2.serverResponse.command || "ControlStream" === e2.serverResponse.command) return new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { code: e2.code }).throw();
              throw new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case WU.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH:
              return new SD(Uw.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code }).throw();
          }
        }
        startPingPong() {
          this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(() => {
            "connected" === this.websocket.state && this.request("ping", {}).catch(MO);
          }, 6e3);
        }
      }
      function WY(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function HY(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? WY(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : WY(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class KY extends Zw {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : qO, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : qO;
          super(), vy(this, "onLiveStreamWarning", void 0), vy(this, "onLiveStreamError", void 0), vy(this, "spec", void 0), vy(this, "retryTimeout", 1e4), vy(this, "connection", void 0), vy(this, "httpRetryConfig", void 0), vy(this, "wsRetryConfig", void 0), vy(this, "streamingTasks", /* @__PURE__ */ new Map()), vy(this, "isStartingStreamingTask", false), vy(this, "taskMutex", new KO("live-streaming")), vy(this, "cancelToken", qb.CancelToken.source()), vy(this, "transcodingConfig", void 0), vy(this, "uapResponse", void 0), vy(this, "lastTaskId", 1), vy(this, "statusError", /* @__PURE__ */ new Map()), this.spec = e2, this.httpRetryConfig = i2, this.wsRetryConfig = t2;
        }
        async setTranscodingConfig(e2) {
          const t2 = HY(HY({}, BU), e2);
          66 !== t2.videoCodecProfile && 77 !== t2.videoCodecProfile && 100 !== t2.videoCodecProfile && (lD.debug("[".concat(this.spec.clientId, "] set transcoding config, fix video codec profile: ").concat(t2.videoCodecProfile, " -> 100")), t2.videoCodecProfile = 100), t2.transcodingUsers || (t2.transcodingUsers = t2.userConfigs), t2.transcodingUsers && (t2.transcodingUsers = t2.transcodingUsers.map((e3) => HY(HY(HY({}, xU), e3), {}, { zOrder: e3.zOrder ? e3.zOrder + 1 : 1 }))), function(e3) {
            Hw(e3.width) || Bw(e3.width, "config.width", 0, 1e4), Hw(e3.height) || Bw(e3.height, "config.height", 0, 1e4), Hw(e3.videoBitrate) || Bw(e3.videoBitrate, "config.videoBitrate", 1, 1e6), Hw(e3.videoFrameRate) || Bw(e3.videoFrameRate, "config.videoFrameRate"), Hw(e3.lowLatency) || Vw(e3.lowLatency, "config.lowLatency"), Hw(e3.audioSampleRate) || Fw(e3.audioSampleRate, "config.audioSampleRate", [32e3, 44100, 48e3]), Hw(e3.audioBitrate) || Bw(e3.audioBitrate, "config.audioBitrate", 1, 128), Hw(e3.audioChannels) || Fw(e3.audioChannels, "config.audioChannels", [1, 2, 3, 4, 5]), Hw(e3.videoGop) || Bw(e3.videoGop, "config.videoGop"), Hw(e3.videoCodecProfile) || Fw(e3.videoCodecProfile, "config.videoCodecProfile", [66, 77, 100]), Hw(e3.userCount) || Bw(e3.userCount, "config.userCount", 0, 17), Hw(e3.backgroundColor) || Bw(e3.backgroundColor, "config.backgroundColor", 0, 16777215), Hw(e3.userConfigExtraInfo) || Gw(e3.userConfigExtraInfo, "config.userConfigExtraInfo", 0, 4096, false), e3.transcodingUsers && !Hw(e3.transcodingUsers) && (Ww(e3.transcodingUsers, "config.transcodingUsers"), e3.transcodingUsers.forEach((e4, t3) => {
              MU(e4.uid), Hw(e4.x) || Bw(e4.x, "transcodingUser[".concat(t3, "].x"), 0, 1e4), Hw(e4.y) || Bw(e4.y, "transcodingUser[".concat(t3, "].y"), 0, 1e4), Hw(e4.width) || Bw(e4.width, "transcodingUser[".concat(t3, "].width"), 0, 1e4), Hw(e4.height) || Bw(e4.height, "transcodingUser[".concat(t3, "].height"), 0, 1e4), Hw(e4.zOrder) || Bw(e4.zOrder - 1, "transcodingUser[".concat(t3, "].zOrder"), 0, 100), Hw(e4.alpha) || Bw(e4.alpha, "transcodingUser[".concat(t3, "].alpha"), 0, 1, false);
            })), Hw(e3.watermark) || FU(e3.watermark, "watermark"), Hw(e3.backgroundImage) || FU(e3.backgroundImage, "backgroundImage"), e3.images && !Hw(e3.images) && (Ww(e3.images, "config.images"), e3.images.forEach((e4, t3) => {
              FU(e4, "images[".concat(t3, "]"));
            }));
          }(t2);
          const i2 = [];
          t2.images && i2.push(...t2.images.map((e3) => HY(HY(HY({}, VU), e3), {}, { zOrder: 255 }))), t2.backgroundImage && (i2.push(HY(HY(HY({}, VU), t2.backgroundImage), {}, { zOrder: 0 })), delete t2.backgroundImage), t2.watermark && (i2.push(HY(HY(HY({}, VU), t2.watermark), {}, { zOrder: 255 })), delete t2.watermark), t2.images = i2, t2.transcodingUsers && (t2.userConfigs = t2.transcodingUsers.map((e3) => HY({}, e3)), t2.userCount = t2.transcodingUsers.length, delete t2.transcodingUsers);
          const n2 = (t2.userConfigs || []).map((e3) => "number" == typeof e3.uid ? np.resolve(e3.uid) : RF(e3.uid, this.spec, this.cancelToken.token, this.httpRetryConfig));
          if ((await np.all(n2)).forEach((e3, i3) => {
            t2.userConfigs && t2.userConfigs[i3] && (t2.userConfigs[i3].uid = e3);
          }), this.transcodingConfig = t2, this.connection) try {
            var r2;
            const e3 = await this.connection.request("request", { clientRequest: { command: "UpdateTranscoding", transcodingConfig: this.transcodingConfig } }, false, { command: "UpdateTranscoding", workerType: 1, requestByUser: true, tid: Array.from(hp(r2 = this.streamingTasks).call(r2)).map((e4) => e4.taskId).join("#") });
            lD.debug("[".concat(this.spec.clientId, "] update live transcoding config success, code: ").concat(e3.code, ", config:"), JSON.stringify(this.transcodingConfig));
          } catch (e3) {
            if (!e3.data || !e3.data.retry) throw e3;
            e3.data.changeAddress && this.connection.tryNextAddress(), this.streamingTasks.forEach((t3) => {
              lD.warning("[".concat(this.spec.clientId, "] live streaming receive error"), e3.toString(), "try to republish", t3.url), this.startLiveStreamingTask(t3.url, t3.mode, e3).then(() => {
                lD.debug("[".concat(this.spec.clientId, "] live streaming republish ").concat(t3.url, " success"));
              }).catch((e4) => {
                lD.error("[".concat(this.spec.clientId, "] live streaming republish failed"), t3.url, e4.toString()), this.onLiveStreamError && this.onLiveStreamError(t3.url, e4);
              });
            });
          }
        }
        async startLiveStreamingTask(e2, t2, i2) {
          if (!this.transcodingConfig && t2 === UU.TRANSCODE) throw new SD(Uw.INVALID_OPERATION, "[LiveStreaming] no transcoding config found, can not start transcoding streaming task");
          const n2 = { command: "PublishStream", ts: Date.now(), url: e2, uid: this.spec.uid.toString(), autoDestroyTime: 100, acceptImageTimeout: true };
          lD.debug("[".concat(this.spec.clientId, "] start live streaming ").concat(e2, ", mode: ").concat(t2));
          const r2 = await this.taskMutex.lock();
          if (!this.connection && i2) return void r2();
          if (this.streamingTasks.get(e2) && !i2) return r2(), new SD(Uw.LIVE_STREAMING_TASK_CONFLICT).throw();
          try {
            this.connection || (this.connection = await this.connect(t2));
          } catch (e3) {
            throw r2(), e3;
          }
          switch (t2) {
            case UU.TRANSCODE:
              n2.transcodingConfig = HY({}, this.transcodingConfig);
            case UU.RAW:
          }
          this.uapResponse && this.uapResponse.vid && (n2.vid = this.uapResponse.vid), this.isStartingStreamingTask = true;
          const o2 = this.lastTaskId++;
          try {
            const s2 = new np((t3, n3) => {
              PO(this.retryTimeout).then(() => {
                if (i2) return n3(i2);
                const t4 = this.statusError.get(e2);
                return t4 ? (this.statusError.delete(e2), n3(t4)) : void 0;
              });
            }), a2 = await np.race([this.connection.request("request", { clientRequest: n2 }, true, { url: e2, command: "PublishStream", workerType: t2 === UU.TRANSCODE ? 1 : 2, requestByUser: !i2, tid: o2.toString() }), s2]);
            this.isStartingStreamingTask = false, lD.debug("[".concat(this.spec.clientId, "] live streaming started, code: ").concat(a2.code)), this.streamingTasks.set(e2, { clientRequest: n2, mode: t2, url: e2, taskId: o2 }), r2();
          } catch (n3) {
            if (r2(), this.isStartingStreamingTask = false, !n3.data || !n3.data.retry || i2) throw n3;
            return n3.data.changeAddress ? (this.connection.tryNextAddress(), await this.startLiveStreamingTask(e2, t2, n3)) : await this.startLiveStreamingTask(e2, t2, n3);
          }
        }
        stopLiveStreamingTask(e2) {
          return new np((t2, i2) => {
            const n2 = this.streamingTasks.get(e2);
            if (!n2 || !this.connection) return new SD(Uw.UNEXPECTED_ERROR, "can not find streaming task to stop").throw();
            const r2 = n2.mode;
            n2.abortTask = () => {
              lD.debug("[".concat(this.spec.clientId, "] stop live streaming success(worker exception)")), this.streamingTasks.delete(e2), t2();
            }, this.connection.request("request", { clientRequest: { command: "UnpublishStream", url: n2.url } }, false, { url: e2, command: "UnPublishStream", workerType: r2 === UU.TRANSCODE ? 1 : 2, requestByUser: true, tid: (this.lastTaskId++).toString() }).then((i3) => {
              lD.debug("[".concat(this.spec.clientId, "] stop live streaming success, code: ").concat(i3.code)), this.streamingTasks.delete(e2), 0 === this.streamingTasks.size && (this.connection && this.connection.close(), this.connection = void 0), t2();
            }).catch(i2);
          });
        }
        resetAllTask() {
          var e2;
          const t2 = Array.from(hp(e2 = this.streamingTasks).call(e2));
          this.terminate();
          for (const e3 of t2) this.startLiveStreamingTask(e3.url, e3.mode).catch((t3) => {
            this.onLiveStreamError && this.onLiveStreamError(e3.url, t3);
          });
        }
        terminate() {
          this.cancelToken && this.cancelToken.cancel(), this.streamingTasks = /* @__PURE__ */ new Map(), this.isStartingStreamingTask = false, this.statusError = /* @__PURE__ */ new Map(), this.cancelToken = qb.CancelToken.source(), this.uapResponse = void 0, this.connection && this.connection.close(), this.connection = void 0;
        }
        async connect(e2) {
          if (this.connection) throw new SD(Uw.UNEXPECTED_ERROR, "live streaming connection has already connected");
          const t2 = await pO(this, GU.REQUEST_WORKER_MANAGER_LIST, e2);
          return this.uapResponse = t2, this.connection = new GY(t2.workerToken, this.spec, this.wsRetryConfig, e2), this.connection.on(jU.WARNING, (e3, t3) => this.onLiveStreamWarning && this.onLiveStreamWarning(t3, e3)), this.connection.on(jU.PUBLISH_STREAM_STATUS, (e3) => this.handlePublishStreamServer(e3)), this.connection.on(jU.REQUEST_NEW_ADDRESS, (t3, i2) => {
            if (!this.connection) return i2(new SD(Uw.UNEXPECTED_ERROR, "can not get new live streaming address list"));
            pO(this, GU.REQUEST_WORKER_MANAGER_LIST, e2).then((e3) => {
              this.uapResponse = e3, t3(e3.addressList);
            }).catch(i2);
          }), await this.connection.init(t2.addressList), this.connection;
        }
        handlePublishStreamServer(e2) {
          const t2 = e2.serverStatus && e2.serverStatus.url || "empty_url", i2 = this.streamingTasks.get(t2), n2 = e2.reason;
          switch (e2.code) {
            case WU.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case WU.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH: {
              const n3 = new SD(Uw.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code });
              if (i2) return lD.error(n3.toString()), this.onLiveStreamError && this.onLiveStreamError(t2, n3);
              if (!this.isStartingStreamingTask) return;
              this.statusError.set(t2, n3);
            }
            case WU.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const e3 = new SD(Uw.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE, n2);
              return this.onLiveStreamWarning && this.onLiveStreamWarning(t2, e3);
            }
            case WU.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case WU.LIVE_STREAM_RESPONSE_WORKER_QUIT: {
              var r2;
              if (!this.connection) return;
              this.connection.tryNextAddress();
              const t3 = Array.from(hp(r2 = this.streamingTasks).call(r2));
              for (const i3 of t3) i3.abortTask ? i3.abortTask() : (lD.warning("[".concat(this.spec.clientId, "] publish stream status code"), e2.code, "try to republish", i3.url), this.startLiveStreamingTask(i3.url, i3.mode, new SD(Uw.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code })).then(() => {
                lD.debug("[".concat(this.spec.clientId, "] republish live stream success"), i3.url);
              }).catch((e3) => {
                lD.error(e3.toString()), this.onLiveStreamError && this.onLiveStreamError(i3.url, e3);
              }));
              return;
            }
          }
        }
        hasUrl(e2) {
          return this.streamingTasks.has(e2);
        }
      }
      const YY = { name: "LiveStreaming", create: function(e2) {
        return new KY(e2.joinInfo, e2.websocketRetryConfig || qO, e2.httpRetryConfig || qO);
      } };
      function qY(e2) {
        let t2 = rq();
        return function(e3, t3) {
          let i2 = e3.appId;
          void 0 !== i2 && (Tq(t3, 10), uq(t3, i2));
          let n2 = e3.cid;
          void 0 !== n2 && (Tq(t3, 16), Tq(t3, n2));
          let r2 = e3.cname;
          void 0 !== r2 && (Tq(t3, 26), uq(t3, r2));
          let o2 = e3.deviceId;
          void 0 !== o2 && (Tq(t3, 34), uq(t3, o2));
          let s2 = e3.elapse;
          void 0 !== s2 && (Tq(t3, 40), Sq(t3, s2));
          let a2 = e3.fileSize;
          void 0 !== a2 && (Tq(t3, 48), Sq(t3, iq(a2)));
          let c2 = e3.height;
          void 0 !== c2 && (Tq(t3, 56), Sq(t3, iq(c2)));
          let d2 = e3.jpg;
          void 0 !== d2 && (Tq(t3, 66), Tq(t3, d2.length), function(e4, t4) {
            let i3 = cq(e4, t4.length);
            e4.bytes.set(t4, i3);
          }(t3, d2));
          let l2 = e3.networkType;
          void 0 !== l2 && (Tq(t3, 72), Sq(t3, iq(l2)));
          let u2 = e3.osType;
          void 0 !== u2 && (Tq(t3, 80), Sq(t3, iq(u2)));
          let h2 = e3.requestId;
          void 0 !== h2 && (Tq(t3, 90), uq(t3, h2));
          let p2 = e3.sdkVersion;
          void 0 !== p2 && (Tq(t3, 98), uq(t3, p2));
          let _2 = e3.sequence;
          void 0 !== _2 && (Tq(t3, 104), Sq(t3, iq(_2)));
          let E2 = e3.sid;
          void 0 !== E2 && (Tq(t3, 114), uq(t3, E2));
          let m2 = e3.timestamp;
          void 0 !== m2 && (Tq(t3, 120), Sq(t3, m2));
          let f2 = e3.uid;
          void 0 !== f2 && (Tq(t3, 128), Tq(t3, f2));
          let T2 = e3.vid;
          void 0 !== T2 && (Tq(t3, 136), Tq(t3, T2));
          let S2 = e3.width;
          void 0 !== S2 && (Tq(t3, 144), Sq(t3, iq(S2)));
          let g2 = e3.service;
          void 0 !== g2 && (Tq(t3, 152), Tq(t3, g2));
          let R2 = e3.callbackData;
          void 0 !== R2 && (Tq(t3, 162), uq(t3, R2));
          let v2 = e3.jpgEncryption;
          void 0 !== v2 && (Tq(t3, 168), Tq(t3, v2));
          let C2 = e3.requestType;
          void 0 !== C2 && (Tq(t3, 176), Tq(t3, C2));
          let I2 = e3.scorePorn;
          void 0 !== I2 && (Tq(t3, 185), mq(t3, I2));
          let y2 = e3.scoreSexy;
          void 0 !== y2 && (Tq(t3, 193), mq(t3, y2));
          let A2 = e3.scoreNeutral;
          void 0 !== A2 && (Tq(t3, 201), mq(t3, A2));
          let b2 = e3.scene;
          void 0 !== b2 && (Tq(t3, 208), Tq(t3, b2));
          let w2 = e3.ossFilePrefix;
          void 0 !== w2 && (Tq(t3, 218), uq(t3, w2));
          let O2 = e3.serviceVendor;
          if (void 0 !== O2) for (let e4 of O2) {
            Tq(t3, 226);
            let i3 = rq();
            XY(e4, i3), Tq(t3, i3.limit), hq(t3, i3), oq(i3);
          }
        }(e2, t2), function(e3) {
          let t3 = e3.bytes, i2 = e3.limit;
          return t3.length === i2 ? t3 : t3.subarray(0, i2);
        }(t2);
      }
      function zY(e2) {
        return function(e3) {
          let t3 = {};
          e: for (; !aq(e3); ) {
            let i2 = fq(e3);
            switch (i2 >>> 3) {
              case 0:
                break e;
              case 1:
                t3.code = fq(e3);
                break;
              case 2:
                t3.msg = lq(e3, fq(e3));
                break;
              case 3: {
                let i3 = QY(e3);
                t3.data = JY(e3), e3.limit = i3;
                break;
              }
              default:
                ZY(e3, 7 & i2);
            }
          }
          return t3;
        }({ bytes: t2 = e2, offset: 0, limit: t2.length });
        var t2;
      }
      function JY(e2) {
        let t2 = {};
        e: for (; !aq(e2); ) {
          let i2 = fq(e2);
          switch (i2 >>> 3) {
            case 0:
              break e;
            case 1:
              t2.requestId = lq(e2, fq(e2));
              break;
            case 2:
              t2.requestType = fq(e2) >>> 0;
              break;
            case 3:
              t2.scorePorn = Eq(e2);
              break;
            case 4:
              t2.scoreSexy = Eq(e2);
              break;
            case 5:
              t2.scoreNeutral = Eq(e2);
              break;
            case 6:
              t2.requestScene = fq(e2) >>> 0;
              break;
            case 7:
              t2.scene = fq(e2) >>> 0;
              break;
            default:
              ZY(e2, 7 & i2);
          }
        }
        return t2;
      }
      function XY(e2, t2) {
        let i2 = e2.service;
        void 0 !== i2 && (Tq(t2, 8), Tq(t2, i2));
        let n2 = e2.vendor;
        void 0 !== n2 && (Tq(t2, 16), Tq(t2, n2));
        let r2 = e2.token;
        void 0 !== r2 && (Tq(t2, 26), uq(t2, r2));
        let o2 = e2.callbackUrl;
        void 0 !== o2 && (Tq(t2, 34), uq(t2, o2));
      }
      function QY(e2) {
        let t2 = fq(e2), i2 = e2.limit;
        return e2.limit = e2.offset + t2, i2;
      }
      function ZY(e2, t2) {
        switch (t2) {
          case 0:
            for (; 128 & pq(e2); ) ;
            break;
          case 2:
            sq(e2, fq(e2));
            break;
          case 5:
            sq(e2, 4);
            break;
          case 1:
            sq(e2, 8);
            break;
          default:
            throw new Error("Unimplemented type: " + t2);
        }
      }
      let $Y = new Float32Array(1);
      new Uint8Array($Y.buffer);
      let eq = new Float64Array(1), tq = new Uint8Array(eq.buffer);
      function iq(e2) {
        return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
      }
      let nq = [];
      function rq() {
        const e2 = nq.pop();
        return e2 ? (e2.offset = e2.limit = 0, e2) : { bytes: new Uint8Array(64), offset: 0, limit: 0 };
      }
      function oq(e2) {
        nq.push(e2);
      }
      function sq(e2, t2) {
        if (e2.offset + t2 > e2.limit) throw new Error("Skip past limit");
        e2.offset += t2;
      }
      function aq(e2) {
        return e2.offset >= e2.limit;
      }
      function cq(e2, t2) {
        let i2 = e2.bytes, n2 = e2.offset, r2 = e2.limit, o2 = n2 + t2;
        if (o2 > i2.length) {
          let t3 = new Uint8Array(2 * o2);
          t3.set(i2), e2.bytes = t3;
        }
        return e2.offset = o2, o2 > r2 && (e2.limit = o2), n2;
      }
      function dq(e2, t2) {
        let i2 = e2.offset;
        if (i2 + t2 > e2.limit) throw new Error("Read past limit");
        return e2.offset += t2, i2;
      }
      function lq(e2, t2) {
        let i2 = dq(e2, t2), n2 = String.fromCharCode, r2 = e2.bytes, o2 = "ï¿½", s2 = "";
        for (let e3 = 0; e3 < t2; e3++) {
          let a2, c2, d2, l2, u2 = r2[e3 + i2];
          128 & u2 ? 192 == (224 & u2) ? e3 + 1 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], 128 != (192 & a2) ? s2 += o2 : (l2 = (31 & u2) << 6 | 63 & a2, l2 < 128 ? s2 += o2 : (s2 += n2(l2), e3++))) : 224 == (240 & u2) ? e3 + 2 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], c2 = r2[e3 + i2 + 2], 32896 != (49344 & (a2 | c2 << 8)) ? s2 += o2 : (l2 = (15 & u2) << 12 | (63 & a2) << 6 | 63 & c2, l2 < 2048 || l2 >= 55296 && l2 <= 57343 ? s2 += o2 : (s2 += n2(l2), e3 += 2))) : 240 == (248 & u2) ? e3 + 3 >= t2 ? s2 += o2 : (a2 = r2[e3 + i2 + 1], c2 = r2[e3 + i2 + 2], d2 = r2[e3 + i2 + 3], 8421504 != (12632256 & (a2 | c2 << 8 | d2 << 16)) ? s2 += o2 : (l2 = (7 & u2) << 18 | (63 & a2) << 12 | (63 & c2) << 6 | 63 & d2, l2 < 65536 || l2 > 1114111 ? s2 += o2 : (l2 -= 65536, s2 += n2(55296 + (l2 >> 10), 56320 + (1023 & l2)), e3 += 3))) : s2 += o2 : s2 += n2(u2);
        }
        return s2;
      }
      function uq(e2, t2) {
        let i2 = t2.length, n2 = 0;
        for (let e3 = 0; e3 < i2; e3++) {
          let r3 = t2.charCodeAt(e3);
          r3 >= 55296 && r3 <= 56319 && e3 + 1 < i2 && (r3 = (r3 << 10) + t2.charCodeAt(++e3) - 56613888), n2 += r3 < 128 ? 1 : r3 < 2048 ? 2 : r3 < 65536 ? 3 : 4;
        }
        Tq(e2, n2);
        let r2 = cq(e2, n2), o2 = e2.bytes;
        for (let e3 = 0; e3 < i2; e3++) {
          let n3 = t2.charCodeAt(e3);
          n3 >= 55296 && n3 <= 56319 && e3 + 1 < i2 && (n3 = (n3 << 10) + t2.charCodeAt(++e3) - 56613888), n3 < 128 ? o2[r2++] = n3 : (n3 < 2048 ? o2[r2++] = n3 >> 6 & 31 | 192 : (n3 < 65536 ? o2[r2++] = n3 >> 12 & 15 | 224 : (o2[r2++] = n3 >> 18 & 7 | 240, o2[r2++] = n3 >> 12 & 63 | 128), o2[r2++] = n3 >> 6 & 63 | 128), o2[r2++] = 63 & n3 | 128);
        }
      }
      function hq(e2, t2) {
        let i2 = cq(e2, t2.limit), n2 = e2.bytes, r2 = t2.bytes;
        for (let e3 = 0, o2 = t2.limit; e3 < o2; e3++) n2[e3 + i2] = r2[e3];
      }
      function pq(e2) {
        return e2.bytes[dq(e2, 1)];
      }
      function _q(e2, t2) {
        let i2 = cq(e2, 1);
        e2.bytes[i2] = t2;
      }
      function Eq(e2) {
        let t2 = dq(e2, 8), i2 = e2.bytes;
        return tq[0] = i2[t2++], tq[1] = i2[t2++], tq[2] = i2[t2++], tq[3] = i2[t2++], tq[4] = i2[t2++], tq[5] = i2[t2++], tq[6] = i2[t2++], tq[7] = i2[t2++], eq[0];
      }
      function mq(e2, t2) {
        let i2 = cq(e2, 8), n2 = e2.bytes;
        eq[0] = t2, n2[i2++] = tq[0], n2[i2++] = tq[1], n2[i2++] = tq[2], n2[i2++] = tq[3], n2[i2++] = tq[4], n2[i2++] = tq[5], n2[i2++] = tq[6], n2[i2++] = tq[7];
      }
      function fq(e2) {
        let t2, i2 = 0, n2 = 0;
        do {
          t2 = pq(e2), i2 < 32 && (n2 |= (127 & t2) << i2), i2 += 7;
        } while (128 & t2);
        return n2;
      }
      function Tq(e2, t2) {
        for (t2 >>>= 0; t2 >= 128; ) _q(e2, 127 & t2 | 128), t2 >>>= 7;
        _q(e2, t2);
      }
      function Sq(e2, t2) {
        let i2 = t2.low >>> 0, n2 = (t2.low >>> 28 | t2.high << 4) >>> 0, r2 = t2.high >>> 24, o2 = 0 === r2 ? 0 === n2 ? i2 < 16384 ? i2 < 128 ? 1 : 2 : i2 < 1 << 21 ? 3 : 4 : n2 < 16384 ? n2 < 128 ? 5 : 6 : n2 < 1 << 21 ? 7 : 8 : r2 < 128 ? 9 : 10, s2 = cq(e2, o2), a2 = e2.bytes;
        switch (o2) {
          case 10:
            a2[s2 + 9] = r2 >>> 7 & 1;
          case 9:
            a2[s2 + 8] = 9 !== o2 ? 128 | r2 : 127 & r2;
          case 8:
            a2[s2 + 7] = 8 !== o2 ? n2 >>> 21 | 128 : n2 >>> 21 & 127;
          case 7:
            a2[s2 + 6] = 7 !== o2 ? n2 >>> 14 | 128 : n2 >>> 14 & 127;
          case 6:
            a2[s2 + 5] = 6 !== o2 ? n2 >>> 7 | 128 : n2 >>> 7 & 127;
          case 5:
            a2[s2 + 4] = 5 !== o2 ? 128 | n2 : 127 & n2;
          case 4:
            a2[s2 + 3] = 4 !== o2 ? i2 >>> 21 | 128 : i2 >>> 21 & 127;
          case 3:
            a2[s2 + 2] = 3 !== o2 ? i2 >>> 14 | 128 : i2 >>> 14 & 127;
          case 2:
            a2[s2 + 1] = 2 !== o2 ? i2 >>> 7 | 128 : i2 >>> 7 & 127;
          case 1:
            a2[s2] = 1 !== o2 ? 128 | i2 : 127 & i2;
        }
      }
      function gq(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      const Rq = /* @__PURE__ */ new Map([["moderation", 1], ["supervise", 2]]);
      class vq extends Zw {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          if (this._connectionState === e2) return;
          const t2 = this._connectionState;
          this._connectionState = e2, this.emit(mx.CONNECTION_STATE_CHANGE, t2, e2);
        }
        get inspectType() {
          return this._inspectType;
        }
        set inspectType(e2) {
          var t2;
          this._inspectMode = rr(t2 = e2.map((e3) => Rq.get(e3) || 0)).call(t2, (e3, t3) => e3 + t3), this._inspectType = e2;
        }
        get quality() {
          return this._quality;
        }
        set quality(e2) {
          this._quality = e2 > 1 ? 1 : e2 < 0.1 ? 0.1 : e2, this.qualityTimer && (window.clearTimeout(this.qualityTimer), this.qualityTimer = null), this._quality >= 1 || (this.qualityTimer = window.setTimeout(() => {
            this.quality = this._quality / this.qualityRatio;
          }, 6e4));
        }
        constructor(e2) {
          super(), vy(this, "name", "AgoraRTCVideoContentInspect"), vy(this, "_connectionState", _x.CONNECTING), vy(this, "_innerConnectionState", void 0), vy(this, "sequence", 0), vy(this, "inspectStartTime", void 0), vy(this, "workerManagerConnection", void 0), vy(this, "workerConnection", void 0), vy(this, "workerMessageLengthLimit", void 0), vy(this, "inspectIntervalMinimum", void 0), vy(this, "qualityRatio", void 0), vy(this, "_connectInfo", void 0), vy(this, "_cancelTokenSource", qb.CancelToken.source()), vy(this, "_retryConfig", void 0), vy(this, "wmSequence", 0), vy(this, "inspectInterval", void 0), vy(this, "inspectTimer", null), vy(this, "ossFilePrefix", void 0), vy(this, "extraInfo", void 0), vy(this, "_inspectType", void 0), vy(this, "_inspectMode", void 0), vy(this, "_quality", 1), vy(this, "qualityTimer", null), vy(this, "_inspectId", void 0), vy(this, "_needWorkUrlOnly", false), vy(this, "inspectImage", () => {
            if (this.connectionState !== _x.CONNECTED) throw new SD(Uw.OPERATION_ABORTED, "content inspect service connection status is ".concat(this.connectionState));
            this.inspectTimer && (window.clearInterval(this.inspectTimer), this.inspectTimer = null), this.inspectTimer = window.setInterval(() => {
              this.connectionState === _x.CONNECTED ? this.requestToInspectImage() : lD.debug("[".concat(this._inspectId, "] Inspect State is not connected , "), this.connectionState);
            }, this.inspectInterval < this.inspectIntervalMinimum ? this.inspectIntervalMinimum : this.inspectInterval), this.requestToInspectImage();
          }), this._inspectId = LO(5, "inspect-"), this.workerMessageLengthLimit = MN("VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT"), this.inspectIntervalMinimum = MN("VIDEO_INSPECT_INTERVAL_MINIMUM"), this.qualityRatio = MN("VIDEO_INSPECT_QUALITY_RATIO"), this.inspectInterval = e2.interval, this.ossFilePrefix = e2.ossFilePrefix, this.extraInfo = e2.extraInfo, this.inspectType = e2.inspectType, this.inspectStartTime = Number(Date.now()), this.workerManagerConnection = new Gx("worker-manager-" + this._inspectId, qO), this.on(mx.STATE_CHANGE, (e3, t2) => {
            this._innerConnectionState = e3, lD.debug("[".concat(this._inspectId, "] Inspect operation :").concat(Ex[e3], " ").concat(t2 || ""));
          }), this.handleWorkerManagerEvents(), this.workerConnection = new Gx("worker-" + this._inspectId, qO), this.handleWorkerEvents();
        }
        async init(e2, t2) {
          this.emit(mx.STATE_CHANGE, Ex.CONNECT_AP), this._connectInfo = e2;
          const i2 = this._cancelTokenSource.token;
          return this._retryConfig = t2, new np((n2, r2) => {
            this.on(mx.CONNECTION_STATE_CHANGE, (e3, t3) => {
              t3 === _x.CONNECTED && n2();
            }), this.requestAP(e2, i2, t2).then((e3) => {
              this.connectWorkerManager(e3);
            }).catch((e3) => {
              r2(e3);
            });
          });
        }
        async requestAP(e2, t2, i2) {
          const n2 = MN("WEBCS_DOMAIN").map((e3) => "https://".concat(e3, "/api/v1")), r2 = await function(e3, t3, i3, n3) {
            let { appId: r3, areaCode: o3, cname: s2, sid: a2, token: c2, uid: d2 } = t3;
            EF++;
            const l2 = "image_moderation_api", u2 = { service_name: l2, json_body: JSON.stringify({ appId: r3, areaCode: o3, cname: s2, command: "allocateEdge", requestId: EF, seq: EF, sid: a2, token: c2, ts: Date.now(), uid: d2 + "" }) };
            let h2, p2, _2 = e3[0];
            return JO(async () => {
              h2 = Date.now();
              const e4 = await zV(_2, { data: u2, cancelToken: i3, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" }, params: { action: "wrtc_gateway" } });
              if (p2 = Date.now() - h2, 0 !== e4.code) {
                const t5 = new SD(Uw.UNEXPECTED_RESPONSE, "image inspect ap error, code" + e4.code, { retry: true, responseTime: p2 });
                throw lD.error(t5.toString()), t5;
              }
              const t4 = JSON.parse(e4.json_body);
              if (200 !== t4.code) {
                const e5 = new SD(Uw.UNEXPECTED_RESPONSE, "image inspect ap error, code: ".concat(t4.code, ", reason: ").concat(t4.reason), { code: t4.code, responseTime: p2 });
                throw lD.error(e5.toString()), e5;
              }
              if (!t4.servers || !Array.isArray(t4.servers) || 0 === t4.servers.length) {
                const e5 = new SD(Uw.UNEXPECTED_RESPONSE, "image inspect ap empty server", { code: t4.code, responseTime: p2 });
                throw lD.error(e5.toString()), e5;
              }
              const n4 = MN("VIDEO_INSPECT_WORKER_MANAGER_HOST"), r4 = MN("VIDEO_INSPECT_WORKER_MANAGER_PORT");
              return { addressList: t4.servers.map((e5) => {
                let { address: t5, wss: i4 } = e5;
                if (t5 && i4) return "wss://".concat(t5.replace(/\./g, "-"), ".").concat(n4, ":").concat(r4 || i4);
              }).filter((e5) => !!e5), workerToken: t4.workerToken, vid: t4.vid, responseTime: p2 };
            }, (t4, i4) => (TD.apworkerEvent(a2, { success: true, sc: 200, serviceName: l2, responseDetail: JSON.stringify(t4.addressList), firstSuccess: 0 === i4, responseTime: p2, serverIp: e3[i4 % e3.length] }), false), (t4, i4) => (TD.apworkerEvent(a2, { success: false, sc: t4.data && t4.data.code || 200, serviceName: l2, responseTime: p2, serverIp: e3[i4 % e3.length] }), !!(t4.code !== Uw.OPERATION_ABORTED && t4.code !== Uw.UNEXPECTED_RESPONSE || t4.data && t4.data.retry) && (_2 = e3[(i4 + 1) % e3.length], true)), n3);
          }(n2, e2, t2, i2);
          this.emit(mx.STATE_CHANGE, Ex.AP_CONNECTED);
          const { addressList: o2 } = r2;
          return this.wmSequence++, o2;
        }
        async connectWorkerManager(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this._needWorkUrlOnly = t2, this.emit(mx.STATE_CHANGE, Ex.CONNECT_WORKER_MANAGER), await this.workerManagerConnection.init(e2, 1e4);
        }
        async connectWorker(e2) {
          await this.workerConnection.init([e2]);
        }
        handleWorkerManagerEvents() {
          this.workerManagerConnection.on(LU.CONNECTED, async () => {
            this.emit(mx.STATE_CHANGE, Ex.WORKER_MANAGER_CONNECTED, this.workerManagerConnection.url), this.workerManagerConnection.sendMessage({ appId: this._connectInfo.appId, cname: this._connectInfo.cname, uid: this._connectInfo.uid + "", sdkVersion: "4.23.1", sid: this._connectInfo.sid, seq: this.wmSequence, ts: Number(Date.now()), requestId: Math.floor(1e12 * Math.random()), allocate: true, clientRequest: { command: "join" } }, true);
          }), this.workerManagerConnection.on(LU.CLOSED, () => {
            this._innerConnectionState < Ex.GET_WORKER_MANAGER_RESPONSE && lD.debug("[".concat(this._inspectId, "] Inspect worker manager is closed before connecting worker"));
          }), this.workerManagerConnection.on(LU.FAILED, () => {
            this._innerConnectionState < Ex.GET_WORKER_MANAGER_RESPONSE && lD.debug("[".concat(this._inspectId, "] Connecting inspect worker manager is failed before connecting worker"));
          }), this.workerManagerConnection.on(LU.RECONNECTING, () => {
            this._innerConnectionState < Ex.GET_WORKER_MANAGER_RESPONSE && lD.debug("[".concat(this._inspectId, "] Inspect worker manager is reconnecting before connecting worker"));
          }), this.workerManagerConnection.on(LU.ON_MESSAGE, async (e2) => {
            this.emit(mx.STATE_CHANGE, Ex.GET_WORKER_MANAGER_RESPONSE);
            const t2 = this.workerManagerConnection.url;
            this.workerManagerConnection.close();
            const i2 = JSON.parse(e2.data);
            if (200 !== i2.code) throw lD.error("[".concat(this._inspectId, "] Unexpected code ").concat(i2.code, " from worker manager")), new SD(Uw.UNEXPECTED_RESPONSE, "response code of worker is unexpected", i2);
            if (!(i2.serverResponse && i2.serverResponse.portWss && t2)) throw lD.error("[".concat(this._inspectId, "] Unexpected content from worker manager : ").concat(JSON.stringify(i2))), new SD(Uw.UNEXPECTED_RESPONSE, "response content of worker is unexpected", i2);
            {
              const e3 = MN("VIDEO_INSPECT_WORKER_PORT") || i2.serverResponse.portWss, n2 = t2.replace(/:\d+\/?$/, ":".concat(e3));
              this.emit(mx.STATE_CHANGE, Ex.CONNECT_WORKER, n2), this._needWorkUrlOnly ? this.emit(mx.REQUEST_NEW_WORKER_URL, n2) : await this.connectWorker(n2);
            }
          }), this.workerManagerConnection.on(LU.WILL_RECONNECT, (e2, t2, i2) => {
            i2(e2);
          }), this.workerManagerConnection.on(LU.REQUEST_NEW_URLS, (e2, t2) => {
            this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then(e2).catch(t2);
          });
        }
        handleWorkerEvents() {
          this.workerConnection.on(LU.CONNECTED, async () => {
            this.emit(mx.STATE_CHANGE, Ex.WORKER_CONNECTED, this.workerConnection.url), this.connectionState = _x.CONNECTED;
          }), this.workerConnection.on(LU.ON_MESSAGE, async (e2) => {
            if (e2.data instanceof ArrayBuffer) {
              const i2 = zY(new Uint8Array(e2.data));
              if (MN("SHOW_VIDEO_INSPECT_WORKER_MESSAGE") && lD.debug("[".concat(this._inspectId, "] Response message for worker of inspect content "), JSON.stringify(i2)), 200 === i2.code) {
                if (Array.isArray(this.inspectType) && 1 === this.inspectType.length && "supervise" === this.inspectType[0]) return void this.emit(mx.INSPECT_RESULT, void 0, void 0);
                if (i2.data && i2.data.scorePorn && i2.data.scoreSexy && i2.data.scoreNeutral) {
                  var t2;
                  const e3 = { porn: i2.data.scorePorn, sexy: i2.data.scoreSexy, neutral: i2.data.scoreNeutral }, n2 = rr(t2 = Object.keys(e3)).call(t2, (t3, i3) => e3[t3] > e3[i3] ? t3 : i3, "porn"), r2 = Object.keys(e3).find((e4) => e4 === n2);
                  this.emit(mx.INSPECT_RESULT, r2);
                } else this.emit(mx.INSPECT_RESULT, void 0, new SD(Uw.UNEXPECTED_RESPONSE, i2.code + "", "There is an unexpected data on message"));
              } else this.emit(mx.INSPECT_RESULT, void 0, new SD(Uw.UNEXPECTED_RESPONSE, i2.code + "", i2.msg));
            } else lD.error("[".concat(this._inspectId, "] Unexpected message type from worker")), this.emit(mx.INSPECT_RESULT, void 0, new SD(Uw.UNEXPECTED_RESPONSE, "invalid worker message type"));
          }), this.workerConnection.on(LU.CLOSED, () => {
            this.connectionState = _x.CLOSED;
          }), this.workerConnection.on(LU.FAILED, () => {
            this.connectionState = _x.CLOSED;
          }), this.workerConnection.on(LU.RECONNECTING, () => {
            this.connectionState = this.connectionState === _x.CONNECTED ? _x.RECONNECTING : _x.CONNECTING;
          }), this.workerConnection.on(LU.WILL_RECONNECT, (e2, t2, i2) => {
            "recover" === e2 && i2(e2), i2("tryNext");
          }), this.workerConnection.on(LU.REQUEST_NEW_URLS, (e2, t2) => {
            this.workerManagerConnection.close(), this.once(mx.REQUEST_NEW_WORKER_URL, (t3) => {
              e2([t3]);
            }), this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then((e3) => {
              this.connectWorkerManager(e3, true);
            }).catch((e3) => {
              t2(e3);
            });
          });
        }
        async requestToInspectImage() {
          this.sequence++;
          const e2 = EO(this, mx.CLIENT_LOCAL_VIDEO_TRACK), t2 = { appId: this._connectInfo.appId, cname: this._connectInfo.cname, cid: this._connectInfo.cid, sid: this._connectInfo.sid, uid: this._connectInfo.uid, vid: this._connectInfo.vid };
          if (e2) {
            if (!e2.isPlaying) return void this.emit(mx.INSPECT_RESULT, void 0, new SD(Uw.INVALID_OPERATION, "Only the track being played can be inspected"));
            const i2 = await this.generateRequestData(e2, t2);
            this.workerConnection.sendMessage(i2, true, true);
          } else this.emit(mx.INSPECT_RESULT, void 0, new SD(Uw.INVALID_OPERATION, "Only the track being published can be inspected"));
        }
        async generateRequestData(e2, t2) {
          let { appId: i2, cname: n2, cid: r2, vid: o2, sid: s2, uid: a2 } = t2;
          const c2 = Date.now(), d2 = await e2.getCurrentFrameImage("image/jpeg", this.quality), l2 = await $P(d2, i2, n2), u2 = this.sequence + "-" + r2 + "-" + a2 + "-" + c2 + "-" + LO(12, ""), h2 = { appId: i2, cid: r2, cname: n2, deviceId: "", elapse: (p2 = Number(c2 - this.inspectStartTime), { low: p2 |= 0, high: p2 >> 31, unsigned: p2 >= 0 }), fileSize: l2.byteLength, jpgEncryption: 2, height: d2.height, width: d2.width, jpg: l2, networkType: 6, osType: 7, requestId: u2, sdkVersion: "4.23.1", sequence: this.sequence, sid: s2, timestamp: eG(c2), uid: a2, vid: o2, service: this._inspectMode, callbackData: this.extraInfo, ossFilePrefix: this.ossFilePrefix };
          var p2;
          void 0 === this.extraInfo && delete h2.callbackData, void 0 === this.ossFilePrefix && delete h2.ossFilePrefix;
          const _2 = qY(h2);
          if (_2.byteLength < this.workerMessageLengthLimit) {
            if (MN("SHOW_VIDEO_INSPECT_WORKER_MESSAGE")) {
              const e3 = function(e4) {
                for (var t3 = 1; t3 < arguments.length; t3++) {
                  var i3 = null != arguments[t3] ? arguments[t3] : {};
                  t3 % 2 ? gq(Object(i3), true).forEach(function(t4) {
                    vy(e4, t4, i3[t4]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i3)) : gq(Object(i3)).forEach(function(t4) {
                    Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(i3, t4));
                  });
                }
                return e4;
              }({}, h2);
              delete e3.jpg, lD.debug("[".concat(this._inspectId, "] Request message for worker of inspect content "), JSON.stringify(e3));
            }
            return _2;
          }
          {
            const t3 = this.quality * this.qualityRatio;
            return this.quality = t3, await this.generateRequestData(e2, { appId: i2, cname: n2, cid: r2, vid: o2, sid: s2, uid: a2 });
          }
        }
        close() {
          this._cancelTokenSource.cancel(), this._cancelTokenSource = qb.CancelToken.source(), this.workerManagerConnection && this.workerManagerConnection.close(), this.workerConnection && this.workerConnection.close(), this.inspectTimer && window.clearInterval(this.inspectTimer), this.inspectTimer = null, this.connectionState = _x.CLOSED, this.emit(mx.STATE_CHANGE, Ex.CLOSED);
        }
      }
      const Cq = { name: "ContentInspect", create: function(e2) {
        let { config: t2 } = e2;
        return function(e3) {
          if (!e3) throw new SD(Uw.INVALID_PARAMS, "inspectConfig is necessary.");
          if (!e3.inspectType || !Array.isArray(e3.inspectType)) throw new SD(Uw.INVALID_PARAMS, "inspectConfig.inspectType is necessary and is an instance of Array.");
          {
            const t3 = [...new Set(e3.inspectType)];
            t3.forEach((e4) => {
              var t4;
              if (!kn(t4 = ["supervise", "moderation"]).call(t4, e4)) throw new SD(Uw.INVALID_PARAMS, "".concat(e4, " is not a valid inspect type."));
            }), e3.inspectType = t3;
          }
          if (e3 && e3.extraInfo && e3.extraInfo.length > 1024) throw new SD(Uw.INVALID_PARAMS, "inspectConfig.extraInfo length cannot exceed 1024 bytes");
        }(t2), new vq(t2);
      } };
      var Iq = i($.Object.getOwnPropertySymbols), yq = Ni, Aq = Ji.indexOf, bq = Hn, wq = I([].indexOf), Oq = !!wq && 1 / wq([1], 1, -0) < 0;
      yq({ target: "Array", proto: true, forced: Oq || !bq("indexOf") }, { indexOf: function(e2) {
        var t2 = arguments.length > 1 ? arguments[1] : void 0;
        return Oq ? wq(this, e2, t2) || 0 : Aq(this, e2, t2);
      } });
      var Nq = $i("Array", "indexOf"), Dq = l, Pq = Nq, Lq = Array.prototype, kq = function(e2) {
        var t2 = e2.indexOf;
        return e2 === Lq || Dq(Lq, e2) && t2 === Lq.indexOf ? Pq : t2;
      }, Mq = i(kq);
      function Uq(e2, t2) {
        if (null == e2) return {};
        var i2, n2, r2 = function(e3, t3) {
          if (null == e3) return {};
          var i3, n3, r3 = {}, o3 = ZM(e3);
          for (n3 = 0; n3 < o3.length; n3++) i3 = o3[n3], Mq(t3).call(t3, i3) >= 0 || (r3[i3] = e3[i3]);
          return r3;
        }(e2, t2);
        if (Iq) {
          var o2 = Iq(e2);
          for (n2 = 0; n2 < o2.length; n2++) i2 = o2[n2], Mq(t2).call(t2, i2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, i2) && (r2[i2] = e2[i2]);
        }
        return r2;
      }
      let xq = class {
        get localCapabilities() {
          return RO(this._localCapabilities);
        }
        get rtpCapabilities() {
          return RO(this._rtpCapabilities);
        }
        get candidates() {
          return RO(this._candidates);
        }
        get iceParameters() {
          return RO(this._iceParameters);
        }
        get dtlsParameters() {
          return RO(this._dtlsParameters);
        }
        constructor(e2) {
          vy(this, "sessionDesc", void 0), vy(this, "_localCapabilities", void 0), vy(this, "_rtpCapabilities", void 0), vy(this, "_candidates", void 0), vy(this, "_iceParameters", void 0), vy(this, "_dtlsParameters", void 0), vy(this, "setup", void 0), vy(this, "currentMidIndex", void 0), vy(this, "cname", "o/i14u9pJrxRKAsu"), vy(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e2 = RO(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: n2, remoteRTPCapabilities: r2, localCapabilities: o2, direction: s2, setup: a2, videoCodec: c2, audioCodec: d2 } = e2;
          let l2;
          this.setup = a2, l2 = s2 === PU.RECEIVE_ONLY ? WN("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=extmap-allow-mixed\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n") : WN("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=extmap-allow-mixed\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=recvonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=recvonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n"), this._rtpCapabilities = r2, this._candidates = n2, this._iceParameters = t2, this._dtlsParameters = i2, this._localCapabilities = o2;
          const u2 = s2 === PU.RECEIVE_ONLY ? this.rtpCapabilities.send : this.rtpCapabilities.recv, h2 = s2 === PU.RECEIVE_ONLY ? this._localCapabilities.recv : this._localCapabilities.send, p2 = s2 === PU.RECEIVE_ONLY ? r2.send.videoCodecs : wV(ax.VIDEO, u2, h2, c2), _2 = s2 === PU.RECEIVE_ONLY ? r2.send.audioCodecs : wV(ax.AUDIO, u2, h2, d2);
          for (const e3 of l2.mediaDescriptions) e3.attributes.iceUfrag = t2.iceUfrag, e3.attributes.icePwd = t2.icePwd, e3.attributes.fingerprints = i2.fingerprints, e3.attributes.candidates = n2, e3.attributes.setup = this.setup, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = p2.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = p2, e3.attributes.extmaps = u2.videoExtensions), "audio" === e3.media.mediaType && (e3.media.fmts = _2.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = _2, e3.attributes.extmaps = u2.audioExtensions, bV(e3));
          this.sessionDesc = l2, this.currentMidIndex = l2.mediaDescriptions.length - 1;
        }
        toString() {
          return HN(this.sessionDesc);
        }
        hasMid(e2) {
          return Array.isArray(e2) ? e2.every((e3) => this.hasMid(e3)) : this.sessionDesc.mediaDescriptions.some((t2) => t2.attributes.mid === e2);
        }
        send(e2, t2, i2, n2, r2) {
          i2 = i2.replace(/ /g, "-");
          const { ssrcs: o2, ssrcGroups: s2 } = mV(t2, this.cname, MN("SYNC_GROUP") ? i2 : void 0), a2 = this.findPreloadMediaDesc(o2);
          if (a2) {
            if (hw() && this.firefoxSsrcMidMap.set(o2[0].ssrcId, a2.attributes.mid), r2 && (r2.twcc || r2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(a2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(a2, r2), { mid: a2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: a2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, o2, n2);
            let i3;
            return -1 === t3 ? (i3 = this.createOrRecycleSendMedia(e2, o2, s2, "sendonly", n2, r2), this.updateBundleMids()) : (i3 = RO(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = o2, i3.attributes.ssrcGroups = s2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, r2)), hw() && this.firefoxSsrcMidMap.set(o2[0].ssrcId, i3.attributes.mid), { needExchangeSDP: true, mid: i3.attributes.mid };
          }
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            e3.attributes.ssrcs = [];
          }), this.updateBundleMids();
        }
        receive(e2, t2, i2) {
          const n2 = [];
          return e2.forEach((e3) => {
            const r2 = e3._mediaStreamTrack.kind, o2 = this.findAvailableRecvMediaIndex(r2);
            let s2, a2 = false;
            -1 === o2 ? (a2 = true, s2 = this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2), this.updateBundleMids()) : (s2 = RO(this.sessionDesc.mediaDescriptions[o2]), s2.attributes.direction = "recvonly"), n2.push({ mid: s2.attributes.mid, needCreateTransceiver: a2 });
          }), n2;
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length) throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        addRemoteCandidate(e2) {
          const { foundation: t2, protocol: i2, address: n2, port: r2, type: o2, relatedAddress: s2, relatedPort: a2, priority: c2 } = new RTCIceCandidate(e2), d2 = { foundation: null != t2 ? t2 : "", componentId: "1", transport: null != i2 ? i2 : "", priority: c2 ? c2 + "" : "", connectionAddress: null != n2 ? n2 : "", port: r2 ? r2 + "" : "", type: o2 ? o2 + "" : "", relAddr: null != s2 ? s2 : "", relPort: a2 ? a2 + "" : "", extension: {} };
          this.candidates.some((e3) => e3.priority === d2.priority && e3.connectionAddress === d2.connectionAddress && e3.port === d2.port) || (this._candidates.push(d2), this.sessionDesc.mediaDescriptions.forEach((e3) => {
            e3.attributes.candidates = this.candidates;
          }));
        }
        clearRemoteCandidate() {
          this._candidates = [], this.sessionDesc.mediaDescriptions[0].attributes.candidates = this._candidates;
        }
        createOrRecycleRecvMedia(e2, t2, i2, n2, r2) {
          const o2 = e2._mediaStreamTrack.kind, s2 = this.rtpCapabilities.recv, a2 = wV(o2, s2, this.localCapabilities.send, o2 === ax.AUDIO ? r2 : n2), c2 = o2 === ax.VIDEO ? s2.videoExtensions : s2.audioExtensions, d2 = "".concat(++this.currentMidIndex);
          let l2 = { media: { mediaType: o2, port: "9", protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: a2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: [], extmaps: c2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: a2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(d2) } };
          l2 = this.mungRecvMediaDsec(l2, e2);
          const u2 = this.findFirstClosedMedia(o2);
          if (u2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(u2);
            this.sessionDesc.mediaDescriptions[e3] = l2;
          } else this.sessionDesc.mediaDescriptions.push(l2);
          return l2;
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => kn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => kn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length) throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        findAvailableMediaIndex(e2, t2, i2) {
          return this.sessionDesc.mediaDescriptions.findIndex((n2) => {
            const r2 = n2.media.mediaType === e2 && "0" !== n2.media.port && ("sendonly" === n2.attributes.direction || "sendrecv" === n2.attributes.direction) && 0 === n2.attributes.ssrcs.length;
            if (hw()) {
              if (r2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== n2.attributes.mid && "1" !== n2.attributes.mid) || !(!e3 || e3 !== n2.attributes.mid);
              }
              return false;
            }
            return r2 && n2.attributes.mid === i2;
          });
        }
        findAvailableRecvMediaIndex(e2) {
          return this.sessionDesc.mediaDescriptions.findIndex((t2) => {
            const i2 = t2.media.mediaType === e2 && "0" !== t2.media.port && ("recvonly" === t2.attributes.direction || "sendrecv" === t2.attributes.direction);
            return "0" !== t2.attributes.mid && "1" !== t2.attributes.mid && i2;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++) t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        restartICE(e2) {
          e2 = RO(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        createOrRecycleSendMedia(e2, t2, i2, n2, r2, o2) {
          const s2 = this.rtpCapabilities.send, a2 = e2 === ax.VIDEO ? s2.videoCodecs : s2.audioCodecs, c2 = e2 === ax.VIDEO ? s2.videoExtensions : s2.audioExtensions;
          hw() && (r2 = "".concat(++this.currentMidIndex));
          let d2 = { media: { mediaType: e2, port: "9", protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: a2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: [], extmaps: c2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: a2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: n2, rtcpMux: true, rtcpRsize: true, mid: r2 } };
          d2 = this.mungSendMediaDesc(d2, o2);
          const l2 = this.findFirstClosedMedia(e2);
          if (l2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(l2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const n2 = RO(e2);
          return TV(n2), fV(n2, t2), SV(n2, t2), gV(n2), RV(n2, i2, this.localCapabilities.send), n2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = RO(e2);
          return RV(i2, t2, this.localCapabilities.recv), bV(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId) === e2[0].ssrcId;
          });
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => hw() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
      };
      const Vq = ["sdp"];
      var Fq;
      function Bq(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function jq(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Bq(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Bq(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let Gq = (Fq = class e2 extends ox {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get dtlsTransportState() {
          var e3, t2;
          return null !== (e3 = null === (t2 = this.peerConnection.getReceivers()[0]) || void 0 === t2 || null === (t2 = t2.transport) || void 0 === t2 ? void 0 : t2.state) && void 0 !== e3 ? e3 : null;
        }
        get localCodecs() {
          return [];
        }
        set isInRestartIce(e3) {
          this._isInRestartIce = e3;
        }
        get isInRestartIce() {
          return this._isInRestartIce;
        }
        constructor(t2, i2, n2) {
          super(t2, i2), vy(this, "direction", void 0), vy(this, "name", void 0), vy(this, "store", void 0), vy(this, "spec", void 0), vy(this, "peerConnection", void 0), vy(this, "initialOffer", void 0), vy(this, "transport", void 0), vy(this, "statsFilter", void 0), vy(this, "localCandidateCount", 0), vy(this, "_isInRestartIce", false), vy(this, "mutex", void 0), vy(this, "onLocalCandidate", void 0), vy(this, "remoteSDP", void 0), vy(this, "pendingCandidates", []), vy(this, "localCapabilities", void 0), vy(this, "isReady", false), vy(this, "restartCnt", 0), vy(this, "curTurnServerIndex", 0), this.store = i2, this.spec = t2, this.mutex = new KO("P2PConnection-mutex", i2.clientId), this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2, i2.p2pTransport), { optional: [{ googDscp: true }] }), this.direction = null != n2 ? n2 : PU.SEND_ONLY, this.name = this.direction === PU.SEND_ONLY ? "sendP2PConnection" : "recvP2PConnection", this.statsFilter = vN(this.peerConnection, MN("STATS_UPDATE_INTERVAL"), void 0, hw() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1;
        }
        async establish(e3) {
          try {
            const t2 = await CV();
            if (this.localCapabilities = AV(t2), e3) {
              const { sdp: t3 } = e3, i2 = Uq(e3, Vq), n2 = function() {
                const e4 = { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, t4 = uV(arguments.length > 2 ? arguments[2] : void 0, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, "sendonly"), i3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, n3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, r3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
                if (yV(t4, e4, "videoExtensions", i3, n3, r3), yV(t4, e4, "videoCodecs", i3, n3, r3), yV(t4, e4, "audioExtensions", i3, n3, r3), yV(t4, e4, "audioCodecs", i3, n3, r3), MN("RAISE_H264_BASELINE_PRIORITY")) {
                  const e5 = r3.videoCodecs.findIndex((e6) => e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase() && e6.fmtp && "42001f" === e6.fmtp.parameters["profile-level-id"]);
                  if (-1 !== e5) {
                    const t5 = r3.videoCodecs.findIndex((e6) => e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase());
                    if (t5 < e5) {
                      lD.debug("raising H264 baseline profile priority");
                      const i4 = r3.videoCodecs[e5];
                      r3.videoCodecs.splice(e5, 1), r3.videoCodecs.splice(t5, 0, i4);
                    }
                    -1 !== t5 && MN("FILTER_SEND_H264_BASELINE") && (i3.videoCodecs = i3.videoCodecs.filter((e6) => !(e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase() && e6.fmtp && "42001f" !== e6.fmtp.parameters["profile-level-id"])));
                  }
                }
                return { send: i3, recv: n3, sendrecv: r3 };
              }({}, {}, t3);
              this.remoteSDP = new xq({ remoteIceParameters: i2.iceParameters, remoteDtlsParameters: i2.dtlsParameters, candidates: [], remoteRTPCapabilities: n2, localCapabilities: this.localCapabilities, direction: this.direction, setup: "actpass", videoCodec: this.store.codec, audioCodec: this.store.audioCodec }), await this.setRemoteDescription({ type: "offer", sdp: this.remoteSDP.toString() }), this.isReady = true;
              const r2 = await this.peerConnection.createAnswer();
              if (!r2.sdp) throw new Error("Cannot get answer sdp when trying to establish PeerConnection.");
              const o2 = hV(r2.sdp);
              await this.peerConnection.setLocalDescription(r2);
              const s2 = await IV({}, {}, r2.sdp);
              this.localCapabilities = AV(s2);
              const a2 = this.peerConnection.getTransceivers()[0];
              return null != a2 && a2.receiver && a2.receiver.transport && this.tryBindTransportEvents(a2.receiver.transport), jq(jq({}, o2), {}, { sdp: r2.sdp });
            }
            {
              this.peerConnection.addTransceiver("video", { direction: "sendonly" }), this.peerConnection.addTransceiver("audio", { direction: "sendonly" });
              const e4 = await this.peerConnection.createOffer();
              if (!e4.sdp) throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
              const t3 = hV(e4.sdp);
              return this.initialOffer = e4, jq(jq({}, t3), {}, { sdp: e4.sdp });
            }
          } catch (e4) {
            throw new xw(Uw.GET_LOCAL_CONNECTION_PARAMS_FAILED, e4.toString());
          }
        }
        async connect(e3) {
          try {
            if (!this.initialOffer) throw new Error("Cannot establish P2PConnection without initial offer.");
            await this.peerConnection.setLocalDescription(this.initialOffer);
            const { sdp: t2, iceParameters: i2, dtlsParameters: n2 } = e3, r2 = await IV({}, {}, t2);
            this.remoteSDP = new xq({ remoteIceParameters: i2, remoteDtlsParameters: n2, candidates: [], remoteRTPCapabilities: r2, localCapabilities: this.localCapabilities, direction: this.direction, setup: "active", videoCodec: this.store.codec, audioCodec: this.store.audioCodec }), await this.setRemoteDescription({ type: "answer", sdp: this.remoteSDP.toString() });
            const o2 = this.peerConnection.getTransceivers()[0];
            null != o2 && o2.sender && o2.sender.transport && this.tryBindTransportEvents(o2.sender.transport);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
        }
        async addRemoteCandidate(e3) {
          try {
            e3 && this.pendingCandidates.push(e3), this.peerConnection.remoteDescription && this.isReady && (this.pendingCandidates.forEach((e4) => {
              this.peerConnection.addIceCandidate(e4);
            }), this.pendingCandidates = []);
          } catch (e4) {
            throw new xw(Uw.ADD_CANDIDATE_FAILED, "P2PConnection.addRemoteCandidate failed; ".concat(e4.toString()));
          }
        }
        send(e3, t2, i2) {
          var n2 = this;
          return sb(function* () {
            const r2 = yield ab(n2.mutex.lock("From P2PConnection.send"));
            try {
              if (!n2.remoteSDP) throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const r3 = [], o2 = n2.remoteSDP.receive(e3, t2, i2);
              e3.forEach((e4, t3) => {
                if (o2[t3].needCreateTransceiver) {
                  const t4 = n2.peerConnection.addTransceiver(e4._mediaStreamTrack, { direction: "sendonly" });
                  r3.push(t4), e4._updateRtpTransceiver(t4);
                } else {
                  const i3 = n2.peerConnection.getTransceivers().find((e5) => e5.mid === o2[t3].mid);
                  if (!i3) throw new Error("cannot find transceiver when sendPeerconnection send, mid is ".concat(o2[t3].mid));
                  r3.push(i3), e4._updateRtpTransceiver(i3);
                }
              }), hw() && true === MN("SIMULCAST") && (yield ab(n2.applySimulcastForFirefox(r3, e3)));
              const s2 = o2.map((e4) => e4.mid), a2 = yield ab(n2.peerConnection.createOffer()), c2 = n2.mungSendOfferSDP(a2.sdp, e3, s2), d2 = WN(c2), l2 = s2.map((e4) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e4);
                if (!t3) throw new Error("Cannot extract ssrc from mediaDescription.");
                return pV(t3, MN("USE_PUB_RTX"));
              }), u2 = r3.map((e4, t3) => {
                const i3 = s2[t3];
                return { localSSRC: l2[t3], id: i3 };
              });
              yield ab(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 }));
              try {
                yield u2;
              } catch (e4) {
                const t3 = n2.remoteSDP.toString();
                throw yield ab(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield ab(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: t3 })), yield ab(n2.stopSending(s2, true)), e4;
              }
              yield ab(n2.applySimulcastEncodings(r3, e3)), yield ab(n2.applySendEncodings(r3, e3));
              const h2 = n2.remoteSDP.toString(), p2 = n2.logSDPExchange(c2, "offer", "local", "send");
              return null == p2 || p2(h2), yield ab(n2.setRemoteDescription({ type: "answer", sdp: h2 })), r3.map((e4, t3) => {
                const i3 = s2[t3];
                return { localSSRC: l2[t3], id: i3 };
              });
            } catch (e4) {
              throw e4 instanceof xw ? e4 : new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              r2();
            }
          })();
        }
        async stopSending(e3, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From P2PConnection.stopSending");
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e3.indexOf(t4.mid));
            if (t3.length !== e3.length) throw new Error("Transceivers' length (".concat(t3.length, ") doesn't match mids' length (").concat(e3.length, ") when trying to call P2PConnection.stopSending."));
            t3.map((e4) => {
              var t4;
              e4.direction = "inactive", null === (t4 = e4.stop) || void 0 === t4 || t4.call(e4);
            });
            const i3 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i3.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(i3), this.remoteSDP.stopReceiving(e3);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: r2, needExchangeSDP: o2 } = this.remoteSDP.send(e3, t2, i2, n2);
            if (o2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), o3 = this.mungReceiveAnswerSDP(n3.sdp, r2, e3);
              null == i3 || i3(o3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: o3 }), lD.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " by exchanging SDP."));
            } else lD.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " no need to exchange SDP."));
            const s2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === r2);
            if (!s2 || null === s2.mid) throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: s2.receiver.track, mid: s2.mid, transceiver: s2 };
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async mockReceive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: r2, needExchangeSDP: o2 } = this.remoteSDP.send(e3, t2, i2, n2);
            if (o2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), o3 = this.mungReceiveAnswerSDP(n3.sdp, r2, e3);
              null == i3 || i3(o3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: o3 }), lD.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " by exchanging SDP."));
            } else lD.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " no need to exchange SDP."));
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async restartICE(t2) {
          try {
            if (this.store.p2pTransport === bN.Auto && (this.store.p2pTransport = bN.SdRtn, RD().supportPCSetConfiguration && this.peerConnection.setConfiguration(e2.resolvePCConfiguration(this.spec, this.store.p2pTransport))), this.restartCnt > 3 && (this.restartCnt = 0, RD().supportPCSetConfiguration && this.peerConnection.setConfiguration(e2.resolvePCConfiguration(this.spec, this.store.p2pTransport, ++this.curTurnServerIndex))), !t2) {
              this.restartCnt++, this.isReady = false;
              const e3 = await this.peerConnection.createOffer({ iceRestart: true });
              if (!e3.sdp) throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const { iceParameters: t3 } = hV(e3.sdp);
              return this.store.descriptionStart(), this.direction === PU.SEND_ONLY && await this.peerConnection.setLocalDescription(e3), t3;
            }
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            if (this.remoteSDP.restartICE(t2), this.store.descriptionStart(), this.direction === PU.RECEIVE_ONLY) {
              this.restartCnt++, await this.setRemoteDescription({ type: "offer", sdp: this.remoteSDP.toString() });
              const e3 = await this.peerConnection.createAnswer();
              if (!e3.sdp) throw new Error("Cannot get answer sdp when trying to iceRestart.");
              const { iceParameters: t3 } = hV(e3.sdp);
              return await this.peerConnection.setLocalDescription(e3), t3;
            }
            await this.setRemoteDescription({ type: "answer", sdp: this.remoteSDP.toString() }), this.isReady = true;
          } catch (e3) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e3.toString()));
          }
        }
        close() {
          var e3;
          this.peerConnection.close(), this.peerConnection.onicecandidate = null, null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.tryUnbindTransportEvents(), this.unbindPCEvents(), this.unbindStatsEvents(), this.transport = void 0, this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), n2 = this.mungSendOfferSDP(i2.sdp, [t2], [e3]);
            this.remoteSDP.updateRecvMedia(e3, t2);
            const r2 = this.remoteSDP.toString(), o2 = this.logSDPExchange(n2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: n2 }), null == o2 || o2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e3);
          1 === i2.length && (this.isVP8Simulcast(t2) ? hw() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === t2);
          i2 && await i2.sender.replaceTrack(e3._mediaStreamTrack);
        }
        async getSelectedCandidatePair() {
          const e3 = this.peerConnection.getReceivers();
          if (e3.length > 0 && e3[0].transport && e3[0].transport.iceTransport && e3[0].transport.iceTransport.getSelectedCandidatePair && e3[0].transport.iceTransport.getSelectedCandidatePair()) {
            const t2 = e3[0].transport.iceTransport, { local: i2, remote: n2 } = t2.getSelectedCandidatePair();
            return { local: jq(jq({}, sN), {}, { candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), remote: jq(jq({}, sN), {}, { candidateType: n2.type, protocol: n2.protocol, address: n2.address, port: n2.port }) };
          }
          return this.statsFilter.getSelectedCandidatePair();
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3, t2;
            kn(e3 = ["connected", "completed"]).call(e3, this.peerConnection.iceConnectionState) && (this.isReady = false), null === (t2 = this.onICEConnectionStateChange) || void 0 === t2 || t2.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            "connected" === this.peerConnection.connectionState && (this.restartCnt = 0), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.startICECandidate();
        }
        startICECandidate() {
          this.peerConnection.onicecandidate || (this.localCandidateCount = 0, this.peerConnection.onicecandidate = (e3) => {
            if (e3.candidate) {
              var t2;
              if (e3.candidate.candidate) null === (t2 = this.onLocalCandidate) || void 0 === t2 || t2.call(this, e3.candidate.toJSON());
              this.localCandidateCount += 1;
            } else lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount);
          });
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2, i2) {
          let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          const r2 = { iceServers: [] };
          var o2;
          t2.iceServers ? r2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (sO(t2.turnServer.servers) ? r2.iceServers = t2.turnServer.servers : (r2.iceServers && r2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers, i2, n2)), MN("USE_TURN_SERVER_OF_GATEWAY") && r2.iceServers && t2.turnServer.serversFromGateway && r2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway, i2, n2)), kn(o2 = [bN.Relay, bN.SdRtn]).call(o2, i2) && (r2.iceTransportPolicy = "relay"), MN("FORCE_TURN_TCP") ? r2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (r2.iceTransportPolicy = "relay");
          })));
          return MN("ENABLE_ENCODED_TRANSFORM") && RD().supportWebRTCEncodedTransform && (r2.encodedInsertableStreams = true), lD.debug("P2PConnection p2pTransport is ".concat(i2)), r2;
        }
        static turnServerConfigToIceServers(e3, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          const n2 = [], r2 = e3.filter((e4) => e4.tcpport);
          lD.debug("P2PConnection turnServers is ".concat(r2, ", current index is ").concat(i2));
          const o2 = r2.length > i2 ? r2[i2] : r2[0];
          switch (t2) {
            case bN.SdRtn:
              const t3 = e3.filter((e4) => {
                var t4;
                return kn(t4 = e4.username).call(t4, "glb:") && e4.turnServerURL == e4.turnServerURL;
              }), r3 = t3.length > i2 ? t3[i2] : t3[0];
              r3 && (n2.push({ username: r3.username, credential: r3.password, credentialType: "password", urls: "turn:".concat(zx(r3.turnServerURL), ":").concat(r3.tcpport, "?transport=udp") }), n2.push({ username: r3.username, credential: r3.password, credentialType: "password", urls: "turns:".concat(zx(r3.turnServerURL), ":").concat(r3.tcpport, "?transport=tcp") }));
              break;
            case bN.Relay:
              o2 && (n2.push({ username: o2.username, credential: o2.password, credentialType: "password", urls: "turn:".concat(o2.turnServerURL, ":").concat(o2.tcpport, "?transport=udp") }), n2.push({ username: o2.username, credential: o2.password, credentialType: "password", urls: "turns:".concat(zx(o2.turnServerURL), ":").concat(o2.tcpport, "?transport=tcp") }));
              break;
            default:
              o2 && (n2.push({ username: o2.username, credential: o2.password, credentialType: "password", urls: "turn:".concat(o2.turnServerURL, ":").concat(o2.tcpport, "?transport=udp") }), n2.push({ username: o2.username, credential: o2.password, credentialType: "password", urls: "turns:".concat(zx(o2.turnServerURL), ":").concat(o2.tcpport, "?transport=tcp") }), n2.push({ username: o2.username, credential: o2.password, credentialType: "password", urls: "stun:".concat(o2.turnServerURL, ":").concat(o2.tcpport) }));
          }
          return n2;
        }
        tryBindTransportEvents(e3) {
          if (e3) {
            this.transport = e3, e3.onstatechange = () => {
              var t3;
              null != e3 && e3.state && (null === (t3 = this.onDTLSTransportStateChange) || void 0 === t3 || t3.call(this, e3.state));
            }, e3.onerror = (e4) => {
              var t3;
              null === (t3 = this.onDTLSTransportError) || void 0 === t3 || t3.call(this, "error" in e4 ? e4.error : e4);
            };
            const t2 = e3.iceTransport;
            t2 && (t2.onstatechange = () => {
              const t3 = null == e3 ? void 0 : e3.iceTransport.state;
              var i2;
              t3 && (null === (i2 = this.onICETransportStateChange) || void 0 === i2 || i2.call(this, t3));
            }, t2.getSelectedCandidatePair && (t2.onselectedcandidatepairchange = () => {
              if (t2.getSelectedCandidatePair()) {
                const { local: e4, remote: i2 } = t2.getSelectedCandidatePair();
                lD.info("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] selectedcandidatepairchange: local ").concat(JSON.stringify({ candidateType: e4.type, protocol: e4.protocol }), ", remote ").concat(JSON.stringify({ candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), " )"));
              }
            }));
          }
        }
        tryUnbindTransportEvents() {
          this.transport && (this.transport.onstatechange = null, this.transport.onerror = null, this.transport.iceTransport && (this.transport.iceTransport.onstatechange = null));
        }
        async updateRtpSenderEncodings(e3, t2) {
          var i2;
          if (!t2) {
            t2 = this.peerConnection.getSenders().find((t3) => t3.track === e3._mediaStreamTrack);
          }
          if (!t2) return lD.warn("[".concat(e3.getTrackId(), "] no rtpSender found}"));
          if (this.isVP8Simulcast(e3)) return lD.warn("[updateRtpSenderEncodings] Track is VP8 simulcast, please apply simulcast encodings");
          if (!RD().supportSetRtpSenderParameters) return lD.warn("[updateRtpSenderEncodings] Browser not support set rtp-sender parameters");
          const n2 = {}, r2 = {};
          switch (e3._optimizationMode) {
            case "motion":
              n2.degradationPreference = "maintain-framerate";
              break;
            case "detail":
              n2.degradationPreference = "maintain-resolution";
              break;
            default:
              n2.degradationPreference = "balanced";
          }
          if (e3._encoderConfig) {
            var o2;
            const { bitrateMax: t3, frameRate: i3, scaleResolutionDownBy: n3 } = e3._encoderConfig;
            t3 && (r2.maxBitrate = 1e3 * t3), kn(o2 = e3._hints).call(o2, BD.LOW_STREAM) && (i3 && (r2.maxFramerate = Xx(i3)), n3 && n3 >= 1 && (r2.scaleResolutionDownBy = n3));
          }
          if (MN("DSCP_TYPE") && Nw()) {
            var s2;
            const e4 = MN("DSCP_TYPE");
            kn(s2 = ["very-low", "low", "medium", "high"]).call(s2, e4) && (r2.networkPriority = e4);
          }
          const a2 = t2.getParameters(), c2 = null === (i2 = a2.encodings) || void 0 === i2 ? void 0 : i2[0];
          hw() && !c2 && (n2.encodings = [r2]), c2 && Object.assign(c2, r2), Object.assign(a2, n2), lD.debug("[".concat(e3.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(a2.encodings))), await t2.setParameters(a2);
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!RD().supportSetRtpSenderParameters) return;
            if (e3.length !== t2.length) return;
            for (let i2 = 0; i2 < e3.length; i2++) {
              const n2 = e3[i2], r2 = t2[i2];
              r2 instanceof Dk && !this.isVP8Simulcast(r2) && await this.updateRtpSenderEncodings(r2, n2.sender);
            }
          } catch (e4) {
            lD.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e3, t2, i2) {
          const n2 = WN(e3);
          return t2.forEach((e4, t3) => {
            const r2 = i2[t3], o2 = n2.mediaDescriptions.find((e5) => e5.attributes.mid === r2);
            o2 && (fV(o2, e4), vV(o2, e4, this.store.codec));
          }), HN(n2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e3);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e3, t2) {
          if (e3.length === t2.length) for (let a2 = 0; a2 < e3.length; a2++) {
            var i2, n2, r2, o2, s2;
            const c2 = e3[a2], d2 = t2[a2];
            if (d2 instanceof Dk && !kn(i2 = d2._hints).call(i2, BD.LOW_STREAM) && null !== (n2 = d2._encoderConfig) && void 0 !== n2 && n2.bitrateMax && (null === (r2 = d2._encoderConfig) || void 0 === r2 ? void 0 : r2.bitrateMax) > 200 && null !== (o2 = d2._scalabilityMode) && void 0 !== o2 && o2.numSpatialLayers && (null === (s2 = d2._scalabilityMode) || void 0 === s2 ? void 0 : s2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
              const e4 = {}, t3 = { high: 1e3 * (d2._encoderConfig.bitrateMax - 50), medium: 5e4 };
              e4.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
              const i3 = c2.sender.getParameters();
              await c2.sender.setParameters(Object.assign(i3, e4));
            }
          }
        }
        async applySimulcastEncodings(e3, t2) {
          if (!hw() && e3.length === t2.length) for (let i2 = 0; i2 < e3.length; i2++) {
            const n2 = t2[i2];
            if (n2 instanceof Dk && this.isVP8Simulcast(n2)) {
              const t3 = e3[i2], r2 = {}, o2 = { high: 1e3 * (n2._encoderConfig.bitrateMax - 50), medium: 5e4 };
              r2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: o2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: o2.medium, scaleResolutionDownBy: 4 }];
              const s2 = t3.sender.getParameters();
              await t3.sender.setParameters(Object.assign(s2, r2));
            }
          }
        }
        isVP8Simulcast(e3) {
          var t2, i2, n2, r2, o2;
          return !!(e3 instanceof Dk && MN("SIMULCAST") && "vp8" === this.store.codec && !kn(t2 = e3._hints).call(t2, BD.LOW_STREAM) && null !== (i2 = e3._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (n2 = e3._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax) > 200 && null !== (r2 = e3._scalabilityMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (o2 = e3._scalabilityMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1);
        }
        logSDPExchange(e3, t2, i2, n2) {
          if (MN("SDP_LOGGING")) return lD.upload("[".concat(this.store.clientId, "] exchanging ").concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(n2, "\n"), e3), "offer" === t2 ? (e4) => {
            this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", n2);
          } : void 0;
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e4) => {
              e4.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e3);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e4) => {
              e4.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e3);
            const r2 = this.remoteSDP.toString();
            null == n2 || n2(r2), await this.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        async getRemoteSSRC(e3, t2) {
          var i2, n2;
          if (t2 = null !== (i2 = t2) && void 0 !== i2 ? i2 : null === (n2 = this.currentRemoteDescription) || void 0 === n2 ? void 0 : n2.sdp) {
            var r2;
            const i3 = null === (r2 = WN(t2).mediaDescriptions.find((t3) => t3.attributes.mid === e3)) || void 0 === r2 ? void 0 : r2.attributes.ssrcs;
            return null == i3 ? void 0 : i3[0].ssrcId;
          }
        }
        async setRemoteDescription(e3) {
          var t2;
          await this.peerConnection.setRemoteDescription(e3), kn(t2 = ["connected", "completed"]).call(t2, this.peerConnection.iceConnectionState) || (this.isReady = true, this.addRemoteCandidate());
        }
        mungReceiveAnswerSDP(e3, t2, i2) {
          const n2 = WN(e3), r2 = n2.mediaDescriptions.find((e4) => e4.attributes.mid === t2);
          return r2 && i2 === ax.AUDIO && "audio" === r2.media.mediaType && bV(r2), HN(n2);
        }
      }, RU(Fq.prototype, "establish", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "establish"), Fq.prototype), RU(Fq.prototype, "connect", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "connect"), Fq.prototype), RU(Fq.prototype, "receive", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "receive"), Fq.prototype), RU(Fq.prototype, "mockReceive", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "mockReceive"), Fq.prototype), RU(Fq.prototype, "stopReceiving", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "stopReceiving"), Fq.prototype), RU(Fq.prototype, "restartICE", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "restartICE"), Fq.prototype), RU(Fq.prototype, "close", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "close"), Fq.prototype), RU(Fq.prototype, "updateEncoderConfig", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "updateEncoderConfig"), Fq.prototype), RU(Fq.prototype, "updateSendParameters", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "updateSendParameters"), Fq.prototype), RU(Fq.prototype, "replaceTrack", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "replaceTrack"), Fq.prototype), RU(Fq.prototype, "muteLocal", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "muteLocal"), Fq.prototype), RU(Fq.prototype, "unmuteLocal", [Wq], Object.getOwnPropertyDescriptor(Fq.prototype, "unmuteLocal"), Fq.prototype), Fq);
      function Wq(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2) throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PConnection.".concat(t2));
          try {
            for (var r2 = arguments.length, o2 = new Array(r2), s2 = 0; s2 < r2; s2++) o2[s2] = arguments[s2];
            return await n2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      let Hq = function(e2) {
        return e2.SEND_ONLY = "SEND_ONLY", e2.RECEIVE_ONLY = "RECEIVE_ONLY", e2;
      }({});
      var Kq, Yq, qq, zq, Jq, Xq, Qq, Zq, $q, ez, tz, iz;
      function nz(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function rz(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? nz(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : nz(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let oz = (Kq = sz(Hq.SEND_ONLY), Yq = sz(Hq.SEND_ONLY), qq = sz(), zq = sz(Hq.RECEIVE_ONLY), Jq = sz(Hq.RECEIVE_ONLY), Xq = sz(Hq.RECEIVE_ONLY), Qq = sz(Hq.RECEIVE_ONLY), Zq = sz(Hq.RECEIVE_ONLY), $q = sz(Hq.RECEIVE_ONLY), ez = sz(), tz = sz(Hq.RECEIVE_ONLY), iz = class extends Zw {
        get state() {
          return this._state;
        }
        set state(e2) {
          const t2 = this._state;
          this._state = e2, this.emit(px.StateChange, t2, this._state);
        }
        constructor(e2, t2) {
          super(), vy(this, "isPlanB", false), vy(this, "store", void 0), vy(this, "statsUploader", void 0), vy(this, "sendConnection", void 0), vy(this, "recvConnection", void 0), vy(this, "localTrackMap", /* @__PURE__ */ new Map()), vy(this, "remoteUserMap", /* @__PURE__ */ new Map()), vy(this, "localDataChannels", []), vy(this, "pendingLocalTracks", []), vy(this, "pendingRemoteTracks", []), vy(this, "statsCollector", void 0), vy(this, "dtlsFailedCount", 0), vy(this, "sendMutex", void 0), vy(this, "recvMutex", void 0), vy(this, "_state", hx.Disconnected), vy(this, "_restartStates", ["disconnected", "failed"]), vy(this, "reconnectInterval", void 0), vy(this, "uploadUnplinkStarted", false), vy(this, "uploadDownlinkStarted", false), vy(this, "uplinkStateUploadInterval", void 0), vy(this, "downlinkStatsUploadInterval", void 0), vy(this, "handleMuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleMuteLocalTrack");
            try {
              if (!this.sendConnection || this.state !== hx.Connected) return void i2(new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before sendConnection established."));
              const n3 = this.filterTobeMutedTracks(e3);
              if (0 === n3.length) return void t3();
              const s2 = n3.find((e4) => "videoLowTrack" === e4[0]);
              if (s2) {
                s2[1].track._originMediaStreamTrack.stop();
              }
              await this.sendConnection.muteLocal(n3.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              let a2 = false;
              var r2, o2;
              if ("video" === e3.trackMediaType) a2 = !(null === (r2 = this.localTrackMap.get(ux.LocalAudioTrack)) || void 0 === r2 || !r2.track._muted);
              else a2 = void 0 === (null === (o2 = this.localTrackMap.get(ux.LocalVideoTrack)) || void 0 === o2 ? void 0 : o2.id);
              const c2 = this.createMuteMessage(n3);
              await _O(this, px.RequestMuteLocal, c2);
              const d2 = "video" === e3.trackMediaType ? Ix.MUTE_LOCAL_VIDEO : Ix.MUTE_LOCAL_AUDIO;
              await _O(this, px.RequestP2PMuteLocal, { action: d2, message: c2, isMuteAll: a2 }), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleUnmuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleUnmuteLocalTrack");
            try {
              if (!this.sendConnection || this.state !== hx.Connected) return void i2(new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel2.handleUnmuteLocalTrack before sendConnection established."));
              const n3 = this.filterTobeUnmutedTracks(e3);
              if (0 === n3.length) return void t3();
              await this.sendConnection.unmuteLocal(n3.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const r2 = this.createUnmuteMessage(n3), o2 = "video" === e3.trackMediaType ? Ix.UNMUTE_LOCAL_VIDEO : Ix.UNMUTE_LOCAL_AUDIO;
              await _O(this, px.RequestP2PMuteLocal, { action: o2, message: r2 }), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleUpdateVideoEncoder", async (e3, t3, i2, n2) => {
            let r2;
            "boolean" == typeof n2 && n2 || (r2 = await this.sendMutex.lock("Locking from P2PChannel2.handleUpdateVideoEncoder"));
            try {
              const i3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!this.sendConnection || !i3 || i3.track !== e3 || this.state !== hx.Connected) return void t3();
              const { id: n3, track: r3 } = i3;
              n3 && (await this.sendConnection.updateSendParameters(n3, r3), await this.sendConnection.updateEncoderConfig(n3, r3), this.emit(px.UpdateVideoEncoder, r3)), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var o2;
              null === (o2 = r2) || void 0 === o2 || o2();
            }
          }), vy(this, "handleUpdateVideoSendParameters", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleUpdateVideoSendParameters");
            try {
              const i3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!this.sendConnection || !i3 || i3.track !== e3 || this.state !== hx.Connected) return void t3();
              const { id: n3, track: r2 } = i3;
              n3 && await this.sendConnection.updateSendParameters(n3, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), vy(this, "handleReplaceTrack", async (e3, t3, i2, n2) => {
            let r2;
            lD.debug("[".concat(this.store.clientId, "] P2PChannel2 handleReplaceTrack for [track-id-").concat(e3.getTrackId(), "]")), "boolean" == typeof n2 && n2 || (r2 = await this.sendMutex.lock("From P2PChannel2.handleReplaceTrack"));
            try {
              var o2;
              const i3 = Array.from(this.localTrackMap.entries()).find((t4) => {
                let [, { track: i4 }] = t4;
                return e3 === i4;
              });
              if (!this.sendConnection || !i3 || void 0 === i3[1].id || this.state !== hx.Connected) return void t3();
              if (await (null === (o2 = this.sendConnection) || void 0 === o2 ? void 0 : o2.replaceTrack(e3, i3[1].id)), i3[0] === ux.LocalVideoTrack && RD().supportDualStreamEncoding) {
                const t4 = this.localTrackMap.get(ux.LocalVideoLowTrack);
                if (t4) {
                  const i4 = e3._mediaStreamTrack.clone();
                  t4.track._originMediaStreamTrack.stop(), t4.track._mediaStreamTrack = i4, t4.track._originMediaStreamTrack = i4, await new np((e4, i5) => {
                    this.handleReplaceTrack(t4.track, e4, i5, true);
                  });
                }
              }
              t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var s2;
              null === (s2 = r2) || void 0 === s2 || s2();
            }
          }), vy(this, "handleGetLocalVideoStats", (e3) => {
            e3(this.statsCollector.getLocalVideoTrackStats());
          }), vy(this, "handleGetLocalAudioStats", (e3) => {
            e3(this.statsCollector.getLocalAudioTrackStats());
          }), vy(this, "handleGetRemoteVideoStats", (e3) => this.statsCollector.getRemoteVideoTrackStats(e3.uid)[e3.uid]), vy(this, "handleGetRemoteAudioStats", (e3) => this.statsCollector.getRemoteAudioTrackStats(e3.uid)[e3.uid]), this.store = e2, this.statsCollector = t2, this.statsCollector.addP2PChannel(this), this.statsUploader = new LB(e2), this.bindStatsUploaderEvents(), this.sendMutex = new KO("P2PChannel2-send-mutex", e2.clientId), this.recvMutex = new KO("P2PChannel2-recv-mutex", e2.clientId), this.reconnectInterval = window.setInterval(() => {
            [this.sendConnection, this.recvConnection].forEach((e3) => {
              e3 && ("disconnected" !== e3.iceConnectionState && "failed" !== e3.iceConnectionState || this.handleDisconnect(e3.direction));
            });
          }, MN("ICE_RESTART_INTERVAL"));
        }
        async startP2PConnection(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support startP2PConnection.");
        }
        async connect(e2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support connect.");
        }
        async startP2P(e2, t2) {
          let i2;
          try {
            if (t2) {
              this.recvConnection && (lD.warning("[".concat(this.store.clientId, "] P2PChannel.startP2P reset recvConnection.")), this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection)), i2 = await this.recvMutex.lock("From P2PChannel.startP2P"), this.recvConnection = new Gq(e2, this.store, PU.RECEIVE_ONLY), this.bindConnectionEvents(this.recvConnection);
              const n2 = await this.recvConnection.establish(t2);
              return { iceParameters: n2.iceParameters, dtlsParameters: n2.dtlsParameters, sdp: n2.sdp };
            }
            {
              this.state = hx.New, this.sendConnection && (lD.warning("[".concat(this.store.clientId, "] P2PChannel.startP2P reset sendConnection.")), this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection)), i2 = await this.sendMutex.lock("From P2PChannel.startP2P"), this.sendConnection = new Gq(e2, this.store), this.store.peerConnectionStart(), this.bindConnectionEvents(this.sendConnection);
              const t3 = await this.sendConnection.establish();
              return { iceParameters: t3.iceParameters, dtlsParameters: t3.dtlsParameters, sdp: t3.sdp };
            }
          } finally {
            i2 && i2();
          }
        }
        async p2pConnect(e2) {
          if (!this.sendConnection) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot P2PChannel2.p2pConnect before P2PChannel2.startP2PConnection .");
          this.store.peerConnectionStart(), await this.sendConnection.connect(e2), this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = hx.Connected;
        }
        async addRemoteCandidate(e2, t2) {
          if (t2 === PU.RECEIVE_ONLY) {
            if (!this.sendConnection) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot P2PChannel2.connect before P2PChannel2.addRemoteCandidate .");
            await this.sendConnection.addRemoteCandidate(e2);
          } else {
            if (!this.recvConnection) throw new xw(Uw.UNEXPECTED_ERROR, "Cannot P2PChannel2.connect before P2PChannel2.addRemoteCandidate .");
            await this.recvConnection.addRemoteCandidate(e2);
          }
        }
        publish(e2, t2, i2) {
          var n2 = this;
          return sb(function* () {
            const r2 = yield ab(n2.sendMutex.lock("From P2PChannel.publish"));
            try {
              if (!n2.sendConnection || n2.state !== hx.Connected) {
                n2.throwIfTrackTypeNotMatch(e2);
                const t3 = e2.filter((e3) => -1 === n2.pendingLocalTracks.indexOf(e3));
                return void (n2.pendingLocalTracks = n2.pendingLocalTracks.concat(t3));
              }
              n2.store.pubId = n2.store.pubId + 1, LF.markPublishStart(n2.store.clientId, n2.store.pubId);
              const r3 = n2.filterTobePublishedTracks(e2, t2, i2);
              if (0 === r3.length) return void (yield ab(n2.tryToUnmuteAudio(e2)));
              r3.forEach((e3) => {
                let { track: t3, type: i3 } = e3;
                const r4 = Date.now();
                n2.store.publish(t3.getTrackId(), i3 === ux.LocalAudioTrack ? "audio" : "video", r4);
              }), n2.bindLocalTrackEvents(r3);
              const o2 = yield ab(n2.sendConnection.send(r3.map((e3) => {
                let { track: t3 } = e3;
                return t3;
              }), n2.store.codec, n2.store.audioCodec)), s2 = (yield ab(o2.next())).value, a2 = n2.createGatewayPublishMessage(r3, s2);
              try {
                yield a2;
              } catch (e3) {
                throw o2.throw(e3), (null == e3 ? void 0 : e3.code) === Uw.WS_ABORT && r3.forEach((e4) => {
                  let { track: t3 } = e4;
                  -1 === n2.pendingLocalTracks.indexOf(t3) && n2.pendingLocalTracks.push(t3);
                }), n2.unbindLocalTrackEvents(r3), e3;
              }
              yield ab(o2.next()), r3.forEach((e3) => {
                let { type: t3 } = e3;
                n2.statsCollector.addLocalStats(t3);
              }), n2.statsUploader.startUploadOutboundStats(), n2.assignLocalTracks(r3, s2), r3.forEach((e3) => {
                let { track: t3, type: i3 } = e3;
                const r4 = Date.now();
                n2.store.publish(t3.getTrackId(), i3 === ux.LocalAudioTrack ? "audio" : "video", void 0, r4);
              }), n2.startUploadUplinkState();
            } finally {
              r2();
            }
          })();
        }
        async unpublish(e2) {
          if (!this.sendConnection || this.state !== hx.Connected) return void (0 === e2.length ? this.pendingLocalTracks.length = 0 : this.pendingLocalTracks = this.pendingLocalTracks.filter((t3) => !kn(e2).call(e2, t3)));
          const t2 = this.filterTobeUnpublishedTracks(e2);
          if (0 === t2.length) return;
          const i2 = t2.find((e3) => "videoLowTrack" === e3[0]);
          if (i2) {
            i2[1].track.close();
          }
          const n2 = this.createGatewayUnpublishMessage(t2);
          if (await this.sendConnection.stopSending(t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawLocalTracks(t2), this.unbindLocalTrackEvents(t2.map((e3) => {
            let [t3, { track: i3 }] = e3;
            return { type: t3, track: i3 };
          })), t2.forEach((e3) => {
            let [t3] = e3;
            this.statsCollector.removeLocalStats(t3);
          }), 0 === this.localTrackMap.size && (this.statsUploader.stopUploadOutboundStats(), this.stopUploadUplinkState()), this.sendConnection && this.state === hx.Connected) {
            if (i2) {
              i2[1].track.close();
            }
            return n2;
          }
          e2.forEach((e3) => {
            const t3 = this.pendingLocalTracks.indexOf(e3);
            -1 !== t3 && this.pendingLocalTracks.splice(t3, 1);
          });
        }
        startUploadUplinkState() {
          if (this.uploadUnplinkStarted) return;
          this.uploadUnplinkStarted = true, this.uplinkStateUploadInterval && window.clearInterval(this.uplinkStateUploadInterval);
          const e2 = () => {
            const e3 = [], t2 = [];
            Array.from(this.localTrackMap.entries()).forEach((i2) => {
              let [n2, { track: r2, ssrcs: o2 }] = i2;
              const s2 = { stream_type: rB(r2, n2), ssrcs: o2 };
              r2._muted || !r2._enabled ? e3.push(s2) : t2.push(s2);
            }), e3.length > 0 && e3.forEach((e4) => {
              _O(this, px.RequestMuteLocal, [e4]);
            }), t2.length > 0 && t2.forEach((e4) => {
              _O(this, px.RequestUnmuteLocal, [e4]);
            });
          };
          e2(), this.uplinkStateUploadInterval = window.setInterval(() => {
            e2();
          }, 3e3);
        }
        stopUploadUplinkState() {
          this.uploadUnplinkStarted && (this.uploadUnplinkStarted = false, this.uplinkStateUploadInterval && window.clearInterval(this.uplinkStateUploadInterval));
        }
        publishLowStream(e2) {
          return sb(function* () {
            throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support publishLowStream.");
          })();
        }
        async republish() {
          this.pendingLocalTracks.length > 0 && (lD.debug("[".concat(this.store.clientId, "] Emit P2PChannelEvents.RequestRePublish to republish tracks.")), await pO(this, px.RequestRePublish, this.pendingLocalTracks), this.emit(px.MediaReconnectEnd, this.store.uid), this.pendingLocalTracks = []);
        }
        async unpublishLowStream() {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support unpublishLowStream.");
        }
        async subscribe(e2, t2, i2, n2) {
          var r2;
          if (!this.recvConnection) throw new xw(Uw.INVALID_OPERATION, "Cannot subscribe remote user when recvConnection disconnected.");
          if (null !== (r2 = this.remoteUserMap.get(e2)) && void 0 !== r2 && r2.has(t2)) return;
          const { track: o2, mid: s2, transceiver: a2 } = await this.recvConnection.receive(t2, [{ ssrcId: i2 }], String(e2.uid), n2);
          t2 === ax.AUDIO ? (e2._audioTrack ? e2._audioTrack._updateOriginMediaStreamTrack(o2) : (e2._audioTrack = new zk(o2, e2.uid, e2._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(e2._audioTrack.getTrackId()))), a2 && e2._audioTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(e2, e2._audioTrack)) : (e2._videoSSRC = i2, e2._videoTrack ? e2._videoTrack._updateOriginMediaStreamTrack(o2) : (e2._videoTrack = new qk(o2, e2.uid, e2._uintid, this.store), lD.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(e2._videoTrack.getTrackId()))), a2 && e2._videoTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(e2, e2._videoTrack));
          const c2 = this.remoteUserMap.get(e2);
          c2 ? c2.set(t2, s2) : this.remoteUserMap.set(e2, /* @__PURE__ */ new Map([[t2, s2]])), this.statsCollector.addRemoteStats(e2.uid), this.statsUploader.startUploadInboundStats(), this.startUploadDownlinkState();
          const d2 = this.pendingRemoteTracks.findIndex((i3) => {
            let { user: n3, kind: r3 } = i3;
            return n3.uid === e2.uid && t2 === r3;
          });
          -1 !== d2 && (this.pendingRemoteTracks.splice(d2, 1), this.emit(px.MediaReconnectEnd, e2.uid));
        }
        async mockSubscribe(e2, t2, i2, n2) {
          if (!this.recvConnection) throw new xw(Uw.INVALID_OPERATION, "Cannot subscribe remote user when recvConnection disconnected.");
          await this.recvConnection.mockReceive(t2, [{ ssrcId: i2 }], String(e2.uid), n2);
        }
        async unsubscribe(e2, t2, i2) {
          const n2 = this.pendingRemoteTracks.filter((i3) => {
            let { user: n3, kind: r3 } = i3;
            return void 0 !== t2 ? n3.uid === e2.uid && t2 === r3 : n3.uid === e2.uid;
          });
          if (n2.forEach((e3) => {
            const t3 = this.pendingRemoteTracks.indexOf(e3);
            this.pendingRemoteTracks.splice(t3, 1);
          }), this.recvConnection || i2 || n2.forEach((t3) => {
            let { kind: i3 } = t3;
            var n3;
            if (i3 === ax.AUDIO) null === (n3 = e2._audioTrack) || void 0 === n3 || n3._destroy(), e2._audioTrack = void 0;
            else if (i3 === ax.VIDEO) {
              var r3;
              null === (r3 = e2._videoTrack) || void 0 === r3 || r3._destroy(), e2._videoTrack = void 0;
            }
          }), !this.recvConnection) return;
          const r2 = this.filterTobeUnSubscribedTracks(e2, t2);
          0 !== r2.length && (await this.recvConnection.stopReceiving(r2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawRemoteTracks(r2), 0 === this.remoteUserMap.size && (this.statsUploader.stopUploadInboundStats(), this.stopUploadDownlinkState()), r2.forEach((e3) => {
            let [t3, { kind: n3 }] = e3;
            var r3, o2;
            n3 === ax.VIDEO && t3._videoSSRC && (null === (r3 = this.recvConnection) || void 0 === r3 || r3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (n3 === ax.VIDEO) this.unbindRemoteTrackEvents(t3._videoTrack), i2 || (null === (o2 = t3._videoTrack) || void 0 === o2 || o2._destroy(), t3._videoTrack = void 0);
            else if (n3 === ax.AUDIO) {
              var s2;
              if (this.unbindRemoteTrackEvents(t3._audioTrack), !i2) null === (s2 = t3._audioTrack) || void 0 === s2 || s2._destroy(), t3._audioTrack = void 0;
            }
          }), r2.forEach((e3) => {
            let [, { kind: t3 }] = e3;
            _O(this, px.RequestP2PMuteRemote, t3);
          }));
        }
        startUploadDownlinkState() {
          if (this.uploadDownlinkStarted) return;
          this.uploadDownlinkStarted = true, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval);
          const e2 = () => Array.from(this.remoteUserMap.entries()).forEach((e3) => {
            let [, t2] = e3;
            [ax.VIDEO, ax.AUDIO].forEach((e4) => {
              t2.has(e4) ? _O(this, px.RequestP2PUnmuteRemote, e4) : _O(this, px.RequestP2PMuteRemote, e4);
            });
          });
          e2(), this.downlinkStatsUploadInterval = window.setInterval(() => {
            e2();
          }, 3e3);
        }
        stopUploadDownlinkState() {
          this.uploadDownlinkStarted && (this.uploadDownlinkStarted = false, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval));
        }
        getAllDataChannels() {
          return this.localDataChannels;
        }
        async massSubscribe(e2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support massSubscribe.");
        }
        async massSubscribeNoLock(e2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support massSubscribeNoLock.");
        }
        async massUnsubscribe(e2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support massUnsubscribe.");
        }
        async massUnsubscribeNoLock(e2) {
          throw new xw(Uw.NOT_SUPPORTED, "p2p mode does not support massUnsubscribeNoLock.");
        }
        async muteRemote(e2, t2) {
          if (!this.recvConnection) return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel2.muteRemote has no remote user ").concat(e2.uid, "."));
          if (!i2.get(t2)) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel2.muteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
          const n2 = t2 === ax.VIDEO ? e2._videoSSRC : e2._audioSSRC;
          void 0 !== n2 && this.recvConnection.setStatsRemoteVideoIsReady(n2, false);
        }
        async unmuteRemote(e2, t2) {
          return this.unmuteRemoteNoLock(e2, t2);
        }
        async unmuteRemoteNoLock(e2, t2) {
          if (!this.recvConnection) return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2) return void lD.warning("[".concat(this.store.clientId, "] P2PChannel2.unmuteRemote has no remote user ").concat(e2.uid, "."));
          i2.get(t2) || lD.warning("[".concat(this.store.clientId, "] P2PChannel2.unmuteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
        }
        getAllTracks(e2) {
          const t2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if ((null == t2 ? void 0 : t2.track) instanceof KL) {
            const i2 = t2.track;
            return Array.from(this.localTrackMap.entries()).filter((e3) => {
              let [t3] = e3;
              return t3 !== ux.LocalAudioTrack;
            }).filter((t3) => {
              let [i3] = t3;
              return !(e2 && i3 === ux.LocalVideoLowTrack);
            }).map((e3) => {
              let [, { track: t3 }] = e3;
              return t3;
            }).concat(i2.trackList);
          }
          return Array.from(this.localTrackMap.entries()).filter((t3) => {
            let [i2] = t3;
            return !(e2 && i2 === ux.LocalVideoLowTrack);
          }).map((e3) => {
            let [, { track: t3 }] = e3;
            return t3;
          });
        }
        reportPublishEvent(e2, t2, i2, n2, r2) {
          if (e2) {
            const i3 = this.localTrackMap.get(ux.LocalAudioTrack), o3 = n2 ? this.localTrackMap.get(ux.LocalVideoLowTrack) : this.localTrackMap.get(ux.LocalVideoTrack);
            TD.publish(this.store.sessionId, { eventElapse: LF.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == i3 ? void 0 : i3.track.getTrackLabel(), videoName: null == o3 ? void 0 : o3.track.getTrackLabel(), screenshare: -1 !== (null == o3 ? void 0 : o3.track._hints.indexOf(BD.SCREEN_TRACK)), audio: !!i3, video: !!o3, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: r2 });
          } else {
            var o2;
            i2 || (i2 = []);
            const s2 = i2.find((e3) => e3 instanceof GL), a2 = n2 ? null === (o2 = this.localTrackMap.get(ux.LocalVideoTrack)) || void 0 === o2 ? void 0 : o2.track : i2.find((e3) => e3 instanceof Dk);
            TD.publish(this.store.sessionId, { eventElapse: LF.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == s2 ? void 0 : s2.getTrackLabel(), videoName: null == a2 ? void 0 : a2.getTrackLabel(), screenshare: -1 !== (null == a2 ? void 0 : a2._hints.indexOf(BD.SCREEN_TRACK)), audio: !!s2, video: !!a2, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: r2 });
          }
        }
        reportSubscribeEvent(e2, t2, i2, n2) {
          const r2 = n2 === ax.VIDEO ? i2._videoSSRC : i2._audioSSRC;
          r2 && TD.subscribe(this.store.sessionId, { succ: e2, ec: t2, video: n2 === ax.VIDEO, audio: n2 === ax.AUDIO, peerid: i2.uid, subscribeRequestid: n2 === ax.VIDEO ? i2._videoSSRC : i2._audioSSRC, p2pid: this.store.p2pId, eventElapse: LF.measureFromSubscribeStart(this.store.clientId, r2) });
        }
        reset() {
          lD.debug("[".concat(this.store.clientId, "] P2PChannel2.reset")), this.sendMutex = new KO("P2PChannel2-send-mutex", this.store.clientId), this.sendMutex = new KO("P2PChannel2-recv-mutex", this.store.clientId), this.sendConnection && (this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection), this.sendConnection = void 0), this.recvConnection && (this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection), this.recvConnection = void 0), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), this.statsUploader.stopUploadExtensionUsageStats(), this.stopUploadUplinkState(), this.stopUploadDownlinkState(), this.unbindLocalTrackEvents(), this.unbindAllRemoteTrackEvents(), this.unbindRtpTransceiver();
          const e2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if ((null == e2 ? void 0 : e2.track) instanceof KL) {
            if (e2.track.trackList.length > 0) {
              const t2 = e2.track;
              e2.track.trackList.forEach((e3) => {
                t2.removeAudioTrack(e3);
              });
            }
            e2.track.close();
          }
          this.localTrackMap.clear(), this.remoteUserMap.clear(), this.statsCollector.removeRemoteStats(), this.statsCollector.removeLocalStats(), this.dtlsFailedCount = 0, this.pendingLocalTracks = [], this.pendingRemoteTracks = [], this.reconnectInterval && (window.clearInterval(this.reconnectInterval), this.reconnectInterval = void 0), this.state = hx.Disconnected;
        }
        getStats(e2) {
          var t2, i2;
          return e2 ? null === (i2 = this.recvConnection) || void 0 === i2 ? void 0 : i2.getStats() : null === (t2 = this.sendConnection) || void 0 === t2 ? void 0 : t2.getStats();
        }
        getRemoteVideoIsReady(e2) {
          var t2;
          return (null === (t2 = this.recvConnection) || void 0 === t2 ? void 0 : t2.getRemoteVideoIsReady(e2)) || false;
        }
        getLocalAudioVolume() {
          const e2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2) return e2.track.getVolumeLevel();
        }
        getLocalVideoSize() {
          const e2 = this.localTrackMap.get(ux.LocalVideoTrack);
          if (e2) return { width: e2.track.videoWidth || 0, height: e2.track.videoHeight || 0 };
        }
        getEncoderConfig(e2) {
          const t2 = this.localTrackMap.get(e2);
          return t2 && t2.track instanceof Dk || t2 && t2.track instanceof GL ? t2.track._encoderConfig : void 0;
        }
        getLocalMedia(e2) {
          return this.localTrackMap.get(e2);
        }
        hasLocalMedia() {
          return this.localTrackMap.size > 0;
        }
        hasRemoteMedia(e2, t2) {
          if (!e2) return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        async hasRemoteMediaWithLock(e2, t2) {
          if (!e2) return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        getRemoteMedia(e2) {
          var t2;
          const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3.uid === e2);
          return i2 ? { audioTrack: i2.audioTrack, audioSSRC: i2._audioSSRC, videoTrack: i2.videoTrack, videoSSRC: i2._videoSSRC } : {};
        }
        getAudioLevels() {
          let e2 = Array.from(this.remoteUserMap.entries()).map((e3) => {
            let [t3] = e3;
            return { uid: t3.uid, level: t3.audioTrack ? 100 * t3.audioTrack._source.getAccurateVolumeLevel() : 0 };
          });
          const t2 = this.localTrackMap.get(ux.LocalAudioTrack);
          return t2 && e2.push({ level: 100 * t2.track._source.getAccurateVolumeLevel(), uid: this.store.uid }), e2 = qS(e2).call(e2, (e3, t3) => e3.level - t3.level), e2;
        }
        async disconnectForReconnect() {
          this.sendConnection && this.recvConnection && (lD.debug("[".concat(this.store.clientId, "] P2PChannel2.disconnectForReconnect closing P2PConnection")), this.state = hx.Reconnecting, MN("KEEP_LAST_FRAME") && 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2] = e2;
            var i2;
            t2._videoTrack && t2._videoTrack._player && (null === (i2 = t2._videoTrack._player.getVideoElement()) || void 0 === i2 || i2.pause(), t2._videoTrack._player.isKeepLastFrame = true, t2._videoTrack._originMediaStreamTrack.stop());
          }), this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection), this.sendConnection = void 0, this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection), this.recvConnection = void 0, 0 !== this.localTrackMap.size && (Array.from(this.localTrackMap.entries()).forEach((e2) => {
            var t2;
            let [i2, { track: n2 }] = e2;
            switch (i2) {
              case ux.LocalVideoTrack:
                kn(t2 = n2._hints).call(t2, BD.LOW_STREAM) ? n2.close() : this.pendingLocalTracks.push(n2);
                break;
              case ux.LocalAudioTrack:
                n2 instanceof KL ? this.pendingLocalTracks = this.pendingLocalTracks.concat(n2.trackList) : this.pendingLocalTracks.push(n2);
              case ux.LocalVideoLowTrack:
            }
          }), this.emit(px.MediaReconnectStart, this.store.uid)), this.unbindLocalTrackEvents(), this.localTrackMap.clear(), 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from($N(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteMedia(t2, e3);
            }), this.emit(px.MediaReconnectStart, t2.uid);
          }), this.unbindAllRemoteTrackEvents(), this.remoteUserMap.clear(), this.stopUploadUplinkState(), this.stopUploadDownlinkState(), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), lD.debug("[".concat(this.store.clientId, "] P2PChannel2 disconnected, waiting to reconnect.")));
        }
        hasPendingRemoteMedia(e2, t2) {
          for (const i2 of this.pendingRemoteTracks) {
            const { user: n2, kind: r2 } = i2;
            if ((e2 instanceof FF ? e2.uid : e2) === n2.uid && t2 === r2) return true;
          }
          return false;
        }
        setPendingRemoteMedia(e2, t2) {
          this.hasPendingRemoteMedia(e2, t2) || this.pendingRemoteTracks.push({ user: e2, kind: t2 });
        }
        async restartICE(e2, t2) {
          let i2, n2;
          if (e2 === PU.SEND_ONLY) {
            if (!this.sendConnection) throw new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before sendConnection established.");
            i2 = await this.sendMutex.lock("From P2PChannel.restartICE"), n2 = this.sendConnection;
          } else {
            if (!this.recvConnection) throw new xw(Uw.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before recvConnection established.");
            i2 = await this.recvMutex.lock("From P2PChannel.restartICE"), n2 = this.recvConnection;
          }
          try {
            if (t2) {
              const e3 = await n2.restartICE(t2);
              return n2.isInRestartIce = false, e3;
            }
            {
              const e3 = await n2.restartICE();
              if (e3) {
                const t3 = await pO(this, px.RequestP2PRestartICE, { direction: PU.RECEIVE_ONLY, iceParameter: e3 });
                await n2.restartICE(t3), n2.isInRestartIce = false;
              }
            }
          } finally {
            i2();
          }
        }
        getUplinkNetworkQuality() {
          if (!this.sendConnection) return 0;
          const e2 = this.sendConnection.getStats(), t2 = this.localTrackMap.get(ux.LocalVideoTrack), i2 = this.localTrackMap.get(ux.LocalAudioTrack), n2 = e2.videoSend.find((e3) => {
            var i3;
            return e3.ssrc === (null == t2 || null === (i3 = t2.ssrcs) || void 0 === i3 ? void 0 : i3[0].ssrcId);
          }), r2 = e2.audioSend.find((e3) => {
            var t3;
            return e3.ssrc === (null == i2 || null === (t3 = i2.ssrcs) || void 0 === t3 ? void 0 : t3[0].ssrcId);
          });
          if (!n2 || !r2) return 1;
          const o2 = EO(this, px.NeedSignalRTT), s2 = n2 ? n2.rttMs : void 0, a2 = r2 ? r2.rttMs : void 0, c2 = s2 && a2 ? (s2 + a2) / 2 : s2 || a2, d2 = (c2 && o2 ? (c2 + o2) / 2 : c2 || o2) || 0, l2 = 100 * e2.sendPacketLossRate * 0.7 / 50 + 0.3 * d2 / 1500, u2 = l2 < 0.17 ? 1 : l2 < 0.36 ? 2 : l2 < 0.59 ? 3 : l2 < 0.1 ? 4 : 5, h2 = null == t2 ? void 0 : t2.track;
          if (h2 && h2._encoderConfig && -1 === h2._hints.indexOf(BD.SCREEN_TRACK)) {
            const t3 = h2._encoderConfig.bitrateMax, i3 = e2.bitrate.actualEncoded;
            if (t3 && i3) {
              const e3 = (1e3 * t3 - i3) / (1e3 * t3);
              return kM[e3 < 0.15 ? 0 : e3 < 0.3 ? 1 : e3 < 0.45 ? 2 : e3 < 0.6 ? 3 : 4][u2];
            }
          }
          return u2;
        }
        getDownlinkNetworkQuality() {
          if (!this.recvConnection) return 0;
          const e2 = this.recvConnection.getStats();
          let t2 = 0;
          return Array.from(this.remoteUserMap.entries()).forEach((i2) => {
            let [n2] = i2;
            const r2 = n2._audioSSRC, o2 = n2._videoSSRC, s2 = e2.audioRecv.find((e3) => e3.ssrc === r2), a2 = e2.videoRecv.find((e3) => e3.ssrc === o2);
            if (!s2 && !a2) return void (t2 += 1);
            const c2 = EO(this, px.NeedSignalRTT), d2 = e2.rtt, l2 = (d2 && c2 ? (d2 + c2) / 2 : d2 || c2) || 0, u2 = s2 ? s2.jitterMs : void 0, h2 = e2.recvPacketLossRate;
            let p2 = 0.7 * h2 * 100 / 50 + 0.3 * l2 / 1500;
            u2 && (p2 = 0.6 * h2 * 100 / 50 + 0.2 * l2 / 1500 + 0.2 * u2 / 400);
            t2 += p2 < 0.1 ? 1 : p2 < 0.17 ? 2 : p2 < 0.36 ? 3 : p2 < 0.59 ? 4 : 5;
          }), this.remoteUserMap.size > 0 ? Math.round(t2 / this.remoteUserMap.size) : t2;
        }
        async muteLocalTrack(e2) {
          return new np((t2, i2) => {
            this.handleMuteLocalTrack(e2, t2, i2);
          });
        }
        filterTobePublishedTracks(e2, t2, i2) {
          const n2 = [], r2 = RD(), o2 = this.getAllTracks();
          e2 = SO(e2 = e2.filter((e3) => -1 === o2.indexOf(e3)));
          let s2 = false, a2 = false;
          for (const o3 of e2) {
            if (o3 instanceof Dk && (this.localTrackMap.has(ux.LocalVideoTrack) || s2 ? new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS).throw() : (n2.push({ track: o3, type: ux.LocalVideoTrack }), s2 = true), t2)) {
              const e3 = this.getLowVideoTrack(o3, i2);
              n2.push({ track: e3, type: ux.LocalVideoLowTrack });
            }
            if (o3 instanceof GL) {
              const e3 = this.localTrackMap.get(ux.LocalAudioTrack);
              if (e3) {
                if (!(e3.track instanceof KL)) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (o3._bypassWebAudio) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e3.track.addAudioTrack(o3), this.bindLocalAudioTrackEvents(o3, true);
              } else if (a2) {
                const e4 = n2.find((e5) => {
                  let { type: t3 } = e5;
                  return t3 === ux.LocalAudioTrack;
                });
                if (!(e4.track instanceof KL)) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (o3._bypassWebAudio) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e4.track.addAudioTrack(o3);
              } else {
                if (!r2.webAudioMediaStreamDest || o3 instanceof KL || o3._bypassWebAudio) n2.push({ track: o3, type: ux.LocalAudioTrack });
                else {
                  const e4 = new KL();
                  e4.addAudioTrack(o3), n2.push({ track: e4, type: ux.LocalAudioTrack });
                }
                a2 = true;
              }
            }
          }
          return n2;
        }
        filterTobeUnpublishedTracks(e2) {
          const t2 = [], i2 = this.getAllTracks();
          e2 = SO(e2 = e2.filter((e3) => -1 !== i2.indexOf(e3)));
          for (const i3 of e2) {
            if (i3 instanceof GL) {
              const e3 = this.localTrackMap.get(ux.LocalAudioTrack);
              if (!e3) continue;
              e3.track instanceof KL ? (e3.track.removeAudioTrack(i3), this.unbindLocalAudioTrackEvents(i3), 0 === e3.track.trackList.length && (t2.push([ux.LocalAudioTrack, e3]), e3.track.close())) : t2.push([ux.LocalAudioTrack, e3]);
            }
            if (i3 instanceof Dk) {
              const e3 = this.localTrackMap.get(ux.LocalVideoTrack);
              if (!e3) continue;
              t2.push([ux.LocalVideoTrack, e3]);
              const i4 = this.localTrackMap.get(ux.LocalVideoLowTrack);
              i4 && t2.push([ux.LocalVideoLowTrack, i4]);
            }
          }
          return t2;
        }
        bindLocalTrackEvents(e2) {
          e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case ux.LocalVideoTrack:
                t2.addListener(FD.GET_STATS, this.handleGetLocalVideoStats), t2.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.addListener(FD.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.addListener(FD.NEED_UPDATE_VIDEO_SEND_PARAMETERS, this.handleUpdateVideoSendParameters), t2.addListener(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case ux.LocalAudioTrack:
                this.bindLocalAudioTrackEvents(t2);
              case ux.LocalVideoLowTrack:
            }
          });
        }
        bindLocalAudioTrackEvents(e2, t2) {
          e2 instanceof KL ? e2.trackList.forEach((e3) => {
            e3.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.addListener(FD.GET_STATS, this.handleGetLocalAudioStats), e3.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.addListener(FD.GET_STATS, this.handleGetLocalAudioStats), e2.addListener(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.addListener(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.addListener(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.addListener(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack), t2 || e2.addListener(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack));
        }
        unbindLocalTrackEvents(e2) {
          e2 || (e2 = Array.from(this.localTrackMap.entries()).map((e3) => {
            let [t2, { track: i2 }] = e3;
            return { track: i2, type: t2 };
          })), e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case ux.LocalVideoTrack:
                t2.off(FD.GET_STATS, this.handleGetLocalVideoStats), t2.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.off(FD.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.off(FD.NEED_UPDATE_VIDEO_SEND_PARAMETERS, this.handleUpdateVideoSendParameters), t2.off(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case ux.LocalAudioTrack:
                this.unbindLocalAudioTrackEvents(t2);
              case ux.LocalVideoLowTrack:
            }
          });
        }
        unbindLocalAudioTrackEvents(e2) {
          e2 instanceof KL ? e2.trackList.forEach((e3) => {
            e3.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.off(FD.GET_STATS, this.handleGetLocalAudioStats), e3.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.off(FD.GET_STATS, this.handleGetLocalAudioStats), e2.off(FD.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.off(FD.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.off(FD.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.off(FD.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.off(FD.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack));
        }
        bindRemoteTrackEvents(e2, t2) {
          t2 instanceof qk && t2.addListener(FD.GET_STATS, (t3) => {
            t3(this.handleGetRemoteVideoStats(e2));
          }), t2 instanceof zk && t2.addListener(FD.GET_STATS, (t3) => {
            t3(this.handleGetRemoteAudioStats(e2));
          });
        }
        unbindRemoteTrackEvents(e2) {
          e2 && e2.removeAllListeners(FD.GET_STATS);
        }
        unbindAllRemoteTrackEvents() {
          Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            i2.has(ax.AUDIO) && this.unbindRemoteTrackEvents(t2._audioTrack), i2.has(ax.VIDEO) && this.unbindRemoteTrackEvents(t2._videoTrack);
          });
        }
        createGatewayPublishMessage(e2, t2) {
          return e2.map((e3, i2) => {
            var n2;
            let r2, { track: o2, type: s2 } = e3;
            switch (s2) {
              case ux.LocalAudioTrack:
                r2 = JU.Audio;
                break;
              case ux.LocalVideoTrack:
                r2 = kn(n2 = o2._hints).call(n2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalVideoLowTrack:
                r2 = JU.Low;
            }
            return { kind: s2 === ux.LocalAudioTrack ? ax.AUDIO : ax.VIDEO, stream_type: r2, mid: t2[i2].id, ssrcs: t2[i2].localSSRC, isMuted: o2.muted || !o2.enabled };
          });
        }
        createGatewayUnpublishMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        assignLocalTracks(e2, t2) {
          e2.forEach((e3, i2) => {
            let { track: n2, type: r2 } = e3;
            this.localTrackMap.set(r2, { track: n2, id: t2[i2].id, ssrcs: t2[i2].localSSRC });
          });
        }
        withdrawLocalTracks(e2) {
          e2.forEach((e3) => {
            let [t2] = e3;
            this.localTrackMap.delete(t2);
          });
        }
        bindConnectionEvents(e2) {
          e2.onConnectionStateChange = async (t2) => {
            var i2;
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: ").concat(e2.name, ".onConnectionStateChange(").concat(t2, ")")), this.emit(px.PeerConnectionStateChange, t2), "connected" !== t2 || this.store.keyMetrics.peerConnectionEnd || this.store.peerConnectionEnd(), "connected" === t2 && (e2.isInRestartIce = false), kn(i2 = this._restartStates).call(i2, t2) && !e2.isInRestartIce && ("disconnected" === t2 && await PO(800), "disconnected" !== e2.iceConnectionState && "failed" !== e2.iceConnectionState || this.handleDisconnect(e2.direction));
          }, e2.onICEConnectionStateChange = (e3) => {
            "connected" !== e3 || this.store.keyMetrics.iceConnectionEnd || this.store.iceConnectionEnd(), lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICEConnectionStateChange(").concat(e3, ")")), TD.reportApiInvoke(this.store.sessionId, { name: "ICEConnectionStateChange", options: e3, tag: iO.TRACER }).onSuccess(), this.emit(px.IceConnectionStateChange, e3);
          }, e2.onICETransportStateChange = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICETransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportStateChange = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportError = (e3) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportError(").concat(e3, ")"));
          }, e2.onFirstAudioDecoded = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            var n2;
            i2 && (this.store.subscribe(i2.uid, "audio", void 0, void 0, void 0, Date.now()), null === (n2 = i2.audioTrack) || void 0 === n2 || n2.emit(YD.FIRST_FRAME_DECODED), TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_AUDIO_DECODE, ED.FIRST_AUDIO_DECODE, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId }));
          }, e2.onFirstAudioReceived = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            i2 && TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_AUDIO_RECEIVED, ED.FIRST_AUDIO_RECEIVED, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onFirstVideoDecoded = (e3, t2, i2) => {
            this.reportVideoFirstFrameDecoded(e3, t2, i2);
          }, e2.onFirstVideoReceived = (e3) => {
            var t2;
            const i2 = Array.from($N(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._videoSSRC === e3);
            i2 && TD.firstRemoteFrame(this.store.sessionId, _D.FIRST_VIDEO_RECEIVED, ED.FIRST_VIDEO_RECEIVED, { peer: i2._uintid, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onSelectedLocalCandidateChanged = (e3, t2) => {
            const i2 = "relay" === e3.candidateType, n2 = "relay" === t2.candidateType;
            "unknown" !== t2.candidateType && i2 === n2 || this.emit(px.ConnectionTypeChange, i2), lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedLocalCandidateChanged(").concat(JSON.stringify(iV(t2)), " -> ").concat(JSON.stringify(iV(e3)), ")"));
          }, e2.onSelectedRemoteCandidateChanged = (e3, t2) => {
            lD.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedRemoteCandidateChanged(").concat(JSON.stringify(iV(t2)), " -> ").concat(JSON.stringify(iV(e3)), ")"));
          }, e2.onFirstVideoDecodedTimeout = (e3) => {
            this.reportVideoFirstFrameDecoded(e3, void 0, void 0, true);
          }, e2.onLocalCandidate = (t2) => {
            this.emit(px.LocalCandidate, { candidate: t2, direction: e2.direction });
          };
        }
        unbindConnectionEvents(e2) {
          e2.onConnectionStateChange = void 0, e2.onICEConnectionStateChange = void 0, e2.onICETransportStateChange = void 0, e2.onDTLSTransportStateChange = void 0, e2.onDTLSTransportError = void 0, e2.onFirstAudioDecoded = void 0, e2.onFirstAudioReceived = void 0, e2.onFirstVideoDecoded = void 0, e2.onFirstVideoReceived = void 0, e2.onSelectedLocalCandidateChanged = void 0, e2.onSelectedRemoteCandidateChanged = void 0, e2.onFirstVideoDecodedTimeout = void 0, e2.onLocalCandidate = void 0;
        }
        async handleDisconnect(e2) {
          const t2 = e2 === PU.SEND_ONLY ? this.sendConnection : this.recvConnection;
          t2 && !t2.isInRestartIce && (t2.isInRestartIce = true, lD.debug("[".concat(this.store.clientId, "] [P2PChannel-").concat(t2.name, "] start use restartICE")), e2 === PU.SEND_ONLY ? this.restartICE(e2) : pO(this, px.RequestP2PRestartICE, { direction: PU.SEND_ONLY }));
        }
        filterTobeMutedTracks(e2) {
          const t2 = [];
          if (-1 === this.getAllTracks().indexOf(e2)) return t2;
          const i2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2 instanceof GL && (null == i2 ? void 0 : i2.track) instanceof KL) return i2.track.isActive || t2.push([ux.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2 && (t2.push(n2), n2[0] === ux.LocalVideoTrack)) {
            const e3 = this.localTrackMap.get(ux.LocalVideoLowTrack);
            e3 && t2.push([ux.LocalVideoLowTrack, e3]);
          }
          return t2;
        }
        filterTobeUnmutedTracks(e2) {
          const t2 = [], i2 = this.localTrackMap.get(ux.LocalAudioTrack);
          if (e2 instanceof GL && (null == i2 ? void 0 : i2.track) instanceof KL) return i2.track.isActive && t2.push([ux.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2) if (n2[0] === ux.LocalVideoTrack) {
            t2.push(n2);
            const e3 = this.localTrackMap.get(ux.LocalVideoLowTrack);
            e3 && t2.push([ux.LocalVideoLowTrack, e3]);
          } else t2.push(n2);
          return t2;
        }
        createMuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        createUnmuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: r2, ssrcs: o2, id: s2 }] = e3;
            switch (n2) {
              case ux.LocalAudioTrack:
                i2 = JU.Audio;
                break;
              case ux.LocalVideoTrack:
                i2 = kn(t2 = r2._hints).call(t2, BD.SCREEN_TRACK) ? JU.Screen : JU.High;
                break;
              case ux.LocalVideoLowTrack:
                i2 = JU.Low;
            }
            return { stream_type: i2, ssrcs: o2, mid: s2 };
          });
        }
        filterTobeUnSubscribedTracks(e2, t2) {
          const i2 = [], n2 = this.remoteUserMap.get(e2);
          if (!n2) return i2;
          if (t2) {
            const r2 = n2.get(t2);
            if (!r2) return i2;
            i2.push([e2, { kind: t2, id: r2 }]);
          } else Array.from(n2.entries()).forEach((t3) => {
            let [n3, r2] = t3;
            i2.push([e2, { kind: n3, id: r2 }]);
          });
          return i2;
        }
        createUnsubscribeMessage(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            let [i2, { kind: n2, id: r2 }] = e3;
            switch (n2) {
              case ax.VIDEO:
                return void (i2._videoSSRC && t2.push({ stream_type: ax.VIDEO, ssrcId: i2._videoSSRC }));
              case ax.AUDIO:
                return void (i2._audioSSRC && t2.push({ stream_type: ax.AUDIO, ssrcId: i2._audioSSRC }));
            }
          }), t2;
        }
        withdrawRemoteTracks(e2) {
          e2.forEach((e3) => {
            let [t2, { kind: i2 }] = e3;
            const n2 = this.remoteUserMap.get(t2);
            n2 && (n2.delete(i2), 0 === Array.from(n2.entries()).length && this.remoteUserMap.delete(t2));
          });
        }
        async updateBitrateLimit(e2) {
          const t2 = this.localTrackMap.get(ux.LocalVideoTrack), i2 = this.localTrackMap.get(ux.LocalVideoLowTrack);
          t2 && (await t2.track.setBitrateLimit(e2.uplink), await new np((e3, i3) => {
            this.handleUpdateVideoEncoder(t2.track, e3, i3, true);
          })), i2 && e2.low_stream_uplink && (await i2.track.setBitrateLimit({ max_bitrate: e2.low_stream_uplink.bitrate, min_bitrate: e2.low_stream_uplink.bitrate || 0 }), await new np((e3, t3) => {
            this.handleUpdateVideoEncoder(i2.track, e3, t3, true);
          }));
        }
        isP2PDisconnected() {
          if (this.sendConnection && this.recvConnection) {
            const e2 = this.sendConnection.peerConnectionState, t2 = this.recvConnection.peerConnectionState;
            return "connected" !== e2 && "connected" !== t2;
          }
          return true;
        }
        async tryToUnmuteAudio(e2) {
          for (let t2 = 0; t2 < e2.length; t2++) if (e2[t2] instanceof GL) {
            const i2 = this.filterTobeUnmutedTracks(e2[t2]);
            if (0 === i2.length) continue;
            const n2 = this.createUnmuteMessage(i2);
            return void await _O(this, px.RequestUnmuteLocal, n2);
          }
        }
        bindStatsUploaderEvents() {
          this.statsUploader.requestStats = (e2) => this.getStats(e2), this.statsUploader.requestLocalMedia = () => Array.from(this.localTrackMap.entries()).filter((e2) => {
            let [, { ssrcs: t2 }] = e2;
            return !!t2;
          }), this.statsUploader.requestRemoteMedia = () => Array.from(this.remoteUserMap.entries()), this.statsUploader.requestVideoIsReady = (e2) => {
            var t2;
            return !(null === (t2 = this.recvConnection) || void 0 === t2 || !t2.getRemoteVideoIsReady(e2));
          }, this.statsUploader.requestUpload = (e2, t2) => this.emit(px.RequestUpload, e2, t2), this.statsUploader.requestUploadStats = (e2) => this.emit(px.RequestUploadStats, e2), this.statsUploader.requestAllTracks = () => this.getAllTracks();
        }
        unbindStatsUploaderEvents() {
          this.statsUploader.requestStats = void 0, this.statsUploader.requestLocalMedia = void 0, this.statsUploader.requestRemoteMedia = void 0, this.statsUploader.requestVideoIsReady = void 0;
        }
        async requestReconnect() {
          this.dtlsFailedCount += 1, await PO(zO(this.dtlsFailedCount, qO)), this.emit(px.RequestReconnect);
        }
        async reconnectP2P() {
        }
        canPublishLowStream() {
          return this.localTrackMap.has(ux.LocalVideoTrack) || this.pendingLocalTracks.some((e2) => e2 instanceof Dk);
        }
        throwIfTrackTypeNotMatch(e2) {
          if (e2.filter((e3) => e3 instanceof Dk).length > 1) throw new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
          if (e2.filter((e3) => e3 instanceof GL).length > 1 && (e2.some((e3) => e3 instanceof GL && e3._bypassWebAudio) || !RD().webAudioMediaStreamDest)) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          for (const t2 of e2) {
            if (t2 instanceof Dk && this.pendingLocalTracks.some((e3) => e3 instanceof Dk)) throw new xw(Uw.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
            if (t2 instanceof GL && this.pendingLocalTracks.some((e3) => e3 instanceof GL) && (!RD().webAudioMediaStreamDest || t2._bypassWebAudio || this.pendingLocalTracks.some((e3) => e3 instanceof GL && e3._bypassWebAudio))) throw new xw(Uw.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          }
        }
        getLowVideoTrack(e2, t2) {
          const i2 = !MN("DISABLE_DUAL_STREAM_USE_ENCODING") && RD().supportDualStreamEncoding, n2 = rz(rz({}, { width: 160, height: 120, framerate: 15, bitrate: 50 }), t2);
          let r2;
          r2 = i2 ? e2._mediaStreamTrack.clone() : mB(e2, n2);
          const o2 = LO(8, "track-low-"), s2 = new Dk(r2, rz(rz({}, i2 && { scaleResolutionDownBy: tV(n2, e2) }), {}, { frameRate: n2.framerate, bitrateMax: n2.bitrate, bitrateMin: n2.bitrate }), void 0, void 0, o2);
          return s2.on(HD.TRANSCEIVER_UPDATED, (t3) => {
            e2._updateRtpTransceiver(t3, jD.LOW_STREAM);
          }), s2._hints.push(BD.LOW_STREAM), e2.addListener(FD.NEED_CLOSE, () => {
            s2.close();
          }), s2;
        }
        async globalLock() {
          return this.recvMutex.lock("From P2PChannel2.globalLock");
        }
        reportVideoFirstFrameDecoded(e2, t2, i2, n2) {
          var r2;
          const o2 = Array.from($N(r2 = this.remoteUserMap).call(r2)).find((t3) => t3._videoSSRC === e2);
          if (o2) {
            n2 || this.store.subscribe(o2.uid, "video", void 0, void 0, void 0, void 0, Date.now());
            const r3 = this.store.keyMetrics, s2 = r3.subscribe.find((e3) => e3.userId === o2.uid && "video" === e3.type);
            TD.firstRemoteVideoDecode(this.store.sessionId, _D.FIRST_VIDEO_DECODE, ED.FIRST_VIDEO_DECODE, { peer: o2._uintid, videowidth: t2, videoheight: i2, subscribeElapse: LF.measureFromSubscribeStart(this.store.clientId, e2), subscribeRequestid: e2, p2pid: this.store.p2pId, apEnd: r3.requestAPEnd || 0, apStart: r3.requestAPStart || 0, joinGwEnd: r3.joinGatewayEnd || 0, joinGwStart: r3.joinGatewayStart || 0, pcEnd: r3.peerConnectionEnd || 0, pcStart: r3.peerConnectionStart || 0, subscriberEnd: (null == s2 ? void 0 : s2.subscribeEnd) || 0, subscriberStart: (null == s2 ? void 0 : s2.subscribeStart) || 0, videoAddNotify: (null == s2 ? void 0 : s2.streamAdded) || 0, state: n2 ? 1 : 0 });
          }
        }
        async remoteMediaSsrcChanged(e2, t2, i2) {
          if (!this.recvConnection) return false;
          const n2 = this.remoteUserMap.get(e2);
          if (!n2) return false;
          const r2 = n2.get(t2);
          if (!r2) return false;
          const o2 = await this.recvConnection.getRemoteSSRC(r2);
          return void 0 !== o2 && o2 !== i2;
        }
        isPreSubScribe(e2) {
          return false;
        }
        async publishDataChannel(e2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async unpublishDataChannel(e2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async subscribeDataChannel(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async unsubscribeDataChannel(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        hasPendingRemoteDataChannel(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        setPendingRemoteDataChannel(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async preConnect(e2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        getEstablishParams() {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async reSubscribe(e2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        async updateVideoStreamParameter(e2, t2) {
          throw new xw(Uw.NOT_SUPPORTED);
        }
        unbindRtpTransceiver() {
          0 !== this.localTrackMap.size && Array.from(this.localTrackMap.entries()).forEach((e2) => {
            let [t2, { track: i2 }] = e2;
            t2 === ux.LocalVideoLowTrack ? i2._updateRtpTransceiver(void 0, jD.LOW_STREAM) : i2._updateRtpTransceiver(void 0);
          });
        }
      }, RU(iz.prototype, "p2pConnect", [Kq], Object.getOwnPropertyDescriptor(iz.prototype, "p2pConnect"), iz.prototype), RU(iz.prototype, "unpublish", [Yq], Object.getOwnPropertyDescriptor(iz.prototype, "unpublish"), iz.prototype), RU(iz.prototype, "unpublishLowStream", [qq], Object.getOwnPropertyDescriptor(iz.prototype, "unpublishLowStream"), iz.prototype), RU(iz.prototype, "subscribe", [zq], Object.getOwnPropertyDescriptor(iz.prototype, "subscribe"), iz.prototype), RU(iz.prototype, "mockSubscribe", [Jq], Object.getOwnPropertyDescriptor(iz.prototype, "mockSubscribe"), iz.prototype), RU(iz.prototype, "unsubscribe", [Xq], Object.getOwnPropertyDescriptor(iz.prototype, "unsubscribe"), iz.prototype), RU(iz.prototype, "muteRemote", [Qq], Object.getOwnPropertyDescriptor(iz.prototype, "muteRemote"), iz.prototype), RU(iz.prototype, "unmuteRemote", [Zq], Object.getOwnPropertyDescriptor(iz.prototype, "unmuteRemote"), iz.prototype), RU(iz.prototype, "hasRemoteMediaWithLock", [$q], Object.getOwnPropertyDescriptor(iz.prototype, "hasRemoteMediaWithLock"), iz.prototype), RU(iz.prototype, "disconnectForReconnect", [ez], Object.getOwnPropertyDescriptor(iz.prototype, "disconnectForReconnect"), iz.prototype), RU(iz.prototype, "remoteMediaSsrcChanged", [tz], Object.getOwnPropertyDescriptor(iz.prototype, "remoteMediaSsrcChanged"), iz.prototype), iz);
      function sz(e2) {
        return function(t2, i2, n2) {
          const r2 = t2[i2];
          if ("function" != typeof r2) throw new Error("Cannot use mutex on object property.");
          return n2.value = async function() {
            for (var t3 = arguments.length, n3 = new Array(t3), o2 = 0; o2 < t3; o2++) n3[o2] = arguments[o2];
            switch (e2) {
              case Hq.SEND_ONLY: {
                const e3 = await this.sendMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await r2.apply(this, n3);
                } finally {
                  e3();
                }
              }
              case Hq.RECEIVE_ONLY: {
                const e3 = await this.recvMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await r2.apply(this, n3);
                } finally {
                  e3();
                }
              }
              default: {
                const e3 = await this.sendMutex.lock("From P2PChannel2.".concat(i2)), t4 = await this.recvMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await r2.apply(this, n3);
                } finally {
                  e3(), t4();
                }
              }
            }
          }, n2;
        };
      }
      class az extends Zw {
        constructor(e2, t2) {
          super(), vy(this, "signal", void 0), vy(this, "token", void 0), vy(this, "tokenTimeout", void 0), vy(this, "tokenInterval", void 0), vy(this, "_sequence", 0), vy(this, "userMap", /* @__PURE__ */ new Map()), vy(this, "encoder", new TextEncoder()), this.signal = e2, this.token = t2;
          const i2 = () => {
            this.signal.connectionState === bU.CONNECTED && this.check(), 0 === this.userMap.size ? this.tokenInterval = window.setTimeout(i2, 1e3) : this.tokenInterval = window.setTimeout(i2, 3 * MN("P2P_TOKEN_INTERVAL"));
          };
          i2();
        }
        async send(e2, t2, i2, n2, r2) {
          var o2, s2, a2;
          if (0 === this.userMap.size) return;
          const c2 = Array.from(hp(o2 = this.userMap).call(o2))[0].token;
          "string" != typeof t2 && (t2 = JSON.stringify(t2)), n2 = null !== (s2 = n2) && void 0 !== s2 ? s2 : LO(6, ""), r2 = null !== (a2 = r2) && void 0 !== a2 ? a2 : this._sequence++;
          const d2 = { _id: n2, _type: e2, _seq: r2, _message: t2, token: "".concat(this.token, "_").concat(c2) };
          MN("SHOW_P2P_LOG") && lD.debug("send message", d2, "noNeedResponse : ".concat(i2));
          this.splitMessage(JSON.stringify(d2)).forEach((e3) => {
            this.signal.request(OU.DATA_STREAM, { payload: AO(this.encoder.encode(e3)) });
          });
          const l2 = new np((t3, r3) => {
            const o3 = window.setTimeout(() => {
              this.off("res-@".concat(n2, "_ack"), s3), this.off("res-@".concat(n2), c3), this.off(Cx.ABORT, a3), lD.debug("[external-signal] request timeout, type: ".concat(e2, ", requestId: ").concat(n2)), 0 === this.userMap.size ? r3(new xw(Uw.INVALID_REMOTE_USER)) : r3(new xw(Uw.TIMEOUT));
            }, MN("EXTERNAL_SIGNAL_REQUEST_TIMEOUT")), s3 = () => {
              o3 && window.clearTimeout(o3), this.off(Cx.ABORT, a3), i2 && t3();
            }, a3 = () => {
              o3 && window.clearTimeout(o3), this.off("res-@".concat(n2, "_ack"), s3), this.off("res-@".concat(n2), c3), r3(new xw(Uw.EXTERNAL_SIGNAL_ABORT, "type: ".concat(e2, ", requestId: ").concat(n2)));
            };
            this.once(Cx.ABORT, a3), this.once("res-@".concat(n2, "_ack"), s3);
            const c3 = (i3, c4) => {
              l3 = true, o3 && window.clearTimeout(o3), this.off("res-@".concat(n2, "_ack"), s3), this.off(Cx.ABORT, a3), "success" === i3 ? t3(c4) : r3(new xw(Uw.P2P_MESSAGE_FAILED, "request ".concat(e2, " failed, requestId: ").concat(n2)));
            };
            let l3 = false;
            i2 || (this.once("res-@".concat(n2), c3), PO(MN("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              l3 || lD.warning("external_signal request timeout, type: ".concat(e2, ", requestId: ").concat(n2, ", ").concat(d2));
            }));
          });
          try {
            return await l2;
          } catch (o3) {
            if (o3.code === Uw.TIMEOUT) return await this.send(e2, t2, i2, n2, r2);
            throw o3;
          }
        }
        onMessage(e2) {
          var t2;
          const { _uid: i2 } = e2;
          let n2, r2 = this.userMap.get(i2);
          if (r2) n2 = r2.splitMessageMap;
          else {
            if (this.userMap.size > 0 || !("_type" in e2) || e2._type !== vx.CHECK) return;
            const { token: t3 } = e2;
            n2 = /* @__PURE__ */ new Map(), r2 = { uid: i2, isStart: true, token: t3, splitMessageMap: n2, nextExpectedSequenceNumber: 0, receivedMessagesMap: /* @__PURE__ */ new Map() }, this.userMap.set(i2, r2), this.signal.emit(DU.ON_USER_ONLINE, { uid: i2 }), this.handleUserOnline();
          }
          if ("id" in e2 && "total" in e2) {
            var o2;
            const { id: t3, total: r3 } = e2, s3 = null !== (o2 = n2.get(t3)) && void 0 !== o2 ? o2 : [];
            if (s3.push(e2), n2.has(t3) || n2.set(t3, s3), s3.length !== r3) return;
            {
              const r4 = qS(s3).call(s3, (e3, t4) => e3.index - t4.index).map((e3) => e3.payload).join("");
              n2.delete(t3), (e2 = JSON.parse(r4))._uid = i2;
            }
          }
          const { _type: s2, token: a2 } = e2;
          if (kn(t2 = [vx.ACK, vx.CHECK]).call(t2, s2)) return s2 === vx.CHECK && this.handleCheckToken(r2, a2), void this.receiveMessage(e2);
          a2 === "".concat(r2.token, "_").concat(this.token) ? this.handleReceivedMessage(e2) : lD.debug('Receive unexpected message", '.concat(a2, ", cur_token: ").concat(r2.token, "_").concat(this.token), e2);
        }
        check() {
          const e2 = { _id: LO(6, ""), token: this.token, _type: vx.CHECK };
          MN("SHOW_P2P_LOG") && lD.debug("send message", e2), this.signal.request(OU.DATA_STREAM, { payload: AO(this.encoder.encode(JSON.stringify(e2))) });
        }
        ack(e2) {
          const t2 = { _id: e2, _type: vx.ACK, token: this.token };
          MN("SHOW_P2P_LOG") && lD.debug("send message", t2), this.signal.request(OU.DATA_STREAM, { payload: AO(this.encoder.encode(JSON.stringify(t2))) });
        }
        response(e2, t2, i2) {
          this.send(vx.RESPONSE, JSON.stringify({ success: !i2, message: t2 }), true, e2);
        }
        handleReceivedMessage(e2) {
          const t2 = () => {
            this.userMap.forEach((e3) => {
              const { receivedMessagesMap: t3, nextExpectedSequenceNumber: i3 } = e3;
              for (; t3.has(i3); ) {
                const n3 = t3.get(i3);
                t3.delete(i3), this.receiveMessage(n3), e3.nextExpectedSequenceNumber++;
              }
            });
          };
          if (!e2) return void t2();
          const { _uid: i2, _seq: n2 } = e2, r2 = this.userMap.get(i2), { receivedMessagesMap: o2, isStart: s2, nextExpectedSequenceNumber: a2 } = r2;
          if (n2 < a2) return this.ack(e2._id), void lD.debug("[external-signal] receive old message, seq: ".concat(n2, ", ").concat(e2._message));
          o2.set(n2, e2), s2 && n2 === a2 && (this.receiveMessage(e2), o2.delete(a2), r2.nextExpectedSequenceNumber++, t2());
        }
        receiveMessage(e2) {
          const { _id: t2, _type: i2, _message: n2, _uid: r2 } = e2;
          if (MN("SHOW_P2P_LOG") && lD.debug("receive message", e2), t2) {
            let o2;
            switch (e2._type !== vx.ACK && (n2 && (o2 = JSON.parse(n2)), this.ack(e2._id)), e2._type) {
              case vx.CANDIDATE:
              case vx.CONTROL:
                this.signal.emit(i2, o2, r2);
                break;
              case vx.PUBLISH:
              case vx.UNPUBLISH:
              case vx.RESTART_ICE:
              case vx.CALL:
                o2.uid = r2, pO(this.signal, i2, o2).then((t3) => {
                  this.response(e2._id, t3);
                }).catch(() => {
                  this.response(e2._id, void 0, true);
                });
                break;
              case vx.ACK:
                this.getListeners("res-@".concat(t2, "_ack")).length > 0 && this.emit("res-@".concat(t2, "_ack"));
                break;
              case vx.RESPONSE: {
                const { success: e3, message: i3 } = o2;
                this.emit("res-@".concat(t2), e3 ? "success" : "failed", i3);
                break;
              }
            }
          }
        }
        splitMessage(e2) {
          if (e2.length < az.MAX_MESSAGE_SIZE) return [e2];
          const t2 = [], { remoteToken: i2 } = JSON.parse(e2), n2 = LO(6, "");
          let r2 = 0, o2 = 800;
          const s2 = Math.ceil(e2.length / o2);
          for (; e2.length > 0; ) {
            r2++;
            const a2 = { id: n2, index: r2, total: s2, payload: e2.slice(0, o2), token: "".concat(this.token, "_").concat(i2) };
            JSON.stringify(a2).length > az.MAX_MESSAGE_SIZE ? o2 -= 50 : (t2.push(a2), e2 = e2.slice(o2));
          }
          return t2.map((e3) => JSON.stringify(e3));
        }
        handleCheckToken(e2, t2) {
          return e2.token !== t2 ? (lD.debug("token changed, from ".concat(e2.token, " to ").concat(t2)), this.reset(e2.uid, t2), false) : (this.tokenTimeout && (window.clearTimeout(this.tokenTimeout), this.tokenTimeout = void 0), this.tokenTimeout = window.setTimeout(() => {
            lD.debug("token timeout, ".concat(t2)), this.reset(e2.uid);
          }, MN("MAX_P2P_TIMEOUT")), true);
        }
        async handleUserOnline() {
          const e2 = await pO(this.signal, vx.CALL, void 0), t2 = await this.send(vx.CALL, e2);
          this.signal.emit(wU.P2P_CONNECTION, t2, true);
        }
        async reset(e2, t2) {
          const i2 = this.userMap.get(e2);
          i2 && (this.emit(Cx.ABORT), this.signal.emit(DU.ON_USER_OFFLINE, { uid: i2.uid, reason: yx.P2P_TOKEN_CHANGED }), this._sequence = 0, this.userMap.clear(), t2 || (lD.debug("change local token from ".concat(t2, " to ").concat(t2)), this.token = LO(6, "")));
        }
        clear() {
          this._sequence = 0, this.userMap.clear(), this.tokenInterval && window.clearTimeout(this.tokenInterval), this.tokenInterval = void 0, this.tokenTimeout && window.clearTimeout(this.tokenTimeout), this.tokenTimeout = void 0, this.emit(Cx.ABORT);
        }
      }
      vy(az, "MAX_SIZE", 1), vy(az, "MAX_MESSAGE_SIZE", 1024);
      class cz extends Zw {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === bU.CONNECTED ? this.emit(wU.WS_CONNECTED) : e2 === bU.RECONNECTING ? this.emit(wU.WS_RECONNECTING, this._websocketReconnectReason) : e2 === bU.CLOSED && this.emit(wU.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), vy(this, "_disconnectedReason", void 0), vy(this, "_websocketReconnectReason", void 0), vy(this, "_connectionState", bU.CLOSED), vy(this, "reconnectToken", void 0), vy(this, "p2pToken", void 0), vy(this, "websocket", void 0), vy(this, "openConnectionTime", void 0), vy(this, "clientId", void 0), vy(this, "lastMsgTime", Date.now()), vy(this, "uploadCache", []), vy(this, "uploadCacheInterval", void 0), vy(this, "rttRolling", new QO(5)), vy(this, "pingpongTimer", void 0), vy(this, "pingpongTimeoutCount", 0), vy(this, "joinResponse", void 0), vy(this, "multiIpOption", void 0), vy(this, "initError", void 0), vy(this, "spec", void 0), vy(this, "store", void 0), vy(this, "_external_signal", void 0), vy(this, "onWebsocketMessage", (e3) => {
            if (e3.data instanceof ArrayBuffer) return void this.emit(wU.ON_BINARY_DATA, e3.data);
            const t3 = JSON.parse(e3.data);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type")) {
              switch (t3._type) {
                case DU.ON_DATA_STREAM:
                  return void this.handleDataStream(t3._message);
                case DU.MUTE_AUDIO:
                case DU.MUTE_VIDEO:
                case DU.ON_P2P_LOST:
                case DU.ON_USER_ONLINE:
                  return;
                case DU.ON_USER_OFFLINE:
                  const { uid: e4 } = t3._message;
                  return lD.debug("[".concat(this.clientId, "] user-offline uid: ").concat(e4)), void this._external_signal.reset(e4);
              }
              if (this.emit(t3._type, t3._message), t3._type === DU.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === DU.ON_USER_BANNED) switch (t3._message.error_code) {
                case 14:
                  this.close(oO.UID_BANNED);
                  break;
                case 15:
                  this.close(oO.IP_BANNED);
                  break;
                case 16:
                  this.close(oO.CHANNEL_BANNED);
              }
              if (t3._type === DU.ON_USER_LICENSE_BANNED) switch (t3._message.error_code) {
                case AU.ERR_LICENSE_MISSING:
                  this.close(oO.LICENSE_MISSING);
                  break;
                case AU.ERR_LICENSE_EXPIRED:
                  this.close(oO.LICENSE_EXPIRED);
                  break;
                case AU.ERR_LICENSE_MINUTES_EXCEEDED:
                  this.close(oO.LICENSE_MINUTES_EXCEEDED);
                  break;
                case AU.ERR_LICENSE_PERIOD_INVALID:
                  this.close(oO.LICENSE_PERIOD_INVALID);
                  break;
                case AU.ERR_LICENSE_MULTIPLE_SDK_SERVICE:
                  this.close(oO.LICENSE_MULTIPLE_SDK_SERVICE);
                  break;
                case AU.ERR_LICENSE_ILLEGAL:
                  this.close(oO.LICENSE_ILLEGAL);
                  break;
                default:
                  this.close();
              }
            }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new jx("gateway-".concat(this.clientId), this.spec.retryConfig, true, MN("JOIN_GATEWAY_USE_DUAL_DOMAIN"), MN("JOIN_GATEWAY_USE_443PORT_ONLY"), t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === bU.CONNECTED && this.reconnect("retry", lO.OFFLINE);
          }), this.p2pToken = LO(6, ""), this._external_signal = new az(this, this.p2pToken);
        }
        async request(e2, t2, i2, n2) {
          const r2 = LO(6, ""), o2 = { _id: r2, _type: e2, _message: t2 }, s2 = this.websocket.connectionID, a2 = () => new np((e3, t3) => {
            if (this.connectionState === bU.CONNECTED) return e3();
            const i3 = () => {
              this.off(wU.WS_CLOSED, n3), e3();
            }, n3 = () => {
              this.off(wU.WS_CONNECTED, i3), t3(new xw(Uw.WS_ABORT));
            };
            this.once(wU.WS_CONNECTED, i3), this.once(wU.WS_CLOSED, n3);
          });
          if (this.connectionState !== bU.CONNECTING && this.connectionState !== bU.RECONNECTING || e2 === OU.JOIN || e2 === OU.REJOIN || await a2(), this.websocket.sendMessage(o2, true), n2) return;
          const c2 = new np((i3, n3) => {
            let o3 = false;
            const a3 = (n4, r3) => {
              o3 = true, i3({ isSuccess: "success" === n4, message: r3 || {} }), this.off(wU.WS_CLOSED, c3), this.off(wU.WS_RECONNECTING, c3), this.emit(wU.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(r2), a3);
            const c3 = () => {
              n3(new xw(Uw.WS_ABORT, "type: ".concat(e2))), this.off(wU.WS_CLOSED, c3), this.off(wU.WS_RECONNECTING, c3), this.off("res-@".concat(r2), a3);
            };
            this.once(wU.WS_CLOSED, c3), this.once(wU.WS_RECONNECTING, c3), PO(MN("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== s2 || o3 || (lD.warning("[".concat(this.clientId, "] ws request timeout, type: ").concat(e2)), this.emit(wU.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (n3) {
            if (this.connectionState === bU.CLOSED || e2 === OU.LEAVE) throw new xw(Uw.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? n3.throw() : e2 === OU.JOIN || e2 === OU.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess) return d2.message;
          const l2 = Number(d2.message.error_code || d2.message.code), u2 = Ox(l2), h2 = new xw(Uw.UNEXPECTED_RESPONSE, "".concat(u2.desc, ": ").concat(d2.message.error_str), { code: l2, data: d2.message, desc: u2.desc });
          return "success" === u2.action ? d2.message : (lD.warning("[".concat(this.clientId, "] [").concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(l2, ", message: ").concat(u2.desc, ", action: ").concat(u2.action)), l2 === AU.ERR_TOO_MANY_BROADCASTERS ? e2 === OU.JOIN || e2 === OU.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === u2.action ? h2.throw() : "quit" === u2.action ? (this.initError = h2, this.close(), h2.throw()) : (l2 === AU.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, lD.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", lO.MULTI_IP)) : this.reconnect(u2.action, lO.SERVER_ERROR), e2 === OU.JOIN || e2 === OU.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new np((i2) => {
            const n2 = (r2) => {
              (!t2 || t2(r2)) && (this.off(e2, n2), i2(r2));
            };
            this.on(e2, n2);
          });
        }
        uploadWRTCStats(e2) {
          if (!this.store.sessionId) return void lD.warn("[".concat(this.clientId, "] no session id when upload wrtc stats"));
          const t2 = { lts: Date.now(), sid: this.store.sessionId, uid: this.store.intUid, stats: e2 };
          this.upload(NU.WRTC_STATS, t2);
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = MN("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== bU.CONNECTED) return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, MN("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        async sendExtensionMessage(e2, t2, i2) {
          return await this._external_signal.send(e2, t2, i2);
        }
        init(e2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new np((t2, i2) => {
            this.once(wU.WS_CONNECTED, () => t2(this.joinResponse)), this.once(wU.WS_CLOSED, () => i2(this.initError || new xw(Uw.WS_ABORT))), this.connectionState = bU.CONNECTING, this.websocket.init(e2).catch(i2);
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._external_signal.clear(), this._disconnectedReason = e2 || oO.LEAVE, this.connectionState = bU.CLOSED, lD.debug("[".concat(this.clientId, "] ") + "will close websocket in signal"), this.websocket.close(), this.p2pToken = LO(6, ""), this._external_signal.clear(), this._external_signal = new az(this, this.p2pToken);
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(wU.ABORT_P2P_EXECUTION);
            const e2 = await pO(this, wU.REQUEST_JOIN_INFO), t2 = await this.request(OU.JOIN, e2);
            if (!t2) return this.emit(wU.REPORT_JOIN_GATEWAY, Uw.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(wU.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = bU.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleDataStream(e2) {
          try {
            var t2;
            const i2 = yO(e2.payload), n2 = new TextDecoder().decode(i2), r2 = JSON.parse(n2);
            "total" in r2 && "id" in r2 || kn(t2 = Object.values(vx)).call(t2, r2._type) ? (r2._uid = e2.uid, this._external_signal.onMessage(r2)) : this.emit(DU.ON_DATA_STREAM, e2);
          } catch (t3) {
            this.emit(DU.ON_DATA_STREAM, e2);
          }
        }
        handleNotification(e2) {
          lD.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = Ox(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action) return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(oO.UID_BANNED), void this.close()) : void this.reconnect(t2.action, lO.SERVER_ERROR);
            lD.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state) return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = MN("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (lD.warning("[".concat(this.clientId, "] PINGPONG Timeout. Last Socket Message: ").concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > MN("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", lO.TIMEOUT) : this.request(OU.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), MN("REPORT_STATS") && this.send(OU.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleWebsocketEvents() {
          this.websocket.on(LU.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(wU.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(LU.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(LU.CLOSED, () => {
            this.connectionState = bU.CLOSED;
          }), this.websocket.on(LU.FAILED, () => {
            this._disconnectedReason = oO.NETWORK_ERROR, this.connectionState = bU.CLOSED;
          }), this.websocket.on(LU.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === bU.CONNECTED ? this.connectionState = bU.RECONNECTING : this.connectionState = bU.CONNECTING;
          }), this.websocket.on(LU.WILL_RECONNECT, (e2, t2, i2) => {
            "retry" !== e2 ? (lD.debug("".concat(this.clientId, " websocket will_connect event, renewSession reconnectMode is ").concat(e2)), this.reconnectToken = void 0) : lD.debug("".concat(this.clientId, " reconnect mode is retry, no need to renew session")), i2(e2);
          }), this.websocket.on(LU.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.join().catch((e2) => {
              if (this.emit(wU.REPORT_JOIN_GATEWAY, e2, this.url || ""), e2 instanceof xw && e2.code === Uw.UNEXPECTED_RESPONSE && e2.data.code === AU.ERR_NO_AUTHORIZED) return lD.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", lO.SERVER_ERROR);
              lD.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", lO.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(LU.REQUEST_NEW_URLS, (e2, t2) => {
            pO(this, wU.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(LU.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(DU.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          });
        }
      }
      const dz = { name: "P2PChannel", create: function(e2) {
        let { store: t2, statsCollector: i2 } = e2;
        return new oz(t2, i2);
      }, createSubmodule: function(e2) {
        let { store: t2, spec: i2 } = e2;
        return new cz(i2, t2);
      } };
      function lz(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function uz(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? lz(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : lz(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class hz {
        constructor(e2) {
          vy(this, "sessionDesc", void 0), vy(this, "localCapabilities", void 0), vy(this, "rtpCapabilities", void 0), vy(this, "candidates", void 0), vy(this, "_originCandidates", void 0), vy(this, "iceParameters", void 0), vy(this, "dtlsParameters", void 0), vy(this, "setup", void 0), vy(this, "currentMidIndex", void 0), vy(this, "cname", void 0), e2 = RO(e2);
          const { iceParameters: t2, dtlsParameters: i2, candidates: n2, rtpCapabilities: r2, setup: o2, localCapabilities: s2, sdkCodec: a2, cname: c2 } = e2, d2 = WN("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE audio video\na=msid-semantic: WMS\na=ice-lite\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:audio\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:video\n");
          this.rtpCapabilities = r2, this.candidates = n2, this._originCandidates = RO(n2), this.iceParameters = t2, this.dtlsParameters = i2, this.setup = o2, this.localCapabilities = s2, this.cname = c2;
          for (let e3 = 0; e3 < d2.mediaDescriptions.length; e3++) {
            const s3 = d2.mediaDescriptions[e3];
            if (s3.attributes.iceUfrag = t2.iceUfrag, s3.attributes.icePwd = t2.icePwd, s3.attributes.fingerprints = i2.fingerprints, s3.attributes.candidates = n2, s3.attributes.setup = o2, "video" === s3.media.mediaType) {
              s3.media.fmts = r2.videoCodecs.map((e5) => e5.payloadType.toString(10));
              let e4 = r2.videoCodecs.filter((e5) => {
                var t3, i3;
                return null === (t3 = e5.rtpMap) || void 0 === t3 ? void 0 : kn(i3 = t3.encodingName.toLowerCase()).call(i3, a2);
              });
              0 === e4.length && (e4 = r2.videoCodecs), s3.attributes.payloads = e4, s3.attributes.extmaps = r2.videoExtensions;
            }
            "audio" === s3.media.mediaType && (s3.media.fmts = r2.audioCodecs.map((e4) => e4.payloadType.toString(10)), s3.attributes.payloads = r2.audioCodecs, s3.attributes.extmaps = r2.audioExtensions), d2.mediaDescriptions[e3] = this.mungMediaDesc(s3);
          }
          this.sessionDesc = d2, this.currentMidIndex = d2.mediaDescriptions.length - 1;
        }
        toString() {
          return HN(this.sessionDesc);
        }
        send(e2, t2, i2) {
          const { ssrcs: n2, ssrcGroups: r2 } = mV(t2, this.cname), o2 = this.sessionDesc.mediaDescriptions.find((t3) => e2 === ax.VIDEO ? "video" === t3.media.mediaType : "audio" === t3.media.mediaType), s2 = n2[0].attributes.label, a2 = n2[0].attributes.mslabel;
          return o2.attributes.ssrcs = o2.attributes.ssrcs.concat(n2), o2.attributes.ssrcGroups = o2.attributes.ssrcGroups.concat(r2), { id: s2, mslabel: a2 };
        }
        batchSend(e2) {
          return e2.map((e3) => {
            let { kind: t2, ssrcMsg: i2 } = e3;
            return this.send(t2, i2, void 0);
          });
        }
        stopSending(e2) {
          this.sessionDesc.mediaDescriptions.forEach((t2) => {
            const i2 = [], n2 = [], r2 = [];
            t2.attributes.ssrcs.forEach((t3) => {
              kn(e2).call(e2, t3.attributes.label || "") ? r2.push(t3) : i2.push(t3);
            }), t2.attributes.ssrcGroups.forEach((e3) => {
              var t3;
              kn(t3 = r2.map((e4) => e4.ssrcId)).call(t3, e3.ssrcIds[0]) || n2.push(e3);
            }), t2.attributes.ssrcs = i2, t2.attributes.ssrcGroups = n2;
          });
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2) throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2) throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        receive(e2, t2, i2) {
          e2.forEach((e3, t3) => {
            const i3 = e3._mediaStreamTrack, n2 = this.sessionDesc.mediaDescriptions.findIndex((e4) => e4.attributes.mid === i3.kind), r2 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[n2], e3);
            this.sessionDesc.mediaDescriptions[n2] = r2;
          });
        }
        stopReceiving(e2) {
        }
        updateCandidates(e2) {
          const t2 = this._originCandidates.filter((e3) => "udp" === e3.transport), i2 = [];
          if (t2.forEach((e3) => {
            i2.push(uz(uz({}, e3), {}, { foundation: "tcpcandidate", priority: Number(e3.priority) - 1 + "", transport: "tcp", port: Number(e3.port) + 90 + "" }));
          }), 0 !== t2.length) {
            switch (e2) {
              case cx.TCP_RELAY:
                this.candidates = i2;
                break;
              case cx.UDP_TCP_RELAY:
              case cx.RELAY:
                this.candidates = [...t2, ...i2];
                break;
              default:
                this.candidates = t2;
            }
            for (const e3 of this.sessionDesc.mediaDescriptions) e3.attributes.candidates = this.candidates;
          }
        }
        restartICE(e2) {
          e2 = RO(e2), this.iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++) t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        mungRecvMediaDsec(e2, t2) {
          const i2 = RO(e2);
          return fV(i2, t2), SV(i2, t2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        updateTrackLabel(e2, t2, i2) {
          const n2 = this.sessionDesc.mediaDescriptions.find((t3) => e2 === ax.VIDEO ? "video" === t3.attributes.mid : "audio" === t3.attributes.mid);
          if (n2) {
            const e3 = n2.attributes.ssrcs.find((e4) => e4.attributes.label === t2);
            var r2;
            if (e3) e3.attributes.label = i2, null === (r2 = e3.attributes.msid) || void 0 === r2 || r2.replace(t2, i2);
          }
        }
        mungMediaDesc(e2) {
          const t2 = RO(e2);
          return TV(t2), function(e3) {
            const t3 = e3.attributes.extmaps.find((e4) => cV(e4.extensionName));
            t3 && e3.attributes.extmaps.splice(e3.attributes.extmaps.indexOf(t3), 1), e3.attributes.payloads.forEach((e4) => {
              const t4 = e4.rtcpFeedbacks.findIndex((e5) => "transport-cc" === e5.type);
              -1 !== t4 && e4.rtcpFeedbacks.splice(t4, 1);
            });
          }(t2), t2;
        }
        getSSRC(e2) {
          for (const t2 of this.sessionDesc.mediaDescriptions) for (const i2 of t2.attributes.ssrcs) if (i2.attributes.label === e2) return [i2];
        }
      }
      var pz;
      function _z(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Ez(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? _z(Object(i2), true).forEach(function(t3) {
            vy(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : _z(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let mz = (pz = class e2 extends sx {
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get localCodecs() {
          return [...new Set(this.localCapabilities && this.localCapabilities.videoCodecs.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").filter((e3) => {
            var t2;
            return kn(t2 = Object.keys(BN)).call(t2, e3);
          }))];
        }
        constructor(t2, i2) {
          super(t2, i2), vy(this, "store", void 0), vy(this, "peerConnection", void 0), vy(this, "remoteSDP", void 0), vy(this, "initialOffer", void 0), vy(this, "statsFilter", void 0), vy(this, "useRTX", false), vy(this, "localCapabilities", void 0), vy(this, "localCandidateCount", 0), vy(this, "allCandidatesReceived", false), vy(this, "establishPromise", void 0), vy(this, "mutex", void 0), this.store = i2, this.mutex = new KO("P2PConnection-mutex", i2.clientId), this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2), { optional: [{ googDscp: true }] }), this.statsFilter = vN(this.peerConnection, MN("STATS_UPDATE_INTERVAL"), void 0, hw() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1, this.establishPromise = this.establish();
        }
        async establish() {
          try {
            const e3 = await this.peerConnection.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true });
            if (!e3.sdp) throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = hV(e3.sdp), i2 = uV(e3.sdp, { filterRTX: !this.useRTX, filterVideoFec: MN("FILTER_VIDEO_FEC"), filterAudioFec: MN("FILTER_AUDIO_FEC"), filterAudioCodec: ["opus"] });
            return this.localCapabilities = i2, this.initialOffer = e3, Ez(Ez({}, t2), {}, { rtpCapabilities: { send: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, recv: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, sendrecv: i2 }, offerSDP: e3.sdp });
          } catch (e3) {
            throw new xw(Uw.GET_LOCAL_CONNECTION_PARAMS_FAILED, e3.toString());
          }
        }
        async updateRemoteConnect() {
        }
        async connect(e3) {
          try {
            if (!this.initialOffer) throw new Error("Cannot establish P2PConnection without initial offer.");
            this.remoteSDP = new hz(Ez(Ez({}, e3), {}, { rtpCapabilities: e3.rtpCapabilities.send, localCapabilities: this.localCapabilities, sdkCodec: this.store.codec }));
            const t2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription(this.initialOffer), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: t2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
        }
        async updateRemoteRTPCapabilities(e3, t2) {
          throw new xw(Uw.NOT_SUPPORTED, "Planb mode does not support createDataChannels.");
        }
        getPreMedia(e3) {
        }
        send(e3, t2) {
          var i2 = this;
          return sb(function* () {
            const n2 = yield ab(i2.mutex.lock());
            try {
              if (!i2.remoteSDP) throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const n3 = e3.map((e4) => i2.peerConnection.addTrack(e4._mediaStreamTrack)), r2 = yield ab(i2.peerConnection.createOffer()), o2 = WN(r2.sdp), s2 = e3.map((e4) => {
                const t3 = e4._mediaStreamTrack, n4 = o2.mediaDescriptions.find((e5) => e5.attributes.mid === t3.kind);
                if (!n4) throw new Error("Cannot extract ssrc from mediaDescription.");
                return function(e5, t4, i3) {
                  const n5 = e5.attributes.ssrcs.filter((e6) => e6.attributes.label === t4), r3 = e5.attributes.ssrcGroups;
                  if (0 === n5.length) throw new Error("Cannot extract ssrc from plan-b SDP.");
                  if (r3 && n5.length > 1) {
                    const e6 = r3.find((e7) => -1 !== e7.ssrcIds.indexOf(n5[0].ssrcId));
                    return e6 ? [{ ssrcId: e6.ssrcIds[0], rtx: i3 ? e6.ssrcIds[1] : void 0 }] : [{ ssrcId: n5[0].ssrcId }];
                  }
                  return [{ ssrcId: n5[0].ssrcId }];
                }(n4, t3.id, i2.useRTX);
              });
              let a2;
              try {
                a2 = yield s2;
              } catch (e4) {
                throw n3.forEach((e5) => {
                  lw() && e5.replaceTrack(null), i2.peerConnection.removeTrack(e5);
                }), e4;
              }
              const c2 = i2.mungSendOfferSDP(r2.sdp, e3);
              i2.remoteSDP.receive(e3, t2, a2);
              const d2 = i2.remoteSDP.toString();
              return yield ab(i2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield ab(i2.applySendEncodings(n3, e3)), yield ab(i2.peerConnection.setRemoteDescription({ type: "answer", sdp: d2 })), e3.map((e4, t3) => {
                const i3 = e4._mediaStreamTrack.id;
                return { localSSRC: s2[t3], id: i3 };
              });
            } catch (e4) {
              throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              n2();
            }
          })();
        }
        async stopSending(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e3.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e3.length) throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t2.map((e4) => {
              lw() && e4.replaceTrack(null), this.peerConnection.removeTrack(e4);
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.stopReceiving(e3);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          }
        }
        async receive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { id: i3, mslabel: r2 } = this.remoteSDP.send(e3, t2, n2), o2 = new np((t3, n3) => {
              const o3 = setTimeout(() => {
                n3(new Error("Cannot receive track, id: ".concat(i3)));
              }, 1e4), s3 = (n4) => {
                const a3 = rw();
                if (("Safari" === a3.name && 11 === Number(a3.version) || pw()) && n4.track.id !== i3 && n4.streams[0].id === r2) {
                  var c2;
                  const r3 = n4.streams[0].getTracks()[0];
                  return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(e3, i3, n4.track.id), this.peerConnection.removeEventListener("track", s3), clearTimeout(o3), void t3(r3);
                }
                if (n4.track.id === i3) return this.peerConnection.removeEventListener("track", s3), clearTimeout(o3), void t3(n4.track);
              };
              this.peerConnection.addEventListener("track", s3);
            }), s2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: s2 });
            const a2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(a2);
            return { track: await o2, id: i3 };
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const i2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(i2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async muteRemote(e3) {
        }
        async unmuteRemote(e3) {
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i2;
              return -1 !== e3.indexOf((null === (i2 = t3.track) || void 0 === i2 ? void 0 : i2.id) || "");
            });
            if (t2.length !== e3.length) throw new Error("sender' length doesn't match mids' length.");
            t2.map((e4) => {
              if (lw() && e4.track) e4.track.enabled = false;
              else {
                const t3 = e4.getParameters();
                t3.encodings.forEach((e5) => e5.active = false), e4.setParameters(t3);
              }
            });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e3.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e3.length) throw new Error("Senders' length doesn't match mids' length.");
            t2.map(async (e4) => {
              if (lw() && e4.track) e4.track.enabled = true;
              else {
                const t3 = e4.getParameters();
                t3.encodings.forEach((e5) => e5.active = true), await e4.setParameters(t3);
              }
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        restartICE(e3) {
          var t2 = this;
          return sb(function* () {
            const i2 = yield ab(t2.mutex.lock("From P2PConnection.restartICE"));
            try {
              if (!t2.remoteSDP) throw new Error("Cannot restartICE before remoteSDP created.");
              const i3 = RD().supportPCSetConfiguration;
              if (e3 === cx.RELAY && !i3) return;
              if (i3) {
                const i4 = t2.peerConnection.getConfiguration(), n3 = e3 === cx.RELAY ? "relay" : "all";
                i4.iceTransportPolicy !== n3 && (lD.debug("[".concat(t2.store.clientId, "] restartICE change iceTransportPolicy from [").concat(i4.iceTransportPolicy, "] to [").concat(n3, "]")), i4.iceTransportPolicy = n3, t2.peerConnection.setConfiguration(i4));
              }
              e3 !== cx.RELAY && t2.remoteSDP.updateCandidates(e3);
              const n2 = yield ab(t2.peerConnection.createOffer({ iceRestart: true }));
              if (!n2.sdp) throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const r2 = hV(n2.sdp), { remoteIceParameters: o2 } = yield r2.iceParameters;
              t2.remoteSDP.restartICE(o2);
              const s2 = t2.remoteSDP.toString();
              yield ab(t2.peerConnection.setLocalDescription(n2)), yield ab(t2.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 }));
            } catch (e4) {
              lD.warning("[".concat(t2.store.clientId, "] restart ICE failed, abort operation"), e4);
            } finally {
              i2();
            }
          })();
        }
        close() {
          var e3;
          this.peerConnection.close(), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const e4 = await this.peerConnection.createOffer(), i2 = this.mungSendOfferSDP(e4.sdp, [t2]);
            this.remoteSDP.updateRecvMedia(t2._mediaStreamTrack.kind, t2);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: i2 }), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getSenders().filter((t3) => {
            var i3;
            return (null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) === e3;
          });
          1 === i2.length && await this.applySendEncodings(i2, [t2]);
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getSenders().find((e4) => {
            var i3;
            return (null === (i3 = e4.track) || void 0 === i3 ? void 0 : i3.id) === t2;
          });
          i2 && await i2.replaceTrack(e3._mediaStreamTrack);
        }
        createDataChannels(e3, t2) {
          throw new xw(Uw.NOT_SUPPORTED, "Planb mode does not support createDataChannels.");
        }
        stopDataChannels(e3) {
          throw new xw(Uw.NOT_SUPPORTED, "Planb mode does not support stopDataChannels.");
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onICEConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e3) => {
            e3.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, lD.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, MN("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2) {
          const i2 = { iceServers: [], sdpSemantics: "plan-b" };
          return t2.iceServers ? i2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (sO(t2.turnServer.servers) ? i2.iceServers = t2.turnServer.servers : (i2.iceServers && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers)), MN("USE_TURN_SERVER_OF_GATEWAY") && i2.iceServers && t2.turnServer.serversFromGateway && i2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway)), t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (i2.iceTransportPolicy = "relay");
          }))), i2;
        }
        static turnServerConfigToIceServers(e3) {
          const t2 = [];
          return e3.forEach((e4) => {
            e4.security ? e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turns:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }) : (e4.udpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.udpport, "?transport=udp") }), e4.tcpport && t2.push({ username: e4.username, credential: e4.password, credentialType: "password", urls: "turn:".concat(e4.turnServerURL, ":").concat(e4.tcpport, "?transport=tcp") }));
          }), t2;
        }
        async updateRtpSenderEncodings(e3, t2) {
          var i2;
          if (!t2) {
            t2 = this.peerConnection.getSenders().find((t3) => {
              var i3;
              return (null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) === e3._mediaStreamTrack.id;
            });
          }
          if (!t2) return lD.warn("[".concat(e3.getTrackId(), "] no rtpSender found}"));
          if (!RD().supportSetRtpSenderParameters) return lD.warn("Browser not support set rtp-sender parameters");
          const n2 = {}, r2 = {};
          if (e3 instanceof Dk) switch (e3._optimizationMode) {
            case "motion":
              n2.degradationPreference = "maintain-framerate";
              break;
            case "detail":
              n2.degradationPreference = "maintain-resolution";
              break;
            default:
              n2.degradationPreference = "balanced";
          }
          if (MN("DSCP_TYPE") && Nw()) {
            var o2;
            const e4 = MN("DSCP_TYPE");
            kn(o2 = ["very-low", "low", "medium", "high"]).call(o2, e4) && (r2.networkPriority = e4);
          }
          const s2 = t2.getParameters(), a2 = null === (i2 = s2.encodings) || void 0 === i2 ? void 0 : i2[0];
          a2 && Object.assign(a2, r2), Object.assign(s2, n2), lD.debug("[".concat(e3.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(s2.encodings))), await t2.setParameters(s2);
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!RD().supportSetRtpSenderParameters) return;
            if (e3.length !== t2.length) return;
            for (let i2 = 0; i2 < e3.length; i2++) {
              const n2 = e3[i2], r2 = t2[i2];
              n2 && r2 && await this.updateRtpSenderEncodings(r2, n2);
            }
          } catch (e4) {
            lD.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e3, t2) {
          const i2 = WN(e3);
          return t2.forEach((e4, t3) => {
            const n2 = e4._mediaStreamTrack, r2 = i2.mediaDescriptions.find((e5) => e5.attributes.mid === n2.kind);
            r2 && fV(r2, e4);
          }), HN(i2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0;
        }
        async batchReceive(e3) {
          try {
            if (!this.remoteSDP) throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const t2 = this.remoteSDP.batchSend(e3).map((t3, i3) => {
              let { id: n3, mslabel: r2 } = t3;
              const { kind: o2 } = e3[i3];
              return new np((e4, t4) => {
                const i4 = setTimeout(() => {
                  t4(new Error("Cannot receive track, id: ".concat(n3)));
                }, 1e4), s2 = (t5) => {
                  const a2 = rw();
                  if ("Safari" === a2.name && 11 === Number(a2.version) && t5.track.id !== n3 && t5.streams[0].id === r2) {
                    var c2;
                    const r3 = t5.streams[0].getTracks()[0];
                    return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(o2, n3, t5.track.id), this.peerConnection.removeEventListener("track", s2), clearTimeout(i4), void e4({ track: r3, id: n3 });
                  }
                  if (t5.track.id === n3) return this.peerConnection.removeEventListener("track", s2), clearTimeout(i4), void e4({ track: t5.track, id: n3 });
                };
                this.peerConnection.addEventListener("track", s2);
              });
            }), i2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: i2 });
            const n2 = await this.peerConnection.createAnswer();
            return await this.peerConnection.setLocalDescription(n2), await np.all(t2);
          } catch (e4) {
            throw new xw(Uw.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async getRemoteSSRC(e3) {
          if (!this.remoteSDP) return;
          const t2 = this.remoteSDP.getSSRC(e3);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
        setConfiguration(t2) {
          if (RD().supportPCSetConfiguration) {
            const i2 = e2.resolvePCConfiguration(t2);
            this.peerConnection.setConfiguration(i2);
          }
        }
      }, RU(pz.prototype, "connect", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "connect"), pz.prototype), RU(pz.prototype, "stopSending", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "stopSending"), pz.prototype), RU(pz.prototype, "receive", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "receive"), pz.prototype), RU(pz.prototype, "stopReceiving", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "stopReceiving"), pz.prototype), RU(pz.prototype, "muteRemote", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "muteRemote"), pz.prototype), RU(pz.prototype, "unmuteRemote", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "unmuteRemote"), pz.prototype), RU(pz.prototype, "muteLocal", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "muteLocal"), pz.prototype), RU(pz.prototype, "unmuteLocal", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "unmuteLocal"), pz.prototype), RU(pz.prototype, "close", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "close"), pz.prototype), RU(pz.prototype, "updateEncoderConfig", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "updateEncoderConfig"), pz.prototype), RU(pz.prototype, "updateSendParameters", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "updateSendParameters"), pz.prototype), RU(pz.prototype, "replaceTrack", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "replaceTrack"), pz.prototype), RU(pz.prototype, "getRemoteSSRC", [fz], Object.getOwnPropertyDescriptor(pz.prototype, "getRemoteSSRC"), pz.prototype), pz);
      function fz(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2) throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("Locking from P2PConnection.".concat(t2));
          try {
            for (var r2 = arguments.length, o2 = new Array(r2), s2 = 0; s2 < r2; s2++) o2[s2] = arguments[s2];
            return await n2.apply(this, o2);
          } finally {
            i3();
          }
        }, i2;
      }
      const Tz = { name: "PlanBConnection", create: function(e2) {
        let { store: t2, spec: i2 } = e2;
        return new mz(i2, t2);
      } };
      IN(), kN("PROCESS_ID", "process-".concat(LO(8, ""), "-").concat(LO(4, ""), "-").concat(LO(4, ""), "-").concat(LO(4, ""), "-").concat(LO(12, ""))), function() {
        let e2;
        try {
          e2 = window.localStorage.getItem("websdk_ng_global_parameter");
        } catch (e3) {
          return void lD.error("Error loading sdk config", e3.message);
        }
        if (e2) try {
          const t2 = JSON.parse(window.atob(e2)), i2 = Date.now();
          lD.debug("Loading global parameters from cache", t2), Object.keys(t2).forEach((e3) => {
            if (Object.prototype.hasOwnProperty.call(LN, e3)) {
              const { value: n2, expires: r2 } = t2[e3];
              if (r2 && r2 <= i2) return;
              xN[e3] = n2, LN[e3] = n2;
            }
          });
        } catch (t2) {
          lD.error("Error loading mutableParamsCache: ".concat(e2), t2.message);
        }
      }(), Array.isArray(xN.AREAS) && xN.AREAS.length > 0 && iF(xN.AREAS, true);
      const Sz = (e2, t2, i2) => {
        lD.debug("setParameter key:".concat(e2, ", value:").concat(JSON.stringify(t2))), kN(e2, t2, i2);
      };
      FV(FY, false), FV(YY, false), FV(rG, false), FV(Cq, false), FV(UY, false), FV(dz, false), FV(Tz, false);
      const gz = function(e2) {
        const t2 = new Zw(), i2 = e2, n2 = { getListeners: t2.getListeners.bind(t2), on: (e3, i3) => (function(e4, t3) {
          e4 === Tx.SECURITY_POLICY_VIOLATION && rW(t3, true);
        }(e3, i3), t2.on.bind(t2)(e3, i3)), addListener: t2.addListener.bind(t2), once: t2.once.bind(t2), off: t2.off.bind(t2), removeAllListeners: t2.removeAllListeners.bind(t2), emit: t2.emit.bind(t2), safeEmit: t2.safeEmit.bind(t2) };
        return iW(iW({}, i2), n2);
      }({ __TRACK_LIST__: xD, VERSION: yN, BUILD: DN, ESM_BUNDLER: false, ESM: false, UMD: true, DEV: false, setParameter: Sz, getParameter: MN, getSupportedCodec: async function() {
        let e2 = { audio: [], video: [] };
        try {
          let t2 = new RTCPeerConnection();
          const i2 = await async function(e3) {
            let t3;
            return RD().supportUnifiedPlan ? (e3.addTransceiver("video", { direction: "recvonly" }), e3.addTransceiver("audio", { direction: "recvonly" }), t3 = (await e3.createOffer()).sdp) : t3 = (await e3.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true })).sdp, t3;
          }(t2);
          if (!i2) return e2;
          t2.close(), t2 = null, e2 = function(e3) {
            const t3 = { video: [], audio: [] };
            return e3.match(/ VP8/i) && t3.video.push("VP8"), e3.match(/ VP9/i) && t3.video.push("VP9"), e3.match(/ AV1/i) && t3.video.push("AV1"), e3.match(/ H264/i) && t3.video.push("H264"), e3.match(/ H265/i) && t3.video.push("H265"), e3.match(/ opus/i) && t3.audio.push("OPUS"), e3.match(/ PCMU/i) && t3.audio.push("PCMU"), e3.match(/ PCMA/i) && t3.audio.push("PCMA"), e3.match(/ G722/i) && t3.audio.push("G722"), t3;
          }(i2);
        } catch (e3) {
          throw new SD(Uw.CREATE_OFFER_FAILED, e3.toString && e3.toString()).print();
        }
        return e2;
      }, checkSystemRequirements: function() {
        const e2 = TD.reportApiInvoke(null, { name: tO.CHECK_SYSTEM_REQUIREMENTS, options: [], tag: iO.TRACER });
        let t2 = false;
        try {
          const e3 = window.RTCPeerConnection, i3 = navigator.mediaDevices && navigator.mediaDevices.getUserMedia, n3 = window.WebSocket;
          t2 = !!(e3 && i3 && n3), t2 && Ow() && Ew(75) && new e3().close();
        } catch (e3) {
          return lD.error("check system requirement failed: ", e3), false;
        }
        let i2 = false;
        const n2 = rw();
        n2.name === ew.CHROME && Number(n2.version) >= 58 && ("WebKit" !== iw.engine.name || function() {
          const e3 = rw();
          if (cw()) {
            if (e3.os === $b.MAC_OS) return true;
            if (e3.os === $b.IOS) {
              const e4 = iw.os.version && iw.os.version.split(".");
              if (e4 && 14 === Number(e4[0]) && e4[1] && Number(e4[1]) >= 3) return true;
              if (e4 && Number(e4[0]) > 14) return true;
            }
          }
          return false;
        }()) && (i2 = true), (n2.name === ew.FIREFOX && Number(n2.version) >= 56 || n2.name === ew.OPERA && Number(n2.version) >= 45 || n2.name === ew.SAFARI && Number(n2.version) >= 11 || "WebKit" === n2.name && (pw() || Aw()) && n2.osVersion && Number(n2.osVersion.split(".")[0]) >= 11 || bw() || rw().name === ew.QQ) && (i2 = true), lD.debug("checkSystemRequirements, api:", t2, "browser", i2);
        const r2 = t2 && i2;
        return e2.onSuccess(r2), r2;
      }, getDevices: function(e2) {
        return kP.enumerateDevices(true, true, e2);
      }, getMicrophones: function(e2) {
        return kP.getRecordingDevices(e2);
      }, getCameras: function(e2) {
        return kP.getCamerasDevices(e2);
      }, getElectronScreenSources: AP, getPlaybackDevices: function(e2) {
        return kP.getSpeakers(e2);
      }, createClient: function() {
        var e2;
        let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { codec: "vp8", audioCodec: "opus", mode: "rtc" };
        const i2 = LO(5, "client-"), n2 = TD.reportApiInvoke(null, { id: i2, name: tO.CREATE_CLIENT, options: [t2], tag: iO.TRACER });
        try {
          !function(e3) {
            Fw(e3.codec, "config.codec", ["vp8", "vp9", "av1", "h264", "h265"]), Fw(e3.mode, "config.mode", ["rtc", "live", "p2p"]), void 0 !== e3.audioCodec && Fw(e3.audioCodec, "config.audioCodec", ["opus", "pcmu", "pcma", "g722"]), void 0 !== e3.proxyServer && Gw(e3.proxyServer, "config.proxyServer", 1, 1e4), void 0 !== e3.turnServer && aO(e3.turnServer), void 0 !== e3.httpRetryConfig && nO(e3.httpRetryConfig), void 0 !== e3.websocketRetryConfig && nO(e3.websocketRetryConfig);
          }(t2);
        } catch (e3) {
          throw n2.onError(e3), e3;
        }
        return (Sw(16, 0, true) || gw(16, 0, true)) && ("vp9" === t2.codec && (t2.codec = "vp8", lD.debug("browser not support vp9, force use vp8")), kN("UNSUPPORTED_VIDEO_CODEC", ["vp9"])), void 0 === t2.audioCodec && (t2.audioCodec = "opus"), n2.onSuccess(), new JG(zG(zG({ forceWaitGatewayResponse: true }, t2), {}, { role: kn(e2 = ["rtc", "p2p"]).call(e2, t2.mode) ? "host" : t2.role || "audience" }), i2);
      }, createCameraVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const t2 = MN("CAMERA_CAPTURE_CONFIG"), i2 = LO(8, "track-cam-"), n2 = TD.reportApiInvoke(null, { id: i2, tag: iO.TRACER, name: tO.CREATE_CAM_VIDEO_TRACK, options: [uP({}, e2), t2] });
        t2 && (e2.encoderConfig = t2);
        const r2 = JP(e2);
        let o2 = null;
        lD.info("start create camera video track with config", JSON.stringify(e2), "trackId", i2);
        try {
          o2 = (await NP({ video: r2 }, i2)).getVideoTracks()[0] || null;
        } catch (e3) {
          throw n2.onError(e3), e3;
        }
        if (!o2) {
          const e3 = new xw(Uw.UNEXPECTED_ERROR, "can not find track in media stream");
          return n2.onError(e3), e3.throw(lD);
        }
        e2.optimizationMode && Lk(i2, o2, e2, PD(e2.encoderConfig));
        const s2 = new Pk(o2, e2, r2, e2.scalabiltyMode ? kD(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, i2);
        return n2.onSuccess(s2.getTrackId()), lD.info("create camera video success, trackId:", i2), s2;
      }, createCustomVideoTrack: function(e2) {
        const t2 = LO(8, "track-cus-"), i2 = TD.reportApiInvoke(null, { id: t2, tag: iO.TRACER, name: tO.CREATE_CUSTOM_VIDEO_TRACK, options: [e2] }), n2 = new Dk(e2.mediaStreamTrack, { width: e2.width, height: e2.height, frameRate: e2.frameRate, bitrateMax: e2.bitrateMax, bitrateMin: e2.bitrateMin }, e2.scalabiltyMode ? kD(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, t2, [BD.CUSTOM_TRACK]);
        return i2.onSuccess(n2.getTrackId()), lD.info("create custom video track success with config", e2, "trackId", n2.getTrackId()), n2;
      }, createScreenVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "disable";
        const i2 = "object" == typeof t2 ? function(e3) {
          return XP(e3);
        }(t2) : void 0;
        i2 && (t2 = "auto");
        const n2 = LO(8, "track-scr-v-"), r2 = TD.reportApiInvoke(null, { id: n2, tag: iO.TRACER, name: tO.CREATE_SCREEN_VIDEO_TRACK, options: [uP({}, e2), t2] });
        e2.encoderConfig ? "string" == typeof e2.encoderConfig || e2.encoderConfig.width && e2.encoderConfig.height || (e2.encoderConfig.width = { max: 1920 }, e2.encoderConfig.height = { max: 1080 }) : e2.encoderConfig = "1080p_2";
        const o2 = function(e3) {
          const t3 = {};
          e3.screenSourceType && (t3.mediaSource = e3.screenSourceType), e3.extensionId && dw() && (t3.extensionId = e3.extensionId);
          const { displaySurface: i3, selfBrowserSurface: n3, surfaceSwitching: r3, systemAudio: o3, preferCurrentTab: s3 } = e3;
          (_w(107) || fw(107) || Rw(93)) && (i3 && (Fw(i3, "displaySurface", ["browser", "window", "monitor"]), t3.displaySurface = i3), n3 ? (Fw(n3, "selfBrowserSurface", ["exclude", "include"]), t3.selfBrowserSurface = n3) : t3.selfBrowserSurface = "include", r3 && (Fw(r3, "surfaceSwitching", ["exclude", "include"]), t3.surfaceSwitching = r3)), (_w(105) || fw(105) || Rw(91)) && o3 && (Fw(o3, "systemAudio", ["exclude", "include"]), t3.systemAudio = o3), (_w(94) || fw(94) || Rw(80)) && s3 && (t3.preferCurrentTab = true), e3.electronScreenSourceId && (t3.sourceId = e3.electronScreenSourceId);
          const a3 = e3.encoderConfig ? LD(e3.encoderConfig) : null;
          return t3.mandatory = { chromeMediaSource: "desktop", maxWidth: a3 ? a3.width : void 0, maxHeight: a3 ? a3.height : void 0 }, a3 && (a3.frameRate && ("number" == typeof a3.frameRate ? (t3.mandatory.maxFrameRate = a3.frameRate, t3.mandatory.minFrameRate = a3.frameRate) : (t3.mandatory.maxFrameRate = a3.frameRate.max || a3.frameRate.ideal || a3.frameRate.exact || void 0, t3.mandatory.minFrameRate = a3.frameRate.min || a3.frameRate.ideal || a3.frameRate.exact || void 0), t3.frameRate = a3.frameRate), a3.width && (t3.width = a3.width), a3.height && (t3.height = a3.height)), t3;
        }(e2);
        let s2 = null, a2 = null;
        const c2 = RD();
        if (!c2.supportShareAudio && "enable" === t2) {
          const e3 = new xw(Uw.NOT_SUPPORTED, "your browser or platform is not support share-screen with audio");
          return r2.onError(e3), e3.throw(lD);
        }
        lD.info("start create screen video track with config", e2, "withAudio", t2, "trackId", n2);
        const d2 = c2.supportShareAudio && "disable" !== t2;
        try {
          const e3 = await NP({ screen: o2, screenAudio: d2 ? i2 || true : void 0 }, n2);
          s2 = e3.getVideoTracks()[0] || null, a2 = e3.getAudioTracks()[0] || null;
        } catch (e3) {
          throw r2.onError(e3), e3;
        }
        if (!s2) {
          const e3 = new xw(Uw.UNEXPECTED_ERROR, "can not find track in media stream");
          return r2.onError(e3), e3.throw(lD);
        }
        if (!a2 && "enable" === t2) {
          s2 && s2.stop();
          const e3 = new xw(Uw.SHARE_AUDIO_NOT_ALLOWED);
          return r2.onError(e3), e3.throw(lD);
        }
        e2.optimizationMode || (e2.optimizationMode = "detail"), e2.optimizationMode && (Lk(n2, s2, e2, e2.encoderConfig && LD(e2.encoderConfig) || void 0), e2.encoderConfig && "string" != typeof e2.encoderConfig && (e2.encoderConfig.bitrateMin = e2.encoderConfig.bitrateMax));
        const l2 = new Dk(s2, e2.encoderConfig ? LD(e2.encoderConfig) : {}, e2.scalabiltyMode ? kD(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, n2, [BD.SCREEN_TRACK]);
        if (!a2) return r2.onSuccess(l2.getTrackId()), lD.info("create screen video track success", "video:", l2.getTrackId()), l2;
        const u2 = new GL(a2, void 0, LO(8, "track-scr-a-"), false);
        return r2.onSuccess([l2.getTrackId(), u2.getTrackId()]), lD.info("create screen video track success", "video:", l2.getTrackId(), "audio:", u2.getTrackId()), [l2, u2];
      }, createMicrophoneAndCameraTracks: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const i2 = MN("CAMERA_CAPTURE_CONFIG"), n2 = LO(8, "track-mic-"), r2 = LO(8, "track-cam-"), o2 = TD.reportApiInvoke(null, { id: "".concat(n2, "-").concat(r2), tag: iO.TRACER, name: tO.CREATE_MIC_AND_CAM_TRACKS, options: [e2, t2, i2] });
        i2 && (t2.encoderConfig = i2);
        const s2 = JP(t2), a2 = QP(e2);
        let c2 = null, d2 = null;
        lD.info("start create camera video track(".concat(r2, ") and microphone audio track(").concat(n2, ") with config, audio: ").concat(JSON.stringify(e2), ", video: ").concat(JSON.stringify(t2)));
        try {
          const e3 = await NP({ audio: a2, video: s2 }, "".concat(n2, "-").concat(r2));
          c2 = e3.getAudioTracks()[0], d2 = e3.getVideoTracks()[0];
        } catch (e3) {
          throw o2.onError(e3), e3;
        }
        if (!c2 || !d2) {
          const e3 = new xw(Uw.UNEXPECTED_ERROR, "can not find tracks in media stream");
          return o2.onError(e3), e3.throw(lD);
        }
        t2.optimizationMode && Lk(r2, d2, t2, PD(t2.encoderConfig));
        const l2 = new WL(c2, e2, a2, n2), u2 = new Pk(d2, t2, s2, t2.scalabiltyMode ? kD(t2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, t2.optimizationMode, r2);
        return o2.onSuccess([l2.getTrackId(), u2.getTrackId()]), lD.info("create camera video track(".concat(r2, ") and microphone audio track(").concat(n2, ") success")), [l2, u2];
      }, createMicrophoneAudioTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const t2 = LO(8, "track-mic-"), i2 = TD.reportApiInvoke(null, { id: t2, tag: iO.TRACER, name: tO.CREATE_MIC_AUDIO_TRACK, options: [e2] }), n2 = QP(e2);
        let r2 = null;
        lD.info("start create microphone audio track with config", JSON.stringify(e2), "trackId", t2);
        try {
          r2 = (await NP({ audio: n2 }, t2)).getAudioTracks()[0] || null;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        if (!r2) {
          const e3 = new xw(Uw.UNEXPECTED_ERROR, "can not find track in media stream");
          return i2.onError(e3), e3.throw(lD);
        }
        const o2 = new WL(r2, e2, n2, t2);
        return i2.onSuccess(o2.getTrackId()), lD.info("create microphone audio track success, trackId:", t2), o2;
      }, createCustomAudioTrack: function(e2) {
        const t2 = LO(8, "track-cus-"), i2 = TD.reportApiInvoke(null, { id: t2, tag: iO.TRACER, name: tO.CREATE_CUSTOM_AUDIO_TRACK, options: [e2] }), n2 = new GL(e2.mediaStreamTrack, e2.encoderConfig ? UD(e2.encoderConfig) : {}, t2, false);
        return lD.info("create custom audio track success with config", e2, "trackId", n2.getTrackId()), i2.onSuccess(n2.getTrackId()), n2;
      }, createBufferSourceAudioTrack: async function(e2) {
        var t2;
        const { cacheOnlineFile: i2, encoderConfig: n2 } = e2;
        let { source: r2 } = e2;
        const o2 = { source: r2 instanceof AudioBuffer ? "AudioBuffer" : r2 instanceof File ? null !== (t2 = File.name) && void 0 !== t2 ? t2 : "File" : r2, cacheOnlineFile: i2, encoderConfig: n2 }, s2 = LO(8, "track-buf-"), a2 = TD.reportApiInvoke(null, { id: s2, tag: iO.TRACER, name: tO.CREATE_BUFFER_AUDIO_TRACK, options: [o2] });
        if (MN("DISABLE_WEBAUDIO")) throw new xw(Uw.NOT_SUPPORTED, "can not create BufferSourceAudioTrack when WebAudio disabled");
        lD.info("start create buffer source audio track with config", JSON.stringify(o2), "trackId", s2);
        const c2 = r2;
        if (!(r2 instanceof AudioBuffer)) try {
          r2 = await async function(e3, t3) {
            let i3 = null;
            if ("string" == typeof e3) {
              const t4 = qL.get(e3);
              if (t4) return lD.debug("use cached audio resource: ", e3), t4;
              try {
                i3 = (await JO(() => qb.get(e3, { responseType: "arraybuffer" }), void 0, void 0, { maxRetryCount: 3 })).data;
              } catch (e4) {
                throw new xw(Uw.FETCH_AUDIO_FILE_FAILED, e4.toString());
              }
            } else {
              const t4 = new np((t5, i4) => {
                const n4 = new FileReader();
                n4.onload = (e4) => {
                  e4.target ? t5(e4.target.result) : i4(new xw(Uw.READ_LOCAL_AUDIO_FILE_ERROR));
                }, n4.onerror = () => {
                  i4(new xw(Uw.READ_LOCAL_AUDIO_FILE_ERROR));
                }, n4.readAsArrayBuffer(e3);
              });
              i3 = await t4;
            }
            const n3 = await function(e4) {
              const t4 = fP();
              return new np((i4, n4) => {
                t4.decodeAudioData(e4, (e5) => {
                  i4(e5);
                }, (e5) => {
                  n4(new xw(Uw.DECODE_AUDIO_FILE_FAILED, e5.toString()));
                });
              });
            }(i3);
            return "string" == typeof e3 && t3 && qL.set(e3, n3), n3;
          }(r2, i2);
        } catch (e3) {
          return a2.onError(e3), e3.throw(lD);
        }
        const d2 = new YL(r2), l2 = new HL(c2, d2, n2 ? UD(n2) : {}, s2);
        return lD.info("create buffer source audio track success, trackId:", s2), a2.onSuccess(l2.getTrackId()), l2;
      }, setAppType: function(e2) {
        if (lD.debug("setAppType: ".concat(e2)), !(Number.isInteger(e2) && e2 >= 0)) throw lD.debug("Invalid appType"), new SD(Uw.INVALID_PARAMS, "invalid app type", e2);
        kN("APP_TYPE", Math.floor(e2));
      }, setLogLevel: function(e2) {
        lD.setLogLevel(e2);
      }, enableLogUpload: function() {
        MN("USE_NEW_LOG") ? kN("UPLOAD_LOG", true) : lD.enableLogUpload();
      }, disableLogUpload: function() {
        MN("USE_NEW_LOG") ? kN("UPLOAD_LOG", false) : lD.disableLogUpload();
      }, createChannelMediaRelayConfiguration: function() {
        return new xF();
      }, checkAudioTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = TD.reportApiInvoke(null, { tag: iO.TRACER, name: tO.CHECK_AUDIO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof GL || e2 instanceof zk)) {
          const e3 = new SD(Uw.INVALID_TRACK, "the parameter is not a audio track");
          return i2.onError(e3), e3.throw();
        }
        t2 && t2 < 1e3 && (t2 = 1e3);
        const n2 = e2 instanceof GL ? e2.getTrackLabel() : "remote_track", r2 = e2.getVolumeLevel();
        let o2 = r2, s2 = r2;
        const a2 = Date.now();
        return new np((r3) => {
          const c2 = setInterval(() => {
            const d2 = e2.getVolumeLevel();
            o2 = d2 > o2 ? d2 : o2, s2 = d2 < s2 ? d2 : s2;
            const l2 = o2 - s2 > 1e-4, u2 = Date.now() - a2;
            if (l2 || u2 > t2) {
              clearInterval(c2);
              const t3 = l2, s3 = { duration: u2, deviceLabel: n2, maxVolumeLevel: o2, result: t3 };
              lD.info("[track-".concat(e2.getTrackId(), "] check audio track active completed. ").concat(JSON.stringify(s3))), i2.onSuccess(s3), r3(t3);
            }
          }, 200);
        });
      }, checkVideoTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = TD.reportApiInvoke(null, { tag: iO.TRACER, name: tO.CHECK_VIDEO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof Dk || e2 instanceof qk)) {
          const e3 = new SD(Uw.INVALID_TRACK, "the parameter is not a video track");
          return i2.onError(e3), e3.throw();
        }
        t2 && t2 < 1e3 && (t2 = 1e3);
        const n2 = e2 instanceof Dk ? e2.getTrackLabel() : "remote_track", r2 = e2.getMediaStreamTrack(true), o2 = document.createElement("video");
        o2.style.width = "1px", o2.style.height = "1px", o2.setAttribute("muted", ""), o2.muted = true, o2.setAttribute("playsinline", ""), o2.controls = false, (lw() || cw()) && (o2.style.opacity = "0.01", o2.style.position = "fixed", o2.style.left = "0", o2.style.top = "0", document.body.appendChild(o2)), o2.srcObject = new MediaStream([r2]), o2.play();
        const s2 = document.createElement("canvas");
        s2.width = 160, s2.height = 120;
        let a2 = 0, c2 = 0;
        try {
          const e3 = Date.now();
          a2 = await function(e4, t3, i3, n3) {
            let r3, o3 = 0, s3 = null;
            return new np((a3, c3) => {
              function d3() {
                o3 > n3 && r3 && (r3(), a3(o3));
                const t4 = i3.getContext("2d");
                if (!t4) {
                  const e5 = new SD(Uw.UNEXPECTED_ERROR, "can not get canvas 2d context.");
                  return lD.error(e5.toString()), void c3(e5);
                }
                t4.drawImage(e4, 0, 0, 160, 120);
                const d4 = t4.getImageData(0, 0, i3.width, i3.height), l3 = Math.floor(d4.data.length / 3);
                if (s3) {
                  for (let e5 = 0; e5 < l3; e5 += 3) if (d4.data[e5] !== s3[e5]) return o3 += 1, void (s3 = d4.data);
                  s3 = d4.data;
                } else s3 = d4.data;
              }
              setTimeout(() => {
                r3 && (r3(), a3(o3));
              }, t3), r3 = gP(() => {
                d3();
              }, 30);
            });
          }(o2, t2, s2, 4), c2 = Date.now() - e3;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        ij === ew.SAFARI && (o2.pause(), o2.remove()), o2.srcObject = null;
        const d2 = a2 > 4, l2 = { duration: c2, changedPicNum: a2, deviceLabel: n2, result: d2 };
        return lD.info("[track-".concat(e2.getTrackId(), "] check video track active completed. ").concat(JSON.stringify(l2))), i2.onSuccess(l2), d2;
      }, setArea: iF, audioElementPlayCenter: BP, resumeAudioContext: function() {
        BP.autoResumeAfterInterruption(true);
      }, processExternalMediaAEC: function(e2) {
        eW.processExternalMediaAEC(e2);
      }, registerExtensions: function(e2) {
        const t2 = MN("PLUGIN_INFO") || [];
        e2.forEach((e3) => {
          "name" in e3 && !kn(t2).call(t2, e3.name) && t2.push(e3.name);
          const i2 = e3;
          i2.__registered__ = true, i2.logger.hookLog = lD.extLog, i2.reporter.hookApiInvoke = TD.extApiInvoke, i2.parameters && Object.keys(i2.parameters).forEach((e4) => {
            i2.parameters[e4] = MN(e4);
          });
        }), Sz("PLUGIN_INFO", t2);
      }, ChannelMediaRelayError: zU, ChannelMediaRelayEvent: YU, ChannelMediaRelayState: qU, RemoteStreamFallbackType: WD, RemoteStreamType: GD, ConnectionDisconnectedReason: oO, AudienceLatencyLevelType: rO, AREAS: $U, preload: async function(e2, t2, i2, n2) {
        return Ej(e2, t2, i2, n2);
      } });
      return Object.defineProperties(gz, { onAudioAutoplayFailed: { get: () => UP.onAudioAutoplayFailed, set: (e2) => {
        UP.onAudioAutoplayFailed = e2;
      } }, onAutoplayFailed: { get: () => UP.onAutoplayFailed, set: (e2) => {
        UP.onAutoplayFailed = e2;
      } }, _onSecurityPolicyViolation: { value: void 0, writable: true }, _cspEventHandlerPointer: { value: void 0, writable: true }, onSecurityPolicyViolation: { get: () => gz._onSecurityPolicyViolation, set(e2) {
        gz._onSecurityPolicyViolation = e2, rW(e2);
      } }, __CLIENT_LIST__: { get: () => MN("SHOW_GLOBAL_CLIENT_LIST") ? MM : [] } }), kP.on(nP.CAMERA_DEVICE_CHANGED, (e2) => {
        lD.info("camera device changed", JSON.stringify(e2)), gz.onCameraChanged && gz.onCameraChanged(e2), gz.safeEmit(Tx.CAMERA_CHANGED, e2);
      }), kP.on(nP.RECORDING_DEVICE_CHANGED, (e2) => {
        lD.info("microphone device changed", JSON.stringify(e2)), gz.onMicrophoneChanged && gz.onMicrophoneChanged(e2), gz.safeEmit(Tx.MICROPHONE_CHANGED, e2);
      }), kP.on(nP.PLAYOUT_DEVICE_CHANGED, (e2) => {
        lD.debug("playout device changed", JSON.stringify(e2)), gz.onPlaybackDeviceChanged && gz.onPlaybackDeviceChanged(e2), gz.safeEmit(Tx.PLAYBACK_DEVICE_CHANGED, e2);
      }), BP.onAutoplayFailed = () => {
        lD.info("detect audio element autoplay failed"), UP.onAudioAutoplayFailed && UP.onAudioAutoplayFailed();
      }, mP.on("autoplay-failed", () => {
        lD.info("detect webaudio autoplay failed"), UP.onAudioAutoplayFailed && UP.onAudioAutoplayFailed(), gz.safeEmit(Tx.AUTOPLAY_FAILED);
      }), mP.on(ID.STATE_CHANGE, (e2, t2) => {
        lD.info("audio context state changed: ".concat(t2, " => ").concat(e2)), gz.onAudioContextStateChanged && gz.onAudioContextStateChanged(e2, t2), gz.safeEmit(Tx.AUDIO_CONTEXT_STATE_CHANGED, e2, t2);
      }), fO.on(hO.NETWORK_STATE_CHANGE, (e2, t2) => {
        lD.info("[network-indicator] network state changed, ".concat(t2, " => ").concat(e2));
      }), window && (window.__ARTC__ = gz), gz;
    });
  }
});
export default require_AgoraRTC_N_production();
/*! Bundled license information:

agora-rtc-sdk-ng/AgoraRTC_N-production.js:
  (*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> *)
*/
//# sourceMappingURL=agora-rtc-sdk-ng.js.map
